
Seguidor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f94  08007f94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f9c  08007f9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b6c  20000074  08008018  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001be0  08008018  00021be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb2e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db6  00000000  00000000  0003fbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00043988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001740  00000000  00000000  00045240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002931f  00000000  00000000  00046980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9a3  00000000  00000000  0006fc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001069a0  00000000  00000000  0008c642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00192fe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b24  00000000  00000000  00193034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007e38 	.word	0x08007e38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007e38 	.word	0x08007e38

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of movimenta */
  movimentaHandle = osThreadNew(StartMovimenta, NULL, &movimenta_attributes);
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <MX_FREERTOS_Init+0x38>)
 800052a:	2100      	movs	r1, #0
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <MX_FREERTOS_Init+0x3c>)
 800052e:	f004 fe53 	bl	80051d8 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <MX_FREERTOS_Init+0x40>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of readUart */
  readUartHandle = osThreadNew(StartReadUart, NULL, &readUart_attributes);
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <MX_FREERTOS_Init+0x44>)
 800053a:	2100      	movs	r1, #0
 800053c:	480b      	ldr	r0, [pc, #44]	; (800056c <MX_FREERTOS_Init+0x48>)
 800053e:	f004 fe4b 	bl	80051d8 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <MX_FREERTOS_Init+0x4c>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of Triger */
  TrigerHandle = osThreadNew(StartTriger, NULL, &Triger_attributes);
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <MX_FREERTOS_Init+0x50>)
 800054a:	2100      	movs	r1, #0
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <MX_FREERTOS_Init+0x54>)
 800054e:	f004 fe43 	bl	80051d8 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a09      	ldr	r2, [pc, #36]	; (800057c <MX_FREERTOS_Init+0x58>)
 8000556:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	08007e88 	.word	0x08007e88
 8000560:	08000581 	.word	0x08000581
 8000564:	20000090 	.word	0x20000090
 8000568:	08007eac 	.word	0x08007eac
 800056c:	08000595 	.word	0x08000595
 8000570:	20000094 	.word	0x20000094
 8000574:	08007ed0 	.word	0x08007ed0
 8000578:	0800059f 	.word	0x0800059f
 800057c:	20000098 	.word	0x20000098

08000580 <StartMovimenta>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMovimenta */
void StartMovimenta(void *argument)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
		 HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, IN4);

		 osDelay(200);
	 }*/
  /* USER CODE END StartMovimenta */
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <StartReadUart>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadUart */
void StartReadUart(void *argument)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadUart */
	/* Infinite loop */
	for (;;) {
 800059c:	e7fe      	b.n	800059c <StartReadUart+0x8>

0800059e <StartTriger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTriger */
void StartTriger(void *argument)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
		//HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
		//__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);

		//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
		//htim2.Instance->CCR1 = 10;
		osDelay(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f004 fea7 	bl	80052fc <osDelay>
 80005ae:	e7fa      	b.n	80005a6 <StartTriger+0x8>

080005b0 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
			Is_First = 1;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
		}
	}*/
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <MX_GPIO_Init+0xc4>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <MX_GPIO_Init+0xc4>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <MX_GPIO_Init+0xc4>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a24      	ldr	r2, [pc, #144]	; (8000688 <MX_GPIO_Init+0xc4>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <MX_GPIO_Init+0xc4>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	4819      	ldr	r0, [pc, #100]	; (800068c <MX_GPIO_Init+0xc8>)
 8000628:	f000 ff28 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BTN_Pin|S3_Pin|S4_Pin|CLP_Pin
 800062c:	f242 3360 	movw	r3, #9056	; 0x2360
 8000630:	60fb      	str	r3, [r7, #12]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	4619      	mov	r1, r3
 8000640:	4813      	ldr	r0, [pc, #76]	; (8000690 <MX_GPIO_Init+0xcc>)
 8000642:	f000 fd99 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f000 fd8b 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000662:	2304      	movs	r3, #4
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_GPIO_Init+0xc8>)
 800067a:	f000 fd7d 	bl	8001178 <HAL_GPIO_Init>

}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	48000c00 	.word	0x48000c00
 8000690:	48000800 	.word	0x48000800

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
int main(void)
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fb29 	bl	8000cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f80f 	bl	80006c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f7ff ff8c 	bl	80005c4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006ac:	f000 fa50 	bl	8000b50 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80006b0:	f000 f932 	bl	8000918 <MX_TIM2_Init>
  MX_TIM1_Init();
 80006b4:	f000 f8d6 	bl	8000864 <MX_TIM1_Init>
}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006b8:	f004 fd44 	bl	8005144 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006bc:	f7ff ff32 	bl	8000524 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006c0:	f004 fd64 	bl	800518c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x30>

080006c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b094      	sub	sp, #80	; 0x50
 80006ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	2238      	movs	r2, #56	; 0x38
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f007 fae5 	bl	8007ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ec:	f000 fede 	bl	80014ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 800070a:	2319      	movs	r3, #25
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4618      	mov	r0, r3
 8000720:	f000 ff68 	bl	80015f4 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x68>
  {
    Error_Handler();
 800072a:	f000 f819 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2103      	movs	r1, #3
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fa6b 	bl	8001c24 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000754:	f000 f804 	bl	8000760 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_MspInit+0x4c>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6613      	str	r3, [r2, #96]	; 0x60
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_MspInit+0x4c>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_MspInit+0x4c>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_MspInit+0x4c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6593      	str	r3, [r2, #88]	; 0x58
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	210f      	movs	r1, #15
 80007a6:	f06f 0001 	mvn.w	r0, #1
 80007aa:	f000 fbf0 	bl	8000f8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 fad6 	bl	8000d9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007f0:	f006 f9bc 	bl	8006b6c <xTaskGetSchedulerState>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d001      	beq.n	80007fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007fa:	f006 ffa5 	bl	8007748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM1_CC_IRQHandler+0x10>)
 800080a:	f001 ff84 	bl	8002716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000009c 	.word	0x2000009c

08000818 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <TIM2_IRQHandler+0x10>)
 800081e:	f001 ff7a 	bl	8002716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000e8 	.word	0x200000e8

0800082c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <LPUART1_IRQHandler+0x10>)
 8000832:	f003 faa1 	bl	8003d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000134 	.word	0x20000134

08000840 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SystemInit+0x20>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <SystemInit+0x20>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_TIM1_Init+0xac>)
 8000884:	4a23      	ldr	r2, [pc, #140]	; (8000914 <MX_TIM1_Init+0xb0>)
 8000886:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_TIM1_Init+0xac>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_TIM1_Init+0xac>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_TIM1_Init+0xac>)
 8000896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800089a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_TIM1_Init+0xac>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_TIM1_Init+0xac>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_TIM1_Init+0xac>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80008ae:	4818      	ldr	r0, [pc, #96]	; (8000910 <MX_TIM1_Init+0xac>)
 80008b0:	f001 feda 	bl	8002668 <HAL_TIM_IC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008ba:	f7ff ff51 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480f      	ldr	r0, [pc, #60]	; (8000910 <MX_TIM1_Init+0xac>)
 80008d2:	f003 f925 	bl	8003b20 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f7ff ff40 	bl	8000760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008e4:	2301      	movs	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_TIM1_Init+0xac>)
 80008f8:	f002 f88c 	bl	8002a14 <HAL_TIM_IC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000902:	f7ff ff2d 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000009c 	.word	0x2000009c
 8000914:	40012c00 	.word	0x40012c00

08000918 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_TIM2_Init+0xe8>)
 800094c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125-1;
 8000952:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <MX_TIM2_Init+0xe8>)
 8000954:	227c      	movs	r2, #124	; 0x7c
 8000956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <MX_TIM2_Init+0xe8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <MX_TIM2_Init+0xe8>)
 8000960:	220a      	movs	r2, #10
 8000962:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <MX_TIM2_Init+0xe8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <MX_TIM2_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000970:	4823      	ldr	r0, [pc, #140]	; (8000a00 <MX_TIM2_Init+0xe8>)
 8000972:	f001 fdc1 	bl	80024f8 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800097c:	f7ff fef0 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098a:	4619      	mov	r1, r3
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <MX_TIM2_Init+0xe8>)
 800098e:	f002 f9f1 	bl	8002d74 <HAL_TIM_ConfigClockSource>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000998:	f7ff fee2 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800099c:	4818      	ldr	r0, [pc, #96]	; (8000a00 <MX_TIM2_Init+0xe8>)
 800099e:	f001 fe02 	bl	80025a6 <HAL_TIM_PWM_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009a8:	f7ff feda 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_TIM2_Init+0xe8>)
 80009bc:	f003 f8b0 	bl	8003b20 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009c6:	f7ff fecb 	bl	8000760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ca:	2360      	movs	r3, #96	; 0x60
 80009cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <MX_TIM2_Init+0xe8>)
 80009e2:	f002 f8b3 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009ec:	f7ff feb8 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <MX_TIM2_Init+0xe8>)
 80009f2:	f000 f877 	bl	8000ae4 <HAL_TIM_MspPostInit>

}
 80009f6:	bf00      	nop
 80009f8:	3738      	adds	r7, #56	; 0x38
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000e8 	.word	0x200000e8

08000a04 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <HAL_TIM_IC_MspInit+0x8c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12f      	bne.n	8000a86 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_TIM_IC_MspInit+0x90>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <HAL_TIM_IC_MspInit+0x90>)
 8000a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a30:	6613      	str	r3, [r2, #96]	; 0x60
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_TIM_IC_MspInit+0x90>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_TIM_IC_MspInit+0x90>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <HAL_TIM_IC_MspInit+0x90>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_TIM_IC_MspInit+0x90>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8000a56:	2301      	movs	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a66:	2302      	movs	r3, #2
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_TIM_IC_MspInit+0x94>)
 8000a72:	f000 fb81 	bl	8001178 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2105      	movs	r1, #5
 8000a7a:	201b      	movs	r0, #27
 8000a7c:	f000 fa87 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a80:	201b      	movs	r0, #27
 8000a82:	f000 fa9e 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40012c00 	.word	0x40012c00
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800

08000a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aac:	d113      	bne.n	8000ad6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_TIM_Base_MspInit+0x44>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <HAL_TIM_Base_MspInit+0x44>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_TIM_Base_MspInit+0x44>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	201c      	movs	r0, #28
 8000acc:	f000 fa5f 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ad0:	201c      	movs	r0, #28
 8000ad2:	f000 fa76 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b04:	d11d      	bne.n	8000b42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_TIM_MspPostInit+0x68>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_TIM_MspPostInit+0x68>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_TIM_MspPostInit+0x68>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 8000b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 fb1b 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <MX_LPUART1_UART_Init+0x90>)
 8000b58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b60:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000b94:	f003 f8a0 	bl	8003cd8 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b9e:	f7ff fddf 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000ba6:	f004 f9ce 	bl	8004f46 <HAL_UARTEx_SetTxFifoThreshold>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000bb0:	f7ff fdd6 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4809      	ldr	r0, [pc, #36]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000bb8:	f004 fa03 	bl	8004fc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000bc2:	f7ff fdcd 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_LPUART1_UART_Init+0x8c>)
 8000bc8:	f004 f984 	bl	8004ed4 <HAL_UARTEx_DisableFifoMode>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000bd2:	f7ff fdc5 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000134 	.word	0x20000134
 8000be0:	40008000 	.word	0x40008000

08000be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b09e      	sub	sp, #120	; 0x78
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2254      	movs	r2, #84	; 0x54
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f007 f84d 	bl	8007ca4 <memset>
  if(uartHandle->Instance==LPUART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <HAL_UART_MspInit+0xb8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d13e      	bne.n	8000c92 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c14:	2320      	movs	r3, #32
 8000c16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fa1b 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff fd98 	bl	8000760 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_UART_MspInit+0xbc>)
 8000c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <HAL_UART_MspInit+0xbc>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_UART_MspInit+0xbc>)
 8000c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_UART_MspInit+0xbc>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0xbc>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_UART_MspInit+0xbc>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c60:	230c      	movs	r3, #12
 8000c62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c70:	230c      	movs	r3, #12
 8000c72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f000 fa7b 	bl	8001178 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2105      	movs	r1, #5
 8000c86:	205b      	movs	r0, #91	; 0x5b
 8000c88:	f000 f981 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c8c:	205b      	movs	r0, #91	; 0x5b
 8000c8e:	f000 f998 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000c92:	bf00      	nop
 8000c94:	3778      	adds	r7, #120	; 0x78
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40008000 	.word	0x40008000
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cce:	f7ff fdb7 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f006 ffb3 	bl	8007c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd6:	f7ff fcdd 	bl	8000694 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce8:	08007fa4 	.word	0x08007fa4
  ldr r2, =_sbss
 8000cec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf0:	20001be0 	.word	0x20001be0

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>

08000cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f939 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d06:	200f      	movs	r0, #15
 8000d08:	f000 f80e 	bl	8000d28 <HAL_InitTick>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	e001      	b.n	8000d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d18:	f7ff fd28 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_InitTick+0x68>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d022      	beq.n	8000d82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_InitTick+0x6c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_InitTick+0x68>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f944 	bl	8000fde <HAL_SYSTICK_Config>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10f      	bne.n	8000d7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b0f      	cmp	r3, #15
 8000d60:	d809      	bhi.n	8000d76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d62:	2200      	movs	r2, #0
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6a:	f000 f910 	bl	8000f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_InitTick+0x70>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e007      	b.n	8000d86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	e004      	b.n	8000d86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e001      	b.n	8000d86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x20>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_IncTick+0x1c>)
 8000dac:	6013      	str	r3, [r2, #0]
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	200001c4 	.word	0x200001c4
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200001c4 	.word	0x200001c4

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff40 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff33 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffa4 	bl	8000f34 <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b085      	sub	sp, #20
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d005      	beq.n	800101a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2204      	movs	r2, #4
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e037      	b.n	800108a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 020e 	bic.w	r2, r2, #14
 8001028:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001038:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f003 021f 	and.w	r2, r3, #31
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001066:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00c      	beq.n	800108a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800107e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001088:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d00d      	beq.n	80010dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2204      	movs	r2, #4
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e047      	b.n	800116c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 020e 	bic.w	r2, r2, #14
 80010ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800110a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	2101      	movs	r1, #1
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001128:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00c      	beq.n	800114c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001140:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800114a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	4798      	blx	r3
    }
  }
  return status;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001186:	e15a      	b.n	800143e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2101      	movs	r1, #1
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 814c 	beq.w	8001438 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d005      	beq.n	80011b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d130      	bne.n	800121a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ee:	2201      	movs	r2, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f003 0201 	and.w	r2, r3, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b03      	cmp	r3, #3
 8001224:	d017      	beq.n	8001256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d123      	bne.n	80012aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	6939      	ldr	r1, [r7, #16]
 80012a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0203 	and.w	r2, r3, #3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80a6 	beq.w	8001438 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ec:	4b5b      	ldr	r3, [pc, #364]	; (800145c <HAL_GPIO_Init+0x2e4>)
 80012ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f0:	4a5a      	ldr	r2, [pc, #360]	; (800145c <HAL_GPIO_Init+0x2e4>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6613      	str	r3, [r2, #96]	; 0x60
 80012f8:	4b58      	ldr	r3, [pc, #352]	; (800145c <HAL_GPIO_Init+0x2e4>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001304:	4a56      	ldr	r2, [pc, #344]	; (8001460 <HAL_GPIO_Init+0x2e8>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800132e:	d01f      	beq.n	8001370 <HAL_GPIO_Init+0x1f8>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x2ec>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d019      	beq.n	800136c <HAL_GPIO_Init+0x1f4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_GPIO_Init+0x2f0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d013      	beq.n	8001368 <HAL_GPIO_Init+0x1f0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4a      	ldr	r2, [pc, #296]	; (800146c <HAL_GPIO_Init+0x2f4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d00d      	beq.n	8001364 <HAL_GPIO_Init+0x1ec>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_GPIO_Init+0x2f8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_Init+0x1e8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a48      	ldr	r2, [pc, #288]	; (8001474 <HAL_GPIO_Init+0x2fc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d101      	bne.n	800135c <HAL_GPIO_Init+0x1e4>
 8001358:	2305      	movs	r3, #5
 800135a:	e00a      	b.n	8001372 <HAL_GPIO_Init+0x1fa>
 800135c:	2306      	movs	r3, #6
 800135e:	e008      	b.n	8001372 <HAL_GPIO_Init+0x1fa>
 8001360:	2304      	movs	r3, #4
 8001362:	e006      	b.n	8001372 <HAL_GPIO_Init+0x1fa>
 8001364:	2303      	movs	r3, #3
 8001366:	e004      	b.n	8001372 <HAL_GPIO_Init+0x1fa>
 8001368:	2302      	movs	r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x1fa>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <HAL_GPIO_Init+0x1fa>
 8001370:	2300      	movs	r3, #0
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	f002 0203 	and.w	r2, r2, #3
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	4093      	lsls	r3, r2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001382:	4937      	ldr	r1, [pc, #220]	; (8001460 <HAL_GPIO_Init+0x2e8>)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_GPIO_Init+0x300>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b4:	4a30      	ldr	r2, [pc, #192]	; (8001478 <HAL_GPIO_Init+0x300>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_GPIO_Init+0x300>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013de:	4a26      	ldr	r2, [pc, #152]	; (8001478 <HAL_GPIO_Init+0x300>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_GPIO_Init+0x300>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <HAL_GPIO_Init+0x300>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_GPIO_Init+0x300>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001432:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_GPIO_Init+0x300>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	f47f ae9d 	bne.w	8001188 <HAL_GPIO_Init+0x10>
  }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000
 8001464:	48000400 	.word	0x48000400
 8001468:	48000800 	.word	0x48000800
 800146c:	48000c00 	.word	0x48000c00
 8001470:	48001000 	.word	0x48001000
 8001474:	48001400 	.word	0x48001400
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d141      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ba:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c6:	d131      	bne.n	800152c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c8:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ce:	4a46      	ldr	r2, [pc, #280]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e0:	4a41      	ldr	r2, [pc, #260]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2232      	movs	r2, #50	; 0x32
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a3f      	ldr	r2, [pc, #252]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	0c9b      	lsrs	r3, r3, #18
 80014fa:	3301      	adds	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fe:	e002      	b.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3b01      	subs	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d102      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f2      	bne.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001526:	d158      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e057      	b.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001532:	4a2d      	ldr	r2, [pc, #180]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800153c:	e04d      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001544:	d141      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d131      	bne.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800156c:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001572:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2232      	movs	r2, #50	; 0x32
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	0c9b      	lsrs	r3, r3, #18
 8001586:	3301      	adds	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158a:	e002      	b.n	8001592 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3b01      	subs	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159e:	d102      	bne.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f2      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d112      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e011      	b.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015c8:	e007      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40007000 	.word	0x40007000
 80015ec:	20000000 	.word	0x20000000
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e306      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d075      	beq.n	80016fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001612:	4b97      	ldr	r3, [pc, #604]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800161c:	4b94      	ldr	r3, [pc, #592]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b0c      	cmp	r3, #12
 800162a:	d102      	bne.n	8001632 <HAL_RCC_OscConfig+0x3e>
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d002      	beq.n	8001638 <HAL_RCC_OscConfig+0x44>
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b08      	cmp	r3, #8
 8001636:	d10b      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	4b8d      	ldr	r3, [pc, #564]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d05b      	beq.n	80016fc <HAL_RCC_OscConfig+0x108>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d157      	bne.n	80016fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e2e1      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x74>
 800165a:	4b85      	ldr	r3, [pc, #532]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a84      	ldr	r2, [pc, #528]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01d      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x98>
 8001672:	4b7f      	ldr	r3, [pc, #508]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a7e      	ldr	r2, [pc, #504]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 800168c:	4b78      	ldr	r3, [pc, #480]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a77      	ldr	r2, [pc, #476]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b75      	ldr	r3, [pc, #468]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a74      	ldr	r2, [pc, #464]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb88 	bl	8000dc0 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fb84 	bl	8000dc0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e2a6      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c6:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0xc0>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb74 	bl	8000dc0 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb70 	bl	8000dc0 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e292      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ee:	4b60      	ldr	r3, [pc, #384]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0xe8>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d075      	beq.n	80017f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170a:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001714:	4b56      	ldr	r3, [pc, #344]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b0c      	cmp	r3, #12
 8001722:	d102      	bne.n	800172a <HAL_RCC_OscConfig+0x136>
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d002      	beq.n	8001730 <HAL_RCC_OscConfig+0x13c>
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d11f      	bne.n	8001770 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x154>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e265      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b49      	ldr	r3, [pc, #292]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	4946      	ldr	r1, [pc, #280]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800175c:	4b45      	ldr	r3, [pc, #276]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fae1 	bl	8000d28 <HAL_InitTick>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d043      	beq.n	80017f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e251      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d023      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a3c      	ldr	r2, [pc, #240]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fb1c 	bl	8000dc0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fb18 	bl	8000dc0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e23a      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	061b      	lsls	r3, r3, #24
 80017b8:	492d      	ldr	r1, [pc, #180]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
 80017be:	e01a      	b.n	80017f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff faf8 	bl	8000dc0 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff faf4 	bl	8000dc0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e216      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1e0>
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d041      	beq.n	8001886 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01c      	beq.n	8001844 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800180c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001810:	4a17      	ldr	r2, [pc, #92]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fad1 	bl	8000dc0 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff facd 	bl	8000dc0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1ef      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0ef      	beq.n	8001822 <HAL_RCC_OscConfig+0x22e>
 8001842:	e020      	b.n	8001886 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_RCC_OscConfig+0x27c>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff fab4 	bl	8000dc0 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800185a:	e00d      	b.n	8001878 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff fab0 	bl	8000dc0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d906      	bls.n	8001878 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e1d2      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001878:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ea      	bne.n	800185c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80a6 	beq.w	80019e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001898:	4b84      	ldr	r3, [pc, #528]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2b4>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x2b6>
 80018a8:	2300      	movs	r3, #0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00d      	beq.n	80018ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	4a7e      	ldr	r2, [pc, #504]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ba:	4b7c      	ldr	r3, [pc, #496]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ca:	4b79      	ldr	r3, [pc, #484]	; (8001ab0 <HAL_RCC_OscConfig+0x4bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018d6:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x4bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x4bc>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fa6d 	bl	8000dc0 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7ff fa69 	bl	8000dc0 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e18b      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fc:	4b6c      	ldr	r3, [pc, #432]	; (8001ab0 <HAL_RCC_OscConfig+0x4bc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_RCC_OscConfig+0x32e>
 8001910:	4b66      	ldr	r3, [pc, #408]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a65      	ldr	r2, [pc, #404]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001920:	e024      	b.n	800196c <HAL_RCC_OscConfig+0x378>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b05      	cmp	r3, #5
 8001928:	d110      	bne.n	800194c <HAL_RCC_OscConfig+0x358>
 800192a:	4b60      	ldr	r3, [pc, #384]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 800192c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001930:	4a5e      	ldr	r2, [pc, #376]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	4a5a      	ldr	r2, [pc, #360]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800194a:	e00f      	b.n	800196c <HAL_RCC_OscConfig+0x378>
 800194c:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 800194e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001952:	4a56      	ldr	r2, [pc, #344]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d016      	beq.n	80019a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff fa24 	bl	8000dc0 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197a:	e00a      	b.n	8001992 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff fa20 	bl	8000dc0 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e140      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001992:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ed      	beq.n	800197c <HAL_RCC_OscConfig+0x388>
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a2:	f7ff fa0d 	bl	8000dc0 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff fa09 	bl	8000dc0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e129      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c0:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ed      	bne.n	80019aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ce:	7ffb      	ldrb	r3, [r7, #31]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a34      	ldr	r2, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 80019da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d03c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d01c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019fa:	4a2c      	ldr	r2, [pc, #176]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff f9dc 	bl	8000dc0 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0c:	f7ff f9d8 	bl	8000dc0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0fa      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ef      	beq.n	8001a0c <HAL_RCC_OscConfig+0x418>
 8001a2c:	e01b      	b.n	8001a66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a34:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f9bf 	bl	8000dc0 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a46:	f7ff f9bb 	bl	8000dc0 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0dd      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1ef      	bne.n	8001a46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80d1 	beq.w	8001c12 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	f000 808b 	beq.w	8001b94 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d15e      	bne.n	8001b44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_RCC_OscConfig+0x4b8>)
 8001a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f995 	bl	8000dc0 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	e00c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff f991 	bl	8000dc0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d905      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0b3      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ec      	bne.n	8001a9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac0:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <HAL_RCC_OscConfig+0x62c>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6a11      	ldr	r1, [r2, #32]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ad0:	3a01      	subs	r2, #1
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	4311      	orrs	r1, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ada:	0212      	lsls	r2, r2, #8
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ae2:	0852      	lsrs	r2, r2, #1
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0552      	lsls	r2, r2, #21
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aee:	0852      	lsrs	r2, r2, #1
 8001af0:	3a01      	subs	r2, #1
 8001af2:	0652      	lsls	r2, r2, #25
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001afa:	06d2      	lsls	r2, r2, #27
 8001afc:	430a      	orrs	r2, r1
 8001afe:	4947      	ldr	r1, [pc, #284]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b04:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a44      	ldr	r2, [pc, #272]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4a41      	ldr	r2, [pc, #260]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f950 	bl	8000dc0 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f94c 	bl	8000dc0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e06e      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x530>
 8001b42:	e066      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a34      	ldr	r2, [pc, #208]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b50:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a2e      	ldr	r2, [pc, #184]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b62:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f928 	bl	8000dc0 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f924 	bl	8000dc0 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e046      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x580>
 8001b92:	e03e      	b.n	8001c12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e039      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d12c      	bne.n	8001c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d123      	bne.n	8001c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d11b      	bne.n	8001c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d113      	bne.n	8001c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	019f800c 	.word	0x019f800c

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e11e      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b91      	ldr	r3, [pc, #580]	; (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d910      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b8e      	ldr	r3, [pc, #568]	; (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 020f 	bic.w	r2, r3, #15
 8001c52:	498c      	ldr	r1, [pc, #560]	; (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b8a      	ldr	r3, [pc, #552]	; (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e106      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d073      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d129      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c80:	4b81      	ldr	r3, [pc, #516]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0f4      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c90:	f000 f99e 	bl	8001fd0 <RCC_GetSysClockFreqFromPLLSource>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4a7c      	ldr	r2, [pc, #496]	; (8001e8c <HAL_RCC_ClockConfig+0x268>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d93f      	bls.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c9e:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d033      	beq.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d12f      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cbe:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc6:	4a70      	ldr	r2, [pc, #448]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ccc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e024      	b.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0c6      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cec:	4b66      	ldr	r3, [pc, #408]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0be      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cfc:	f000 f8ce 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4a61      	ldr	r2, [pc, #388]	; (8001e8c <HAL_RCC_ClockConfig+0x268>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d909      	bls.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d12:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4957      	ldr	r1, [pc, #348]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d30:	f7ff f846 	bl	8000dc0 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f842 	bl	8000dc0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e095      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d78:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d90:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d98:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4936      	ldr	r1, [pc, #216]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b80      	cmp	r3, #128	; 0x80
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d21d      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 020f 	bic.w	r2, r3, #15
 8001ddc:	4929      	ldr	r1, [pc, #164]	; (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001de4:	f7fe ffec 	bl	8000dc0 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7fe ffe8 	bl	8000dc0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e03b      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1ed      	bne.n	8001dec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4917      	ldr	r1, [pc, #92]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	490f      	ldr	r1, [pc, #60]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e4e:	f000 f825 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	490c      	ldr	r1, [pc, #48]	; (8001e90 <HAL_RCC_ClockConfig+0x26c>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x270>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x274>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe ff58 	bl	8000d28 <HAL_InitTick>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	04c4b400 	.word	0x04c4b400
 8001e90:	08007ef4 	.word	0x08007ef4
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e047      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e03e      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d136      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efa:	68d2      	ldr	r2, [r2, #12]
 8001efc:	0a12      	lsrs	r2, r2, #8
 8001efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	617b      	str	r3, [r7, #20]
      break;
 8001f08:	e00c      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	0a12      	lsrs	r2, r2, #8
 8001f18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
      break;
 8001f22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0e5b      	lsrs	r3, r3, #25
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e001      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f44:	693b      	ldr	r3, [r7, #16]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4904      	ldr	r1, [pc, #16]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	08007f04 	.word	0x08007f04

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fa8:	f7ff ffda 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0adb      	lsrs	r3, r3, #11
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4904      	ldr	r1, [pc, #16]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08007f04 	.word	0x08007f04

08001fd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3301      	adds	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d10c      	bne.n	800200e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ffe:	68d2      	ldr	r2, [r2, #12]
 8002000:	0a12      	lsrs	r2, r2, #8
 8002002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
    break;
 800200c:	e00c      	b.n	8002028 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002018:	68d2      	ldr	r2, [r2, #12]
 800201a:	0a12      	lsrs	r2, r2, #8
 800201c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    break;
 8002026:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0e5b      	lsrs	r3, r3, #25
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	007a1200 	.word	0x007a1200
 8002058:	00f42400 	.word	0x00f42400

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002064:	2300      	movs	r3, #0
 8002066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002068:	2300      	movs	r3, #0
 800206a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8098 	beq.w	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10d      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b40      	ldr	r3, [pc, #256]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a3f      	ldr	r2, [pc, #252]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a6:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a39      	ldr	r2, [pc, #228]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b2:	f7fe fe85 	bl	8000dc0 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b8:	e009      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe fe81 	bl	8000dc0 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d902      	bls.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	74fb      	strb	r3, [r7, #19]
        break;
 80020cc:	e005      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ef      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d159      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01e      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d019      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe fe41 	bl	8000dc0 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	e00b      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fe3d 	bl	8000dc0 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d902      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	74fb      	strb	r3, [r7, #19]
            break;
 8002158:	e006      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ec      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002184:	e008      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	74bb      	strb	r3, [r7, #18]
 800218a:	e005      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002198:	7c7b      	ldrb	r3, [r7, #17]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4ba7      	ldr	r3, [pc, #668]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	4aa6      	ldr	r2, [pc, #664]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b6:	4ba1      	ldr	r3, [pc, #644]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 0203 	bic.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	499d      	ldr	r1, [pc, #628]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d8:	4b98      	ldr	r3, [pc, #608]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 020c 	bic.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4995      	ldr	r1, [pc, #596]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021fa:	4b90      	ldr	r3, [pc, #576]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	498c      	ldr	r1, [pc, #560]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800221c:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	4984      	ldr	r1, [pc, #528]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	497b      	ldr	r1, [pc, #492]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002260:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	4973      	ldr	r1, [pc, #460]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	4b6e      	ldr	r3, [pc, #440]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	496a      	ldr	r1, [pc, #424]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a4:	4b65      	ldr	r3, [pc, #404]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4962      	ldr	r1, [pc, #392]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	4959      	ldr	r1, [pc, #356]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e8:	4b54      	ldr	r3, [pc, #336]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	4951      	ldr	r1, [pc, #324]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800230a:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	4948      	ldr	r1, [pc, #288]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800232c:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4940      	ldr	r1, [pc, #256]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800234a:	d105      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002356:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	4932      	ldr	r1, [pc, #200]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a2c      	ldr	r2, [pc, #176]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4924      	ldr	r1, [pc, #144]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d019      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242a:	d109      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
 8002438:	e002      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800244c:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4926      	ldr	r1, [pc, #152]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800246a:	d105      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	4918      	ldr	r1, [pc, #96]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a2:	d105      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	490a      	ldr	r1, [pc, #40]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024da:	d105      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e049      	b.n	800259e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fabc 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f000 fd5a 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e049      	b.n	800264c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d106      	bne.n	80025d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f841 	bl	8002654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f000 fd03 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e049      	b.n	800270e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe f9b8 	bl	8000a04 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f000 fca2 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d122      	bne.n	8002772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d11b      	bne.n	8002772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0202 	mvn.w	r2, #2
 8002742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7fd ff29 	bl	80005b0 <HAL_TIM_IC_CaptureCallback>
 800275e:	e005      	b.n	800276c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fc27 	bl	8002fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fc2e 	bl	8002fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b04      	cmp	r3, #4
 800277e:	d122      	bne.n	80027c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b04      	cmp	r3, #4
 800278c:	d11b      	bne.n	80027c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0204 	mvn.w	r2, #4
 8002796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7fd feff 	bl	80005b0 <HAL_TIM_IC_CaptureCallback>
 80027b2:	e005      	b.n	80027c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fbfd 	bl	8002fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fc04 	bl	8002fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d122      	bne.n	800281a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11b      	bne.n	800281a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f06f 0208 	mvn.w	r2, #8
 80027ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2204      	movs	r2, #4
 80027f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fd fed5 	bl	80005b0 <HAL_TIM_IC_CaptureCallback>
 8002806:	e005      	b.n	8002814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fbd3 	bl	8002fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fbda 	bl	8002fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d122      	bne.n	800286e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b10      	cmp	r3, #16
 8002834:	d11b      	bne.n	800286e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0210 	mvn.w	r2, #16
 800283e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2208      	movs	r2, #8
 8002844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fd feab 	bl	80005b0 <HAL_TIM_IC_CaptureCallback>
 800285a:	e005      	b.n	8002868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fba9 	bl	8002fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fbb0 	bl	8002fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10e      	bne.n	800289a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0201 	mvn.w	r2, #1
 8002892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fb83 	bl	8002fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d10e      	bne.n	80028c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b80      	cmp	r3, #128	; 0x80
 80028b4:	d107      	bne.n	80028c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f001 f9cd 	bl	8003c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f001 f9c0 	bl	8003c74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fb5e 	bl	8002fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b20      	cmp	r3, #32
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b20      	cmp	r3, #32
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0220 	mvn.w	r2, #32
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f001 f980 	bl	8003c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800295a:	d10f      	bne.n	800297c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296a:	d107      	bne.n	800297c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f001 f986 	bl	8003c88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800298a:	d10f      	bne.n	80029ac <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800299a:	d107      	bne.n	80029ac <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f001 f978 	bl	8003c9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d10f      	bne.n	80029dc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f001 f96a 	bl	8003cb0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ea:	d10f      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029fa:	d107      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 f95c 	bl	8003cc4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e088      	b.n	8002b44 <HAL_TIM_IC_ConfigChannel+0x130>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f000 fea0 	bl	8003794 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020c 	bic.w	r2, r2, #12
 8002a62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6999      	ldr	r1, [r3, #24]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	619a      	str	r2, [r3, #24]
 8002a76:	e060      	b.n	8002b3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f000 ff24 	bl	80038da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002aa0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6999      	ldr	r1, [r3, #24]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	021a      	lsls	r2, r3, #8
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	619a      	str	r2, [r3, #24]
 8002ab6:	e040      	b.n	8002b3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d11b      	bne.n	8002af6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f000 ff71 	bl	80039b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 020c 	bic.w	r2, r2, #12
 8002ae0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69d9      	ldr	r1, [r3, #28]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	61da      	str	r2, [r3, #28]
 8002af4:	e021      	b.n	8002b3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d11c      	bne.n	8002b36 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f000 ff8e 	bl	8003a2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b1e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69d9      	ldr	r1, [r3, #28]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	021a      	lsls	r2, r3, #8
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	61da      	str	r2, [r3, #28]
 8002b34:	e001      	b.n	8002b3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0ff      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b14      	cmp	r3, #20
 8002b76:	f200 80f0 	bhi.w	8002d5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002bd5 	.word	0x08002bd5
 8002b84:	08002d5b 	.word	0x08002d5b
 8002b88:	08002d5b 	.word	0x08002d5b
 8002b8c:	08002d5b 	.word	0x08002d5b
 8002b90:	08002c15 	.word	0x08002c15
 8002b94:	08002d5b 	.word	0x08002d5b
 8002b98:	08002d5b 	.word	0x08002d5b
 8002b9c:	08002d5b 	.word	0x08002d5b
 8002ba0:	08002c57 	.word	0x08002c57
 8002ba4:	08002d5b 	.word	0x08002d5b
 8002ba8:	08002d5b 	.word	0x08002d5b
 8002bac:	08002d5b 	.word	0x08002d5b
 8002bb0:	08002c97 	.word	0x08002c97
 8002bb4:	08002d5b 	.word	0x08002d5b
 8002bb8:	08002d5b 	.word	0x08002d5b
 8002bbc:	08002d5b 	.word	0x08002d5b
 8002bc0:	08002cd9 	.word	0x08002cd9
 8002bc4:	08002d5b 	.word	0x08002d5b
 8002bc8:	08002d5b 	.word	0x08002d5b
 8002bcc:	08002d5b 	.word	0x08002d5b
 8002bd0:	08002d19 	.word	0x08002d19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fab0 	bl	8003140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0208 	orr.w	r2, r2, #8
 8002bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0204 	bic.w	r2, r2, #4
 8002bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6999      	ldr	r1, [r3, #24]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	619a      	str	r2, [r3, #24]
      break;
 8002c12:	e0a5      	b.n	8002d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fb2a 	bl	8003274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6999      	ldr	r1, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	021a      	lsls	r2, r3, #8
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	619a      	str	r2, [r3, #24]
      break;
 8002c54:	e084      	b.n	8002d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fb9d 	bl	800339c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0208 	orr.w	r2, r2, #8
 8002c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0204 	bic.w	r2, r2, #4
 8002c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69d9      	ldr	r1, [r3, #28]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	61da      	str	r2, [r3, #28]
      break;
 8002c94:	e064      	b.n	8002d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fc0f 	bl	80034c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69d9      	ldr	r1, [r3, #28]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	021a      	lsls	r2, r3, #8
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	61da      	str	r2, [r3, #28]
      break;
 8002cd6:	e043      	b.n	8002d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fc82 	bl	80035e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0208 	orr.w	r2, r2, #8
 8002cf2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0204 	bic.w	r2, r2, #4
 8002d02:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002d16:	e023      	b.n	8002d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fccc 	bl	80036bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	021a      	lsls	r2, r3, #8
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002d58:	e002      	b.n	8002d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop

08002d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_ConfigClockSource+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0f6      	b.n	8002f7e <HAL_TIM_ConfigClockSource+0x20a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6f      	ldr	r2, [pc, #444]	; (8002f88 <HAL_TIM_ConfigClockSource+0x214>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	f000 80c1 	beq.w	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002dd0:	4a6d      	ldr	r2, [pc, #436]	; (8002f88 <HAL_TIM_ConfigClockSource+0x214>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f200 80c6 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002dd8:	4a6c      	ldr	r2, [pc, #432]	; (8002f8c <HAL_TIM_ConfigClockSource+0x218>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	f000 80b9 	beq.w	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002de0:	4a6a      	ldr	r2, [pc, #424]	; (8002f8c <HAL_TIM_ConfigClockSource+0x218>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	f200 80be 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002de8:	4a69      	ldr	r2, [pc, #420]	; (8002f90 <HAL_TIM_ConfigClockSource+0x21c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f000 80b1 	beq.w	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002df0:	4a67      	ldr	r2, [pc, #412]	; (8002f90 <HAL_TIM_ConfigClockSource+0x21c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	f200 80b6 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002df8:	4a66      	ldr	r2, [pc, #408]	; (8002f94 <HAL_TIM_ConfigClockSource+0x220>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f000 80a9 	beq.w	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e00:	4a64      	ldr	r2, [pc, #400]	; (8002f94 <HAL_TIM_ConfigClockSource+0x220>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	f200 80ae 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e08:	4a63      	ldr	r2, [pc, #396]	; (8002f98 <HAL_TIM_ConfigClockSource+0x224>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f000 80a1 	beq.w	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e10:	4a61      	ldr	r2, [pc, #388]	; (8002f98 <HAL_TIM_ConfigClockSource+0x224>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f200 80a6 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e18:	4a60      	ldr	r2, [pc, #384]	; (8002f9c <HAL_TIM_ConfigClockSource+0x228>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f000 8099 	beq.w	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e20:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <HAL_TIM_ConfigClockSource+0x228>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	f200 809e 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002e2c:	f000 8091 	beq.w	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002e34:	f200 8096 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e3c:	f000 8089 	beq.w	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e44:	f200 808e 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4c:	d03e      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0x158>
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e52:	f200 8087 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	f000 8086 	beq.w	8002f6a <HAL_TIM_ConfigClockSource+0x1f6>
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e62:	d87f      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e64:	2b70      	cmp	r3, #112	; 0x70
 8002e66:	d01a      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x12a>
 8002e68:	2b70      	cmp	r3, #112	; 0x70
 8002e6a:	d87b      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e6c:	2b60      	cmp	r3, #96	; 0x60
 8002e6e:	d050      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x19e>
 8002e70:	2b60      	cmp	r3, #96	; 0x60
 8002e72:	d877      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e74:	2b50      	cmp	r3, #80	; 0x50
 8002e76:	d03c      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x17e>
 8002e78:	2b50      	cmp	r3, #80	; 0x50
 8002e7a:	d873      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d058      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x1be>
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d86f      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e84:	2b30      	cmp	r3, #48	; 0x30
 8002e86:	d064      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e88:	2b30      	cmp	r3, #48	; 0x30
 8002e8a:	d86b      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d060      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d867      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d05c      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d05a      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x1de>
 8002e9c:	e062      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6899      	ldr	r1, [r3, #8]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f000 fe17 	bl	8003ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	609a      	str	r2, [r3, #8]
      break;
 8002eca:	e04f      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f000 fe00 	bl	8003ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eee:	609a      	str	r2, [r3, #8]
      break;
 8002ef0:	e03c      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f000 fcbc 	bl	800387c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2150      	movs	r1, #80	; 0x50
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fdcb 	bl	8003aa6 <TIM_ITRx_SetConfig>
      break;
 8002f10:	e02c      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f000 fd18 	bl	8003954 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2160      	movs	r1, #96	; 0x60
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fdbb 	bl	8003aa6 <TIM_ITRx_SetConfig>
      break;
 8002f30:	e01c      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f000 fc9c 	bl	800387c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2140      	movs	r1, #64	; 0x40
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fdab 	bl	8003aa6 <TIM_ITRx_SetConfig>
      break;
 8002f50:	e00c      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f000 fda2 	bl	8003aa6 <TIM_ITRx_SetConfig>
      break;
 8002f62:	e003      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
      break;
 8002f68:	e000      	b.n	8002f6c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	00100070 	.word	0x00100070
 8002f8c:	00100060 	.word	0x00100060
 8002f90:	00100050 	.word	0x00100050
 8002f94:	00100040 	.word	0x00100040
 8002f98:	00100030 	.word	0x00100030
 8002f9c:	00100020 	.word	0x00100020

08002fa0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a46      	ldr	r2, [pc, #280]	; (800311c <TIM_Base_SetConfig+0x12c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d017      	beq.n	8003038 <TIM_Base_SetConfig+0x48>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d013      	beq.n	8003038 <TIM_Base_SetConfig+0x48>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a43      	ldr	r2, [pc, #268]	; (8003120 <TIM_Base_SetConfig+0x130>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00f      	beq.n	8003038 <TIM_Base_SetConfig+0x48>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a42      	ldr	r2, [pc, #264]	; (8003124 <TIM_Base_SetConfig+0x134>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00b      	beq.n	8003038 <TIM_Base_SetConfig+0x48>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a41      	ldr	r2, [pc, #260]	; (8003128 <TIM_Base_SetConfig+0x138>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_Base_SetConfig+0x48>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a40      	ldr	r2, [pc, #256]	; (800312c <TIM_Base_SetConfig+0x13c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0x48>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3f      	ldr	r2, [pc, #252]	; (8003130 <TIM_Base_SetConfig+0x140>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d108      	bne.n	800304a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a33      	ldr	r2, [pc, #204]	; (800311c <TIM_Base_SetConfig+0x12c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d023      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d01f      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a30      	ldr	r2, [pc, #192]	; (8003120 <TIM_Base_SetConfig+0x130>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01b      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a2f      	ldr	r2, [pc, #188]	; (8003124 <TIM_Base_SetConfig+0x134>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d017      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <TIM_Base_SetConfig+0x138>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2d      	ldr	r2, [pc, #180]	; (800312c <TIM_Base_SetConfig+0x13c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00f      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2d      	ldr	r2, [pc, #180]	; (8003134 <TIM_Base_SetConfig+0x144>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00b      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <TIM_Base_SetConfig+0x148>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <TIM_Base_SetConfig+0x14c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_Base_SetConfig+0xaa>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a26      	ldr	r2, [pc, #152]	; (8003130 <TIM_Base_SetConfig+0x140>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <TIM_Base_SetConfig+0x12c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <TIM_Base_SetConfig+0x110>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a14      	ldr	r2, [pc, #80]	; (800312c <TIM_Base_SetConfig+0x13c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00f      	beq.n	8003100 <TIM_Base_SetConfig+0x110>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <TIM_Base_SetConfig+0x144>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00b      	beq.n	8003100 <TIM_Base_SetConfig+0x110>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <TIM_Base_SetConfig+0x148>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <TIM_Base_SetConfig+0x110>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <TIM_Base_SetConfig+0x14c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_Base_SetConfig+0x110>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <TIM_Base_SetConfig+0x140>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d103      	bne.n	8003108 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	615a      	str	r2, [r3, #20]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40012c00 	.word	0x40012c00
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40013400 	.word	0x40013400
 8003130:	40015000 	.word	0x40015000
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800

08003140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0201 	bic.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f023 0302 	bic.w	r3, r3, #2
 800318c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a30      	ldr	r2, [pc, #192]	; (800325c <TIM_OC1_SetConfig+0x11c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <TIM_OC1_SetConfig+0x88>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <TIM_OC1_SetConfig+0x120>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00f      	beq.n	80031c8 <TIM_OC1_SetConfig+0x88>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <TIM_OC1_SetConfig+0x124>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <TIM_OC1_SetConfig+0x88>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <TIM_OC1_SetConfig+0x128>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <TIM_OC1_SetConfig+0x88>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <TIM_OC1_SetConfig+0x12c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_OC1_SetConfig+0x88>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <TIM_OC1_SetConfig+0x130>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10c      	bne.n	80031e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0308 	bic.w	r3, r3, #8
 80031ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <TIM_OC1_SetConfig+0x11c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <TIM_OC1_SetConfig+0xd2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <TIM_OC1_SetConfig+0x120>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00f      	beq.n	8003212 <TIM_OC1_SetConfig+0xd2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <TIM_OC1_SetConfig+0x124>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00b      	beq.n	8003212 <TIM_OC1_SetConfig+0xd2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <TIM_OC1_SetConfig+0x128>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <TIM_OC1_SetConfig+0xd2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <TIM_OC1_SetConfig+0x12c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_OC1_SetConfig+0xd2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <TIM_OC1_SetConfig+0x130>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d111      	bne.n	8003236 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	621a      	str	r2, [r3, #32]
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800
 8003270:	40015000 	.word	0x40015000

08003274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f023 0210 	bic.w	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0320 	bic.w	r3, r3, #32
 80032c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <TIM_OC2_SetConfig+0x110>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <TIM_OC2_SetConfig+0x74>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <TIM_OC2_SetConfig+0x114>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC2_SetConfig+0x74>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a2a      	ldr	r2, [pc, #168]	; (800338c <TIM_OC2_SetConfig+0x118>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10d      	bne.n	8003304 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <TIM_OC2_SetConfig+0x110>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d013      	beq.n	8003334 <TIM_OC2_SetConfig+0xc0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <TIM_OC2_SetConfig+0x114>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00f      	beq.n	8003334 <TIM_OC2_SetConfig+0xc0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <TIM_OC2_SetConfig+0x11c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00b      	beq.n	8003334 <TIM_OC2_SetConfig+0xc0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <TIM_OC2_SetConfig+0x120>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <TIM_OC2_SetConfig+0xc0>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <TIM_OC2_SetConfig+0x124>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_OC2_SetConfig+0xc0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a17      	ldr	r2, [pc, #92]	; (800338c <TIM_OC2_SetConfig+0x118>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d113      	bne.n	800335c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800333a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40013400 	.word	0x40013400
 800338c:	40015000 	.word	0x40015000
 8003390:	40014000 	.word	0x40014000
 8003394:	40014400 	.word	0x40014400
 8003398:	40014800 	.word	0x40014800

0800339c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2b      	ldr	r2, [pc, #172]	; (80034a8 <TIM_OC3_SetConfig+0x10c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_OC3_SetConfig+0x72>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <TIM_OC3_SetConfig+0x110>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_OC3_SetConfig+0x72>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <TIM_OC3_SetConfig+0x114>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10d      	bne.n	800342a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <TIM_OC3_SetConfig+0x10c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <TIM_OC3_SetConfig+0xbe>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <TIM_OC3_SetConfig+0x110>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00f      	beq.n	800345a <TIM_OC3_SetConfig+0xbe>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <TIM_OC3_SetConfig+0x118>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00b      	beq.n	800345a <TIM_OC3_SetConfig+0xbe>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <TIM_OC3_SetConfig+0x11c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <TIM_OC3_SetConfig+0xbe>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <TIM_OC3_SetConfig+0x120>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_OC3_SetConfig+0xbe>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <TIM_OC3_SetConfig+0x114>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d113      	bne.n	8003482 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	621a      	str	r2, [r3, #32]
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40013400 	.word	0x40013400
 80034b0:	40015000 	.word	0x40015000
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40014400 	.word	0x40014400
 80034bc:	40014800 	.word	0x40014800

080034c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800350e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	031b      	lsls	r3, r3, #12
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <TIM_OC4_SetConfig+0x110>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_OC4_SetConfig+0x74>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a2b      	ldr	r2, [pc, #172]	; (80035d4 <TIM_OC4_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_OC4_SetConfig+0x74>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <TIM_OC4_SetConfig+0x118>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d10d      	bne.n	8003550 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800353a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	031b      	lsls	r3, r3, #12
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <TIM_OC4_SetConfig+0x110>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <TIM_OC4_SetConfig+0xc0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <TIM_OC4_SetConfig+0x114>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00f      	beq.n	8003580 <TIM_OC4_SetConfig+0xc0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <TIM_OC4_SetConfig+0x11c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00b      	beq.n	8003580 <TIM_OC4_SetConfig+0xc0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <TIM_OC4_SetConfig+0x120>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <TIM_OC4_SetConfig+0xc0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <TIM_OC4_SetConfig+0x124>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC4_SetConfig+0xc0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <TIM_OC4_SetConfig+0x118>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d113      	bne.n	80035a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003586:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800358e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40015000 	.word	0x40015000
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800

080035e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800362c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <TIM_OC5_SetConfig+0xbc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <TIM_OC5_SetConfig+0x82>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <TIM_OC5_SetConfig+0xc0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00f      	beq.n	800366a <TIM_OC5_SetConfig+0x82>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <TIM_OC5_SetConfig+0xc4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00b      	beq.n	800366a <TIM_OC5_SetConfig+0x82>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <TIM_OC5_SetConfig+0xc8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d007      	beq.n	800366a <TIM_OC5_SetConfig+0x82>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <TIM_OC5_SetConfig+0xcc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_OC5_SetConfig+0x82>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <TIM_OC5_SetConfig+0xd0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d109      	bne.n	800367e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	621a      	str	r2, [r3, #32]
}
 8003698:	bf00      	nop
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40013400 	.word	0x40013400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	40015000 	.word	0x40015000

080036bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	051b      	lsls	r3, r3, #20
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a1a      	ldr	r2, [pc, #104]	; (800377c <TIM_OC6_SetConfig+0xc0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <TIM_OC6_SetConfig+0x84>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a19      	ldr	r2, [pc, #100]	; (8003780 <TIM_OC6_SetConfig+0xc4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00f      	beq.n	8003740 <TIM_OC6_SetConfig+0x84>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <TIM_OC6_SetConfig+0xc8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <TIM_OC6_SetConfig+0x84>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <TIM_OC6_SetConfig+0xcc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_OC6_SetConfig+0x84>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a16      	ldr	r2, [pc, #88]	; (800378c <TIM_OC6_SetConfig+0xd0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_OC6_SetConfig+0x84>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a15      	ldr	r2, [pc, #84]	; (8003790 <TIM_OC6_SetConfig+0xd4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d109      	bne.n	8003754 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	029b      	lsls	r3, r3, #10
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40013400 	.word	0x40013400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800
 8003790:	40015000 	.word	0x40015000

08003794 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0201 	bic.w	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <TIM_TI1_SetConfig+0xcc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01b      	beq.n	80037fa <TIM_TI1_SetConfig+0x66>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d017      	beq.n	80037fa <TIM_TI1_SetConfig+0x66>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a25      	ldr	r2, [pc, #148]	; (8003864 <TIM_TI1_SetConfig+0xd0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <TIM_TI1_SetConfig+0x66>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a24      	ldr	r2, [pc, #144]	; (8003868 <TIM_TI1_SetConfig+0xd4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <TIM_TI1_SetConfig+0x66>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a23      	ldr	r2, [pc, #140]	; (800386c <TIM_TI1_SetConfig+0xd8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_TI1_SetConfig+0x66>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <TIM_TI1_SetConfig+0xdc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_TI1_SetConfig+0x66>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <TIM_TI1_SetConfig+0xe0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_TI1_SetConfig+0x66>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <TIM_TI1_SetConfig+0xe4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <TIM_TI1_SetConfig+0x6a>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <TIM_TI1_SetConfig+0x6c>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e003      	b.n	800381e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	b2db      	uxtb	r3, r3
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f023 030a 	bic.w	r3, r3, #10
 8003838:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f003 030a 	and.w	r3, r3, #10
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40013400 	.word	0x40013400
 8003874:	40014000 	.word	0x40014000
 8003878:	40015000 	.word	0x40015000

0800387c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0201 	bic.w	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 030a 	bic.w	r3, r3, #10
 80038b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038da:	b480      	push	{r7}
 80038dc:	b087      	sub	sp, #28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f023 0210 	bic.w	r2, r3, #16
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	031b      	lsls	r3, r3, #12
 800391e:	b29b      	uxth	r3, r3
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800392c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0210 	bic.w	r2, r3, #16
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800397e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	031b      	lsls	r3, r3, #12
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003990:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 0303 	bic.w	r3, r3, #3
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	031b      	lsls	r3, r3, #12
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	031b      	lsls	r3, r3, #12
 8003a84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f043 0307 	orr.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	021a      	lsls	r2, r3, #8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	609a      	str	r2, [r3, #8]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e074      	b.n	8003c22 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a34      	ldr	r2, [pc, #208]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a33      	ldr	r2, [pc, #204]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a31      	ldr	r2, [pc, #196]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10c      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40013400 	.word	0x40013400
 8003c38:	40015000 	.word	0x40015000
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40000c00 	.word	0x40000c00
 8003c48:	40014000 	.word	0x40014000

08003c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e042      	b.n	8003d70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fc ff71 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2224      	movs	r2, #36	; 0x24
 8003d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fb64 	bl	80043e8 <UART_SetConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fe54 	bl	80049e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fedb 	bl	8004b24 <UART_CheckIdleState>
 8003d6e:	4603      	mov	r3, r0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b0ba      	sub	sp, #232	; 0xe8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003da6:	4013      	ands	r3, r2
 8003da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11b      	bne.n	8003dec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 82d6 	beq.w	800438e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
      }
      return;
 8003dea:	e2d0      	b.n	800438e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 811f 	beq.w	8004034 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003df6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003dfa:	4b8b      	ldr	r3, [pc, #556]	; (8004028 <HAL_UART_IRQHandler+0x2b0>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e06:	4b89      	ldr	r3, [pc, #548]	; (800402c <HAL_UART_IRQHandler+0x2b4>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8112 	beq.w	8004034 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d011      	beq.n	8003e40 <HAL_UART_IRQHandler+0xc8>
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d011      	beq.n	8003e70 <HAL_UART_IRQHandler+0xf8>
 8003e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e66:	f043 0204 	orr.w	r2, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d011      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x128>
 8003e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00b      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e96:	f043 0202 	orr.w	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d017      	beq.n	8003edc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003eb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003ebc:	4b5a      	ldr	r3, [pc, #360]	; (8004028 <HAL_UART_IRQHandler+0x2b0>)
 8003ebe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2208      	movs	r2, #8
 8003eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed2:	f043 0208 	orr.w	r2, r3, #8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_UART_IRQHandler+0x196>
 8003ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00c      	beq.n	8003f0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 823c 	beq.w	8004392 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d013      	beq.n	8003f4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d005      	beq.n	8003f72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04f      	beq.n	8004012 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fee9 	bl	8004d4a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	d141      	bne.n	800400a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1d9      	bne.n	8003f86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d013      	beq.n	8004002 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fde:	4a14      	ldr	r2, [pc, #80]	; (8004030 <HAL_UART_IRQHandler+0x2b8>)
 8003fe0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd f85e 	bl	80010a8 <HAL_DMA_Abort_IT>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d017      	beq.n	8004022 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	e00f      	b.n	8004022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f9da 	bl	80043bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	e00b      	b.n	8004022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f9d6 	bl	80043bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	e007      	b.n	8004022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9d2 	bl	80043bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004020:	e1b7      	b.n	8004392 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004022:	bf00      	nop
    return;
 8004024:	e1b5      	b.n	8004392 <HAL_UART_IRQHandler+0x61a>
 8004026:	bf00      	nop
 8004028:	10000001 	.word	0x10000001
 800402c:	04000120 	.word	0x04000120
 8004030:	08004e17 	.word	0x08004e17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004038:	2b01      	cmp	r3, #1
 800403a:	f040 814a 	bne.w	80042d2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8143 	beq.w	80042d2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 813c 	beq.w	80042d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2210      	movs	r2, #16
 8004060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	f040 80b5 	bne.w	80041dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800407e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8187 	beq.w	8004396 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800408e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004092:	429a      	cmp	r2, r3
 8004094:	f080 817f 	bcs.w	8004396 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800409e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 8086 	bne.w	80041c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1da      	bne.n	80040b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800410e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800412a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e1      	bne.n	80040fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800414a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800415e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800416c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e3      	bne.n	800413a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800418e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004190:	f023 0310 	bic.w	r3, r3, #16
 8004194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80041a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e4      	bne.n	8004180 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc ff1b 	bl	8000ff6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8fb 	bl	80043d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041da:	e0dc      	b.n	8004396 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80ce 	beq.w	800439a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80041fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80c9 	beq.w	800439a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800421c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800422a:	647b      	str	r3, [r7, #68]	; 0x44
 800422c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e4      	bne.n	8004208 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3308      	adds	r3, #8
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	623b      	str	r3, [r7, #32]
   return(result);
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004266:	633a      	str	r2, [r7, #48]	; 0x30
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800426c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e1      	bne.n	800423e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	60fb      	str	r3, [r7, #12]
   return(result);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0310 	bic.w	r3, r3, #16
 80042a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	69b9      	ldr	r1, [r7, #24]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	617b      	str	r3, [r7, #20]
   return(result);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e4      	bne.n	800428e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f880 	bl	80043d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042d0:	e063      	b.n	800439a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <HAL_UART_IRQHandler+0x584>
 80042de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fdcf 	bl	8004e98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042fa:	e051      	b.n	80043a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	d014      	beq.n	8004332 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	2b00      	cmp	r3, #0
 8004326:	d03a      	beq.n	800439e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
    }
    return;
 8004330:	e035      	b.n	800439e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_UART_IRQHandler+0x5da>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fd79 	bl	8004e42 <UART_EndTransmit_IT>
    return;
 8004350:	e026      	b.n	80043a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_UART_IRQHandler+0x5fa>
 800435e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004362:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fda8 	bl	8004ec0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004370:	e016      	b.n	80043a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_UART_IRQHandler+0x628>
 800437e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004382:	2b00      	cmp	r3, #0
 8004384:	da0c      	bge.n	80043a0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fd90 	bl	8004eac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800438c:	e008      	b.n	80043a0 <HAL_UART_IRQHandler+0x628>
      return;
 800438e:	bf00      	nop
 8004390:	e006      	b.n	80043a0 <HAL_UART_IRQHandler+0x628>
    return;
 8004392:	bf00      	nop
 8004394:	e004      	b.n	80043a0 <HAL_UART_IRQHandler+0x628>
      return;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <HAL_UART_IRQHandler+0x628>
      return;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <HAL_UART_IRQHandler+0x628>
    return;
 800439e:	bf00      	nop
  }
}
 80043a0:	37e8      	adds	r7, #232	; 0xe8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop

080043a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ec:	b08c      	sub	sp, #48	; 0x30
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	431a      	orrs	r2, r3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	431a      	orrs	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4313      	orrs	r3, r2
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4baa      	ldr	r3, [pc, #680]	; (80046c0 <UART_SetConfig+0x2d8>)
 8004418:	4013      	ands	r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004420:	430b      	orrs	r3, r1
 8004422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a9f      	ldr	r2, [pc, #636]	; (80046c4 <UART_SetConfig+0x2dc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004450:	4313      	orrs	r3, r2
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800445e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004468:	430b      	orrs	r3, r1
 800446a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	f023 010f 	bic.w	r1, r3, #15
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a90      	ldr	r2, [pc, #576]	; (80046c8 <UART_SetConfig+0x2e0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d125      	bne.n	80044d8 <UART_SetConfig+0xf0>
 800448c:	4b8f      	ldr	r3, [pc, #572]	; (80046cc <UART_SetConfig+0x2e4>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b03      	cmp	r3, #3
 8004498:	d81a      	bhi.n	80044d0 <UART_SetConfig+0xe8>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0xb8>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044b1 	.word	0x080044b1
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c9 	.word	0x080044c9
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b6:	e116      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044be:	e112      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c6:	e10e      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ce:	e10a      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d6:	e106      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a7c      	ldr	r2, [pc, #496]	; (80046d0 <UART_SetConfig+0x2e8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d138      	bne.n	8004554 <UART_SetConfig+0x16c>
 80044e2:	4b7a      	ldr	r3, [pc, #488]	; (80046cc <UART_SetConfig+0x2e4>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d82d      	bhi.n	800454c <UART_SetConfig+0x164>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0x110>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	0800454d 	.word	0x0800454d
 8004504:	0800454d 	.word	0x0800454d
 8004508:	0800453d 	.word	0x0800453d
 800450c:	0800454d 	.word	0x0800454d
 8004510:	0800454d 	.word	0x0800454d
 8004514:	0800454d 	.word	0x0800454d
 8004518:	08004535 	.word	0x08004535
 800451c:	0800454d 	.word	0x0800454d
 8004520:	0800454d 	.word	0x0800454d
 8004524:	0800454d 	.word	0x0800454d
 8004528:	08004545 	.word	0x08004545
 800452c:	2300      	movs	r3, #0
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004532:	e0d8      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453a:	e0d4      	b.n	80046e6 <UART_SetConfig+0x2fe>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004542:	e0d0      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454a:	e0cc      	b.n	80046e6 <UART_SetConfig+0x2fe>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004552:	e0c8      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5e      	ldr	r2, [pc, #376]	; (80046d4 <UART_SetConfig+0x2ec>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d125      	bne.n	80045aa <UART_SetConfig+0x1c2>
 800455e:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <UART_SetConfig+0x2e4>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004568:	2b30      	cmp	r3, #48	; 0x30
 800456a:	d016      	beq.n	800459a <UART_SetConfig+0x1b2>
 800456c:	2b30      	cmp	r3, #48	; 0x30
 800456e:	d818      	bhi.n	80045a2 <UART_SetConfig+0x1ba>
 8004570:	2b20      	cmp	r3, #32
 8004572:	d00a      	beq.n	800458a <UART_SetConfig+0x1a2>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d814      	bhi.n	80045a2 <UART_SetConfig+0x1ba>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <UART_SetConfig+0x19a>
 800457c:	2b10      	cmp	r3, #16
 800457e:	d008      	beq.n	8004592 <UART_SetConfig+0x1aa>
 8004580:	e00f      	b.n	80045a2 <UART_SetConfig+0x1ba>
 8004582:	2300      	movs	r3, #0
 8004584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004588:	e0ad      	b.n	80046e6 <UART_SetConfig+0x2fe>
 800458a:	2302      	movs	r3, #2
 800458c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004590:	e0a9      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004592:	2304      	movs	r3, #4
 8004594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004598:	e0a5      	b.n	80046e6 <UART_SetConfig+0x2fe>
 800459a:	2308      	movs	r3, #8
 800459c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a0:	e0a1      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80045a2:	2310      	movs	r3, #16
 80045a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a8:	e09d      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4a      	ldr	r2, [pc, #296]	; (80046d8 <UART_SetConfig+0x2f0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d125      	bne.n	8004600 <UART_SetConfig+0x218>
 80045b4:	4b45      	ldr	r3, [pc, #276]	; (80046cc <UART_SetConfig+0x2e4>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045be:	2bc0      	cmp	r3, #192	; 0xc0
 80045c0:	d016      	beq.n	80045f0 <UART_SetConfig+0x208>
 80045c2:	2bc0      	cmp	r3, #192	; 0xc0
 80045c4:	d818      	bhi.n	80045f8 <UART_SetConfig+0x210>
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d00a      	beq.n	80045e0 <UART_SetConfig+0x1f8>
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d814      	bhi.n	80045f8 <UART_SetConfig+0x210>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <UART_SetConfig+0x1f0>
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d008      	beq.n	80045e8 <UART_SetConfig+0x200>
 80045d6:	e00f      	b.n	80045f8 <UART_SetConfig+0x210>
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045de:	e082      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80045e0:	2302      	movs	r3, #2
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e6:	e07e      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80045e8:	2304      	movs	r3, #4
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ee:	e07a      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80045f0:	2308      	movs	r3, #8
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f6:	e076      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045fe:	e072      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a35      	ldr	r2, [pc, #212]	; (80046dc <UART_SetConfig+0x2f4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d12a      	bne.n	8004660 <UART_SetConfig+0x278>
 800460a:	4b30      	ldr	r3, [pc, #192]	; (80046cc <UART_SetConfig+0x2e4>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004618:	d01a      	beq.n	8004650 <UART_SetConfig+0x268>
 800461a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800461e:	d81b      	bhi.n	8004658 <UART_SetConfig+0x270>
 8004620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004624:	d00c      	beq.n	8004640 <UART_SetConfig+0x258>
 8004626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800462a:	d815      	bhi.n	8004658 <UART_SetConfig+0x270>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <UART_SetConfig+0x250>
 8004630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004634:	d008      	beq.n	8004648 <UART_SetConfig+0x260>
 8004636:	e00f      	b.n	8004658 <UART_SetConfig+0x270>
 8004638:	2300      	movs	r3, #0
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463e:	e052      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004640:	2302      	movs	r3, #2
 8004642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004646:	e04e      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004648:	2304      	movs	r3, #4
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800464e:	e04a      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004650:	2308      	movs	r3, #8
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004656:	e046      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004658:	2310      	movs	r3, #16
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465e:	e042      	b.n	80046e6 <UART_SetConfig+0x2fe>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <UART_SetConfig+0x2dc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d13a      	bne.n	80046e0 <UART_SetConfig+0x2f8>
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <UART_SetConfig+0x2e4>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004678:	d01a      	beq.n	80046b0 <UART_SetConfig+0x2c8>
 800467a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800467e:	d81b      	bhi.n	80046b8 <UART_SetConfig+0x2d0>
 8004680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004684:	d00c      	beq.n	80046a0 <UART_SetConfig+0x2b8>
 8004686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468a:	d815      	bhi.n	80046b8 <UART_SetConfig+0x2d0>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <UART_SetConfig+0x2b0>
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004694:	d008      	beq.n	80046a8 <UART_SetConfig+0x2c0>
 8004696:	e00f      	b.n	80046b8 <UART_SetConfig+0x2d0>
 8004698:	2300      	movs	r3, #0
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469e:	e022      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80046a0:	2302      	movs	r3, #2
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a6:	e01e      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80046a8:	2304      	movs	r3, #4
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ae:	e01a      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80046b0:	2308      	movs	r3, #8
 80046b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b6:	e016      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80046b8:	2310      	movs	r3, #16
 80046ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046be:	e012      	b.n	80046e6 <UART_SetConfig+0x2fe>
 80046c0:	cfff69f3 	.word	0xcfff69f3
 80046c4:	40008000 	.word	0x40008000
 80046c8:	40013800 	.word	0x40013800
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40004400 	.word	0x40004400
 80046d4:	40004800 	.word	0x40004800
 80046d8:	40004c00 	.word	0x40004c00
 80046dc:	40005000 	.word	0x40005000
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4aae      	ldr	r2, [pc, #696]	; (80049a4 <UART_SetConfig+0x5bc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	f040 8097 	bne.w	8004820 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d823      	bhi.n	8004742 <UART_SetConfig+0x35a>
 80046fa:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <UART_SetConfig+0x318>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	08004725 	.word	0x08004725
 8004704:	08004743 	.word	0x08004743
 8004708:	0800472d 	.word	0x0800472d
 800470c:	08004743 	.word	0x08004743
 8004710:	08004733 	.word	0x08004733
 8004714:	08004743 	.word	0x08004743
 8004718:	08004743 	.word	0x08004743
 800471c:	08004743 	.word	0x08004743
 8004720:	0800473b 	.word	0x0800473b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7fd fc28 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8004728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800472a:	e010      	b.n	800474e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800472c:	4b9e      	ldr	r3, [pc, #632]	; (80049a8 <UART_SetConfig+0x5c0>)
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004730:	e00d      	b.n	800474e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004732:	f7fd fbb3 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8004736:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004738:	e009      	b.n	800474e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004740:	e005      	b.n	800474e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800474c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8130 	beq.w	80049b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	4a94      	ldr	r2, [pc, #592]	; (80049ac <UART_SetConfig+0x5c4>)
 800475c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004760:	461a      	mov	r2, r3
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	fbb3 f3f2 	udiv	r3, r3, r2
 8004768:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	429a      	cmp	r2, r3
 8004778:	d305      	bcc.n	8004786 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	429a      	cmp	r2, r3
 8004784:	d903      	bls.n	800478e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800478c:	e113      	b.n	80049b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2200      	movs	r2, #0
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	60fa      	str	r2, [r7, #12]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	4a84      	ldr	r2, [pc, #528]	; (80049ac <UART_SetConfig+0x5c4>)
 800479c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2200      	movs	r2, #0
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047b0:	f7fb fd36 	bl	8000220 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	020b      	lsls	r3, r1, #8
 80047c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047ca:	0202      	lsls	r2, r0, #8
 80047cc:	6979      	ldr	r1, [r7, #20]
 80047ce:	6849      	ldr	r1, [r1, #4]
 80047d0:	0849      	lsrs	r1, r1, #1
 80047d2:	2000      	movs	r0, #0
 80047d4:	460c      	mov	r4, r1
 80047d6:	4605      	mov	r5, r0
 80047d8:	eb12 0804 	adds.w	r8, r2, r4
 80047dc:	eb43 0905 	adc.w	r9, r3, r5
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	469a      	mov	sl, r3
 80047e8:	4693      	mov	fp, r2
 80047ea:	4652      	mov	r2, sl
 80047ec:	465b      	mov	r3, fp
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f7fb fd15 	bl	8000220 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4613      	mov	r3, r2
 80047fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004804:	d308      	bcc.n	8004818 <UART_SetConfig+0x430>
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480c:	d204      	bcs.n	8004818 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a3a      	ldr	r2, [r7, #32]
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	e0ce      	b.n	80049b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800481e:	e0ca      	b.n	80049b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004828:	d166      	bne.n	80048f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800482a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800482e:	2b08      	cmp	r3, #8
 8004830:	d827      	bhi.n	8004882 <UART_SetConfig+0x49a>
 8004832:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0x450>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	0800485d 	.word	0x0800485d
 800483c:	08004865 	.word	0x08004865
 8004840:	0800486d 	.word	0x0800486d
 8004844:	08004883 	.word	0x08004883
 8004848:	08004873 	.word	0x08004873
 800484c:	08004883 	.word	0x08004883
 8004850:	08004883 	.word	0x08004883
 8004854:	08004883 	.word	0x08004883
 8004858:	0800487b 	.word	0x0800487b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7fd fb8c 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8004860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004862:	e014      	b.n	800488e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004864:	f7fd fb9e 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 8004868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800486a:	e010      	b.n	800488e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800486c:	4b4e      	ldr	r3, [pc, #312]	; (80049a8 <UART_SetConfig+0x5c0>)
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004870:	e00d      	b.n	800488e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004872:	f7fd fb13 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8004876:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004878:	e009      	b.n	800488e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004880:	e005      	b.n	800488e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800488c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8090 	beq.w	80049b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	4a44      	ldr	r2, [pc, #272]	; (80049ac <UART_SetConfig+0x5c4>)
 800489c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a0:	461a      	mov	r2, r3
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048a8:	005a      	lsls	r2, r3, #1
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	441a      	add	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	2b0f      	cmp	r3, #15
 80048c0:	d916      	bls.n	80048f0 <UART_SetConfig+0x508>
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d212      	bcs.n	80048f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f023 030f 	bic.w	r3, r3, #15
 80048d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	b29a      	uxth	r2, r3
 80048e0:	8bfb      	ldrh	r3, [r7, #30]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	8bfa      	ldrh	r2, [r7, #30]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	e062      	b.n	80049b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048f6:	e05e      	b.n	80049b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d828      	bhi.n	8004952 <UART_SetConfig+0x56a>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x520>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004935 	.word	0x08004935
 8004910:	0800493d 	.word	0x0800493d
 8004914:	08004953 	.word	0x08004953
 8004918:	08004943 	.word	0x08004943
 800491c:	08004953 	.word	0x08004953
 8004920:	08004953 	.word	0x08004953
 8004924:	08004953 	.word	0x08004953
 8004928:	0800494b 	.word	0x0800494b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fd fb24 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8004930:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004932:	e014      	b.n	800495e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7fd fb36 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 8004938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800493a:	e010      	b.n	800495e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800493c:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <UART_SetConfig+0x5c0>)
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004940:	e00d      	b.n	800495e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004942:	f7fd faab 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004948:	e009      	b.n	800495e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004950:	e005      	b.n	800495e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800495c:	bf00      	nop
    }

    if (pclk != 0U)
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d028      	beq.n	80049b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	4a10      	ldr	r2, [pc, #64]	; (80049ac <UART_SetConfig+0x5c4>)
 800496a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800496e:	461a      	mov	r2, r3
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	fbb3 f2f2 	udiv	r2, r3, r2
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	441a      	add	r2, r3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d910      	bls.n	80049b0 <UART_SetConfig+0x5c8>
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d20c      	bcs.n	80049b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	b29a      	uxth	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60da      	str	r2, [r3, #12]
 80049a0:	e009      	b.n	80049b6 <UART_SetConfig+0x5ce>
 80049a2:	bf00      	nop
 80049a4:	40008000 	.word	0x40008000
 80049a8:	00f42400 	.word	0x00f42400
 80049ac:	08007f0c 	.word	0x08007f0c
      }
      else
      {
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2200      	movs	r2, #0
 80049d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80049d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3730      	adds	r7, #48	; 0x30
 80049da:	46bd      	mov	sp, r7
 80049dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01a      	beq.n	8004af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ade:	d10a      	bne.n	8004af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
  }
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b34:	f7fc f944 	bl	8000dc0 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d10e      	bne.n	8004b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f82f 	bl	8004bba <UART_WaitOnFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e025      	b.n	8004bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d10e      	bne.n	8004b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f819 	bl	8004bba <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e00f      	b.n	8004bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b09c      	sub	sp, #112	; 0x70
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bca:	e0a9      	b.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	f000 80a5 	beq.w	8004d20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd6:	f7fc f8f3 	bl	8000dc0 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <UART_WaitOnFlagUntilTimeout+0x32>
 8004be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d140      	bne.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c00:	667b      	str	r3, [r7, #100]	; 0x64
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c0c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e6      	bne.n	8004bec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	663b      	str	r3, [r7, #96]	; 0x60
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e069      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d051      	beq.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8a:	d149      	bne.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e6      	bne.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ce8:	623a      	str	r2, [r7, #32]
 8004cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	69f9      	ldr	r1, [r7, #28]
 8004cee:	6a3a      	ldr	r2, [r7, #32]
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e010      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	f43f af46 	beq.w	8004bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3770      	adds	r7, #112	; 0x70
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b095      	sub	sp, #84	; 0x54
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d70:	643b      	str	r3, [r7, #64]	; 0x40
 8004d72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3308      	adds	r3, #8
 8004da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e3      	bne.n	8004d84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d118      	bne.n	8004df6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 0310 	bic.w	r3, r3, #16
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	613b      	str	r3, [r7, #16]
   return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e6      	bne.n	8004dc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004e0a:	bf00      	nop
 8004e0c:	3754      	adds	r7, #84	; 0x54
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fac1 	bl	80043bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b088      	sub	sp, #32
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6979      	ldr	r1, [r7, #20]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	613b      	str	r3, [r7, #16]
   return(result);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e6      	bne.n	8004e4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff fa8c 	bl	80043a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e90:	bf00      	nop
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_UARTEx_DisableFifoMode+0x16>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e027      	b.n	8004f3a <HAL_UARTEx_DisableFifoMode+0x66>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2224      	movs	r2, #36	; 0x24
 8004ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e02d      	b.n	8004fba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2224      	movs	r2, #36	; 0x24
 8004f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f850 	bl	8005040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e02d      	b.n	8005036 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	; 0x24
 8004fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f812 	bl	8005040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005060:	e031      	b.n	80050c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005062:	2308      	movs	r3, #8
 8005064:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005066:	2308      	movs	r3, #8
 8005068:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	0e5b      	lsrs	r3, r3, #25
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	0f5b      	lsrs	r3, r3, #29
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800508a:	7bbb      	ldrb	r3, [r7, #14]
 800508c:	7b3a      	ldrb	r2, [r7, #12]
 800508e:	4911      	ldr	r1, [pc, #68]	; (80050d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005090:	5c8a      	ldrb	r2, [r1, r2]
 8005092:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005096:	7b3a      	ldrb	r2, [r7, #12]
 8005098:	490f      	ldr	r1, [pc, #60]	; (80050d8 <UARTEx_SetNbDataToProcess+0x98>)
 800509a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800509c:	fb93 f3f2 	sdiv	r3, r3, r2
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	7b7a      	ldrb	r2, [r7, #13]
 80050ac:	4909      	ldr	r1, [pc, #36]	; (80050d4 <UARTEx_SetNbDataToProcess+0x94>)
 80050ae:	5c8a      	ldrb	r2, [r1, r2]
 80050b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050b4:	7b7a      	ldrb	r2, [r7, #13]
 80050b6:	4908      	ldr	r1, [pc, #32]	; (80050d8 <UARTEx_SetNbDataToProcess+0x98>)
 80050b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80050be:	b29a      	uxth	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	08007f24 	.word	0x08007f24
 80050d8:	08007f2c 	.word	0x08007f2c

080050dc <__NVIC_SetPriority>:
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	db0a      	blt.n	8005106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	490c      	ldr	r1, [pc, #48]	; (8005128 <__NVIC_SetPriority+0x4c>)
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	0112      	lsls	r2, r2, #4
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	440b      	add	r3, r1
 8005100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005104:	e00a      	b.n	800511c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	4908      	ldr	r1, [pc, #32]	; (800512c <__NVIC_SetPriority+0x50>)
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	3b04      	subs	r3, #4
 8005114:	0112      	lsls	r2, r2, #4
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	440b      	add	r3, r1
 800511a:	761a      	strb	r2, [r3, #24]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	e000e100 	.word	0xe000e100
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005134:	2100      	movs	r1, #0
 8005136:	f06f 0004 	mvn.w	r0, #4
 800513a:	f7ff ffcf 	bl	80050dc <__NVIC_SetPriority>
#endif
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800514a:	f3ef 8305 	mrs	r3, IPSR
 800514e:	603b      	str	r3, [r7, #0]
  return(result);
 8005150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005156:	f06f 0305 	mvn.w	r3, #5
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e00c      	b.n	8005178 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <osKernelInitialize+0x44>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d105      	bne.n	8005172 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <osKernelInitialize+0x44>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800516c:	2300      	movs	r3, #0
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	e002      	b.n	8005178 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
 8005176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005178:	687b      	ldr	r3, [r7, #4]
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	200001c8 	.word	0x200001c8

0800518c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005192:	f3ef 8305 	mrs	r3, IPSR
 8005196:	603b      	str	r3, [r7, #0]
  return(result);
 8005198:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800519e:	f06f 0305 	mvn.w	r3, #5
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	e010      	b.n	80051c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <osKernelStart+0x48>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d109      	bne.n	80051c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051ae:	f7ff ffbf 	bl	8005130 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <osKernelStart+0x48>)
 80051b4:	2202      	movs	r2, #2
 80051b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051b8:	f001 f87c 	bl	80062b4 <vTaskStartScheduler>
      stat = osOK;
 80051bc:	2300      	movs	r3, #0
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	e002      	b.n	80051c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051c2:	f04f 33ff 	mov.w	r3, #4294967295
 80051c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051c8:	687b      	ldr	r3, [r7, #4]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200001c8 	.word	0x200001c8

080051d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08e      	sub	sp, #56	; 0x38
 80051dc:	af04      	add	r7, sp, #16
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e8:	f3ef 8305 	mrs	r3, IPSR
 80051ec:	617b      	str	r3, [r7, #20]
  return(result);
 80051ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d17e      	bne.n	80052f2 <osThreadNew+0x11a>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d07b      	beq.n	80052f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051fe:	2318      	movs	r3, #24
 8005200:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d045      	beq.n	800529e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <osThreadNew+0x48>
        name = attr->name;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <osThreadNew+0x6e>
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b38      	cmp	r3, #56	; 0x38
 8005238:	d805      	bhi.n	8005246 <osThreadNew+0x6e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <osThreadNew+0x72>
        return (NULL);
 8005246:	2300      	movs	r3, #0
 8005248:	e054      	b.n	80052f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00e      	beq.n	8005280 <osThreadNew+0xa8>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	2bbb      	cmp	r3, #187	; 0xbb
 8005268:	d90a      	bls.n	8005280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800526e:	2b00      	cmp	r3, #0
 8005270:	d006      	beq.n	8005280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <osThreadNew+0xa8>
        mem = 1;
 800527a:	2301      	movs	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	e010      	b.n	80052a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <osThreadNew+0xca>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d108      	bne.n	80052a2 <osThreadNew+0xca>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <osThreadNew+0xca>
          mem = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	e001      	b.n	80052a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d110      	bne.n	80052ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052b0:	9202      	str	r2, [sp, #8]
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	6a3a      	ldr	r2, [r7, #32]
 80052bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fe0c 	bl	8005edc <xTaskCreateStatic>
 80052c4:	4603      	mov	r3, r0
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	e013      	b.n	80052f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d110      	bne.n	80052f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	f107 0310 	add.w	r3, r7, #16
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fe57 	bl	8005f96 <xTaskCreate>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d001      	beq.n	80052f2 <osThreadNew+0x11a>
            hTask = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052f2:	693b      	ldr	r3, [r7, #16]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3728      	adds	r7, #40	; 0x28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005304:	f3ef 8305 	mrs	r3, IPSR
 8005308:	60bb      	str	r3, [r7, #8]
  return(result);
 800530a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <osDelay+0x1c>
    stat = osErrorISR;
 8005310:	f06f 0305 	mvn.w	r3, #5
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e007      	b.n	8005328 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 ff92 	bl	800624c <vTaskDelay>
    }
  }

  return (stat);
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a07      	ldr	r2, [pc, #28]	; (8005360 <vApplicationGetIdleTaskMemory+0x2c>)
 8005344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a06      	ldr	r2, [pc, #24]	; (8005364 <vApplicationGetIdleTaskMemory+0x30>)
 800534a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	601a      	str	r2, [r3, #0]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	200001cc 	.word	0x200001cc
 8005364:	20000288 	.word	0x20000288

08005368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a07      	ldr	r2, [pc, #28]	; (8005394 <vApplicationGetTimerTaskMemory+0x2c>)
 8005378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4a06      	ldr	r2, [pc, #24]	; (8005398 <vApplicationGetTimerTaskMemory+0x30>)
 800537e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005386:	601a      	str	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20000488 	.word	0x20000488
 8005398:	20000544 	.word	0x20000544

0800539c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f103 0208 	add.w	r2, r3, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f04f 32ff 	mov.w	r2, #4294967295
 80053b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f103 0208 	add.w	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f103 0208 	add.w	r2, r3, #8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	601a      	str	r2, [r3, #0]
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d103      	bne.n	800545e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e00c      	b.n	8005478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3308      	adds	r3, #8
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e002      	b.n	800546c <vListInsert+0x2e>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	429a      	cmp	r2, r3
 8005476:	d2f6      	bcs.n	8005466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6892      	ldr	r2, [r2, #8]
 80054c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6852      	ldr	r2, [r2, #4]
 80054d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d103      	bne.n	80054e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	1e5a      	subs	r2, r3, #1
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800552e:	f002 f879 	bl	8007624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800553e:	fb01 f303 	mul.w	r3, r1, r3
 8005542:	441a      	add	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555e:	3b01      	subs	r3, #1
 8005560:	68f9      	ldr	r1, [r7, #12]
 8005562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	441a      	add	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	22ff      	movs	r2, #255	; 0xff
 8005572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d114      	bne.n	80055ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01a      	beq.n	80055c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3310      	adds	r3, #16
 8005590:	4618      	mov	r0, r3
 8005592:	f001 f929 	bl	80067e8 <xTaskRemoveFromEventList>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d012      	beq.n	80055c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800559c:	4b0c      	ldr	r3, [pc, #48]	; (80055d0 <xQueueGenericReset+0xcc>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	e009      	b.n	80055c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3310      	adds	r3, #16
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff fef2 	bl	800539c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3324      	adds	r3, #36	; 0x24
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff feed 	bl	800539c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055c2:	f002 f85f 	bl	8007684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055c6:	2301      	movs	r3, #1
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08e      	sub	sp, #56	; 0x38
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <xQueueGenericCreateStatic+0x52>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <xQueueGenericCreateStatic+0x56>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <xQueueGenericCreateStatic+0x58>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	623b      	str	r3, [r7, #32]
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <xQueueGenericCreateStatic+0x7e>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <xQueueGenericCreateStatic+0x82>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <xQueueGenericCreateStatic+0x84>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	61fb      	str	r3, [r7, #28]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005672:	2350      	movs	r3, #80	; 0x50
 8005674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b50      	cmp	r3, #80	; 0x50
 800567a:	d00a      	beq.n	8005692 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	61bb      	str	r3, [r7, #24]
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005692:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	4613      	mov	r3, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f805 	bl	80056c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056bc:	4618      	mov	r0, r3
 80056be:	3730      	adds	r7, #48	; 0x30
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d103      	bne.n	80056e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e002      	b.n	80056e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056f2:	2101      	movs	r1, #1
 80056f4:	69b8      	ldr	r0, [r7, #24]
 80056f6:	f7ff ff05 	bl	8005504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08e      	sub	sp, #56	; 0x38
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800571a:	2300      	movs	r3, #0
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xQueueGenericSend+0x32>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d103      	bne.n	800574c <xQueueGenericSend+0x40>
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <xQueueGenericSend+0x44>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <xQueueGenericSend+0x46>
 8005750:	2300      	movs	r3, #0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <xQueueGenericSend+0x60>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005768:	bf00      	nop
 800576a:	e7fe      	b.n	800576a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d103      	bne.n	800577a <xQueueGenericSend+0x6e>
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <xQueueGenericSend+0x72>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <xQueueGenericSend+0x74>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <xQueueGenericSend+0x8e>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	623b      	str	r3, [r7, #32]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800579a:	f001 f9e7 	bl	8006b6c <xTaskGetSchedulerState>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <xQueueGenericSend+0x9e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <xQueueGenericSend+0xa2>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <xQueueGenericSend+0xa4>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xQueueGenericSend+0xbe>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	61fb      	str	r3, [r7, #28]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057ca:	f001 ff2b 	bl	8007624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <xQueueGenericSend+0xd4>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d129      	bne.n	8005834 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e6:	f000 fa0b 	bl	8005c00 <prvCopyDataToQueue>
 80057ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d010      	beq.n	8005816 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	3324      	adds	r3, #36	; 0x24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fff5 	bl	80067e8 <xTaskRemoveFromEventList>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d013      	beq.n	800582c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005804:	4b3f      	ldr	r3, [pc, #252]	; (8005904 <xQueueGenericSend+0x1f8>)
 8005806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	e00a      	b.n	800582c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800581c:	4b39      	ldr	r3, [pc, #228]	; (8005904 <xQueueGenericSend+0x1f8>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800582c:	f001 ff2a 	bl	8007684 <vPortExitCritical>
				return pdPASS;
 8005830:	2301      	movs	r3, #1
 8005832:	e063      	b.n	80058fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800583a:	f001 ff23 	bl	8007684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800583e:	2300      	movs	r3, #0
 8005840:	e05c      	b.n	80058fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005848:	f107 0314 	add.w	r3, r7, #20
 800584c:	4618      	mov	r0, r3
 800584e:	f001 f82f 	bl	80068b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005856:	f001 ff15 	bl	8007684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800585a:	f000 fd9b 	bl	8006394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800585e:	f001 fee1 	bl	8007624 <vPortEnterCritical>
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005868:	b25b      	sxtb	r3, r3
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d103      	bne.n	8005878 <xQueueGenericSend+0x16c>
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d103      	bne.n	800588e <xQueueGenericSend+0x182>
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800588e:	f001 fef9 	bl	8007684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005892:	1d3a      	adds	r2, r7, #4
 8005894:	f107 0314 	add.w	r3, r7, #20
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f001 f81e 	bl	80068dc <xTaskCheckForTimeOut>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d124      	bne.n	80058f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058a8:	f000 faa2 	bl	8005df0 <prvIsQueueFull>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d018      	beq.n	80058e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	3310      	adds	r3, #16
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 ff44 	bl	8006748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058c2:	f000 fa2d 	bl	8005d20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058c6:	f000 fd73 	bl	80063b0 <xTaskResumeAll>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f af7c 	bne.w	80057ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058d2:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <xQueueGenericSend+0x1f8>)
 80058d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	e772      	b.n	80057ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058e6:	f000 fa1b 	bl	8005d20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ea:	f000 fd61 	bl	80063b0 <xTaskResumeAll>
 80058ee:	e76c      	b.n	80057ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f2:	f000 fa15 	bl	8005d20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f6:	f000 fd5b 	bl	80063b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3738      	adds	r7, #56	; 0x38
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b090      	sub	sp, #64	; 0x40
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <xQueueGenericSendFromISR+0x3c>
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <xQueueGenericSendFromISR+0x40>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <xQueueGenericSendFromISR+0x42>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d103      	bne.n	8005972 <xQueueGenericSendFromISR+0x6a>
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <xQueueGenericSendFromISR+0x6e>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <xQueueGenericSendFromISR+0x70>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	623b      	str	r3, [r7, #32]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005992:	f001 ff29 	bl	80077e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005996:	f3ef 8211 	mrs	r2, BASEPRI
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	61fa      	str	r2, [r7, #28]
 80059ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <xQueueGenericSendFromISR+0xbc>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d12f      	bne.n	8005a24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059da:	f000 f911 	bl	8005c00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d112      	bne.n	8005a0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d016      	beq.n	8005a1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	3324      	adds	r3, #36	; 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fef7 	bl	80067e8 <xTaskRemoveFromEventList>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00e      	beq.n	8005a1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	e007      	b.n	8005a1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a12:	3301      	adds	r3, #1
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	b25a      	sxtb	r2, r3
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a22:	e001      	b.n	8005a28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3740      	adds	r7, #64	; 0x40
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	; 0x30
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <xQueueReceive+0x30>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	623b      	str	r3, [r7, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <xQueueReceive+0x3e>
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <xQueueReceive+0x42>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <xQueueReceive+0x44>
 8005a82:	2300      	movs	r3, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xQueueReceive+0x5e>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	61fb      	str	r3, [r7, #28]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a9e:	f001 f865 	bl	8006b6c <xTaskGetSchedulerState>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <xQueueReceive+0x6e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <xQueueReceive+0x72>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <xQueueReceive+0x74>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <xQueueReceive+0x8e>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	61bb      	str	r3, [r7, #24]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ace:	f001 fda9 	bl	8007624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01f      	beq.n	8005b1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae2:	f000 f8f7 	bl	8005cd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	1e5a      	subs	r2, r3, #1
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00f      	beq.n	8005b16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	3310      	adds	r3, #16
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fe74 	bl	80067e8 <xTaskRemoveFromEventList>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b06:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <xQueueReceive+0x1bc>)
 8005b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b16:	f001 fdb5 	bl	8007684 <vPortExitCritical>
				return pdPASS;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e069      	b.n	8005bf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b24:	f001 fdae 	bl	8007684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e062      	b.n	8005bf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b32:	f107 0310 	add.w	r3, r7, #16
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 feba 	bl	80068b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b40:	f001 fda0 	bl	8007684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b44:	f000 fc26 	bl	8006394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b48:	f001 fd6c 	bl	8007624 <vPortEnterCritical>
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b52:	b25b      	sxtb	r3, r3
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b58:	d103      	bne.n	8005b62 <xQueueReceive+0x122>
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b68:	b25b      	sxtb	r3, r3
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d103      	bne.n	8005b78 <xQueueReceive+0x138>
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b78:	f001 fd84 	bl	8007684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b7c:	1d3a      	adds	r2, r7, #4
 8005b7e:	f107 0310 	add.w	r3, r7, #16
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fea9 	bl	80068dc <xTaskCheckForTimeOut>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d123      	bne.n	8005bd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b92:	f000 f917 	bl	8005dc4 <prvIsQueueEmpty>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d017      	beq.n	8005bcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	3324      	adds	r3, #36	; 0x24
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fdcf 	bl	8006748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bac:	f000 f8b8 	bl	8005d20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bb0:	f000 fbfe 	bl	80063b0 <xTaskResumeAll>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d189      	bne.n	8005ace <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <xQueueReceive+0x1bc>)
 8005bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	e780      	b.n	8005ace <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bce:	f000 f8a7 	bl	8005d20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bd2:	f000 fbed 	bl	80063b0 <xTaskResumeAll>
 8005bd6:	e77a      	b.n	8005ace <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bda:	f000 f8a1 	bl	8005d20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bde:	f000 fbe7 	bl	80063b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be4:	f000 f8ee 	bl	8005dc4 <prvIsQueueEmpty>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f43f af6f 	beq.w	8005ace <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3730      	adds	r7, #48	; 0x30
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10d      	bne.n	8005c3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d14d      	bne.n	8005cc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 ffbc 	bl	8006ba8 <xTaskPriorityDisinherit>
 8005c30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	609a      	str	r2, [r3, #8]
 8005c38:	e043      	b.n	8005cc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d119      	bne.n	8005c74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6858      	ldr	r0, [r3, #4]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	f002 f81c 	bl	8007c88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	441a      	add	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d32b      	bcc.n	8005cc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	e026      	b.n	8005cc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68d8      	ldr	r0, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	f002 f802 	bl	8007c88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	425b      	negs	r3, r3
 8005c8e:	441a      	add	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d207      	bcs.n	8005cb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	425b      	negs	r3, r3
 8005caa:	441a      	add	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d105      	bne.n	8005cc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cca:	697b      	ldr	r3, [r7, #20]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d018      	beq.n	8005d18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	441a      	add	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d303      	bcc.n	8005d08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68d9      	ldr	r1, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	461a      	mov	r2, r3
 8005d12:	6838      	ldr	r0, [r7, #0]
 8005d14:	f001 ffb8 	bl	8007c88 <memcpy>
	}
}
 8005d18:	bf00      	nop
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d28:	f001 fc7c 	bl	8007624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d34:	e011      	b.n	8005d5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d012      	beq.n	8005d64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3324      	adds	r3, #36	; 0x24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fd50 	bl	80067e8 <xTaskRemoveFromEventList>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d4e:	f000 fe27 	bl	80069a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dce9      	bgt.n	8005d36 <prvUnlockQueue+0x16>
 8005d62:	e000      	b.n	8005d66 <prvUnlockQueue+0x46>
					break;
 8005d64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	22ff      	movs	r2, #255	; 0xff
 8005d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d6e:	f001 fc89 	bl	8007684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d72:	f001 fc57 	bl	8007624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d7e:	e011      	b.n	8005da4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d012      	beq.n	8005dae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fd2b 	bl	80067e8 <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d98:	f000 fe02 	bl	80069a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	dce9      	bgt.n	8005d80 <prvUnlockQueue+0x60>
 8005dac:	e000      	b.n	8005db0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	22ff      	movs	r2, #255	; 0xff
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005db8:	f001 fc64 	bl	8007684 <vPortExitCritical>
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dcc:	f001 fc2a 	bl	8007624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e001      	b.n	8005de2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005de2:	f001 fc4f 	bl	8007684 <vPortExitCritical>

	return xReturn;
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005df8:	f001 fc14 	bl	8007624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d102      	bne.n	8005e0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e001      	b.n	8005e12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e12:	f001 fc37 	bl	8007684 <vPortExitCritical>

	return xReturn;
 8005e16:	68fb      	ldr	r3, [r7, #12]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	e014      	b.n	8005e5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e30:	4a0f      	ldr	r2, [pc, #60]	; (8005e70 <vQueueAddToRegistry+0x50>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e3c:	490c      	ldr	r1, [pc, #48]	; (8005e70 <vQueueAddToRegistry+0x50>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <vQueueAddToRegistry+0x50>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e52:	e006      	b.n	8005e62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b07      	cmp	r3, #7
 8005e5e:	d9e7      	bls.n	8005e30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000944 	.word	0x20000944

08005e74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e84:	f001 fbce 	bl	8007624 <vPortEnterCritical>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d103      	bne.n	8005e9e <vQueueWaitForMessageRestricted+0x2a>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea4:	b25b      	sxtb	r3, r3
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d103      	bne.n	8005eb4 <vQueueWaitForMessageRestricted+0x40>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eb4:	f001 fbe6 	bl	8007684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3324      	adds	r3, #36	; 0x24
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fc61 	bl	8006790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ece:	6978      	ldr	r0, [r7, #20]
 8005ed0:	f7ff ff26 	bl	8005d20 <prvUnlockQueue>
	}
 8005ed4:	bf00      	nop
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af04      	add	r7, sp, #16
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	623b      	str	r3, [r7, #32]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61fb      	str	r3, [r7, #28]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f22:	23bc      	movs	r3, #188	; 0xbc
 8005f24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2bbc      	cmp	r3, #188	; 0xbc
 8005f2a:	d00a      	beq.n	8005f42 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61bb      	str	r3, [r7, #24]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01e      	beq.n	8005f88 <xTaskCreateStatic+0xac>
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f62:	2300      	movs	r3, #0
 8005f64:	9303      	str	r3, [sp, #12]
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	9302      	str	r3, [sp, #8]
 8005f6a:	f107 0314 	add.w	r3, r7, #20
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f850 	bl	8006020 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f82:	f000 f8f3 	bl	800616c <prvAddNewTaskToReadyList>
 8005f86:	e001      	b.n	8005f8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f8c:	697b      	ldr	r3, [r7, #20]
	}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3728      	adds	r7, #40	; 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b08c      	sub	sp, #48	; 0x30
 8005f9a:	af04      	add	r7, sp, #16
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 fc5c 	bl	8007868 <pvPortMalloc>
 8005fb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00e      	beq.n	8005fd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fb8:	20bc      	movs	r0, #188	; 0xbc
 8005fba:	f001 fc55 	bl	8007868 <pvPortMalloc>
 8005fbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
 8005fcc:	e005      	b.n	8005fda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fce:	6978      	ldr	r0, [r7, #20]
 8005fd0:	f001 fd16 	bl	8007a00 <vPortFree>
 8005fd4:	e001      	b.n	8005fda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d017      	beq.n	8006010 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fe8:	88fa      	ldrh	r2, [r7, #6]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	9302      	str	r3, [sp, #8]
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f80e 	bl	8006020 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006004:	69f8      	ldr	r0, [r7, #28]
 8006006:	f000 f8b1 	bl	800616c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800600a:	2301      	movs	r3, #1
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e002      	b.n	8006016 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006010:	f04f 33ff 	mov.w	r3, #4294967295
 8006014:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006016:	69bb      	ldr	r3, [r7, #24]
	}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	461a      	mov	r2, r3
 8006038:	21a5      	movs	r1, #165	; 0xa5
 800603a:	f001 fe33 	bl	8007ca4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006048:	3b01      	subs	r3, #1
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f023 0307 	bic.w	r3, r3, #7
 8006056:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	617b      	str	r3, [r7, #20]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01f      	beq.n	80060be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	e012      	b.n	80060aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	7819      	ldrb	r1, [r3, #0]
 800608c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	3334      	adds	r3, #52	; 0x34
 8006094:	460a      	mov	r2, r1
 8006096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d006      	beq.n	80060b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	3301      	adds	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b0f      	cmp	r3, #15
 80060ae:	d9e9      	bls.n	8006084 <prvInitialiseNewTask+0x64>
 80060b0:	e000      	b.n	80060b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80060b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060bc:	e003      	b.n	80060c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b37      	cmp	r3, #55	; 0x37
 80060ca:	d901      	bls.n	80060d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060cc:	2337      	movs	r3, #55	; 0x37
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	2200      	movs	r2, #0
 80060e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	3304      	adds	r3, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff f978 	bl	80053dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	3318      	adds	r3, #24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff f973 	bl	80053dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	2200      	movs	r2, #0
 8006118:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	3354      	adds	r3, #84	; 0x54
 8006120:	2260      	movs	r2, #96	; 0x60
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fdbd 	bl	8007ca4 <memset>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <prvInitialiseNewTask+0x140>)
 800612e:	659a      	str	r2, [r3, #88]	; 0x58
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <prvInitialiseNewTask+0x144>)
 8006134:	65da      	str	r2, [r3, #92]	; 0x5c
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <prvInitialiseNewTask+0x148>)
 800613a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	68f9      	ldr	r1, [r7, #12]
 8006140:	69b8      	ldr	r0, [r7, #24]
 8006142:	f001 f941 	bl	80073c8 <pxPortInitialiseStack>
 8006146:	4602      	mov	r2, r0
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006156:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006158:	bf00      	nop
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	08007f54 	.word	0x08007f54
 8006164:	08007f74 	.word	0x08007f74
 8006168:	08007f34 	.word	0x08007f34

0800616c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006174:	f001 fa56 	bl	8007624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006178:	4b2d      	ldr	r3, [pc, #180]	; (8006230 <prvAddNewTaskToReadyList+0xc4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <prvAddNewTaskToReadyList+0xc4>)
 8006180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006182:	4b2c      	ldr	r3, [pc, #176]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800618a:	4a2a      	ldr	r2, [pc, #168]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006190:	4b27      	ldr	r3, [pc, #156]	; (8006230 <prvAddNewTaskToReadyList+0xc4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d110      	bne.n	80061ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006198:	f000 fc26 	bl	80069e8 <prvInitialiseTaskLists>
 800619c:	e00d      	b.n	80061ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800619e:	4b26      	ldr	r3, [pc, #152]	; (8006238 <prvAddNewTaskToReadyList+0xcc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061a6:	4b23      	ldr	r3, [pc, #140]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d802      	bhi.n	80061ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061b4:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061ba:	4b20      	ldr	r3, [pc, #128]	; (800623c <prvAddNewTaskToReadyList+0xd0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	4a1e      	ldr	r2, [pc, #120]	; (800623c <prvAddNewTaskToReadyList+0xd0>)
 80061c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061c4:	4b1d      	ldr	r3, [pc, #116]	; (800623c <prvAddNewTaskToReadyList+0xd0>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <prvAddNewTaskToReadyList+0xd4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d903      	bls.n	80061e0 <prvAddNewTaskToReadyList+0x74>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <prvAddNewTaskToReadyList+0xd4>)
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4a15      	ldr	r2, [pc, #84]	; (8006244 <prvAddNewTaskToReadyList+0xd8>)
 80061ee:	441a      	add	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f7ff f8fd 	bl	80053f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061fc:	f001 fa42 	bl	8007684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006200:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <prvAddNewTaskToReadyList+0xcc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <prvAddNewTaskToReadyList+0xc8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	429a      	cmp	r2, r3
 8006214:	d207      	bcs.n	8006226 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <prvAddNewTaskToReadyList+0xdc>)
 8006218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000e58 	.word	0x20000e58
 8006234:	20000984 	.word	0x20000984
 8006238:	20000e64 	.word	0x20000e64
 800623c:	20000e74 	.word	0x20000e74
 8006240:	20000e60 	.word	0x20000e60
 8006244:	20000988 	.word	0x20000988
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d017      	beq.n	800628e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800625e:	4b13      	ldr	r3, [pc, #76]	; (80062ac <vTaskDelay+0x60>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <vTaskDelay+0x30>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60bb      	str	r3, [r7, #8]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800627c:	f000 f88a 	bl	8006394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006280:	2100      	movs	r1, #0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fcfe 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006288:	f000 f892 	bl	80063b0 <xTaskResumeAll>
 800628c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d107      	bne.n	80062a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <vTaskDelay+0x64>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000e80 	.word	0x20000e80
 80062b0:	e000ed04 	.word	0xe000ed04

080062b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062c2:	463a      	mov	r2, r7
 80062c4:	1d39      	adds	r1, r7, #4
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff f832 	bl	8005334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	9202      	str	r2, [sp, #8]
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	2300      	movs	r3, #0
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2300      	movs	r3, #0
 80062e0:	460a      	mov	r2, r1
 80062e2:	4924      	ldr	r1, [pc, #144]	; (8006374 <vTaskStartScheduler+0xc0>)
 80062e4:	4824      	ldr	r0, [pc, #144]	; (8006378 <vTaskStartScheduler+0xc4>)
 80062e6:	f7ff fdf9 	bl	8005edc <xTaskCreateStatic>
 80062ea:	4603      	mov	r3, r0
 80062ec:	4a23      	ldr	r2, [pc, #140]	; (800637c <vTaskStartScheduler+0xc8>)
 80062ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062f0:	4b22      	ldr	r3, [pc, #136]	; (800637c <vTaskStartScheduler+0xc8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062f8:	2301      	movs	r3, #1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	e001      	b.n	8006302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d102      	bne.n	800630e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006308:	f000 fd10 	bl	8006d2c <xTimerCreateTimerTask>
 800630c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d11b      	bne.n	800634c <vTaskStartScheduler+0x98>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	613b      	str	r3, [r7, #16]
}
 8006326:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006328:	4b15      	ldr	r3, [pc, #84]	; (8006380 <vTaskStartScheduler+0xcc>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3354      	adds	r3, #84	; 0x54
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <vTaskStartScheduler+0xd0>)
 8006330:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <vTaskStartScheduler+0xd4>)
 8006334:	f04f 32ff 	mov.w	r2, #4294967295
 8006338:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <vTaskStartScheduler+0xd8>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006340:	4b13      	ldr	r3, [pc, #76]	; (8006390 <vTaskStartScheduler+0xdc>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006346:	f001 f8cb 	bl	80074e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800634a:	e00e      	b.n	800636a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d10a      	bne.n	800636a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	60fb      	str	r3, [r7, #12]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <vTaskStartScheduler+0xb4>
}
 800636a:	bf00      	nop
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	08007e70 	.word	0x08007e70
 8006378:	080069b9 	.word	0x080069b9
 800637c:	20000e7c 	.word	0x20000e7c
 8006380:	20000984 	.word	0x20000984
 8006384:	20000010 	.word	0x20000010
 8006388:	20000e78 	.word	0x20000e78
 800638c:	20000e64 	.word	0x20000e64
 8006390:	20000e5c 	.word	0x20000e5c

08006394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <vTaskSuspendAll+0x18>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	4a03      	ldr	r2, [pc, #12]	; (80063ac <vTaskSuspendAll+0x18>)
 80063a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	20000e80 	.word	0x20000e80

080063b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063be:	4b42      	ldr	r3, [pc, #264]	; (80064c8 <xTaskResumeAll+0x118>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <xTaskResumeAll+0x2c>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	603b      	str	r3, [r7, #0]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063dc:	f001 f922 	bl	8007624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063e0:	4b39      	ldr	r3, [pc, #228]	; (80064c8 <xTaskResumeAll+0x118>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	4a38      	ldr	r2, [pc, #224]	; (80064c8 <xTaskResumeAll+0x118>)
 80063e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ea:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <xTaskResumeAll+0x118>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d162      	bne.n	80064b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063f2:	4b36      	ldr	r3, [pc, #216]	; (80064cc <xTaskResumeAll+0x11c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d05e      	beq.n	80064b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063fa:	e02f      	b.n	800645c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fc:	4b34      	ldr	r3, [pc, #208]	; (80064d0 <xTaskResumeAll+0x120>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3318      	adds	r3, #24
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff f851 	bl	80054b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff f84c 	bl	80054b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	4b2d      	ldr	r3, [pc, #180]	; (80064d4 <xTaskResumeAll+0x124>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d903      	bls.n	800642c <xTaskResumeAll+0x7c>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	4a2a      	ldr	r2, [pc, #168]	; (80064d4 <xTaskResumeAll+0x124>)
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4a27      	ldr	r2, [pc, #156]	; (80064d8 <xTaskResumeAll+0x128>)
 800643a:	441a      	add	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f7fe ffd7 	bl	80053f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	4b23      	ldr	r3, [pc, #140]	; (80064dc <xTaskResumeAll+0x12c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006456:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <xTaskResumeAll+0x130>)
 8006458:	2201      	movs	r2, #1
 800645a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800645c:	4b1c      	ldr	r3, [pc, #112]	; (80064d0 <xTaskResumeAll+0x120>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1cb      	bne.n	80063fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800646a:	f000 fb5f 	bl	8006b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800646e:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <xTaskResumeAll+0x134>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d010      	beq.n	800649c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800647a:	f000 f847 	bl	800650c <xTaskIncrementTick>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006484:	4b16      	ldr	r3, [pc, #88]	; (80064e0 <xTaskResumeAll+0x130>)
 8006486:	2201      	movs	r2, #1
 8006488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3b01      	subs	r3, #1
 800648e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f1      	bne.n	800647a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <xTaskResumeAll+0x134>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <xTaskResumeAll+0x130>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064a8:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <xTaskResumeAll+0x138>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064b8:	f001 f8e4 	bl	8007684 <vPortExitCritical>

	return xAlreadyYielded;
 80064bc:	68bb      	ldr	r3, [r7, #8]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000e80 	.word	0x20000e80
 80064cc:	20000e58 	.word	0x20000e58
 80064d0:	20000e18 	.word	0x20000e18
 80064d4:	20000e60 	.word	0x20000e60
 80064d8:	20000988 	.word	0x20000988
 80064dc:	20000984 	.word	0x20000984
 80064e0:	20000e6c 	.word	0x20000e6c
 80064e4:	20000e68 	.word	0x20000e68
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064f2:	4b05      	ldr	r3, [pc, #20]	; (8006508 <xTaskGetTickCount+0x1c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064f8:	687b      	ldr	r3, [r7, #4]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20000e5c 	.word	0x20000e5c

0800650c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006516:	4b4f      	ldr	r3, [pc, #316]	; (8006654 <xTaskIncrementTick+0x148>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f040 808f 	bne.w	800663e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006520:	4b4d      	ldr	r3, [pc, #308]	; (8006658 <xTaskIncrementTick+0x14c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006528:	4a4b      	ldr	r2, [pc, #300]	; (8006658 <xTaskIncrementTick+0x14c>)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d120      	bne.n	8006576 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006534:	4b49      	ldr	r3, [pc, #292]	; (800665c <xTaskIncrementTick+0x150>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <xTaskIncrementTick+0x48>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	603b      	str	r3, [r7, #0]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xTaskIncrementTick+0x46>
 8006554:	4b41      	ldr	r3, [pc, #260]	; (800665c <xTaskIncrementTick+0x150>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	4b41      	ldr	r3, [pc, #260]	; (8006660 <xTaskIncrementTick+0x154>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a3f      	ldr	r2, [pc, #252]	; (800665c <xTaskIncrementTick+0x150>)
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	4a3f      	ldr	r2, [pc, #252]	; (8006660 <xTaskIncrementTick+0x154>)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	4b3e      	ldr	r3, [pc, #248]	; (8006664 <xTaskIncrementTick+0x158>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	4a3d      	ldr	r2, [pc, #244]	; (8006664 <xTaskIncrementTick+0x158>)
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	f000 fadb 	bl	8006b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006576:	4b3c      	ldr	r3, [pc, #240]	; (8006668 <xTaskIncrementTick+0x15c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d349      	bcc.n	8006614 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006580:	4b36      	ldr	r3, [pc, #216]	; (800665c <xTaskIncrementTick+0x150>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658a:	4b37      	ldr	r3, [pc, #220]	; (8006668 <xTaskIncrementTick+0x15c>)
 800658c:	f04f 32ff 	mov.w	r2, #4294967295
 8006590:	601a      	str	r2, [r3, #0]
					break;
 8006592:	e03f      	b.n	8006614 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006594:	4b31      	ldr	r3, [pc, #196]	; (800665c <xTaskIncrementTick+0x150>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d203      	bcs.n	80065b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065ac:	4a2e      	ldr	r2, [pc, #184]	; (8006668 <xTaskIncrementTick+0x15c>)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065b2:	e02f      	b.n	8006614 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe ff79 	bl	80054b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	3318      	adds	r3, #24
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe ff70 	bl	80054b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <xTaskIncrementTick+0x160>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d903      	bls.n	80065e4 <xTaskIncrementTick+0xd8>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	4a22      	ldr	r2, [pc, #136]	; (800666c <xTaskIncrementTick+0x160>)
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4a1f      	ldr	r2, [pc, #124]	; (8006670 <xTaskIncrementTick+0x164>)
 80065f2:	441a      	add	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f7fe fefb 	bl	80053f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4b1b      	ldr	r3, [pc, #108]	; (8006674 <xTaskIncrementTick+0x168>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	429a      	cmp	r2, r3
 800660c:	d3b8      	bcc.n	8006580 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800660e:	2301      	movs	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006612:	e7b5      	b.n	8006580 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <xTaskIncrementTick+0x168>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661a:	4915      	ldr	r1, [pc, #84]	; (8006670 <xTaskIncrementTick+0x164>)
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	440b      	add	r3, r1
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d901      	bls.n	8006630 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006630:	4b11      	ldr	r3, [pc, #68]	; (8006678 <xTaskIncrementTick+0x16c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e004      	b.n	8006648 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <xTaskIncrementTick+0x170>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a0d      	ldr	r2, [pc, #52]	; (800667c <xTaskIncrementTick+0x170>)
 8006646:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006648:	697b      	ldr	r3, [r7, #20]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000e80 	.word	0x20000e80
 8006658:	20000e5c 	.word	0x20000e5c
 800665c:	20000e10 	.word	0x20000e10
 8006660:	20000e14 	.word	0x20000e14
 8006664:	20000e70 	.word	0x20000e70
 8006668:	20000e78 	.word	0x20000e78
 800666c:	20000e60 	.word	0x20000e60
 8006670:	20000988 	.word	0x20000988
 8006674:	20000984 	.word	0x20000984
 8006678:	20000e6c 	.word	0x20000e6c
 800667c:	20000e68 	.word	0x20000e68

08006680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006686:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <vTaskSwitchContext+0xb0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <vTaskSwitchContext+0xb4>)
 8006690:	2201      	movs	r2, #1
 8006692:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006694:	e046      	b.n	8006724 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006696:	4b27      	ldr	r3, [pc, #156]	; (8006734 <vTaskSwitchContext+0xb4>)
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669c:	4b26      	ldr	r3, [pc, #152]	; (8006738 <vTaskSwitchContext+0xb8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e010      	b.n	80066c6 <vTaskSwitchContext+0x46>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	607b      	str	r3, [r7, #4]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <vTaskSwitchContext+0x3e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	491d      	ldr	r1, [pc, #116]	; (800673c <vTaskSwitchContext+0xbc>)
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0e4      	beq.n	80066a4 <vTaskSwitchContext+0x24>
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4a15      	ldr	r2, [pc, #84]	; (800673c <vTaskSwitchContext+0xbc>)
 80066e6:	4413      	add	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	3308      	adds	r3, #8
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d104      	bne.n	800670a <vTaskSwitchContext+0x8a>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	605a      	str	r2, [r3, #4]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a0b      	ldr	r2, [pc, #44]	; (8006740 <vTaskSwitchContext+0xc0>)
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	4a08      	ldr	r2, [pc, #32]	; (8006738 <vTaskSwitchContext+0xb8>)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <vTaskSwitchContext+0xc0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3354      	adds	r3, #84	; 0x54
 8006720:	4a08      	ldr	r2, [pc, #32]	; (8006744 <vTaskSwitchContext+0xc4>)
 8006722:	6013      	str	r3, [r2, #0]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000e80 	.word	0x20000e80
 8006734:	20000e6c 	.word	0x20000e6c
 8006738:	20000e60 	.word	0x20000e60
 800673c:	20000988 	.word	0x20000988
 8006740:	20000984 	.word	0x20000984
 8006744:	20000010 	.word	0x20000010

08006748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60fb      	str	r3, [r7, #12]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <vTaskPlaceOnEventList+0x44>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3318      	adds	r3, #24
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fe fe61 	bl	800543e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800677c:	2101      	movs	r1, #1
 800677e:	6838      	ldr	r0, [r7, #0]
 8006780:	f000 fa80 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20000984 	.word	0x20000984

08006790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	617b      	str	r3, [r7, #20]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3318      	adds	r3, #24
 80067be:	4619      	mov	r1, r3
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7fe fe18 	bl	80053f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067cc:	f04f 33ff 	mov.w	r3, #4294967295
 80067d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	68b8      	ldr	r0, [r7, #8]
 80067d6:	f000 fa55 	bl	8006c84 <prvAddCurrentTaskToDelayedList>
	}
 80067da:	bf00      	nop
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000984 	.word	0x20000984

080067e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60fb      	str	r3, [r7, #12]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	3318      	adds	r3, #24
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fe49 	bl	80054b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <xTaskRemoveFromEventList+0xb0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d11d      	bne.n	8006862 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3304      	adds	r3, #4
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fe40 	bl	80054b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <xTaskRemoveFromEventList+0xb4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d903      	bls.n	8006844 <xTaskRemoveFromEventList+0x5c>
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a16      	ldr	r2, [pc, #88]	; (800689c <xTaskRemoveFromEventList+0xb4>)
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <xTaskRemoveFromEventList+0xb8>)
 8006852:	441a      	add	r2, r3
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	3304      	adds	r3, #4
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fe fdcb 	bl	80053f6 <vListInsertEnd>
 8006860:	e005      	b.n	800686e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3318      	adds	r3, #24
 8006866:	4619      	mov	r1, r3
 8006868:	480e      	ldr	r0, [pc, #56]	; (80068a4 <xTaskRemoveFromEventList+0xbc>)
 800686a:	f7fe fdc4 	bl	80053f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <xTaskRemoveFromEventList+0xc0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	429a      	cmp	r2, r3
 800687a:	d905      	bls.n	8006888 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <xTaskRemoveFromEventList+0xc4>)
 8006882:	2201      	movs	r2, #1
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e001      	b.n	800688c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800688c:	697b      	ldr	r3, [r7, #20]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000e80 	.word	0x20000e80
 800689c:	20000e60 	.word	0x20000e60
 80068a0:	20000988 	.word	0x20000988
 80068a4:	20000e18 	.word	0x20000e18
 80068a8:	20000984 	.word	0x20000984
 80068ac:	20000e6c 	.word	0x20000e6c

080068b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <vTaskInternalSetTimeOutState+0x24>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <vTaskInternalSetTimeOutState+0x28>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	605a      	str	r2, [r3, #4]
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	20000e70 	.word	0x20000e70
 80068d8:	20000e5c 	.word	0x20000e5c

080068dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	613b      	str	r3, [r7, #16]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	60fb      	str	r3, [r7, #12]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800691e:	f000 fe81 	bl	8007624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006922:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <xTaskCheckForTimeOut+0xbc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d102      	bne.n	8006942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e023      	b.n	800698a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b15      	ldr	r3, [pc, #84]	; (800699c <xTaskCheckForTimeOut+0xc0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d007      	beq.n	800695e <xTaskCheckForTimeOut+0x82>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	429a      	cmp	r2, r3
 8006956:	d302      	bcc.n	800695e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006958:	2301      	movs	r3, #1
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e015      	b.n	800698a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	429a      	cmp	r2, r3
 8006966:	d20b      	bcs.n	8006980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff ff9b 	bl	80068b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	e004      	b.n	800698a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006986:	2301      	movs	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800698a:	f000 fe7b 	bl	8007684 <vPortExitCritical>

	return xReturn;
 800698e:	69fb      	ldr	r3, [r7, #28]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000e5c 	.word	0x20000e5c
 800699c:	20000e70 	.word	0x20000e70

080069a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <vTaskMissedYield+0x14>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20000e6c 	.word	0x20000e6c

080069b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069c0:	f000 f852 	bl	8006a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <prvIdleTask+0x28>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d9f9      	bls.n	80069c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <prvIdleTask+0x2c>)
 80069ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069dc:	e7f0      	b.n	80069c0 <prvIdleTask+0x8>
 80069de:	bf00      	nop
 80069e0:	20000988 	.word	0x20000988
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ee:	2300      	movs	r3, #0
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	e00c      	b.n	8006a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4a12      	ldr	r2, [pc, #72]	; (8006a48 <prvInitialiseTaskLists+0x60>)
 8006a00:	4413      	add	r3, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fcca 	bl	800539c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	607b      	str	r3, [r7, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b37      	cmp	r3, #55	; 0x37
 8006a12:	d9ef      	bls.n	80069f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a14:	480d      	ldr	r0, [pc, #52]	; (8006a4c <prvInitialiseTaskLists+0x64>)
 8006a16:	f7fe fcc1 	bl	800539c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a1a:	480d      	ldr	r0, [pc, #52]	; (8006a50 <prvInitialiseTaskLists+0x68>)
 8006a1c:	f7fe fcbe 	bl	800539c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a20:	480c      	ldr	r0, [pc, #48]	; (8006a54 <prvInitialiseTaskLists+0x6c>)
 8006a22:	f7fe fcbb 	bl	800539c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a26:	480c      	ldr	r0, [pc, #48]	; (8006a58 <prvInitialiseTaskLists+0x70>)
 8006a28:	f7fe fcb8 	bl	800539c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a2c:	480b      	ldr	r0, [pc, #44]	; (8006a5c <prvInitialiseTaskLists+0x74>)
 8006a2e:	f7fe fcb5 	bl	800539c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <prvInitialiseTaskLists+0x78>)
 8006a34:	4a05      	ldr	r2, [pc, #20]	; (8006a4c <prvInitialiseTaskLists+0x64>)
 8006a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <prvInitialiseTaskLists+0x7c>)
 8006a3a:	4a05      	ldr	r2, [pc, #20]	; (8006a50 <prvInitialiseTaskLists+0x68>)
 8006a3c:	601a      	str	r2, [r3, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000988 	.word	0x20000988
 8006a4c:	20000de8 	.word	0x20000de8
 8006a50:	20000dfc 	.word	0x20000dfc
 8006a54:	20000e18 	.word	0x20000e18
 8006a58:	20000e2c 	.word	0x20000e2c
 8006a5c:	20000e44 	.word	0x20000e44
 8006a60:	20000e10 	.word	0x20000e10
 8006a64:	20000e14 	.word	0x20000e14

08006a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a6e:	e019      	b.n	8006aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a70:	f000 fdd8 	bl	8007624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a74:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <prvCheckTasksWaitingTermination+0x50>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe fd15 	bl	80054b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <prvCheckTasksWaitingTermination+0x54>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	4a0b      	ldr	r2, [pc, #44]	; (8006abc <prvCheckTasksWaitingTermination+0x54>)
 8006a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <prvCheckTasksWaitingTermination+0x58>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <prvCheckTasksWaitingTermination+0x58>)
 8006a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a9a:	f000 fdf3 	bl	8007684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f810 	bl	8006ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <prvCheckTasksWaitingTermination+0x58>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e1      	bne.n	8006a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000e2c 	.word	0x20000e2c
 8006abc:	20000e58 	.word	0x20000e58
 8006ac0:	20000e40 	.word	0x20000e40

08006ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3354      	adds	r3, #84	; 0x54
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 f8fd 	bl	8007cd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d108      	bne.n	8006af2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 ff8b 	bl	8007a00 <vPortFree>
				vPortFree( pxTCB );
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ff88 	bl	8007a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006af0:	e018      	b.n	8006b24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d103      	bne.n	8006b04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 ff7f 	bl	8007a00 <vPortFree>
	}
 8006b02:	e00f      	b.n	8006b24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d00a      	beq.n	8006b24 <prvDeleteTCB+0x60>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <prvDeleteTCB+0x5e>
	}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <prvResetNextTaskUnblockTime+0x38>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <prvResetNextTaskUnblockTime+0x3c>)
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b44:	e008      	b.n	8006b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b46:	4b07      	ldr	r3, [pc, #28]	; (8006b64 <prvResetNextTaskUnblockTime+0x38>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	4a04      	ldr	r2, [pc, #16]	; (8006b68 <prvResetNextTaskUnblockTime+0x3c>)
 8006b56:	6013      	str	r3, [r2, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	20000e10 	.word	0x20000e10
 8006b68:	20000e78 	.word	0x20000e78

08006b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <xTaskGetSchedulerState+0x34>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	607b      	str	r3, [r7, #4]
 8006b7e:	e008      	b.n	8006b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b80:	4b08      	ldr	r3, [pc, #32]	; (8006ba4 <xTaskGetSchedulerState+0x38>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	e001      	b.n	8006b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b92:	687b      	ldr	r3, [r7, #4]
	}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	20000e64 	.word	0x20000e64
 8006ba4:	20000e80 	.word	0x20000e80

08006ba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d056      	beq.n	8006c6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <xTaskPriorityDisinherit+0xd0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d00a      	beq.n	8006bde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	60fb      	str	r3, [r7, #12]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60bb      	str	r3, [r7, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d02c      	beq.n	8006c6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d128      	bne.n	8006c6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fc46 	bl	80054b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <xTaskPriorityDisinherit+0xd4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <xTaskPriorityDisinherit+0xa4>
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <xTaskPriorityDisinherit+0xd4>)
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <xTaskPriorityDisinherit+0xd8>)
 8006c5a:	441a      	add	r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f7fe fbc7 	bl	80053f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c6c:	697b      	ldr	r3, [r7, #20]
	}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000984 	.word	0x20000984
 8006c7c:	20000e60 	.word	0x20000e60
 8006c80:	20000988 	.word	0x20000988

08006c84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c8e:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c94:	4b20      	ldr	r3, [pc, #128]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fc08 	bl	80054b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d10a      	bne.n	8006cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cae:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4819      	ldr	r0, [pc, #100]	; (8006d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8006cb8:	f7fe fb9d 	bl	80053f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cbc:	e026      	b.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d209      	bcs.n	8006cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f7fe fbab 	bl	800543e <vListInsert>
}
 8006ce8:	e010      	b.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f7fe fba1 	bl	800543e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d202      	bcs.n	8006d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d06:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6013      	str	r3, [r2, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000e5c 	.word	0x20000e5c
 8006d18:	20000984 	.word	0x20000984
 8006d1c:	20000e44 	.word	0x20000e44
 8006d20:	20000e14 	.word	0x20000e14
 8006d24:	20000e10 	.word	0x20000e10
 8006d28:	20000e78 	.word	0x20000e78

08006d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d36:	f000 fb07 	bl	8007348 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <xTimerCreateTimerTask+0x80>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d021      	beq.n	8006d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d4a:	1d3a      	adds	r2, r7, #4
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	f107 030c 	add.w	r3, r7, #12
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fb07 	bl	8005368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	9202      	str	r2, [sp, #8]
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	2302      	movs	r3, #2
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	4910      	ldr	r1, [pc, #64]	; (8006db0 <xTimerCreateTimerTask+0x84>)
 8006d6e:	4811      	ldr	r0, [pc, #68]	; (8006db4 <xTimerCreateTimerTask+0x88>)
 8006d70:	f7ff f8b4 	bl	8005edc <xTaskCreateStatic>
 8006d74:	4603      	mov	r3, r0
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <xTimerCreateTimerTask+0x8c>)
 8006d78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d7a:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <xTimerCreateTimerTask+0x8c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d82:	2301      	movs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	613b      	str	r3, [r7, #16]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006da2:	697b      	ldr	r3, [r7, #20]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000eb4 	.word	0x20000eb4
 8006db0:	08007e78 	.word	0x08007e78
 8006db4:	08006ef1 	.word	0x08006ef1
 8006db8:	20000eb8 	.word	0x20000eb8

08006dbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	; 0x28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <xTimerGenericCommand+0x2e>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	623b      	str	r3, [r7, #32]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dea:	4b1a      	ldr	r3, [pc, #104]	; (8006e54 <xTimerGenericCommand+0x98>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d02a      	beq.n	8006e48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b05      	cmp	r3, #5
 8006e02:	dc18      	bgt.n	8006e36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e04:	f7ff feb2 	bl	8006b6c <xTaskGetSchedulerState>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d109      	bne.n	8006e22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e0e:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <xTimerGenericCommand+0x98>)
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f107 0110 	add.w	r1, r7, #16
 8006e16:	2300      	movs	r3, #0
 8006e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1a:	f7fe fc77 	bl	800570c <xQueueGenericSend>
 8006e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e20:	e012      	b.n	8006e48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <xTimerGenericCommand+0x98>)
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	f107 0110 	add.w	r1, r7, #16
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f7fe fc6d 	bl	800570c <xQueueGenericSend>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24
 8006e34:	e008      	b.n	8006e48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e36:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <xTimerGenericCommand+0x98>)
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f107 0110 	add.w	r1, r7, #16
 8006e3e:	2300      	movs	r3, #0
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	f7fe fd61 	bl	8005908 <xQueueGenericSendFromISR>
 8006e46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3728      	adds	r7, #40	; 0x28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000eb4 	.word	0x20000eb4

08006e58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e62:	4b22      	ldr	r3, [pc, #136]	; (8006eec <prvProcessExpiredTimer+0x94>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fb1d 	bl	80054b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d022      	beq.n	8006eca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	18d1      	adds	r1, r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	6978      	ldr	r0, [r7, #20]
 8006e92:	f000 f8d1 	bl	8007038 <prvInsertTimerInActiveList>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01f      	beq.n	8006edc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	6978      	ldr	r0, [r7, #20]
 8006ea8:	f7ff ff88 	bl	8006dbc <xTimerGenericCommand>
 8006eac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d113      	bne.n	8006edc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	60fb      	str	r3, [r7, #12]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ed0:	f023 0301 	bic.w	r3, r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	6978      	ldr	r0, [r7, #20]
 8006ee2:	4798      	blx	r3
}
 8006ee4:	bf00      	nop
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20000eac 	.word	0x20000eac

08006ef0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 f857 	bl	8006fb0 <prvGetNextExpireTime>
 8006f02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4619      	mov	r1, r3
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f803 	bl	8006f14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f0e:	f000 f8d5 	bl	80070bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f12:	e7f1      	b.n	8006ef8 <prvTimerTask+0x8>

08006f14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f1e:	f7ff fa39 	bl	8006394 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f22:	f107 0308 	add.w	r3, r7, #8
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f866 	bl	8006ff8 <prvSampleTimeNow>
 8006f2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d130      	bne.n	8006f96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <prvProcessTimerOrBlockTask+0x3c>
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d806      	bhi.n	8006f50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f42:	f7ff fa35 	bl	80063b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ff85 	bl	8006e58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f4e:	e024      	b.n	8006f9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f56:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <prvProcessTimerOrBlockTask+0x90>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <prvProcessTimerOrBlockTask+0x50>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <prvProcessTimerOrBlockTask+0x52>
 8006f64:	2300      	movs	r3, #0
 8006f66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f68:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <prvProcessTimerOrBlockTask+0x94>)
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4619      	mov	r1, r3
 8006f76:	f7fe ff7d 	bl	8005e74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f7a:	f7ff fa19 	bl	80063b0 <xTaskResumeAll>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f84:	4b09      	ldr	r3, [pc, #36]	; (8006fac <prvProcessTimerOrBlockTask+0x98>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
}
 8006f94:	e001      	b.n	8006f9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f96:	f7ff fa0b 	bl	80063b0 <xTaskResumeAll>
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000eb0 	.word	0x20000eb0
 8006fa8:	20000eb4 	.word	0x20000eb4
 8006fac:	e000ed04 	.word	0xe000ed04

08006fb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <prvGetNextExpireTime+0x44>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <prvGetNextExpireTime+0x16>
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	e000      	b.n	8006fc8 <prvGetNextExpireTime+0x18>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fd4:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <prvGetNextExpireTime+0x44>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	e001      	b.n	8006fe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000eac 	.word	0x20000eac

08006ff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007000:	f7ff fa74 	bl	80064ec <xTaskGetTickCount>
 8007004:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007006:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <prvSampleTimeNow+0x3c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	429a      	cmp	r2, r3
 800700e:	d205      	bcs.n	800701c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007010:	f000 f936 	bl	8007280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	e002      	b.n	8007022 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <prvSampleTimeNow+0x3c>)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007028:	68fb      	ldr	r3, [r7, #12]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000ebc 	.word	0x20000ebc

08007038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	d812      	bhi.n	8007084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	429a      	cmp	r2, r3
 800706a:	d302      	bcc.n	8007072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800706c:	2301      	movs	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e01b      	b.n	80070aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007072:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <prvInsertTimerInActiveList+0x7c>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fe f9de 	bl	800543e <vListInsert>
 8007082:	e012      	b.n	80070aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d206      	bcs.n	800709a <prvInsertTimerInActiveList+0x62>
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	e007      	b.n	80070aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <prvInsertTimerInActiveList+0x80>)
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f7fe f9ca 	bl	800543e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070aa:	697b      	ldr	r3, [r7, #20]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000eb0 	.word	0x20000eb0
 80070b8:	20000eac 	.word	0x20000eac

080070bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08e      	sub	sp, #56	; 0x38
 80070c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070c2:	e0ca      	b.n	800725a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	da18      	bge.n	80070fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070ca:	1d3b      	adds	r3, r7, #4
 80070cc:	3304      	adds	r3, #4
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10a      	bne.n	80070ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	61fb      	str	r3, [r7, #28]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f2:	6850      	ldr	r0, [r2, #4]
 80070f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f6:	6892      	ldr	r2, [r2, #8]
 80070f8:	4611      	mov	r1, r2
 80070fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f2c0 80aa 	blt.w	8007258 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	3304      	adds	r3, #4
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe f9cb 	bl	80054b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800711a:	463b      	mov	r3, r7
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff ff6b 	bl	8006ff8 <prvSampleTimeNow>
 8007122:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b09      	cmp	r3, #9
 8007128:	f200 8097 	bhi.w	800725a <prvProcessReceivedCommands+0x19e>
 800712c:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <prvProcessReceivedCommands+0x78>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	0800715d 	.word	0x0800715d
 8007138:	0800715d 	.word	0x0800715d
 800713c:	0800715d 	.word	0x0800715d
 8007140:	080071d1 	.word	0x080071d1
 8007144:	080071e5 	.word	0x080071e5
 8007148:	0800722f 	.word	0x0800722f
 800714c:	0800715d 	.word	0x0800715d
 8007150:	0800715d 	.word	0x0800715d
 8007154:	080071d1 	.word	0x080071d1
 8007158:	080071e5 	.word	0x080071e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	b2da      	uxtb	r2, r3
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	18d1      	adds	r1, r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800717c:	f7ff ff5c 	bl	8007038 <prvInsertTimerInActiveList>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d069      	beq.n	800725a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d05e      	beq.n	800725a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	441a      	add	r2, r3
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	2100      	movs	r1, #0
 80071ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ae:	f7ff fe05 	bl	8006dbc <xTimerGenericCommand>
 80071b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d14f      	bne.n	800725a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	61bb      	str	r3, [r7, #24]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80071e2:	e03a      	b.n	800725a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	617b      	str	r3, [r7, #20]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	18d1      	adds	r1, r2, r3
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007228:	f7ff ff06 	bl	8007038 <prvInsertTimerInActiveList>
					break;
 800722c:	e015      	b.n	800725a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d103      	bne.n	8007244 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800723c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800723e:	f000 fbdf 	bl	8007a00 <vPortFree>
 8007242:	e00a      	b.n	800725a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007256:	e000      	b.n	800725a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007258:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800725a:	4b08      	ldr	r3, [pc, #32]	; (800727c <prvProcessReceivedCommands+0x1c0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	1d39      	adds	r1, r7, #4
 8007260:	2200      	movs	r2, #0
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fbec 	bl	8005a40 <xQueueReceive>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	f47f af2a 	bne.w	80070c4 <prvProcessReceivedCommands+0x8>
	}
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	3730      	adds	r7, #48	; 0x30
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000eb4 	.word	0x20000eb4

08007280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007286:	e048      	b.n	800731a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007288:	4b2d      	ldr	r3, [pc, #180]	; (8007340 <prvSwitchTimerLists+0xc0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007292:	4b2b      	ldr	r3, [pc, #172]	; (8007340 <prvSwitchTimerLists+0xc0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3304      	adds	r3, #4
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe f905 	bl	80054b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d02e      	beq.n	800731a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4413      	add	r3, r2
 80072c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d90e      	bls.n	80072ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072da:	4b19      	ldr	r3, [pc, #100]	; (8007340 <prvSwitchTimerLists+0xc0>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3304      	adds	r3, #4
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f7fe f8aa 	bl	800543e <vListInsert>
 80072ea:	e016      	b.n	800731a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072ec:	2300      	movs	r3, #0
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2300      	movs	r3, #0
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	2100      	movs	r1, #0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff fd60 	bl	8006dbc <xTimerGenericCommand>
 80072fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	603b      	str	r3, [r7, #0]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <prvSwitchTimerLists+0xc0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1b1      	bne.n	8007288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007324:	4b06      	ldr	r3, [pc, #24]	; (8007340 <prvSwitchTimerLists+0xc0>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <prvSwitchTimerLists+0xc4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a04      	ldr	r2, [pc, #16]	; (8007340 <prvSwitchTimerLists+0xc0>)
 8007330:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007332:	4a04      	ldr	r2, [pc, #16]	; (8007344 <prvSwitchTimerLists+0xc4>)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	6013      	str	r3, [r2, #0]
}
 8007338:	bf00      	nop
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000eac 	.word	0x20000eac
 8007344:	20000eb0 	.word	0x20000eb0

08007348 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800734e:	f000 f969 	bl	8007624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <prvCheckForValidListAndQueue+0x60>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d120      	bne.n	800739c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800735a:	4814      	ldr	r0, [pc, #80]	; (80073ac <prvCheckForValidListAndQueue+0x64>)
 800735c:	f7fe f81e 	bl	800539c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007360:	4813      	ldr	r0, [pc, #76]	; (80073b0 <prvCheckForValidListAndQueue+0x68>)
 8007362:	f7fe f81b 	bl	800539c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007366:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <prvCheckForValidListAndQueue+0x6c>)
 8007368:	4a10      	ldr	r2, [pc, #64]	; (80073ac <prvCheckForValidListAndQueue+0x64>)
 800736a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <prvCheckForValidListAndQueue+0x70>)
 800736e:	4a10      	ldr	r2, [pc, #64]	; (80073b0 <prvCheckForValidListAndQueue+0x68>)
 8007370:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007372:	2300      	movs	r3, #0
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <prvCheckForValidListAndQueue+0x74>)
 8007378:	4a11      	ldr	r2, [pc, #68]	; (80073c0 <prvCheckForValidListAndQueue+0x78>)
 800737a:	2110      	movs	r1, #16
 800737c:	200a      	movs	r0, #10
 800737e:	f7fe f929 	bl	80055d4 <xQueueGenericCreateStatic>
 8007382:	4603      	mov	r3, r0
 8007384:	4a08      	ldr	r2, [pc, #32]	; (80073a8 <prvCheckForValidListAndQueue+0x60>)
 8007386:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <prvCheckForValidListAndQueue+0x60>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007390:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <prvCheckForValidListAndQueue+0x60>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	490b      	ldr	r1, [pc, #44]	; (80073c4 <prvCheckForValidListAndQueue+0x7c>)
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fd42 	bl	8005e20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800739c:	f000 f972 	bl	8007684 <vPortExitCritical>
}
 80073a0:	bf00      	nop
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000eb4 	.word	0x20000eb4
 80073ac:	20000e84 	.word	0x20000e84
 80073b0:	20000e98 	.word	0x20000e98
 80073b4:	20000eac 	.word	0x20000eac
 80073b8:	20000eb0 	.word	0x20000eb0
 80073bc:	20000f60 	.word	0x20000f60
 80073c0:	20000ec0 	.word	0x20000ec0
 80073c4:	08007e80 	.word	0x08007e80

080073c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3b04      	subs	r3, #4
 80073d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3b04      	subs	r3, #4
 80073e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f023 0201 	bic.w	r2, r3, #1
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3b04      	subs	r3, #4
 80073f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073f8:	4a0c      	ldr	r2, [pc, #48]	; (800742c <pxPortInitialiseStack+0x64>)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3b14      	subs	r3, #20
 8007402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3b04      	subs	r3, #4
 800740e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f06f 0202 	mvn.w	r2, #2
 8007416:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3b20      	subs	r3, #32
 800741c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800741e:	68fb      	ldr	r3, [r7, #12]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	08007431 	.word	0x08007431

08007430 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800743a:	4b12      	ldr	r3, [pc, #72]	; (8007484 <prvTaskExitError+0x54>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d00a      	beq.n	800745a <prvTaskExitError+0x2a>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	60fb      	str	r3, [r7, #12]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <prvTaskExitError+0x28>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	60bb      	str	r3, [r7, #8]
}
 800746c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800746e:	bf00      	nop
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0fc      	beq.n	8007470 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	2000000c 	.word	0x2000000c
	...

08007490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <pxCurrentTCBConst2>)
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	6808      	ldr	r0, [r1, #0]
 8007496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	f380 8809 	msr	PSP, r0
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8811 	msr	BASEPRI, r0
 80074aa:	4770      	bx	lr
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst2>:
 80074b0:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074b8:	4808      	ldr	r0, [pc, #32]	; (80074dc <prvPortStartFirstTask+0x24>)
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	6800      	ldr	r0, [r0, #0]
 80074be:	f380 8808 	msr	MSP, r0
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8814 	msr	CONTROL, r0
 80074ca:	b662      	cpsie	i
 80074cc:	b661      	cpsie	f
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	df00      	svc	0
 80074d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074da:	bf00      	nop
 80074dc:	e000ed08 	.word	0xe000ed08

080074e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074e6:	4b46      	ldr	r3, [pc, #280]	; (8007600 <xPortStartScheduler+0x120>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a46      	ldr	r2, [pc, #280]	; (8007604 <xPortStartScheduler+0x124>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10a      	bne.n	8007506 <xPortStartScheduler+0x26>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	613b      	str	r3, [r7, #16]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007506:	4b3e      	ldr	r3, [pc, #248]	; (8007600 <xPortStartScheduler+0x120>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a3f      	ldr	r2, [pc, #252]	; (8007608 <xPortStartScheduler+0x128>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10a      	bne.n	8007526 <xPortStartScheduler+0x46>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	60fb      	str	r3, [r7, #12]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007526:	4b39      	ldr	r3, [pc, #228]	; (800760c <xPortStartScheduler+0x12c>)
 8007528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	22ff      	movs	r2, #255	; 0xff
 8007536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007548:	b2da      	uxtb	r2, r3
 800754a:	4b31      	ldr	r3, [pc, #196]	; (8007610 <xPortStartScheduler+0x130>)
 800754c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800754e:	4b31      	ldr	r3, [pc, #196]	; (8007614 <xPortStartScheduler+0x134>)
 8007550:	2207      	movs	r2, #7
 8007552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007554:	e009      	b.n	800756a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007556:	4b2f      	ldr	r3, [pc, #188]	; (8007614 <xPortStartScheduler+0x134>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3b01      	subs	r3, #1
 800755c:	4a2d      	ldr	r2, [pc, #180]	; (8007614 <xPortStartScheduler+0x134>)
 800755e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	b2db      	uxtb	r3, r3
 8007568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007572:	2b80      	cmp	r3, #128	; 0x80
 8007574:	d0ef      	beq.n	8007556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007576:	4b27      	ldr	r3, [pc, #156]	; (8007614 <xPortStartScheduler+0x134>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1c3 0307 	rsb	r3, r3, #7
 800757e:	2b04      	cmp	r3, #4
 8007580:	d00a      	beq.n	8007598 <xPortStartScheduler+0xb8>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	60bb      	str	r3, [r7, #8]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007598:	4b1e      	ldr	r3, [pc, #120]	; (8007614 <xPortStartScheduler+0x134>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	4a1d      	ldr	r2, [pc, #116]	; (8007614 <xPortStartScheduler+0x134>)
 80075a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075a2:	4b1c      	ldr	r3, [pc, #112]	; (8007614 <xPortStartScheduler+0x134>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075aa:	4a1a      	ldr	r2, [pc, #104]	; (8007614 <xPortStartScheduler+0x134>)
 80075ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075b6:	4b18      	ldr	r3, [pc, #96]	; (8007618 <xPortStartScheduler+0x138>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a17      	ldr	r2, [pc, #92]	; (8007618 <xPortStartScheduler+0x138>)
 80075bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075c2:	4b15      	ldr	r3, [pc, #84]	; (8007618 <xPortStartScheduler+0x138>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a14      	ldr	r2, [pc, #80]	; (8007618 <xPortStartScheduler+0x138>)
 80075c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075ce:	f000 f8dd 	bl	800778c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075d2:	4b12      	ldr	r3, [pc, #72]	; (800761c <xPortStartScheduler+0x13c>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075d8:	f000 f8fc 	bl	80077d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075dc:	4b10      	ldr	r3, [pc, #64]	; (8007620 <xPortStartScheduler+0x140>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a0f      	ldr	r2, [pc, #60]	; (8007620 <xPortStartScheduler+0x140>)
 80075e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075e8:	f7ff ff66 	bl	80074b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075ec:	f7ff f848 	bl	8006680 <vTaskSwitchContext>
	prvTaskExitError();
 80075f0:	f7ff ff1e 	bl	8007430 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	e000ed00 	.word	0xe000ed00
 8007604:	410fc271 	.word	0x410fc271
 8007608:	410fc270 	.word	0x410fc270
 800760c:	e000e400 	.word	0xe000e400
 8007610:	20000fb0 	.word	0x20000fb0
 8007614:	20000fb4 	.word	0x20000fb4
 8007618:	e000ed20 	.word	0xe000ed20
 800761c:	2000000c 	.word	0x2000000c
 8007620:	e000ef34 	.word	0xe000ef34

08007624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	607b      	str	r3, [r7, #4]
}
 800763c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <vPortEnterCritical+0x58>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	4a0d      	ldr	r2, [pc, #52]	; (800767c <vPortEnterCritical+0x58>)
 8007646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007648:	4b0c      	ldr	r3, [pc, #48]	; (800767c <vPortEnterCritical+0x58>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d10f      	bne.n	8007670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <vPortEnterCritical+0x5c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <vPortEnterCritical+0x4c>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	603b      	str	r3, [r7, #0]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <vPortEnterCritical+0x4a>
	}
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	2000000c 	.word	0x2000000c
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <vPortExitCritical+0x50>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <vPortExitCritical+0x24>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076a8:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <vPortExitCritical+0x50>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	4a09      	ldr	r2, [pc, #36]	; (80076d4 <vPortExitCritical+0x50>)
 80076b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076b2:	4b08      	ldr	r3, [pc, #32]	; (80076d4 <vPortExitCritical+0x50>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d105      	bne.n	80076c6 <vPortExitCritical+0x42>
 80076ba:	2300      	movs	r3, #0
 80076bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	f383 8811 	msr	BASEPRI, r3
}
 80076c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	2000000c 	.word	0x2000000c
	...

080076e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076e0:	f3ef 8009 	mrs	r0, PSP
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	4b15      	ldr	r3, [pc, #84]	; (8007740 <pxCurrentTCBConst>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	f01e 0f10 	tst.w	lr, #16
 80076f0:	bf08      	it	eq
 80076f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fa:	6010      	str	r0, [r2, #0]
 80076fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007704:	f380 8811 	msr	BASEPRI, r0
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f7fe ffb6 	bl	8006680 <vTaskSwitchContext>
 8007714:	f04f 0000 	mov.w	r0, #0
 8007718:	f380 8811 	msr	BASEPRI, r0
 800771c:	bc09      	pop	{r0, r3}
 800771e:	6819      	ldr	r1, [r3, #0]
 8007720:	6808      	ldr	r0, [r1, #0]
 8007722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007726:	f01e 0f10 	tst.w	lr, #16
 800772a:	bf08      	it	eq
 800772c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007730:	f380 8809 	msr	PSP, r0
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	f3af 8000 	nop.w

08007740 <pxCurrentTCBConst>:
 8007740:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	607b      	str	r3, [r7, #4]
}
 8007760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007762:	f7fe fed3 	bl	800650c <xTaskIncrementTick>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <xPortSysTickHandler+0x40>)
 800776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	2300      	movs	r3, #0
 8007776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f383 8811 	msr	BASEPRI, r3
}
 800777e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <vPortSetupTimerInterrupt+0x34>)
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <vPortSetupTimerInterrupt+0x38>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <vPortSetupTimerInterrupt+0x3c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <vPortSetupTimerInterrupt+0x40>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	099b      	lsrs	r3, r3, #6
 80077a8:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <vPortSetupTimerInterrupt+0x44>)
 80077aa:	3b01      	subs	r3, #1
 80077ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ae:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <vPortSetupTimerInterrupt+0x34>)
 80077b0:	2207      	movs	r2, #7
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	e000e010 	.word	0xe000e010
 80077c4:	e000e018 	.word	0xe000e018
 80077c8:	20000000 	.word	0x20000000
 80077cc:	10624dd3 	.word	0x10624dd3
 80077d0:	e000e014 	.word	0xe000e014

080077d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077e4 <vPortEnableVFP+0x10>
 80077d8:	6801      	ldr	r1, [r0, #0]
 80077da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077de:	6001      	str	r1, [r0, #0]
 80077e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077e2:	bf00      	nop
 80077e4:	e000ed88 	.word	0xe000ed88

080077e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077ee:	f3ef 8305 	mrs	r3, IPSR
 80077f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b0f      	cmp	r3, #15
 80077f8:	d914      	bls.n	8007824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <vPortValidateInterruptPriority+0x70>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <vPortValidateInterruptPriority+0x74>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	7afa      	ldrb	r2, [r7, #11]
 800780a:	429a      	cmp	r2, r3
 800780c:	d20a      	bcs.n	8007824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	607b      	str	r3, [r7, #4]
}
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <vPortValidateInterruptPriority+0x78>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800782c:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <vPortValidateInterruptPriority+0x7c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d90a      	bls.n	800784a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	603b      	str	r3, [r7, #0]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <vPortValidateInterruptPriority+0x60>
	}
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	e000e3f0 	.word	0xe000e3f0
 800785c:	20000fb0 	.word	0x20000fb0
 8007860:	e000ed0c 	.word	0xe000ed0c
 8007864:	20000fb4 	.word	0x20000fb4

08007868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08a      	sub	sp, #40	; 0x28
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007870:	2300      	movs	r3, #0
 8007872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007874:	f7fe fd8e 	bl	8006394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007878:	4b5b      	ldr	r3, [pc, #364]	; (80079e8 <pvPortMalloc+0x180>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007880:	f000 f920 	bl	8007ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007884:	4b59      	ldr	r3, [pc, #356]	; (80079ec <pvPortMalloc+0x184>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 8093 	bne.w	80079b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01d      	beq.n	80078d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007898:	2208      	movs	r2, #8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d014      	beq.n	80078d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f023 0307 	bic.w	r3, r3, #7
 80078b0:	3308      	adds	r3, #8
 80078b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <pvPortMalloc+0x6c>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	617b      	str	r3, [r7, #20]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d06e      	beq.n	80079b8 <pvPortMalloc+0x150>
 80078da:	4b45      	ldr	r3, [pc, #276]	; (80079f0 <pvPortMalloc+0x188>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d869      	bhi.n	80079b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078e4:	4b43      	ldr	r3, [pc, #268]	; (80079f4 <pvPortMalloc+0x18c>)
 80078e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078e8:	4b42      	ldr	r3, [pc, #264]	; (80079f4 <pvPortMalloc+0x18c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ee:	e004      	b.n	80078fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d903      	bls.n	800790c <pvPortMalloc+0xa4>
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1f1      	bne.n	80078f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800790c:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <pvPortMalloc+0x180>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007912:	429a      	cmp	r2, r3
 8007914:	d050      	beq.n	80079b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2208      	movs	r2, #8
 800791c:	4413      	add	r3, r2
 800791e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	2308      	movs	r3, #8
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	429a      	cmp	r2, r3
 8007936:	d91f      	bls.n	8007978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <pvPortMalloc+0xf8>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	613b      	str	r3, [r7, #16]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	1ad2      	subs	r2, r2, r3
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007972:	69b8      	ldr	r0, [r7, #24]
 8007974:	f000 f908 	bl	8007b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007978:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <pvPortMalloc+0x188>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <pvPortMalloc+0x188>)
 8007984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007986:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <pvPortMalloc+0x188>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <pvPortMalloc+0x190>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d203      	bcs.n	800799a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007992:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <pvPortMalloc+0x188>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a18      	ldr	r2, [pc, #96]	; (80079f8 <pvPortMalloc+0x190>)
 8007998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <pvPortMalloc+0x184>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <pvPortMalloc+0x194>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3301      	adds	r3, #1
 80079b4:	4a11      	ldr	r2, [pc, #68]	; (80079fc <pvPortMalloc+0x194>)
 80079b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079b8:	f7fe fcfa 	bl	80063b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <pvPortMalloc+0x174>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	60fb      	str	r3, [r7, #12]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <pvPortMalloc+0x172>
	return pvReturn;
 80079dc:	69fb      	ldr	r3, [r7, #28]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3728      	adds	r7, #40	; 0x28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20001bc0 	.word	0x20001bc0
 80079ec:	20001bd4 	.word	0x20001bd4
 80079f0:	20001bc4 	.word	0x20001bc4
 80079f4:	20001bb8 	.word	0x20001bb8
 80079f8:	20001bc8 	.word	0x20001bc8
 80079fc:	20001bcc 	.word	0x20001bcc

08007a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d04d      	beq.n	8007aae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a12:	2308      	movs	r3, #8
 8007a14:	425b      	negs	r3, r3
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4413      	add	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <vPortFree+0xb8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <vPortFree+0x44>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	60fb      	str	r3, [r7, #12]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <vPortFree+0x62>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60bb      	str	r3, [r7, #8]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4b14      	ldr	r3, [pc, #80]	; (8007ab8 <vPortFree+0xb8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01e      	beq.n	8007aae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11a      	bne.n	8007aae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	4b0e      	ldr	r3, [pc, #56]	; (8007ab8 <vPortFree+0xb8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	401a      	ands	r2, r3
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a88:	f7fe fc84 	bl	8006394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <vPortFree+0xbc>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4413      	add	r3, r2
 8007a96:	4a09      	ldr	r2, [pc, #36]	; (8007abc <vPortFree+0xbc>)
 8007a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a9a:	6938      	ldr	r0, [r7, #16]
 8007a9c:	f000 f874 	bl	8007b88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007aa0:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <vPortFree+0xc0>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	4a06      	ldr	r2, [pc, #24]	; (8007ac0 <vPortFree+0xc0>)
 8007aa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aaa:	f7fe fc81 	bl	80063b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aae:	bf00      	nop
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20001bd4 	.word	0x20001bd4
 8007abc:	20001bc4 	.word	0x20001bc4
 8007ac0:	20001bd0 	.word	0x20001bd0

08007ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ad0:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <prvHeapInit+0xac>)
 8007ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3307      	adds	r3, #7
 8007ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	4a1f      	ldr	r2, [pc, #124]	; (8007b70 <prvHeapInit+0xac>)
 8007af4:	4413      	add	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007afc:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <prvHeapInit+0xb0>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b02:	4b1c      	ldr	r3, [pc, #112]	; (8007b74 <prvHeapInit+0xb0>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b10:	2208      	movs	r2, #8
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a15      	ldr	r2, [pc, #84]	; (8007b78 <prvHeapInit+0xb4>)
 8007b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <prvHeapInit+0xb4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <prvHeapInit+0xb4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <prvHeapInit+0xb4>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <prvHeapInit+0xb8>)
 8007b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <prvHeapInit+0xbc>)
 8007b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <prvHeapInit+0xc0>)
 8007b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	20000fb8 	.word	0x20000fb8
 8007b74:	20001bb8 	.word	0x20001bb8
 8007b78:	20001bc0 	.word	0x20001bc0
 8007b7c:	20001bc8 	.word	0x20001bc8
 8007b80:	20001bc4 	.word	0x20001bc4
 8007b84:	20001bd4 	.word	0x20001bd4

08007b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b90:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <prvInsertBlockIntoFreeList+0xac>)
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e002      	b.n	8007b9c <prvInsertBlockIntoFreeList+0x14>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d8f7      	bhi.n	8007b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d108      	bne.n	8007bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d118      	bne.n	8007c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <prvInsertBlockIntoFreeList+0xb0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d00d      	beq.n	8007c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	441a      	add	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e008      	b.n	8007c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <prvInsertBlockIntoFreeList+0xb0>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e003      	b.n	8007c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d002      	beq.n	8007c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20001bb8 	.word	0x20001bb8
 8007c38:	20001bc0 	.word	0x20001bc0

08007c3c <__libc_init_array>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	4d0d      	ldr	r5, [pc, #52]	; (8007c74 <__libc_init_array+0x38>)
 8007c40:	4c0d      	ldr	r4, [pc, #52]	; (8007c78 <__libc_init_array+0x3c>)
 8007c42:	1b64      	subs	r4, r4, r5
 8007c44:	10a4      	asrs	r4, r4, #2
 8007c46:	2600      	movs	r6, #0
 8007c48:	42a6      	cmp	r6, r4
 8007c4a:	d109      	bne.n	8007c60 <__libc_init_array+0x24>
 8007c4c:	4d0b      	ldr	r5, [pc, #44]	; (8007c7c <__libc_init_array+0x40>)
 8007c4e:	4c0c      	ldr	r4, [pc, #48]	; (8007c80 <__libc_init_array+0x44>)
 8007c50:	f000 f8f2 	bl	8007e38 <_init>
 8007c54:	1b64      	subs	r4, r4, r5
 8007c56:	10a4      	asrs	r4, r4, #2
 8007c58:	2600      	movs	r6, #0
 8007c5a:	42a6      	cmp	r6, r4
 8007c5c:	d105      	bne.n	8007c6a <__libc_init_array+0x2e>
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}
 8007c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c64:	4798      	blx	r3
 8007c66:	3601      	adds	r6, #1
 8007c68:	e7ee      	b.n	8007c48 <__libc_init_array+0xc>
 8007c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6e:	4798      	blx	r3
 8007c70:	3601      	adds	r6, #1
 8007c72:	e7f2      	b.n	8007c5a <__libc_init_array+0x1e>
 8007c74:	08007f9c 	.word	0x08007f9c
 8007c78:	08007f9c 	.word	0x08007f9c
 8007c7c:	08007f9c 	.word	0x08007f9c
 8007c80:	08007fa0 	.word	0x08007fa0

08007c84 <__retarget_lock_acquire_recursive>:
 8007c84:	4770      	bx	lr

08007c86 <__retarget_lock_release_recursive>:
 8007c86:	4770      	bx	lr

08007c88 <memcpy>:
 8007c88:	440a      	add	r2, r1
 8007c8a:	4291      	cmp	r1, r2
 8007c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c90:	d100      	bne.n	8007c94 <memcpy+0xc>
 8007c92:	4770      	bx	lr
 8007c94:	b510      	push	{r4, lr}
 8007c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c9e:	4291      	cmp	r1, r2
 8007ca0:	d1f9      	bne.n	8007c96 <memcpy+0xe>
 8007ca2:	bd10      	pop	{r4, pc}

08007ca4 <memset>:
 8007ca4:	4402      	add	r2, r0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d100      	bne.n	8007cae <memset+0xa>
 8007cac:	4770      	bx	lr
 8007cae:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb2:	e7f9      	b.n	8007ca8 <memset+0x4>

08007cb4 <cleanup_glue>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	6809      	ldr	r1, [r1, #0]
 8007cba:	4605      	mov	r5, r0
 8007cbc:	b109      	cbz	r1, 8007cc2 <cleanup_glue+0xe>
 8007cbe:	f7ff fff9 	bl	8007cb4 <cleanup_glue>
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cca:	f000 b869 	b.w	8007da0 <_free_r>
	...

08007cd0 <_reclaim_reent>:
 8007cd0:	4b2c      	ldr	r3, [pc, #176]	; (8007d84 <_reclaim_reent+0xb4>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4283      	cmp	r3, r0
 8007cd6:	b570      	push	{r4, r5, r6, lr}
 8007cd8:	4604      	mov	r4, r0
 8007cda:	d051      	beq.n	8007d80 <_reclaim_reent+0xb0>
 8007cdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007cde:	b143      	cbz	r3, 8007cf2 <_reclaim_reent+0x22>
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d14a      	bne.n	8007d7c <_reclaim_reent+0xac>
 8007ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	b111      	cbz	r1, 8007cf2 <_reclaim_reent+0x22>
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 f857 	bl	8007da0 <_free_r>
 8007cf2:	6961      	ldr	r1, [r4, #20]
 8007cf4:	b111      	cbz	r1, 8007cfc <_reclaim_reent+0x2c>
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f000 f852 	bl	8007da0 <_free_r>
 8007cfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007cfe:	b111      	cbz	r1, 8007d06 <_reclaim_reent+0x36>
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 f84d 	bl	8007da0 <_free_r>
 8007d06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d08:	b111      	cbz	r1, 8007d10 <_reclaim_reent+0x40>
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 f848 	bl	8007da0 <_free_r>
 8007d10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d12:	b111      	cbz	r1, 8007d1a <_reclaim_reent+0x4a>
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 f843 	bl	8007da0 <_free_r>
 8007d1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d1c:	b111      	cbz	r1, 8007d24 <_reclaim_reent+0x54>
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 f83e 	bl	8007da0 <_free_r>
 8007d24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d26:	b111      	cbz	r1, 8007d2e <_reclaim_reent+0x5e>
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 f839 	bl	8007da0 <_free_r>
 8007d2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d30:	b111      	cbz	r1, 8007d38 <_reclaim_reent+0x68>
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 f834 	bl	8007da0 <_free_r>
 8007d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d3a:	b111      	cbz	r1, 8007d42 <_reclaim_reent+0x72>
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f000 f82f 	bl	8007da0 <_free_r>
 8007d42:	69a3      	ldr	r3, [r4, #24]
 8007d44:	b1e3      	cbz	r3, 8007d80 <_reclaim_reent+0xb0>
 8007d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4798      	blx	r3
 8007d4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d4e:	b1b9      	cbz	r1, 8007d80 <_reclaim_reent+0xb0>
 8007d50:	4620      	mov	r0, r4
 8007d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d56:	f7ff bfad 	b.w	8007cb4 <cleanup_glue>
 8007d5a:	5949      	ldr	r1, [r1, r5]
 8007d5c:	b941      	cbnz	r1, 8007d70 <_reclaim_reent+0xa0>
 8007d5e:	3504      	adds	r5, #4
 8007d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d62:	2d80      	cmp	r5, #128	; 0x80
 8007d64:	68d9      	ldr	r1, [r3, #12]
 8007d66:	d1f8      	bne.n	8007d5a <_reclaim_reent+0x8a>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 f819 	bl	8007da0 <_free_r>
 8007d6e:	e7ba      	b.n	8007ce6 <_reclaim_reent+0x16>
 8007d70:	680e      	ldr	r6, [r1, #0]
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 f814 	bl	8007da0 <_free_r>
 8007d78:	4631      	mov	r1, r6
 8007d7a:	e7ef      	b.n	8007d5c <_reclaim_reent+0x8c>
 8007d7c:	2500      	movs	r5, #0
 8007d7e:	e7ef      	b.n	8007d60 <_reclaim_reent+0x90>
 8007d80:	bd70      	pop	{r4, r5, r6, pc}
 8007d82:	bf00      	nop
 8007d84:	20000010 	.word	0x20000010

08007d88 <__malloc_lock>:
 8007d88:	4801      	ldr	r0, [pc, #4]	; (8007d90 <__malloc_lock+0x8>)
 8007d8a:	f7ff bf7b 	b.w	8007c84 <__retarget_lock_acquire_recursive>
 8007d8e:	bf00      	nop
 8007d90:	20001bd8 	.word	0x20001bd8

08007d94 <__malloc_unlock>:
 8007d94:	4801      	ldr	r0, [pc, #4]	; (8007d9c <__malloc_unlock+0x8>)
 8007d96:	f7ff bf76 	b.w	8007c86 <__retarget_lock_release_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	20001bd8 	.word	0x20001bd8

08007da0 <_free_r>:
 8007da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007da2:	2900      	cmp	r1, #0
 8007da4:	d044      	beq.n	8007e30 <_free_r+0x90>
 8007da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007daa:	9001      	str	r0, [sp, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f1a1 0404 	sub.w	r4, r1, #4
 8007db2:	bfb8      	it	lt
 8007db4:	18e4      	addlt	r4, r4, r3
 8007db6:	f7ff ffe7 	bl	8007d88 <__malloc_lock>
 8007dba:	4a1e      	ldr	r2, [pc, #120]	; (8007e34 <_free_r+0x94>)
 8007dbc:	9801      	ldr	r0, [sp, #4]
 8007dbe:	6813      	ldr	r3, [r2, #0]
 8007dc0:	b933      	cbnz	r3, 8007dd0 <_free_r+0x30>
 8007dc2:	6063      	str	r3, [r4, #4]
 8007dc4:	6014      	str	r4, [r2, #0]
 8007dc6:	b003      	add	sp, #12
 8007dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dcc:	f7ff bfe2 	b.w	8007d94 <__malloc_unlock>
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d908      	bls.n	8007de6 <_free_r+0x46>
 8007dd4:	6825      	ldr	r5, [r4, #0]
 8007dd6:	1961      	adds	r1, r4, r5
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	bf01      	itttt	eq
 8007ddc:	6819      	ldreq	r1, [r3, #0]
 8007dde:	685b      	ldreq	r3, [r3, #4]
 8007de0:	1949      	addeq	r1, r1, r5
 8007de2:	6021      	streq	r1, [r4, #0]
 8007de4:	e7ed      	b.n	8007dc2 <_free_r+0x22>
 8007de6:	461a      	mov	r2, r3
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	b10b      	cbz	r3, 8007df0 <_free_r+0x50>
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	d9fa      	bls.n	8007de6 <_free_r+0x46>
 8007df0:	6811      	ldr	r1, [r2, #0]
 8007df2:	1855      	adds	r5, r2, r1
 8007df4:	42a5      	cmp	r5, r4
 8007df6:	d10b      	bne.n	8007e10 <_free_r+0x70>
 8007df8:	6824      	ldr	r4, [r4, #0]
 8007dfa:	4421      	add	r1, r4
 8007dfc:	1854      	adds	r4, r2, r1
 8007dfe:	42a3      	cmp	r3, r4
 8007e00:	6011      	str	r1, [r2, #0]
 8007e02:	d1e0      	bne.n	8007dc6 <_free_r+0x26>
 8007e04:	681c      	ldr	r4, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	6053      	str	r3, [r2, #4]
 8007e0a:	4421      	add	r1, r4
 8007e0c:	6011      	str	r1, [r2, #0]
 8007e0e:	e7da      	b.n	8007dc6 <_free_r+0x26>
 8007e10:	d902      	bls.n	8007e18 <_free_r+0x78>
 8007e12:	230c      	movs	r3, #12
 8007e14:	6003      	str	r3, [r0, #0]
 8007e16:	e7d6      	b.n	8007dc6 <_free_r+0x26>
 8007e18:	6825      	ldr	r5, [r4, #0]
 8007e1a:	1961      	adds	r1, r4, r5
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	bf04      	itt	eq
 8007e20:	6819      	ldreq	r1, [r3, #0]
 8007e22:	685b      	ldreq	r3, [r3, #4]
 8007e24:	6063      	str	r3, [r4, #4]
 8007e26:	bf04      	itt	eq
 8007e28:	1949      	addeq	r1, r1, r5
 8007e2a:	6021      	streq	r1, [r4, #0]
 8007e2c:	6054      	str	r4, [r2, #4]
 8007e2e:	e7ca      	b.n	8007dc6 <_free_r+0x26>
 8007e30:	b003      	add	sp, #12
 8007e32:	bd30      	pop	{r4, r5, pc}
 8007e34:	20001bdc 	.word	0x20001bdc

08007e38 <_init>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr

08007e44 <_fini>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr
