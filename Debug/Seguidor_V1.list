
Seguidor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e2c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003014  08003014  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003014  08003014  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003014  08003014  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800301c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003028  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003028  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b761  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a18  00000000  00000000  0002b79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024be7  00000000  00000000  0002e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c840  00000000  00000000  000534d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f10b0  00000000  00000000  0005fd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c8  00000000  00000000  00150e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002fec 	.word	0x08002fec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002fec 	.word	0x08002fec

08000218 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b09      	ldr	r3, [pc, #36]	; (8000244 <MX_GPIO_Init+0x2c>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000222:	4a08      	ldr	r2, [pc, #32]	; (8000244 <MX_GPIO_Init+0x2c>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <MX_GPIO_Init+0x2c>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]

}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 fac7 	bl	80007de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f84c 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f7ff ffe0 	bl	8000218 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000258:	f000 f90e 	bl	8000478 <MX_TIM2_Init>
  MX_TIM3_Init();
 800025c:	f000 f984 	bl	8000568 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000260:	2100      	movs	r1, #0
 8000262:	4820      	ldr	r0, [pc, #128]	; (80002e4 <main+0x9c>)
 8000264:	f001 fc38 	bl	8001ad8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000268:	2100      	movs	r1, #0
 800026a:	481f      	ldr	r0, [pc, #124]	; (80002e8 <main+0xa0>)
 800026c:	f001 fc34 	bl	8001ad8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim2.Instance->CCR1 = 75;
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <main+0x9c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	224b      	movs	r2, #75	; 0x4b
 8000276:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR1 = 75;
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <main+0xa0>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	224b      	movs	r2, #75	; 0x4b
 800027e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8000280:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000284:	f000 fb1c 	bl	80008c0 <HAL_Delay>
	  htim2.Instance->CCR1 = 100;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <main+0x9c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2264      	movs	r2, #100	; 0x64
 800028e:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR1 = 100;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <main+0xa0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2264      	movs	r2, #100	; 0x64
 8000296:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029c:	f000 fb10 	bl	80008c0 <HAL_Delay>
	  htim3.Instance->CCR1 = 50;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <main+0xa0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2232      	movs	r2, #50	; 0x32
 80002a6:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80002a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ac:	f000 fb08 	bl	80008c0 <HAL_Delay>
	  htim2.Instance->CCR1 = 75;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <main+0x9c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	224b      	movs	r2, #75	; 0x4b
 80002b6:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR1 = 75;
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <main+0xa0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	224b      	movs	r2, #75	; 0x4b
 80002be:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80002c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002c4:	f000 fafc 	bl	80008c0 <HAL_Delay>
	  htim2.Instance->CCR1 = 50;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <main+0x9c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2232      	movs	r2, #50	; 0x32
 80002ce:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR1 = 50;
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <main+0xa0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2232      	movs	r2, #50	; 0x32
 80002d6:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80002d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002dc:	f000 faf0 	bl	80008c0 <HAL_Delay>
	  htim2.Instance->CCR1 = 75;
 80002e0:	e7c6      	b.n	8000270 <main+0x28>
 80002e2:	bf00      	nop
 80002e4:	20000028 	.word	0x20000028
 80002e8:	20000074 	.word	0x20000074

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b094      	sub	sp, #80	; 0x50
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2238      	movs	r2, #56	; 0x38
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fe6e 	bl	8002fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800030e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000312:	f000 fd89 	bl	8000e28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000320:	2340      	movs	r3, #64	; 0x40
 8000322:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000328:	2302      	movs	r3, #2
 800032a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800032c:	2304      	movs	r3, #4
 800032e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 45;
 8000330:	232d      	movs	r3, #45	; 0x2d
 8000332:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000334:	2302      	movs	r3, #2
 8000336:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000338:	2302      	movs	r3, #2
 800033a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800033c:	2302      	movs	r3, #2
 800033e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fe13 	bl	8000f70 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000350:	f000 f819 	bl	8000386 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2303      	movs	r3, #3
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000360:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f001 f916 	bl	80015a0 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800037a:	f000 f804 	bl	8000386 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3750      	adds	r7, #80	; 0x50
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038a:	b672      	cpsid	i
}
 800038c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038e:	e7fe      	b.n	800038e <Error_Handler+0x8>

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_MspInit+0x44>)
 8000398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <HAL_MspInit+0x44>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6613      	str	r3, [r2, #96]	; 0x60
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <HAL_MspInit+0x44>)
 80003a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <HAL_MspInit+0x44>)
 80003b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <HAL_MspInit+0x44>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	6593      	str	r3, [r2, #88]	; 0x58
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <HAL_MspInit+0x44>)
 80003bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <NMI_Handler+0x4>

080003de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <HardFault_Handler+0x4>

080003e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <MemManage_Handler+0x4>

080003ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <BusFault_Handler+0x4>

080003f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <UsageFault_Handler+0x4>

080003f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000424:	f000 fa2e 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}

0800042c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <TIM2_IRQHandler+0x10>)
 8000432:	f001 fc63 	bl	8001cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028

08000440 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <TIM3_IRQHandler+0x10>)
 8000446:	f001 fc59 	bl	8001cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000074 	.word	0x20000074

08000454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <SystemInit+0x20>)
 800045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <SystemInit+0x20>)
 8000460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	; 0x38
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048c:	f107 031c 	add.w	r3, r7, #28
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004aa:	4b2e      	ldr	r3, [pc, #184]	; (8000564 <MX_TIM2_Init+0xec>)
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 80004b2:	4b2c      	ldr	r3, [pc, #176]	; (8000564 <MX_TIM2_Init+0xec>)
 80004b4:	f240 3283 	movw	r2, #899	; 0x383
 80004b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <MX_TIM2_Init+0xec>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004c0:	4b28      	ldr	r3, [pc, #160]	; (8000564 <MX_TIM2_Init+0xec>)
 80004c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <MX_TIM2_Init+0xec>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ce:	4b25      	ldr	r3, [pc, #148]	; (8000564 <MX_TIM2_Init+0xec>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004d4:	4823      	ldr	r0, [pc, #140]	; (8000564 <MX_TIM2_Init+0xec>)
 80004d6:	f001 fa47 	bl	8001968 <HAL_TIM_Base_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80004e0:	f7ff ff51 	bl	8000386 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ee:	4619      	mov	r1, r3
 80004f0:	481c      	ldr	r0, [pc, #112]	; (8000564 <MX_TIM2_Init+0xec>)
 80004f2:	f001 fe97 	bl	8002224 <HAL_TIM_ConfigClockSource>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80004fc:	f7ff ff43 	bl	8000386 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000500:	4818      	ldr	r0, [pc, #96]	; (8000564 <MX_TIM2_Init+0xec>)
 8000502:	f001 fa88 	bl	8001a16 <HAL_TIM_PWM_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800050c:	f7ff ff3b 	bl	8000386 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	4619      	mov	r1, r3
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <MX_TIM2_Init+0xec>)
 8000520:	f002 fc5c 	bl	8002ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800052a:	f7ff ff2c 	bl	8000386 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800052e:	2360      	movs	r3, #96	; 0x60
 8000530:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	4619      	mov	r1, r3
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <MX_TIM2_Init+0xec>)
 8000546:	f001 fd59 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000550:	f7ff ff19 	bl	8000386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <MX_TIM2_Init+0xec>)
 8000556:	f000 f8bf 	bl	80006d8 <HAL_TIM_MspPostInit>

}
 800055a:	bf00      	nop
 800055c:	3738      	adds	r7, #56	; 0x38
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028

08000568 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08e      	sub	sp, #56	; 0x38
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_TIM3_Init+0xe8>)
 800059c:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <MX_TIM3_Init+0xec>)
 800059e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900-1;
 80005a0:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <MX_TIM3_Init+0xe8>)
 80005a2:	f240 3283 	movw	r2, #899	; 0x383
 80005a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_TIM3_Init+0xe8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_TIM3_Init+0xe8>)
 80005b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_TIM3_Init+0xe8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_TIM3_Init+0xe8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005c2:	4823      	ldr	r0, [pc, #140]	; (8000650 <MX_TIM3_Init+0xe8>)
 80005c4:	f001 f9d0 	bl	8001968 <HAL_TIM_Base_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80005ce:	f7ff feda 	bl	8000386 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005dc:	4619      	mov	r1, r3
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <MX_TIM3_Init+0xe8>)
 80005e0:	f001 fe20 	bl	8002224 <HAL_TIM_ConfigClockSource>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80005ea:	f7ff fecc 	bl	8000386 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <MX_TIM3_Init+0xe8>)
 80005f0:	f001 fa11 	bl	8001a16 <HAL_TIM_PWM_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005fa:	f7ff fec4 	bl	8000386 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <MX_TIM3_Init+0xe8>)
 800060e:	f002 fbe5 	bl	8002ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000618:	f7ff feb5 	bl	8000386 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	4619      	mov	r1, r3
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <MX_TIM3_Init+0xe8>)
 8000634:	f001 fce2 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800063e:	f7ff fea2 	bl	8000386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <MX_TIM3_Init+0xe8>)
 8000644:	f000 f848 	bl	80006d8 <HAL_TIM_MspPostInit>

}
 8000648:	bf00      	nop
 800064a:	3738      	adds	r7, #56	; 0x38
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000074 	.word	0x20000074
 8000654:	40000400 	.word	0x40000400

08000658 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000668:	d114      	bne.n	8000694 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_TIM_Base_MspInit+0x78>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <HAL_TIM_Base_MspInit+0x78>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6593      	str	r3, [r2, #88]	; 0x58
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_TIM_Base_MspInit+0x78>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	201c      	movs	r0, #28
 8000688:	f000 fa17 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800068c:	201c      	movs	r0, #28
 800068e:	f000 fa2e 	bl	8000aee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000692:	e018      	b.n	80006c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_TIM_Base_MspInit+0x7c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d113      	bne.n	80006c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <HAL_TIM_Base_MspInit+0x78>)
 80006a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <HAL_TIM_Base_MspInit+0x78>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6593      	str	r3, [r2, #88]	; 0x58
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_TIM_Base_MspInit+0x78>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	201d      	movs	r0, #29
 80006bc:	f000 f9fd 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006c0:	201d      	movs	r0, #29
 80006c2:	f000 fa14 	bl	8000aee <HAL_NVIC_EnableIRQ>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40000400 	.word	0x40000400

080006d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006f8:	d11d      	bne.n	8000736 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <HAL_TIM_MspPostInit+0xac>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a21      	ldr	r2, [pc, #132]	; (8000784 <HAL_TIM_MspPostInit+0xac>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <HAL_TIM_MspPostInit+0xac>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000722:	2301      	movs	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f000 f9f8 	bl	8000b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000734:	e021      	b.n	800077a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <HAL_TIM_MspPostInit+0xb0>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d11c      	bne.n	800077a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_TIM_MspPostInit+0xac>)
 8000742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000744:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <HAL_TIM_MspPostInit+0xac>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_TIM_MspPostInit+0xac>)
 800074e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000758:	2340      	movs	r3, #64	; 0x40
 800075a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000768:	2302      	movs	r3, #2
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f000 f9d5 	bl	8000b24 <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40000400 	.word	0x40000400

0800078c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000792:	490e      	ldr	r1, [pc, #56]	; (80007cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <LoopForever+0xe>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a8:	4c0b      	ldr	r4, [pc, #44]	; (80007d8 <LoopForever+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b6:	f7ff fe4d 	bl	8000454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ba:	f002 fbeb 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007be:	f7ff fd43 	bl	8000248 <main>

080007c2 <LoopForever>:

LoopForever:
    b LoopForever
 80007c2:	e7fe      	b.n	80007c2 <LoopForever>
  ldr   r0, =_estack
 80007c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007d0:	0800301c 	.word	0x0800301c
  ldr r2, =_sbss
 80007d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d8:	200000c4 	.word	0x200000c4

080007dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_2_IRQHandler>

080007de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f95b 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f80e 	bl	8000810 <HAL_InitTick>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	e001      	b.n	8000804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000800:	f7ff fdc6 	bl	8000390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000804:	79fb      	ldrb	r3, [r7, #7]

}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_InitTick+0x68>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d022      	beq.n	800086a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_InitTick+0x6c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <HAL_InitTick+0x68>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000830:	fbb1 f3f3 	udiv	r3, r1, r3
 8000834:	fbb2 f3f3 	udiv	r3, r2, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f966 	bl	8000b0a <HAL_SYSTICK_Config>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10f      	bne.n	8000864 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d809      	bhi.n	800085e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084a:	2200      	movs	r2, #0
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	f04f 30ff 	mov.w	r0, #4294967295
 8000852:	f000 f932 	bl	8000aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_InitTick+0x70>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	e007      	b.n	800086e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
 8000862:	e004      	b.n	800086e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	e001      	b.n	800086e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000008 	.word	0x20000008
 800087c:	20000000 	.word	0x20000000
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4413      	add	r3, r2
 8000892:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <HAL_IncTick+0x1c>)
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	200000c0 	.word	0x200000c0
 80008a4:	20000008 	.word	0x20000008

080008a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_GetTick+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200000c0 	.word	0x200000c0

080008c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff ffee 	bl	80008a8 <HAL_GetTick>
 80008cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d8:	d004      	beq.n	80008e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_Delay+0x40>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e4:	bf00      	nop
 80008e6:	f7ff ffdf 	bl	80008a8 <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d8f7      	bhi.n	80008e6 <HAL_Delay+0x26>
  {
  }
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000008 	.word	0x20000008

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db0b      	blt.n	8000992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 021f 	and.w	r2, r3, #31
 8000980:	4907      	ldr	r1, [pc, #28]	; (80009a0 <__NVIC_EnableIRQ+0x38>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	095b      	lsrs	r3, r3, #5
 8000988:	2001      	movs	r0, #1
 800098a:	fa00 f202 	lsl.w	r2, r0, r2
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff8e 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff29 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff40 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff90 	bl	80009f8 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5f 	bl	80009a4 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff33 	bl	8000968 <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa4 	bl	8000a60 <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b32:	e15a      	b.n	8000dea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 814c 	beq.w	8000de4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d005      	beq.n	8000b64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d130      	bne.n	8000bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	2203      	movs	r2, #3
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	f003 0201 	and.w	r2, r3, #1
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d017      	beq.n	8000c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d123      	bne.n	8000c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	08da      	lsrs	r2, r3, #3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3208      	adds	r2, #8
 8000c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	220f      	movs	r2, #15
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	08da      	lsrs	r2, r3, #3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3208      	adds	r2, #8
 8000c50:	6939      	ldr	r1, [r7, #16]
 8000c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0203 	and.w	r2, r3, #3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80a6 	beq.w	8000de4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c98:	4b5b      	ldr	r3, [pc, #364]	; (8000e08 <HAL_GPIO_Init+0x2e4>)
 8000c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9c:	4a5a      	ldr	r2, [pc, #360]	; (8000e08 <HAL_GPIO_Init+0x2e4>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca4:	4b58      	ldr	r3, [pc, #352]	; (8000e08 <HAL_GPIO_Init+0x2e4>)
 8000ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cb0:	4a56      	ldr	r2, [pc, #344]	; (8000e0c <HAL_GPIO_Init+0x2e8>)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cda:	d01f      	beq.n	8000d1c <HAL_GPIO_Init+0x1f8>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a4c      	ldr	r2, [pc, #304]	; (8000e10 <HAL_GPIO_Init+0x2ec>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d019      	beq.n	8000d18 <HAL_GPIO_Init+0x1f4>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a4b      	ldr	r2, [pc, #300]	; (8000e14 <HAL_GPIO_Init+0x2f0>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d013      	beq.n	8000d14 <HAL_GPIO_Init+0x1f0>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a4a      	ldr	r2, [pc, #296]	; (8000e18 <HAL_GPIO_Init+0x2f4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d00d      	beq.n	8000d10 <HAL_GPIO_Init+0x1ec>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a49      	ldr	r2, [pc, #292]	; (8000e1c <HAL_GPIO_Init+0x2f8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d007      	beq.n	8000d0c <HAL_GPIO_Init+0x1e8>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a48      	ldr	r2, [pc, #288]	; (8000e20 <HAL_GPIO_Init+0x2fc>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d101      	bne.n	8000d08 <HAL_GPIO_Init+0x1e4>
 8000d04:	2305      	movs	r3, #5
 8000d06:	e00a      	b.n	8000d1e <HAL_GPIO_Init+0x1fa>
 8000d08:	2306      	movs	r3, #6
 8000d0a:	e008      	b.n	8000d1e <HAL_GPIO_Init+0x1fa>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e006      	b.n	8000d1e <HAL_GPIO_Init+0x1fa>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e004      	b.n	8000d1e <HAL_GPIO_Init+0x1fa>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x1fa>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <HAL_GPIO_Init+0x1fa>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	f002 0203 	and.w	r2, r2, #3
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	4093      	lsls	r3, r2
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d2e:	4937      	ldr	r1, [pc, #220]	; (8000e0c <HAL_GPIO_Init+0x2e8>)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d8a:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3301      	adds	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa22 f303 	lsr.w	r3, r2, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f47f ae9d 	bne.w	8000b34 <HAL_GPIO_Init+0x10>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	48000400 	.word	0x48000400
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48000c00 	.word	0x48000c00
 8000e1c:	48001000 	.word	0x48001000
 8000e20:	48001400 	.word	0x48001400
 8000e24:	40010400 	.word	0x40010400

08000e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d141      	bne.n	8000eba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e36:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e42:	d131      	bne.n	8000ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e4a:	4a46      	ldr	r2, [pc, #280]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e5c:	4a41      	ldr	r2, [pc, #260]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e64:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2232      	movs	r2, #50	; 0x32
 8000e6a:	fb02 f303 	mul.w	r3, r2, r3
 8000e6e:	4a3f      	ldr	r2, [pc, #252]	; (8000f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	0c9b      	lsrs	r3, r3, #18
 8000e76:	3301      	adds	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e7a:	e002      	b.n	8000e82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8e:	d102      	bne.n	8000e96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f2      	bne.n	8000e7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e96:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea2:	d158      	bne.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e057      	b.n	8000f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eae:	4a2d      	ldr	r2, [pc, #180]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000eb8:	e04d      	b.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec0:	d141      	bne.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ece:	d131      	bne.n	8000f34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ed0:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ed6:	4a23      	ldr	r2, [pc, #140]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ee8:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2232      	movs	r2, #50	; 0x32
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	0c9b      	lsrs	r3, r3, #18
 8000f02:	3301      	adds	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f06:	e002      	b.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1a:	d102      	bne.n	8000f22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f2      	bne.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2e:	d112      	bne.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e011      	b.n	8000f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f44:	e007      	b.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40007000 	.word	0x40007000
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	431bde83 	.word	0x431bde83

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e306      	b.n	8001590 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d075      	beq.n	800107a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f8e:	4b97      	ldr	r3, [pc, #604]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f98:	4b94      	ldr	r3, [pc, #592]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	2b0c      	cmp	r3, #12
 8000fa6:	d102      	bne.n	8000fae <HAL_RCC_OscConfig+0x3e>
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d002      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x44>
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d10b      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	4b8d      	ldr	r3, [pc, #564]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d05b      	beq.n	8001078 <HAL_RCC_OscConfig+0x108>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d157      	bne.n	8001078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e2e1      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d106      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x74>
 8000fd6:	4b85      	ldr	r3, [pc, #532]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a84      	ldr	r2, [pc, #528]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e01d      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x98>
 8000fee:	4b7f      	ldr	r3, [pc, #508]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7e      	ldr	r2, [pc, #504]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b7c      	ldr	r3, [pc, #496]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a7b      	ldr	r2, [pc, #492]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e00b      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
 8001008:	4b78      	ldr	r3, [pc, #480]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a77      	ldr	r2, [pc, #476]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 800100e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b75      	ldr	r3, [pc, #468]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a74      	ldr	r2, [pc, #464]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 800101a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d013      	beq.n	8001050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001028:	f7ff fc3e 	bl	80008a8 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fc3a 	bl	80008a8 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e2a6      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001042:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0xc0>
 800104e:	e014      	b.n	800107a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fc2a 	bl	80008a8 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fc26 	bl	80008a8 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e292      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800106a:	4b60      	ldr	r3, [pc, #384]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0xe8>
 8001076:	e000      	b.n	800107a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d075      	beq.n	8001172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001086:	4b59      	ldr	r3, [pc, #356]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001090:	4b56      	ldr	r3, [pc, #344]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2b0c      	cmp	r3, #12
 800109e:	d102      	bne.n	80010a6 <HAL_RCC_OscConfig+0x136>
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d002      	beq.n	80010ac <HAL_RCC_OscConfig+0x13c>
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d11f      	bne.n	80010ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ac:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_RCC_OscConfig+0x154>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e265      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b49      	ldr	r3, [pc, #292]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	4946      	ldr	r1, [pc, #280]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010d8:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <HAL_RCC_OscConfig+0x280>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fb97 	bl	8000810 <HAL_InitTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d043      	beq.n	8001170 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e251      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d023      	beq.n	800113c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f4:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a3c      	ldr	r2, [pc, #240]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff fbd2 	bl	80008a8 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001108:	f7ff fbce 	bl	80008a8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e23a      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	061b      	lsls	r3, r3, #24
 8001134:	492d      	ldr	r1, [pc, #180]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001136:	4313      	orrs	r3, r2
 8001138:	604b      	str	r3, [r1, #4]
 800113a:	e01a      	b.n	8001172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fbae 	bl	80008a8 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fbaa 	bl	80008a8 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e216      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1e0>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d041      	beq.n	8001202 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d01c      	beq.n	80011c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 8001188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001196:	f7ff fb87 	bl	80008a8 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff fb83 	bl	80008a8 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1ef      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0ef      	beq.n	800119e <HAL_RCC_OscConfig+0x22e>
 80011be:	e020      	b.n	8001202 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80011c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_RCC_OscConfig+0x27c>)
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d0:	f7ff fb6a 	bl	80008a8 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011d6:	e00d      	b.n	80011f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d8:	f7ff fb66 	bl	80008a8 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d906      	bls.n	80011f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1d2      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011f4:	4b8c      	ldr	r3, [pc, #560]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80011f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ea      	bne.n	80011d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 80a6 	beq.w	800135c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001214:	4b84      	ldr	r3, [pc, #528]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_OscConfig+0x2b4>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <HAL_RCC_OscConfig+0x2b6>
 8001224:	2300      	movs	r3, #0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00d      	beq.n	8001246 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b7f      	ldr	r3, [pc, #508]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4a7e      	ldr	r2, [pc, #504]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
 8001236:	4b7c      	ldr	r3, [pc, #496]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001242:	2301      	movs	r3, #1
 8001244:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001246:	4b79      	ldr	r3, [pc, #484]	; (800142c <HAL_RCC_OscConfig+0x4bc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d118      	bne.n	8001284 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001252:	4b76      	ldr	r3, [pc, #472]	; (800142c <HAL_RCC_OscConfig+0x4bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a75      	ldr	r2, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x4bc>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125e:	f7ff fb23 	bl	80008a8 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001266:	f7ff fb1f 	bl	80008a8 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e18b      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001278:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_RCC_OscConfig+0x4bc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d108      	bne.n	800129e <HAL_RCC_OscConfig+0x32e>
 800128c:	4b66      	ldr	r3, [pc, #408]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 800128e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001292:	4a65      	ldr	r2, [pc, #404]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800129c:	e024      	b.n	80012e8 <HAL_RCC_OscConfig+0x378>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d110      	bne.n	80012c8 <HAL_RCC_OscConfig+0x358>
 80012a6:	4b60      	ldr	r3, [pc, #384]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80012a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ac:	4a5e      	ldr	r2, [pc, #376]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b6:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80012b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012bc:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012c6:	e00f      	b.n	80012e8 <HAL_RCC_OscConfig+0x378>
 80012c8:	4b57      	ldr	r3, [pc, #348]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80012ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ce:	4a56      	ldr	r2, [pc, #344]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d8:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80012da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012de:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d016      	beq.n	800131e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f0:	f7ff fada 	bl	80008a8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012f6:	e00a      	b.n	800130e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fad6 	bl	80008a8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e140      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ed      	beq.n	80012f8 <HAL_RCC_OscConfig+0x388>
 800131c:	e015      	b.n	800134a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131e:	f7ff fac3 	bl	80008a8 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fabf 	bl	80008a8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f241 3288 	movw	r2, #5000	; 0x1388
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e129      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1ed      	bne.n	8001326 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	4a34      	ldr	r2, [pc, #208]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	2b00      	cmp	r3, #0
 8001366:	d03c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01c      	beq.n	80013aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001376:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff fa92 	bl	80008a8 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001388:	f7ff fa8e 	bl	80008a8 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e0fa      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 800139c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0ef      	beq.n	8001388 <HAL_RCC_OscConfig+0x418>
 80013a8:	e01b      	b.n	80013e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80013ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fa75 	bl	80008a8 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013c2:	f7ff fa71 	bl	80008a8 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0dd      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80013d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ef      	bne.n	80013c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80d1 	beq.w	800158e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	f000 808b 	beq.w	8001510 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d15e      	bne.n	80014c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_RCC_OscConfig+0x4b8>)
 8001408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800140c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fa4b 	bl	80008a8 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001414:	e00c      	b.n	8001430 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff fa47 	bl	80008a8 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d905      	bls.n	8001430 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0b3      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
 8001428:	40021000 	.word	0x40021000
 800142c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001430:	4b59      	ldr	r3, [pc, #356]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ec      	bne.n	8001416 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143c:	4b56      	ldr	r3, [pc, #344]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_OscConfig+0x62c>)
 8001442:	4013      	ands	r3, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6a11      	ldr	r1, [r2, #32]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800144c:	3a01      	subs	r2, #1
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	4311      	orrs	r1, r2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001456:	0212      	lsls	r2, r2, #8
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800145e:	0852      	lsrs	r2, r2, #1
 8001460:	3a01      	subs	r2, #1
 8001462:	0552      	lsls	r2, r2, #21
 8001464:	4311      	orrs	r1, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800146a:	0852      	lsrs	r2, r2, #1
 800146c:	3a01      	subs	r2, #1
 800146e:	0652      	lsls	r2, r2, #25
 8001470:	4311      	orrs	r1, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001476:	06d2      	lsls	r2, r2, #27
 8001478:	430a      	orrs	r2, r1
 800147a:	4947      	ldr	r1, [pc, #284]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 800147c:	4313      	orrs	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a44      	ldr	r2, [pc, #272]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a41      	ldr	r2, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 8001492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001496:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fa06 	bl	80008a8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fa02 	bl	80008a8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e06e      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b2:	4b39      	ldr	r3, [pc, #228]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x530>
 80014be:	e066      	b.n	800158e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a34      	ldr	r2, [pc, #208]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 80014c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a31      	ldr	r2, [pc, #196]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80014d8:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 80014de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff f9de 	bl	80008a8 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff f9da 	bl	80008a8 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e046      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x580>
 800150e:	e03e      	b.n	800158e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e039      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_RCC_OscConfig+0x628>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	429a      	cmp	r2, r3
 800152e:	d12c      	bne.n	800158a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	3b01      	subs	r3, #1
 800153c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d123      	bne.n	800158a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d11b      	bne.n	800158a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800155e:	429a      	cmp	r2, r3
 8001560:	d113      	bne.n	800158a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	3b01      	subs	r3, #1
 8001570:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d109      	bne.n	800158a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	3b01      	subs	r3, #1
 8001584:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	019f800c 	.word	0x019f800c

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e11e      	b.n	80017f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b91      	ldr	r3, [pc, #580]	; (8001800 <HAL_RCC_ClockConfig+0x260>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d910      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b8e      	ldr	r3, [pc, #568]	; (8001800 <HAL_RCC_ClockConfig+0x260>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 020f 	bic.w	r2, r3, #15
 80015ce:	498c      	ldr	r1, [pc, #560]	; (8001800 <HAL_RCC_ClockConfig+0x260>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <HAL_RCC_ClockConfig+0x260>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e106      	b.n	80017f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d073      	beq.n	80016dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d129      	bne.n	8001650 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fc:	4b81      	ldr	r3, [pc, #516]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0f4      	b.n	80017f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800160c:	f000 f966 	bl	80018dc <RCC_GetSysClockFreqFromPLLSource>
 8001610:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4a7c      	ldr	r2, [pc, #496]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d93f      	bls.n	800169a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800161a:	4b7a      	ldr	r3, [pc, #488]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800162e:	2b00      	cmp	r3, #0
 8001630:	d033      	beq.n	800169a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001636:	2b00      	cmp	r3, #0
 8001638:	d12f      	bne.n	800169a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001642:	4a70      	ldr	r2, [pc, #448]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001648:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e024      	b.n	800169a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d107      	bne.n	8001668 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001658:	4b6a      	ldr	r3, [pc, #424]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d109      	bne.n	8001678 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0c6      	b.n	80017f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001668:	4b66      	ldr	r3, [pc, #408]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0be      	b.n	80017f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001678:	f000 f8ce 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 800167c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4a61      	ldr	r2, [pc, #388]	; (8001808 <HAL_RCC_ClockConfig+0x268>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d909      	bls.n	800169a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800168e:	4a5d      	ldr	r2, [pc, #372]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800169a:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f023 0203 	bic.w	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4957      	ldr	r1, [pc, #348]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016ac:	f7ff f8fc 	bl	80008a8 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b4:	f7ff f8f8 	bl	80008a8 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e095      	b.n	80017f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 020c 	and.w	r2, r3, #12
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	429a      	cmp	r2, r3
 80016da:	d1eb      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d023      	beq.n	8001730 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a42      	ldr	r2, [pc, #264]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80016fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800170c:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001714:	4a3b      	ldr	r2, [pc, #236]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 8001716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800171a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b39      	ldr	r3, [pc, #228]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4936      	ldr	r1, [pc, #216]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
 800172e:	e008      	b.n	8001742 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b80      	cmp	r3, #128	; 0x80
 8001734:	d105      	bne.n	8001742 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800173c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001740:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCC_ClockConfig+0x260>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d21d      	bcs.n	800178c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_ClockConfig+0x260>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 020f 	bic.w	r2, r3, #15
 8001758:	4929      	ldr	r1, [pc, #164]	; (8001800 <HAL_RCC_ClockConfig+0x260>)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001760:	f7ff f8a2 	bl	80008a8 <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	e00a      	b.n	800177e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff f89e 	bl	80008a8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e03b      	b.n	80017f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_ClockConfig+0x260>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d1ed      	bne.n	8001768 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4917      	ldr	r1, [pc, #92]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	490f      	ldr	r1, [pc, #60]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017ca:	f000 f825 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_RCC_ClockConfig+0x264>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	490c      	ldr	r1, [pc, #48]	; (800180c <HAL_RCC_ClockConfig+0x26c>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x270>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x274>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f80e 	bl	8000810 <HAL_InitTick>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000
 8001804:	40021000 	.word	0x40021000
 8001808:	04c4b400 	.word	0x04c4b400
 800180c:	08003004 	.word	0x08003004
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b04      	cmp	r3, #4
 8001828:	d102      	bne.n	8001830 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e047      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d102      	bne.n	8001842 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800183c:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	e03e      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d136      	bne.n	80018bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3301      	adds	r3, #1
 8001864:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800186c:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001876:	68d2      	ldr	r2, [r2, #12]
 8001878:	0a12      	lsrs	r2, r2, #8
 800187a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
      break;
 8001884:	e00c      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001890:	68d2      	ldr	r2, [r2, #12]
 8001892:	0a12      	lsrs	r2, r2, #8
 8001894:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
      break;
 800189e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0e5b      	lsrs	r3, r3, #25
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e001      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018c0:	693b      	ldr	r3, [r7, #16]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	00f42400 	.word	0x00f42400
 80018d8:	007a1200 	.word	0x007a1200

080018dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d10c      	bne.n	800191a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001900:	4a17      	ldr	r2, [pc, #92]	; (8001960 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800190a:	68d2      	ldr	r2, [r2, #12]
 800190c:	0a12      	lsrs	r2, r2, #8
 800190e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
    break;
 8001918:	e00c      	b.n	8001934 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001924:	68d2      	ldr	r2, [r2, #12]
 8001926:	0a12      	lsrs	r2, r2, #8
 8001928:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    break;
 8001932:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0e5b      	lsrs	r3, r3, #25
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	3301      	adds	r3, #1
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800194e:	687b      	ldr	r3, [r7, #4]
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40021000 	.word	0x40021000
 8001960:	007a1200 	.word	0x007a1200
 8001964:	00f42400 	.word	0x00f42400

08001968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e049      	b.n	8001a0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fe62 	bl	8000658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3304      	adds	r3, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4610      	mov	r0, r2
 80019a8:	f000 fd84 	bl	80024b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e049      	b.n	8001abc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d106      	bne.n	8001a42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f841 	bl	8001ac4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3304      	adds	r3, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4610      	mov	r0, r2
 8001a56:	f000 fd2d 	bl	80024b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_TIM_PWM_Start+0x24>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	bf14      	ite	ne
 8001af4:	2301      	movne	r3, #1
 8001af6:	2300      	moveq	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e03c      	b.n	8001b76 <HAL_TIM_PWM_Start+0x9e>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d109      	bne.n	8001b16 <HAL_TIM_PWM_Start+0x3e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	e02f      	b.n	8001b76 <HAL_TIM_PWM_Start+0x9e>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d109      	bne.n	8001b30 <HAL_TIM_PWM_Start+0x58>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e022      	b.n	8001b76 <HAL_TIM_PWM_Start+0x9e>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d109      	bne.n	8001b4a <HAL_TIM_PWM_Start+0x72>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	e015      	b.n	8001b76 <HAL_TIM_PWM_Start+0x9e>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b10      	cmp	r3, #16
 8001b4e:	d109      	bne.n	8001b64 <HAL_TIM_PWM_Start+0x8c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	e008      	b.n	8001b76 <HAL_TIM_PWM_Start+0x9e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0a6      	b.n	8001ccc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <HAL_TIM_PWM_Start+0xb6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b8c:	e023      	b.n	8001bd6 <HAL_TIM_PWM_Start+0xfe>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d104      	bne.n	8001b9e <HAL_TIM_PWM_Start+0xc6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b9c:	e01b      	b.n	8001bd6 <HAL_TIM_PWM_Start+0xfe>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d104      	bne.n	8001bae <HAL_TIM_PWM_Start+0xd6>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bac:	e013      	b.n	8001bd6 <HAL_TIM_PWM_Start+0xfe>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	d104      	bne.n	8001bbe <HAL_TIM_PWM_Start+0xe6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bbc:	e00b      	b.n	8001bd6 <HAL_TIM_PWM_Start+0xfe>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d104      	bne.n	8001bce <HAL_TIM_PWM_Start+0xf6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bcc:	e003      	b.n	8001bd6 <HAL_TIM_PWM_Start+0xfe>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 f8d6 	bl	8002d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <HAL_TIM_PWM_Start+0x1fc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d018      	beq.n	8001c20 <HAL_TIM_PWM_Start+0x148>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <HAL_TIM_PWM_Start+0x200>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_TIM_PWM_Start+0x148>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a37      	ldr	r2, [pc, #220]	; (8001cdc <HAL_TIM_PWM_Start+0x204>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00e      	beq.n	8001c20 <HAL_TIM_PWM_Start+0x148>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a36      	ldr	r2, [pc, #216]	; (8001ce0 <HAL_TIM_PWM_Start+0x208>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_TIM_PWM_Start+0x148>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <HAL_TIM_PWM_Start+0x20c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_TIM_PWM_Start+0x148>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a33      	ldr	r2, [pc, #204]	; (8001ce8 <HAL_TIM_PWM_Start+0x210>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_TIM_PWM_Start+0x14c>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_TIM_PWM_Start+0x14e>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <HAL_TIM_PWM_Start+0x1fc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d022      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x1b2>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d01d      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x1b2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a26      	ldr	r2, [pc, #152]	; (8001cec <HAL_TIM_PWM_Start+0x214>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d018      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x1b2>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_TIM_PWM_Start+0x218>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x1b2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_TIM_PWM_Start+0x21c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00e      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x1b2>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_TIM_PWM_Start+0x200>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x1b2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_TIM_PWM_Start+0x204>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x1b2>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <HAL_TIM_PWM_Start+0x210>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d115      	bne.n	8001cb6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_TIM_PWM_Start+0x220>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d015      	beq.n	8001cc8 <HAL_TIM_PWM_Start+0x1f0>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d011      	beq.n	8001cc8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb4:	e008      	b.n	8001cc8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e000      	b.n	8001cca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40013400 	.word	0x40013400
 8001cdc:	40014000 	.word	0x40014000
 8001ce0:	40014400 	.word	0x40014400
 8001ce4:	40014800 	.word	0x40014800
 8001ce8:	40015000 	.word	0x40015000
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	40000800 	.word	0x40000800
 8001cf4:	40000c00 	.word	0x40000c00
 8001cf8:	00010007 	.word	0x00010007

08001cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0202 	mvn.w	r2, #2
 8001d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fb9a 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fb8c 	bl	8002464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fb9d 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0204 	mvn.w	r2, #4
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fb70 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fb62 	bl	8002464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fb73 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0208 	mvn.w	r2, #8
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fb46 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fb38 	bl	8002464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fb49 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0210 	mvn.w	r2, #16
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fb1c 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fb0e 	bl	8002464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fb1f 	bl	800248c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10e      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0201 	mvn.w	r2, #1
 8001e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fae8 	bl	8002450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b80      	cmp	r3, #128	; 0x80
 8001e8c:	d10e      	bne.n	8001eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d107      	bne.n	8001eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f001 f838 	bl	8002f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eba:	d10e      	bne.n	8001eda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	2b80      	cmp	r3, #128	; 0x80
 8001ec8:	d107      	bne.n	8001eda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f001 f82b 	bl	8002f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d10e      	bne.n	8001f06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef2:	2b40      	cmp	r3, #64	; 0x40
 8001ef4:	d107      	bne.n	8001f06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 facd 	bl	80024a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d10e      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	d107      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f06f 0220 	mvn.w	r2, #32
 8001f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 ffeb 	bl	8002f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f40:	d10f      	bne.n	8001f62 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f50:	d107      	bne.n	8001f62 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fff1 	bl	8002f44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f70:	d10f      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 ffe3 	bl	8002f58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb0:	d107      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 ffd5 	bl	8002f6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fe0:	d107      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 ffc7 	bl	8002f80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002016:	2302      	movs	r3, #2
 8002018:	e0ff      	b.n	800221a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b14      	cmp	r3, #20
 8002026:	f200 80f0 	bhi.w	800220a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002085 	.word	0x08002085
 8002034:	0800220b 	.word	0x0800220b
 8002038:	0800220b 	.word	0x0800220b
 800203c:	0800220b 	.word	0x0800220b
 8002040:	080020c5 	.word	0x080020c5
 8002044:	0800220b 	.word	0x0800220b
 8002048:	0800220b 	.word	0x0800220b
 800204c:	0800220b 	.word	0x0800220b
 8002050:	08002107 	.word	0x08002107
 8002054:	0800220b 	.word	0x0800220b
 8002058:	0800220b 	.word	0x0800220b
 800205c:	0800220b 	.word	0x0800220b
 8002060:	08002147 	.word	0x08002147
 8002064:	0800220b 	.word	0x0800220b
 8002068:	0800220b 	.word	0x0800220b
 800206c:	0800220b 	.word	0x0800220b
 8002070:	08002189 	.word	0x08002189
 8002074:	0800220b 	.word	0x0800220b
 8002078:	0800220b 	.word	0x0800220b
 800207c:	0800220b 	.word	0x0800220b
 8002080:	080021c9 	.word	0x080021c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 faba 	bl	8002604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0208 	orr.w	r2, r2, #8
 800209e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0204 	bic.w	r2, r2, #4
 80020ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6999      	ldr	r1, [r3, #24]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	619a      	str	r2, [r3, #24]
      break;
 80020c2:	e0a5      	b.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fb34 	bl	8002738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6999      	ldr	r1, [r3, #24]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	021a      	lsls	r2, r3, #8
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	619a      	str	r2, [r3, #24]
      break;
 8002104:	e084      	b.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fba7 	bl	8002860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0208 	orr.w	r2, r2, #8
 8002120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0204 	bic.w	r2, r2, #4
 8002130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69d9      	ldr	r1, [r3, #28]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
      break;
 8002144:	e064      	b.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fc19 	bl	8002984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69d9      	ldr	r1, [r3, #28]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	021a      	lsls	r2, r3, #8
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	61da      	str	r2, [r3, #28]
      break;
 8002186:	e043      	b.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fc8c 	bl	8002aac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0208 	orr.w	r2, r2, #8
 80021a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0204 	bic.w	r2, r2, #4
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80021c6:	e023      	b.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fcd6 	bl	8002b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	021a      	lsls	r2, r3, #8
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002208:	e002      	b.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
      break;
 800220e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002218:	7dfb      	ldrb	r3, [r7, #23]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop

08002224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_TIM_ConfigClockSource+0x1c>
 800223c:	2302      	movs	r3, #2
 800223e:	e0f6      	b.n	800242e <HAL_TIM_ConfigClockSource+0x20a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800225e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800226a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6f      	ldr	r2, [pc, #444]	; (8002438 <HAL_TIM_ConfigClockSource+0x214>)
 800227a:	4293      	cmp	r3, r2
 800227c:	f000 80c1 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 8002280:	4a6d      	ldr	r2, [pc, #436]	; (8002438 <HAL_TIM_ConfigClockSource+0x214>)
 8002282:	4293      	cmp	r3, r2
 8002284:	f200 80c6 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 8002288:	4a6c      	ldr	r2, [pc, #432]	; (800243c <HAL_TIM_ConfigClockSource+0x218>)
 800228a:	4293      	cmp	r3, r2
 800228c:	f000 80b9 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 8002290:	4a6a      	ldr	r2, [pc, #424]	; (800243c <HAL_TIM_ConfigClockSource+0x218>)
 8002292:	4293      	cmp	r3, r2
 8002294:	f200 80be 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 8002298:	4a69      	ldr	r2, [pc, #420]	; (8002440 <HAL_TIM_ConfigClockSource+0x21c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	f000 80b1 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 80022a0:	4a67      	ldr	r2, [pc, #412]	; (8002440 <HAL_TIM_ConfigClockSource+0x21c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f200 80b6 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 80022a8:	4a66      	ldr	r2, [pc, #408]	; (8002444 <HAL_TIM_ConfigClockSource+0x220>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f000 80a9 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 80022b0:	4a64      	ldr	r2, [pc, #400]	; (8002444 <HAL_TIM_ConfigClockSource+0x220>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	f200 80ae 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 80022b8:	4a63      	ldr	r2, [pc, #396]	; (8002448 <HAL_TIM_ConfigClockSource+0x224>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	f000 80a1 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 80022c0:	4a61      	ldr	r2, [pc, #388]	; (8002448 <HAL_TIM_ConfigClockSource+0x224>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f200 80a6 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 80022c8:	4a60      	ldr	r2, [pc, #384]	; (800244c <HAL_TIM_ConfigClockSource+0x228>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f000 8099 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 80022d0:	4a5e      	ldr	r2, [pc, #376]	; (800244c <HAL_TIM_ConfigClockSource+0x228>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	f200 809e 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 80022d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80022dc:	f000 8091 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 80022e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80022e4:	f200 8096 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 80022e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ec:	f000 8089 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 80022f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022f4:	f200 808e 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 80022f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fc:	d03e      	beq.n	800237c <HAL_TIM_ConfigClockSource+0x158>
 80022fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002302:	f200 8087 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 8002306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230a:	f000 8086 	beq.w	800241a <HAL_TIM_ConfigClockSource+0x1f6>
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002312:	d87f      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 8002314:	2b70      	cmp	r3, #112	; 0x70
 8002316:	d01a      	beq.n	800234e <HAL_TIM_ConfigClockSource+0x12a>
 8002318:	2b70      	cmp	r3, #112	; 0x70
 800231a:	d87b      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 800231c:	2b60      	cmp	r3, #96	; 0x60
 800231e:	d050      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x19e>
 8002320:	2b60      	cmp	r3, #96	; 0x60
 8002322:	d877      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 8002324:	2b50      	cmp	r3, #80	; 0x50
 8002326:	d03c      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x17e>
 8002328:	2b50      	cmp	r3, #80	; 0x50
 800232a:	d873      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d058      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0x1be>
 8002330:	2b40      	cmp	r3, #64	; 0x40
 8002332:	d86f      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 8002334:	2b30      	cmp	r3, #48	; 0x30
 8002336:	d064      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 8002338:	2b30      	cmp	r3, #48	; 0x30
 800233a:	d86b      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 800233c:	2b20      	cmp	r3, #32
 800233e:	d060      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 8002340:	2b20      	cmp	r3, #32
 8002342:	d867      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
 8002344:	2b00      	cmp	r3, #0
 8002346:	d05c      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 8002348:	2b10      	cmp	r3, #16
 800234a:	d05a      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x1de>
 800234c:	e062      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6899      	ldr	r1, [r3, #8]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f000 fcf7 	bl	8002d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	609a      	str	r2, [r3, #8]
      break;
 800237a:	e04f      	b.n	800241c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f000 fce0 	bl	8002d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800239e:	609a      	str	r2, [r3, #8]
      break;
 80023a0:	e03c      	b.n	800241c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f000 fc52 	bl	8002c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2150      	movs	r1, #80	; 0x50
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fcab 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 80023c0:	e02c      	b.n	800241c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6859      	ldr	r1, [r3, #4]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f000 fc71 	bl	8002cb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2160      	movs	r1, #96	; 0x60
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fc9b 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 80023e0:	e01c      	b.n	800241c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	461a      	mov	r2, r3
 80023f0:	f000 fc32 	bl	8002c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2140      	movs	r1, #64	; 0x40
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fc8b 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002400:	e00c      	b.n	800241c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f000 fc82 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002412:	e003      	b.n	800241c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      break;
 8002418:	e000      	b.n	800241c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800241a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	00100070 	.word	0x00100070
 800243c:	00100060 	.word	0x00100060
 8002440:	00100050 	.word	0x00100050
 8002444:	00100040 	.word	0x00100040
 8002448:	00100030 	.word	0x00100030
 800244c:	00100020 	.word	0x00100020

08002450 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a46      	ldr	r2, [pc, #280]	; (80025e0 <TIM_Base_SetConfig+0x12c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d017      	beq.n	80024fc <TIM_Base_SetConfig+0x48>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d013      	beq.n	80024fc <TIM_Base_SetConfig+0x48>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a43      	ldr	r2, [pc, #268]	; (80025e4 <TIM_Base_SetConfig+0x130>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00f      	beq.n	80024fc <TIM_Base_SetConfig+0x48>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <TIM_Base_SetConfig+0x134>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00b      	beq.n	80024fc <TIM_Base_SetConfig+0x48>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a41      	ldr	r2, [pc, #260]	; (80025ec <TIM_Base_SetConfig+0x138>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <TIM_Base_SetConfig+0x48>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a40      	ldr	r2, [pc, #256]	; (80025f0 <TIM_Base_SetConfig+0x13c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d003      	beq.n	80024fc <TIM_Base_SetConfig+0x48>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a3f      	ldr	r2, [pc, #252]	; (80025f4 <TIM_Base_SetConfig+0x140>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d108      	bne.n	800250e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a33      	ldr	r2, [pc, #204]	; (80025e0 <TIM_Base_SetConfig+0x12c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d023      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251c:	d01f      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a30      	ldr	r2, [pc, #192]	; (80025e4 <TIM_Base_SetConfig+0x130>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01b      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <TIM_Base_SetConfig+0x134>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d017      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2e      	ldr	r2, [pc, #184]	; (80025ec <TIM_Base_SetConfig+0x138>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <TIM_Base_SetConfig+0x13c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00f      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a2d      	ldr	r2, [pc, #180]	; (80025f8 <TIM_Base_SetConfig+0x144>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00b      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a2c      	ldr	r2, [pc, #176]	; (80025fc <TIM_Base_SetConfig+0x148>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <TIM_Base_SetConfig+0x14c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d003      	beq.n	800255e <TIM_Base_SetConfig+0xaa>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <TIM_Base_SetConfig+0x140>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d108      	bne.n	8002570 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <TIM_Base_SetConfig+0x12c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <TIM_Base_SetConfig+0x110>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <TIM_Base_SetConfig+0x13c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00f      	beq.n	80025c4 <TIM_Base_SetConfig+0x110>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <TIM_Base_SetConfig+0x144>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00b      	beq.n	80025c4 <TIM_Base_SetConfig+0x110>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <TIM_Base_SetConfig+0x148>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <TIM_Base_SetConfig+0x110>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <TIM_Base_SetConfig+0x14c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <TIM_Base_SetConfig+0x110>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <TIM_Base_SetConfig+0x140>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d103      	bne.n	80025cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	615a      	str	r2, [r3, #20]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40000800 	.word	0x40000800
 80025ec:	40000c00 	.word	0x40000c00
 80025f0:	40013400 	.word	0x40013400
 80025f4:	40015000 	.word	0x40015000
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40014400 	.word	0x40014400
 8002600:	40014800 	.word	0x40014800

08002604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	f023 0201 	bic.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a30      	ldr	r2, [pc, #192]	; (8002720 <TIM_OC1_SetConfig+0x11c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <TIM_OC1_SetConfig+0x88>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <TIM_OC1_SetConfig+0x120>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00f      	beq.n	800268c <TIM_OC1_SetConfig+0x88>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a2e      	ldr	r2, [pc, #184]	; (8002728 <TIM_OC1_SetConfig+0x124>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00b      	beq.n	800268c <TIM_OC1_SetConfig+0x88>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a2d      	ldr	r2, [pc, #180]	; (800272c <TIM_OC1_SetConfig+0x128>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d007      	beq.n	800268c <TIM_OC1_SetConfig+0x88>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a2c      	ldr	r2, [pc, #176]	; (8002730 <TIM_OC1_SetConfig+0x12c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <TIM_OC1_SetConfig+0x88>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <TIM_OC1_SetConfig+0x130>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10c      	bne.n	80026a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f023 0308 	bic.w	r3, r3, #8
 8002692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f023 0304 	bic.w	r3, r3, #4
 80026a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <TIM_OC1_SetConfig+0x11c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <TIM_OC1_SetConfig+0xd2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <TIM_OC1_SetConfig+0x120>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00f      	beq.n	80026d6 <TIM_OC1_SetConfig+0xd2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <TIM_OC1_SetConfig+0x124>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <TIM_OC1_SetConfig+0xd2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1a      	ldr	r2, [pc, #104]	; (800272c <TIM_OC1_SetConfig+0x128>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <TIM_OC1_SetConfig+0xd2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a19      	ldr	r2, [pc, #100]	; (8002730 <TIM_OC1_SetConfig+0x12c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d003      	beq.n	80026d6 <TIM_OC1_SetConfig+0xd2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <TIM_OC1_SetConfig+0x130>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d111      	bne.n	80026fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	621a      	str	r2, [r3, #32]
}
 8002714:	bf00      	nop
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40013400 	.word	0x40013400
 8002728:	40014000 	.word	0x40014000
 800272c:	40014400 	.word	0x40014400
 8002730:	40014800 	.word	0x40014800
 8002734:	40015000 	.word	0x40015000

08002738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0210 	bic.w	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f023 0320 	bic.w	r3, r3, #32
 8002786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <TIM_OC2_SetConfig+0x110>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d007      	beq.n	80027ac <TIM_OC2_SetConfig+0x74>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a2b      	ldr	r2, [pc, #172]	; (800284c <TIM_OC2_SetConfig+0x114>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d003      	beq.n	80027ac <TIM_OC2_SetConfig+0x74>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a2a      	ldr	r2, [pc, #168]	; (8002850 <TIM_OC2_SetConfig+0x118>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10d      	bne.n	80027c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <TIM_OC2_SetConfig+0x110>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <TIM_OC2_SetConfig+0xc0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <TIM_OC2_SetConfig+0x114>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00f      	beq.n	80027f8 <TIM_OC2_SetConfig+0xc0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <TIM_OC2_SetConfig+0x11c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00b      	beq.n	80027f8 <TIM_OC2_SetConfig+0xc0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <TIM_OC2_SetConfig+0x120>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <TIM_OC2_SetConfig+0xc0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <TIM_OC2_SetConfig+0x124>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <TIM_OC2_SetConfig+0xc0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <TIM_OC2_SetConfig+0x118>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d113      	bne.n	8002820 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40013400 	.word	0x40013400
 8002850:	40015000 	.word	0x40015000
 8002854:	40014000 	.word	0x40014000
 8002858:	40014400 	.word	0x40014400
 800285c:	40014800 	.word	0x40014800

08002860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <TIM_OC3_SetConfig+0x10c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_OC3_SetConfig+0x72>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <TIM_OC3_SetConfig+0x110>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_OC3_SetConfig+0x72>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a29      	ldr	r2, [pc, #164]	; (8002974 <TIM_OC3_SetConfig+0x114>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10d      	bne.n	80028ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1e      	ldr	r2, [pc, #120]	; (800296c <TIM_OC3_SetConfig+0x10c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <TIM_OC3_SetConfig+0xbe>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <TIM_OC3_SetConfig+0x110>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00f      	beq.n	800291e <TIM_OC3_SetConfig+0xbe>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <TIM_OC3_SetConfig+0x118>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00b      	beq.n	800291e <TIM_OC3_SetConfig+0xbe>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1c      	ldr	r2, [pc, #112]	; (800297c <TIM_OC3_SetConfig+0x11c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <TIM_OC3_SetConfig+0xbe>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <TIM_OC3_SetConfig+0x120>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <TIM_OC3_SetConfig+0xbe>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a16      	ldr	r2, [pc, #88]	; (8002974 <TIM_OC3_SetConfig+0x114>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d113      	bne.n	8002946 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800292c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	621a      	str	r2, [r3, #32]
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40013400 	.word	0x40013400
 8002974:	40015000 	.word	0x40015000
 8002978:	40014000 	.word	0x40014000
 800297c:	40014400 	.word	0x40014400
 8002980:	40014800 	.word	0x40014800

08002984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	031b      	lsls	r3, r3, #12
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <TIM_OC4_SetConfig+0x110>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <TIM_OC4_SetConfig+0x74>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <TIM_OC4_SetConfig+0x114>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_OC4_SetConfig+0x74>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <TIM_OC4_SetConfig+0x118>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10d      	bne.n	8002a14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80029fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <TIM_OC4_SetConfig+0x110>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d013      	beq.n	8002a44 <TIM_OC4_SetConfig+0xc0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <TIM_OC4_SetConfig+0x114>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00f      	beq.n	8002a44 <TIM_OC4_SetConfig+0xc0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <TIM_OC4_SetConfig+0x11c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <TIM_OC4_SetConfig+0xc0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <TIM_OC4_SetConfig+0x120>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <TIM_OC4_SetConfig+0xc0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <TIM_OC4_SetConfig+0x124>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <TIM_OC4_SetConfig+0xc0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <TIM_OC4_SetConfig+0x118>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d113      	bne.n	8002a6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	019b      	lsls	r3, r3, #6
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40013400 	.word	0x40013400
 8002a9c:	40015000 	.word	0x40015000
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800

08002aac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002af0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <TIM_OC5_SetConfig+0xbc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <TIM_OC5_SetConfig+0x82>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <TIM_OC5_SetConfig+0xc0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00f      	beq.n	8002b2e <TIM_OC5_SetConfig+0x82>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <TIM_OC5_SetConfig+0xc4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <TIM_OC5_SetConfig+0x82>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <TIM_OC5_SetConfig+0xc8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <TIM_OC5_SetConfig+0x82>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <TIM_OC5_SetConfig+0xcc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_OC5_SetConfig+0x82>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <TIM_OC5_SetConfig+0xd0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d109      	bne.n	8002b42 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	621a      	str	r2, [r3, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	40013400 	.word	0x40013400
 8002b70:	40014000 	.word	0x40014000
 8002b74:	40014400 	.word	0x40014400
 8002b78:	40014800 	.word	0x40014800
 8002b7c:	40015000 	.word	0x40015000

08002b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	051b      	lsls	r3, r3, #20
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <TIM_OC6_SetConfig+0xc0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <TIM_OC6_SetConfig+0x84>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <TIM_OC6_SetConfig+0xc4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00f      	beq.n	8002c04 <TIM_OC6_SetConfig+0x84>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <TIM_OC6_SetConfig+0xc8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <TIM_OC6_SetConfig+0x84>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <TIM_OC6_SetConfig+0xcc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <TIM_OC6_SetConfig+0x84>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <TIM_OC6_SetConfig+0xd0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_OC6_SetConfig+0x84>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <TIM_OC6_SetConfig+0xd4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d109      	bne.n	8002c18 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	029b      	lsls	r3, r3, #10
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40013400 	.word	0x40013400
 8002c48:	40014000 	.word	0x40014000
 8002c4c:	40014400 	.word	0x40014400
 8002c50:	40014800 	.word	0x40014800
 8002c54:	40015000 	.word	0x40015000

08002c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f023 0201 	bic.w	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f023 030a 	bic.w	r3, r3, #10
 8002c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0210 	bic.w	r2, r3, #16
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f043 0307 	orr.w	r3, r3, #7
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	609a      	str	r2, [r3, #8]
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2201      	movs	r2, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e074      	b.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a34      	ldr	r2, [pc, #208]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a33      	ldr	r2, [pc, #204]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a31      	ldr	r2, [pc, #196]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d108      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d01d      	beq.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d018      	beq.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00e      	beq.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d009      	beq.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10c      	bne.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40013400 	.word	0x40013400
 8002ef4:	40015000 	.word	0x40015000
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800
 8002f00:	40000c00 	.word	0x40000c00
 8002f04:	40014000 	.word	0x40014000

08002f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4d0d      	ldr	r5, [pc, #52]	; (8002fcc <__libc_init_array+0x38>)
 8002f98:	4c0d      	ldr	r4, [pc, #52]	; (8002fd0 <__libc_init_array+0x3c>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	42a6      	cmp	r6, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	4d0b      	ldr	r5, [pc, #44]	; (8002fd4 <__libc_init_array+0x40>)
 8002fa6:	4c0c      	ldr	r4, [pc, #48]	; (8002fd8 <__libc_init_array+0x44>)
 8002fa8:	f000 f820 	bl	8002fec <_init>
 8002fac:	1b64      	subs	r4, r4, r5
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	42a6      	cmp	r6, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbc:	4798      	blx	r3
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc6:	4798      	blx	r3
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	08003014 	.word	0x08003014
 8002fd0:	08003014 	.word	0x08003014
 8002fd4:	08003014 	.word	0x08003014
 8002fd8:	08003018 	.word	0x08003018

08002fdc <memset>:
 8002fdc:	4402      	add	r2, r0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <memset+0xa>
 8002fe4:	4770      	bx	lr
 8002fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fea:	e7f9      	b.n	8002fe0 <memset+0x4>

08002fec <_init>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_fini>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr
