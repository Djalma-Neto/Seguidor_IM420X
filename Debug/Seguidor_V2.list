
Seguidor_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d044  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800d228  0800d228  0001d228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d710  0800d710  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d710  0800d710  0001d710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d718  0800d718  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d718  0800d718  0001d718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d71c  0800d71c  0001d71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025ec  20000080  0800d7a0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000266c  0800d7a0  0002266c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f874  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e20  00000000  00000000  0003f924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00043748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00045000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002992a  00000000  00000000  00046730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c065  00000000  00000000  0007005a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001076fc  00000000  00000000  0008c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001937bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073bc  00000000  00000000  0019380c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d20c 	.word	0x0800d20c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0800d20c 	.word	0x0800d20c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	HAL_UART_Receive_IT(&huart1, (uint8_t *)cData, sizeof(cData));
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_FREERTOS_Init+0x88>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2201      	movs	r2, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	481f      	ldr	r0, [pc, #124]	; (8001018 <MX_FREERTOS_Init+0x8c>)
 8000f9a:	f005 fb3d 	bl	8006618 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	; (800101c <MX_FREERTOS_Init+0x90>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f007 f80b 	bl	8007fbe <osSemaphoreNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <MX_FREERTOS_Init+0x94>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000fae:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <MX_FREERTOS_Init+0x98>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f007 f803 	bl	8007fbe <osSemaphoreNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <MX_FREERTOS_Init+0x9c>)
 8000fbc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <MX_FREERTOS_Init+0xa0>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	481b      	ldr	r0, [pc, #108]	; (8001030 <MX_FREERTOS_Init+0xa4>)
 8000fc4:	f006 ff4e 	bl	8007e64 <osThreadNew>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <MX_FREERTOS_Init+0xa8>)
 8000fcc:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000fce:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <MX_FREERTOS_Init+0xac>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <MX_FREERTOS_Init+0xb0>)
 8000fd4:	f006 ff46 	bl	8007e64 <osThreadNew>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a19      	ldr	r2, [pc, #100]	; (8001040 <MX_FREERTOS_Init+0xb4>)
 8000fdc:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000fde:	4a19      	ldr	r2, [pc, #100]	; (8001044 <MX_FREERTOS_Init+0xb8>)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4819      	ldr	r0, [pc, #100]	; (8001048 <MX_FREERTOS_Init+0xbc>)
 8000fe4:	f006 ff3e 	bl	8007e64 <osThreadNew>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <MX_FREERTOS_Init+0xc0>)
 8000fec:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <MX_FREERTOS_Init+0xc4>)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4818      	ldr	r0, [pc, #96]	; (8001054 <MX_FREERTOS_Init+0xc8>)
 8000ff4:	f006 ff36 	bl	8007e64 <osThreadNew>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <MX_FREERTOS_Init+0xcc>)
 8000ffc:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <MX_FREERTOS_Init+0xd0>)
 8001000:	2100      	movs	r1, #0
 8001002:	4817      	ldr	r0, [pc, #92]	; (8001060 <MX_FREERTOS_Init+0xd4>)
 8001004:	f006 ff2e 	bl	8007e64 <osThreadNew>
 8001008:	4603      	mov	r3, r0
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <MX_FREERTOS_Init+0xd8>)
 800100c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	200003c0 	.word	0x200003c0
 800101c:	0800d410 	.word	0x0800d410
 8001020:	20000168 	.word	0x20000168
 8001024:	0800d420 	.word	0x0800d420
 8001028:	2000016c 	.word	0x2000016c
 800102c:	0800d35c 	.word	0x0800d35c
 8001030:	08001069 	.word	0x08001069
 8001034:	20000154 	.word	0x20000154
 8001038:	0800d380 	.word	0x0800d380
 800103c:	080010b9 	.word	0x080010b9
 8001040:	20000158 	.word	0x20000158
 8001044:	0800d3a4 	.word	0x0800d3a4
 8001048:	0800135d 	.word	0x0800135d
 800104c:	2000015c 	.word	0x2000015c
 8001050:	0800d3c8 	.word	0x0800d3c8
 8001054:	08001579 	.word	0x08001579
 8001058:	20000160 	.word	0x20000160
 800105c:	0800d3ec 	.word	0x0800d3ec
 8001060:	08001831 	.word	0x08001831
 8001064:	20000164 	.word	0x20000164

08001068 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001070:	2108      	movs	r1, #8
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <FunctionUltrassom+0x4c>)
 8001074:	f003 fc84 	bl	8004980 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
	for(;;)
	{
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <FunctionUltrassom+0x4c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <FunctionUltrassom+0x4c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0208 	orr.w	r2, r2, #8
 8001086:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f002 f92b 	bl	80032ec <HAL_GPIO_WritePin>
		osDelay(10);
 8001096:	200a      	movs	r0, #10
 8001098:	f006 ff76 	bl	8007f88 <osDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f002 f921 	bl	80032ec <HAL_GPIO_WritePin>
		osDelay(500);
 80010aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ae:	f006 ff6b 	bl	8007f88 <osDelay>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 80010b2:	e7e1      	b.n	8001078 <FunctionUltrassom+0x10>
 80010b4:	200001b4 	.word	0x200001b4

080010b8 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b092      	sub	sp, #72	; 0x48
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80010c0:	4b94      	ldr	r3, [pc, #592]	; (8001314 <FunctionComunica+0x25c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	21c8      	movs	r1, #200	; 0xc8
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 f802 	bl	80080d0 <osSemaphoreAcquire>
	  HAL_UART_Receive(&huart1, (uint8_t *)&cData, sizeof(cData),100);
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	2201      	movs	r2, #1
 80010d0:	4991      	ldr	r1, [pc, #580]	; (8001318 <FunctionComunica+0x260>)
 80010d2:	4892      	ldr	r0, [pc, #584]	; (800131c <FunctionComunica+0x264>)
 80010d4:	f005 f9cc 	bl	8006470 <HAL_UART_Receive>
	  if(uiBloqueado){
 80010d8:	4b91      	ldr	r3, [pc, #580]	; (8001320 <FunctionComunica+0x268>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d023      	beq.n	8001128 <FunctionComunica+0x70>
		  int dist1 = (int)fDistancia;
 80010e0:	4b90      	ldr	r3, [pc, #576]	; (8001324 <FunctionComunica+0x26c>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ea:	ee17 3a90 	vmov	r3, s15
 80010ee:	60fb      	str	r3, [r7, #12]
		  int dist2 = (fDistancia-(int)fDistancia)*100;
 80010f0:	4b8c      	ldr	r3, [pc, #560]	; (8001324 <FunctionComunica+0x26c>)
 80010f2:	ed93 7a00 	vldr	s14, [r3]
 80010f6:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <FunctionComunica+0x26c>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001328 <FunctionComunica+0x270>
 800110c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001114:	ee17 3a90 	vmov	r3, s15
 8001118:	60bb      	str	r3, [r7, #8]

		  sprintf(cMostrar,"Blockeado: %d.%02d\r \n ",dist1,dist2);
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4983      	ldr	r1, [pc, #524]	; (800132c <FunctionComunica+0x274>)
 8001120:	4883      	ldr	r0, [pc, #524]	; (8001330 <FunctionComunica+0x278>)
 8001122:	f009 fd5f 	bl	800abe4 <siprintf>
 8001126:	e0df      	b.n	80012e8 <FunctionComunica+0x230>
	  } else if(!uiStart){
 8001128:	4b82      	ldr	r3, [pc, #520]	; (8001334 <FunctionComunica+0x27c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d104      	bne.n	800113a <FunctionComunica+0x82>
		  sprintf(cMostrar,"Aguardando Start!! \r \n ");
 8001130:	4981      	ldr	r1, [pc, #516]	; (8001338 <FunctionComunica+0x280>)
 8001132:	487f      	ldr	r0, [pc, #508]	; (8001330 <FunctionComunica+0x278>)
 8001134:	f009 fd56 	bl	800abe4 <siprintf>
 8001138:	e0d6      	b.n	80012e8 <FunctionComunica+0x230>
	  } else{
		  if(cData == 'O' || cData == 'o'){
 800113a:	4b77      	ldr	r3, [pc, #476]	; (8001318 <FunctionComunica+0x260>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b4f      	cmp	r3, #79	; 0x4f
 8001140:	d003      	beq.n	800114a <FunctionComunica+0x92>
 8001142:	4b75      	ldr	r3, [pc, #468]	; (8001318 <FunctionComunica+0x260>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b6f      	cmp	r3, #111	; 0x6f
 8001148:	d123      	bne.n	8001192 <FunctionComunica+0xda>
			  int valor1 = (int)fDistanciaO;
 800114a:	4b7c      	ldr	r3, [pc, #496]	; (800133c <FunctionComunica+0x284>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001154:	ee17 3a90 	vmov	r3, s15
 8001158:	617b      	str	r3, [r7, #20]
			  int valor2 = (fDistanciaO-(int)fDistanciaO)*100;
 800115a:	4b78      	ldr	r3, [pc, #480]	; (800133c <FunctionComunica+0x284>)
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	4b76      	ldr	r3, [pc, #472]	; (800133c <FunctionComunica+0x284>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001172:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001328 <FunctionComunica+0x270>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800117e:	ee17 3a90 	vmov	r3, s15
 8001182:	613b      	str	r3, [r7, #16]

			  sprintf(cMostrar,"Distância Percorrida: %d.%02dm \r \n ",valor1,valor2);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	496d      	ldr	r1, [pc, #436]	; (8001340 <FunctionComunica+0x288>)
 800118a:	4869      	ldr	r0, [pc, #420]	; (8001330 <FunctionComunica+0x278>)
 800118c:	f009 fd2a 	bl	800abe4 <siprintf>
		  if(cData == 'O' || cData == 'o'){
 8001190:	e0aa      	b.n	80012e8 <FunctionComunica+0x230>
		  }else if(cData == 'E' || cData == 'e'){
 8001192:	4b61      	ldr	r3, [pc, #388]	; (8001318 <FunctionComunica+0x260>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b45      	cmp	r3, #69	; 0x45
 8001198:	d003      	beq.n	80011a2 <FunctionComunica+0xea>
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <FunctionComunica+0x260>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b65      	cmp	r3, #101	; 0x65
 80011a0:	d15e      	bne.n	8001260 <FunctionComunica+0x1a8>
			  float valE = ((float)ulPulsePerSecondE/FUROS)*10;
 80011a2:	4b68      	ldr	r3, [pc, #416]	; (8001344 <FunctionComunica+0x28c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ae:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			  float valD = ((float)ulPulsePerSecondE/FUROS)*10;
 80011c2:	4b60      	ldr	r3, [pc, #384]	; (8001344 <FunctionComunica+0x28c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80011d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

			  int valor1 = (int)valE;
 80011e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ea:	ee17 3a90 	vmov	r3, s15
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
			  int valor2 = (valE-(int)valE)*100;
 80011f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001328 <FunctionComunica+0x270>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001210:	ee17 3a90 	vmov	r3, s15
 8001214:	623b      	str	r3, [r7, #32]

			  int valor3 = (int)valD;
 8001216:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800121a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121e:	ee17 3a90 	vmov	r3, s15
 8001222:	61fb      	str	r3, [r7, #28]
			  int valor4 = (valD-(int)valD)*100;
 8001224:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001238:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001328 <FunctionComunica+0x270>
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 3a90 	vmov	r3, s15
 8001248:	61bb      	str	r3, [r7, #24]

			  sprintf(cMostrar,"EncoderE: %d.%02d RPS -- EncoderD: %d.%02d RPS \r \n ",valor1,valor2,valor3,valor4);
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001256:	493c      	ldr	r1, [pc, #240]	; (8001348 <FunctionComunica+0x290>)
 8001258:	4835      	ldr	r0, [pc, #212]	; (8001330 <FunctionComunica+0x278>)
 800125a:	f009 fcc3 	bl	800abe4 <siprintf>
		  }else if(cData == 'E' || cData == 'e'){
 800125e:	e043      	b.n	80012e8 <FunctionComunica+0x230>
		  }else{
			  cData == 'M';
			  int valor1 = (int)fVE;
 8001260:	4b3a      	ldr	r3, [pc, #232]	; (800134c <FunctionComunica+0x294>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126a:	ee17 3a90 	vmov	r3, s15
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
			  int valor2 = (fVE-(int)fVE)*100;
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <FunctionComunica+0x294>)
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <FunctionComunica+0x294>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001288:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001328 <FunctionComunica+0x270>
 800128c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	ee17 3a90 	vmov	r3, s15
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38

			  int valor3 = (int)fVD;
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <FunctionComunica+0x298>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
			  int valor4 = (fVD-(int)fVD)*100;
 80012aa:	4b29      	ldr	r3, [pc, #164]	; (8001350 <FunctionComunica+0x298>)
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <FunctionComunica+0x298>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001328 <FunctionComunica+0x270>
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ce:	ee17 3a90 	vmov	r3, s15
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30

			  sprintf(cMostrar,"MotorE: %d.%02d m/s -- MotorD: %d.%02d m/s \r \n ",valor1,valor2,valor3,valor4);
 80012d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012e0:	491c      	ldr	r1, [pc, #112]	; (8001354 <FunctionComunica+0x29c>)
 80012e2:	4813      	ldr	r0, [pc, #76]	; (8001330 <FunctionComunica+0x278>)
 80012e4:	f009 fc7e 	bl	800abe4 <siprintf>
		  }
	  }
	  HAL_UART_Transmit(&huart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80012e8:	2364      	movs	r3, #100	; 0x64
 80012ea:	2264      	movs	r2, #100	; 0x64
 80012ec:	4910      	ldr	r1, [pc, #64]	; (8001330 <FunctionComunica+0x278>)
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <FunctionComunica+0x264>)
 80012f0:	f005 f828 	bl	8006344 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	2264      	movs	r2, #100	; 0x64
 80012f8:	490d      	ldr	r1, [pc, #52]	; (8001330 <FunctionComunica+0x278>)
 80012fa:	4817      	ldr	r0, [pc, #92]	; (8001358 <FunctionComunica+0x2a0>)
 80012fc:	f005 f822 	bl	8006344 <HAL_UART_Transmit>

	  osSemaphoreRelease(SemaphoreComunicaHandle);
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <FunctionComunica+0x25c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f006 ff35 	bl	8008174 <osSemaphoreRelease>
	  osDelay(100);
 800130a:	2064      	movs	r0, #100	; 0x64
 800130c:	f006 fe3c 	bl	8007f88 <osDelay>
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 8001310:	e6d6      	b.n	80010c0 <FunctionComunica+0x8>
 8001312:	bf00      	nop
 8001314:	2000016c 	.word	0x2000016c
 8001318:	20000008 	.word	0x20000008
 800131c:	200003c0 	.word	0x200003c0
 8001320:	200000e8 	.word	0x200000e8
 8001324:	200000a8 	.word	0x200000a8
 8001328:	42c80000 	.word	0x42c80000
 800132c:	0800d288 	.word	0x0800d288
 8001330:	200000f0 	.word	0x200000f0
 8001334:	200000e4 	.word	0x200000e4
 8001338:	0800d2a0 	.word	0x0800d2a0
 800133c:	200000d0 	.word	0x200000d0
 8001340:	0800d2b8 	.word	0x0800d2b8
 8001344:	200000d4 	.word	0x200000d4
 8001348:	0800d2e0 	.word	0x0800d2e0
 800134c:	200000b4 	.word	0x200000b4
 8001350:	200000b8 	.word	0x200000b8
 8001354:	0800d314 	.word	0x0800d314
 8001358:	20000330 	.word	0x20000330

0800135c <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8001364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f001 ffa6 	bl	80032bc <HAL_GPIO_ReadPin>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8001374:	2120      	movs	r1, #32
 8001376:	4877      	ldr	r0, [pc, #476]	; (8001554 <FunctionSeguidor+0x1f8>)
 8001378:	f001 ffa0 	bl	80032bc <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	4874      	ldr	r0, [pc, #464]	; (8001554 <FunctionSeguidor+0x1f8>)
 8001384:	f001 ff9a 	bl	80032bc <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	737b      	strb	r3, [r7, #13]

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	4870      	ldr	r0, [pc, #448]	; (8001554 <FunctionSeguidor+0x1f8>)
 8001392:	f001 ff93 	bl	80032bc <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800139a:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <FunctionSeguidor+0x1fc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	21c8      	movs	r1, #200	; 0xc8
 80013a0:	4618      	mov	r0, r3
 80013a2:	f006 fe95 	bl	80080d0 <osSemaphoreAcquire>

    if(uiBloqueado){
 80013a6:	4b6d      	ldr	r3, [pc, #436]	; (800155c <FunctionSeguidor+0x200>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d016      	beq.n	80013dc <FunctionSeguidor+0x80>
    	fWAngularD = 0;
 80013ae:	4b6c      	ldr	r3, [pc, #432]	; (8001560 <FunctionSeguidor+0x204>)
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
		fWAngularE = 0;
 80013b6:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <FunctionSeguidor+0x208>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2104      	movs	r1, #4
 80013c2:	4869      	ldr	r0, [pc, #420]	; (8001568 <FunctionSeguidor+0x20c>)
 80013c4:	f001 ff92 	bl	80032ec <HAL_GPIO_WritePin>
		osDelay(500);
 80013c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013cc:	f006 fddc 	bl	8007f88 <osDelay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2104      	movs	r1, #4
 80013d4:	4864      	ldr	r0, [pc, #400]	; (8001568 <FunctionSeguidor+0x20c>)
 80013d6:	f001 ff89 	bl	80032ec <HAL_GPIO_WritePin>
 80013da:	e0b1      	b.n	8001540 <FunctionSeguidor+0x1e4>
    }else if(uiBTN){
 80013dc:	7b3b      	ldrb	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d027      	beq.n	8001432 <FunctionSeguidor+0xd6>
    	uiStart = uiStart?0:1;
 80013e2:	4b62      	ldr	r3, [pc, #392]	; (800156c <FunctionSeguidor+0x210>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bf0c      	ite	eq
 80013ea:	2301      	moveq	r3, #1
 80013ec:	2300      	movne	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b5e      	ldr	r3, [pc, #376]	; (800156c <FunctionSeguidor+0x210>)
 80013f4:	601a      	str	r2, [r3, #0]
    	uiCountSeguidor = 0;
 80013f6:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <FunctionSeguidor+0x214>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
    	fWAngularD = 0;
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <FunctionSeguidor+0x204>)
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
    	fWAngularE = 0;
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <FunctionSeguidor+0x208>)
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2104      	movs	r1, #4
 8001410:	4855      	ldr	r0, [pc, #340]	; (8001568 <FunctionSeguidor+0x20c>)
 8001412:	f001 ff6b 	bl	80032ec <HAL_GPIO_WritePin>
    	osDelay(500);
 8001416:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141a:	f006 fdb5 	bl	8007f88 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2104      	movs	r1, #4
 8001422:	4851      	ldr	r0, [pc, #324]	; (8001568 <FunctionSeguidor+0x20c>)
 8001424:	f001 ff62 	bl	80032ec <HAL_GPIO_WritePin>
    	osDelay(500);
 8001428:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142c:	f006 fdac 	bl	8007f88 <osDelay>
 8001430:	e086      	b.n	8001540 <FunctionSeguidor+0x1e4>
    }else if(uiStart && uiCountSeguidor < 50){
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <FunctionSeguidor+0x210>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d078      	beq.n	800152c <FunctionSeguidor+0x1d0>
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <FunctionSeguidor+0x214>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b31      	cmp	r3, #49	; 0x31
 8001440:	d874      	bhi.n	800152c <FunctionSeguidor+0x1d0>
    	if(uiS2 && uiS3 && !uiS4){
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d011      	beq.n	800146c <FunctionSeguidor+0x110>
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00e      	beq.n	800146c <FunctionSeguidor+0x110>
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10b      	bne.n	800146c <FunctionSeguidor+0x110>
    		uiCountSeguidor = 0;
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <FunctionSeguidor+0x214>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
			fWAngularE = fVelocidade;
 800145a:	4b46      	ldr	r3, [pc, #280]	; (8001574 <FunctionSeguidor+0x218>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a41      	ldr	r2, [pc, #260]	; (8001564 <FunctionSeguidor+0x208>)
 8001460:	6013      	str	r3, [r2, #0]
			fWAngularD = 0;
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <FunctionSeguidor+0x204>)
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e050      	b.n	800150e <FunctionSeguidor+0x1b2>
		}else if(!uiS2 && uiS3 && uiS4){
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d111      	bne.n	8001496 <FunctionSeguidor+0x13a>
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00e      	beq.n	8001496 <FunctionSeguidor+0x13a>
 8001478:	7b7b      	ldrb	r3, [r7, #13]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <FunctionSeguidor+0x13a>
			uiCountSeguidor = 0;
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <FunctionSeguidor+0x214>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
			fWAngularE = 0;
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <FunctionSeguidor+0x208>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
			fWAngularD = fVelocidade;
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <FunctionSeguidor+0x218>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <FunctionSeguidor+0x204>)
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e03b      	b.n	800150e <FunctionSeguidor+0x1b2>
		}else if(uiS2 && !uiS3 && uiS4){
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d011      	beq.n	80014c0 <FunctionSeguidor+0x164>
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10e      	bne.n	80014c0 <FunctionSeguidor+0x164>
 80014a2:	7b7b      	ldrb	r3, [r7, #13]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00b      	beq.n	80014c0 <FunctionSeguidor+0x164>
			uiCountSeguidor = 0;
 80014a8:	4b31      	ldr	r3, [pc, #196]	; (8001570 <FunctionSeguidor+0x214>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
			fWAngularD = fVelocidade;
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <FunctionSeguidor+0x218>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a2b      	ldr	r2, [pc, #172]	; (8001560 <FunctionSeguidor+0x204>)
 80014b4:	6013      	str	r3, [r2, #0]
			fWAngularE = fVelocidade;
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <FunctionSeguidor+0x218>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a2a      	ldr	r2, [pc, #168]	; (8001564 <FunctionSeguidor+0x208>)
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e026      	b.n	800150e <FunctionSeguidor+0x1b2>
		}else if(!uiS2 && !uiS3 && !uiS4){
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d123      	bne.n	800150e <FunctionSeguidor+0x1b2>
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d120      	bne.n	800150e <FunctionSeguidor+0x1b2>
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d11d      	bne.n	800150e <FunctionSeguidor+0x1b2>
			uiCountSeguidor = 0;
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <FunctionSeguidor+0x214>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
			fWAngularD = 0;
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <FunctionSeguidor+0x204>)
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
			fWAngularE = 0;
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <FunctionSeguidor+0x208>)
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
			uiStart = 0;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <FunctionSeguidor+0x210>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2104      	movs	r1, #4
 80014f2:	481d      	ldr	r0, [pc, #116]	; (8001568 <FunctionSeguidor+0x20c>)
 80014f4:	f001 fefa 	bl	80032ec <HAL_GPIO_WritePin>
			osDelay(100);
 80014f8:	2064      	movs	r0, #100	; 0x64
 80014fa:	f006 fd45 	bl	8007f88 <osDelay>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2104      	movs	r1, #4
 8001502:	4819      	ldr	r0, [pc, #100]	; (8001568 <FunctionSeguidor+0x20c>)
 8001504:	f001 fef2 	bl	80032ec <HAL_GPIO_WritePin>
			osDelay(100);
 8001508:	2064      	movs	r0, #100	; 0x64
 800150a:	f006 fd3d 	bl	8007f88 <osDelay>
		}
    	if(uiS2 && uiS3 && uiS4){
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d014      	beq.n	800153e <FunctionSeguidor+0x1e2>
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d011      	beq.n	800153e <FunctionSeguidor+0x1e2>
 800151a:	7b7b      	ldrb	r3, [r7, #13]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <FunctionSeguidor+0x1e2>
    		uiCountSeguidor++;
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <FunctionSeguidor+0x214>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <FunctionSeguidor+0x214>)
 8001528:	6013      	str	r3, [r2, #0]
    	if(uiS2 && uiS3 && uiS4){
 800152a:	e008      	b.n	800153e <FunctionSeguidor+0x1e2>
		}
    }else{
    	fWAngularD = 0;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <FunctionSeguidor+0x204>)
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
		fWAngularE = 0;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <FunctionSeguidor+0x208>)
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e000      	b.n	8001540 <FunctionSeguidor+0x1e4>
    	if(uiS2 && uiS3 && uiS4){
 800153e:	bf00      	nop
    }
    osDelay(100);
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f006 fd21 	bl	8007f88 <osDelay>
    osSemaphoreRelease(SemaphoreMovimentaHandle);
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <FunctionSeguidor+0x1fc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f006 fe12 	bl	8008174 <osSemaphoreRelease>
  {
 8001550:	e708      	b.n	8001364 <FunctionSeguidor+0x8>
 8001552:	bf00      	nop
 8001554:	48000800 	.word	0x48000800
 8001558:	20000168 	.word	0x20000168
 800155c:	200000e8 	.word	0x200000e8
 8001560:	200000ac 	.word	0x200000ac
 8001564:	200000b0 	.word	0x200000b0
 8001568:	48000c00 	.word	0x48000c00
 800156c:	200000e4 	.word	0x200000e4
 8001570:	200000ec 	.word	0x200000ec
 8001574:	20000004 	.word	0x20000004

08001578 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001580:	2100      	movs	r1, #0
 8001582:	489b      	ldr	r0, [pc, #620]	; (80017f0 <FunctionAtivarMotores+0x278>)
 8001584:	f003 f888 	bl	8004698 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001588:	2104      	movs	r1, #4
 800158a:	4899      	ldr	r0, [pc, #612]	; (80017f0 <FunctionAtivarMotores+0x278>)
 800158c:	f003 f884 	bl	8004698 <HAL_TIM_PWM_Start>

	sPID_D pid_D;
	sPID_E pid_E;

	pid_E.fKpE = 800;
 8001590:	4b98      	ldr	r3, [pc, #608]	; (80017f4 <FunctionAtivarMotores+0x27c>)
 8001592:	60bb      	str	r3, [r7, #8]
	pid_E.fKiE = 2;
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	60fb      	str	r3, [r7, #12]
	pid_E.fKdE = 0;
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
	pid_E.fTsE = 200000;
 80015a0:	4b95      	ldr	r3, [pc, #596]	; (80017f8 <FunctionAtivarMotores+0x280>)
 80015a2:	617b      	str	r3, [r7, #20]
	pid_E.fOutminE = 0;
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
	pid_E.fOutmaxE = 100;
 80015aa:	4b94      	ldr	r3, [pc, #592]	; (80017fc <FunctionAtivarMotores+0x284>)
 80015ac:	61fb      	str	r3, [r7, #28]
	PID_init_E(&pid_E);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fd16 	bl	8001fe4 <PID_init_E>

	pid_D.fKpD = 800;
 80015b8:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <FunctionAtivarMotores+0x27c>)
 80015ba:	623b      	str	r3, [r7, #32]
	pid_D.fKiD = 2;
 80015bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
	pid_D.fKdD = 0;
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
	pid_D.fTsD = 200000;
 80015c8:	4b8b      	ldr	r3, [pc, #556]	; (80017f8 <FunctionAtivarMotores+0x280>)
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	pid_D.fOutminD = 0;
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
	pid_D.fOutmaxD = 100;
 80015d2:	4b8a      	ldr	r3, [pc, #552]	; (80017fc <FunctionAtivarMotores+0x284>)
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
	PID_init_D(&pid_D);
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fccc 	bl	8001f78 <PID_init_D>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80015e0:	4b87      	ldr	r3, [pc, #540]	; (8001800 <FunctionAtivarMotores+0x288>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	21c8      	movs	r1, #200	; 0xc8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 fd72 	bl	80080d0 <osSemaphoreAcquire>
	  if(fWAngularD && fWAngularE){
 80015ec:	4b85      	ldr	r3, [pc, #532]	; (8001804 <FunctionAtivarMotores+0x28c>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	d020      	beq.n	800163e <FunctionAtivarMotores+0xc6>
 80015fc:	4b82      	ldr	r3, [pc, #520]	; (8001808 <FunctionAtivarMotores+0x290>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	d018      	beq.n	800163e <FunctionAtivarMotores+0xc6>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f001 fe69 	bl	80032ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f001 fe62 	bl	80032ec <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	4877      	ldr	r0, [pc, #476]	; (800180c <FunctionAtivarMotores+0x294>)
 800162e:	f001 fe5d 	bl	80032ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	4876      	ldr	r0, [pc, #472]	; (8001810 <FunctionAtivarMotores+0x298>)
 8001638:	f001 fe58 	bl	80032ec <HAL_GPIO_WritePin>
 800163c:	e027      	b.n	800168e <FunctionAtivarMotores+0x116>
	  }else if(!fWAngularD && !fWAngularE){
 800163e:	4b71      	ldr	r3, [pc, #452]	; (8001804 <FunctionAtivarMotores+0x28c>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	d11f      	bne.n	800168e <FunctionAtivarMotores+0x116>
 800164e:	4b6e      	ldr	r3, [pc, #440]	; (8001808 <FunctionAtivarMotores+0x290>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	d117      	bne.n	800168e <FunctionAtivarMotores+0x116>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f001 fe40 	bl	80032ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f001 fe39 	bl	80032ec <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	4863      	ldr	r0, [pc, #396]	; (800180c <FunctionAtivarMotores+0x294>)
 8001680:	f001 fe34 	bl	80032ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2140      	movs	r1, #64	; 0x40
 8001688:	4861      	ldr	r0, [pc, #388]	; (8001810 <FunctionAtivarMotores+0x298>)
 800168a:	f001 fe2f 	bl	80032ec <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
	  }*/

	  ulPulsePerSecondE = ulPulsePerSecondE*10;
 800168e:	4b61      	ldr	r3, [pc, #388]	; (8001814 <FunctionAtivarMotores+0x29c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	461a      	mov	r2, r3
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <FunctionAtivarMotores+0x29c>)
 800169e:	601a      	str	r2, [r3, #0]
	  ulPulsePerSecondD = ulPulsePerSecondD*10;
 80016a0:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <FunctionAtivarMotores+0x2a0>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <FunctionAtivarMotores+0x2a0>)
 80016b0:	601a      	str	r2, [r3, #0]

	  fVE = ((((float)ulPulsePerSecondE*2*3.14)/20)*RAIO);
 80016b2:	4b58      	ldr	r3, [pc, #352]	; (8001814 <FunctionAtivarMotores+0x29c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016c2:	ee17 0a90 	vmov	r0, s15
 80016c6:	f7fe ff5f 	bl	8000588 <__aeabi_f2d>
 80016ca:	a345      	add	r3, pc, #276	; (adr r3, 80017e0 <FunctionAtivarMotores+0x268>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ffb2 	bl	8000638 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b4e      	ldr	r3, [pc, #312]	; (800181c <FunctionAtivarMotores+0x2a4>)
 80016e2:	f7ff f8d3 	bl	800088c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	a33e      	add	r3, pc, #248	; (adr r3, 80017e8 <FunctionAtivarMotores+0x270>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ffa0 	bl	8000638 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa72 	bl	8000be8 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	4a46      	ldr	r2, [pc, #280]	; (8001820 <FunctionAtivarMotores+0x2a8>)
 8001708:	6013      	str	r3, [r2, #0]
	  fVD = ((((float)ulPulsePerSecondD*2*3.14)/20)*RAIO);
 800170a:	4b43      	ldr	r3, [pc, #268]	; (8001818 <FunctionAtivarMotores+0x2a0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001716:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800171a:	ee17 0a90 	vmov	r0, s15
 800171e:	f7fe ff33 	bl	8000588 <__aeabi_f2d>
 8001722:	a32f      	add	r3, pc, #188	; (adr r3, 80017e0 <FunctionAtivarMotores+0x268>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7fe ff86 	bl	8000638 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b38      	ldr	r3, [pc, #224]	; (800181c <FunctionAtivarMotores+0x2a4>)
 800173a:	f7ff f8a7 	bl	800088c <__aeabi_ddiv>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	a328      	add	r3, pc, #160	; (adr r3, 80017e8 <FunctionAtivarMotores+0x270>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe ff74 	bl	8000638 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa46 	bl	8000be8 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a31      	ldr	r2, [pc, #196]	; (8001824 <FunctionAtivarMotores+0x2ac>)
 8001760:	6013      	str	r3, [r2, #0]

	  fPIDVal_D = PID_D(fVD, fWAngularD);
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <FunctionAtivarMotores+0x2ac>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <FunctionAtivarMotores+0x28c>)
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	eef0 0a47 	vmov.f32	s1, s14
 8001772:	eeb0 0a67 	vmov.f32	s0, s15
 8001776:	f000 fcf5 	bl	8002164 <PID_D>
 800177a:	eef0 7a40 	vmov.f32	s15, s0
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <FunctionAtivarMotores+0x2b0>)
 8001780:	edc3 7a00 	vstr	s15, [r3]
	  fPIDVal_E = PID_E(fVE, fWAngularE);
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <FunctionAtivarMotores+0x2a8>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <FunctionAtivarMotores+0x290>)
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	eef0 0a47 	vmov.f32	s1, s14
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	f000 fc5a 	bl	8002050 <PID_E>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <FunctionAtivarMotores+0x2b4>)
 80017a2:	edc3 7a00 	vstr	s15, [r3]

	  htim3.Instance->CCR1 = fPIDVal_D;
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <FunctionAtivarMotores+0x2b0>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <FunctionAtivarMotores+0x278>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b4:	ee17 2a90 	vmov	r2, s15
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = fPIDVal_E;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <FunctionAtivarMotores+0x2b4>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <FunctionAtivarMotores+0x278>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c8:	ee17 2a90 	vmov	r2, s15
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38

	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <FunctionAtivarMotores+0x288>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 fcce 	bl	8008174 <osSemaphoreRelease>
	  osDelay(100);
 80017d8:	2064      	movs	r0, #100	; 0x64
 80017da:	f006 fbd5 	bl	8007f88 <osDelay>
	  osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80017de:	e6ff      	b.n	80015e0 <FunctionAtivarMotores+0x68>
 80017e0:	51eb851f 	.word	0x51eb851f
 80017e4:	40091eb8 	.word	0x40091eb8
 80017e8:	76c8b439 	.word	0x76c8b439
 80017ec:	3f6a9fbe 	.word	0x3f6a9fbe
 80017f0:	2000024c 	.word	0x2000024c
 80017f4:	44480000 	.word	0x44480000
 80017f8:	48435000 	.word	0x48435000
 80017fc:	42c80000 	.word	0x42c80000
 8001800:	20000168 	.word	0x20000168
 8001804:	200000ac 	.word	0x200000ac
 8001808:	200000b0 	.word	0x200000b0
 800180c:	48000800 	.word	0x48000800
 8001810:	48000400 	.word	0x48000400
 8001814:	200000d4 	.word	0x200000d4
 8001818:	200000dc 	.word	0x200000dc
 800181c:	40340000 	.word	0x40340000
 8001820:	200000b4 	.word	0x200000b4
 8001824:	200000b8 	.word	0x200000b8
 8001828:	200000bc 	.word	0x200000bc
 800182c:	200000c0 	.word	0x200000c0

08001830 <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 8001830:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_Base_Start_IT(&htim6);
 800183a:	4877      	ldr	r0, [pc, #476]	; (8001a18 <FunctionOdometria+0x1e8>)
 800183c:	f002 fe5c 	bl	80044f8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8001840:	4876      	ldr	r0, [pc, #472]	; (8001a1c <FunctionOdometria+0x1ec>)
 8001842:	f002 fde9 	bl	8004418 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);
 8001846:	4876      	ldr	r0, [pc, #472]	; (8001a20 <FunctionOdometria+0x1f0>)
 8001848:	f002 fde6 	bl	8004418 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 100);
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <FunctionOdometria+0x1f4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2164      	movs	r1, #100	; 0x64
 8001852:	4618      	mov	r0, r3
 8001854:	f006 fc3c 	bl	80080d0 <osSemaphoreAcquire>
	  fTeta = fTeta + (((fVelocidadeD-fVelocidadeE)/(COMPRIMENTO+LARGURA))*1);
 8001858:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <FunctionOdometria+0x1f8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe93 	bl	8000588 <__aeabi_f2d>
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	4b71      	ldr	r3, [pc, #452]	; (8001a2c <FunctionOdometria+0x1fc>)
 8001868:	ed93 7a00 	vldr	s14, [r3]
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <FunctionOdometria+0x200>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001876:	ee17 0a90 	vmov	r0, s15
 800187a:	f7fe fe85 	bl	8000588 <__aeabi_f2d>
 800187e:	a362      	add	r3, pc, #392	; (adr r3, 8001a08 <FunctionOdometria+0x1d8>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f802 	bl	800088c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fd1c 	bl	80002cc <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f9a4 	bl	8000be8 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a61      	ldr	r2, [pc, #388]	; (8001a28 <FunctionOdometria+0x1f8>)
 80018a4:	6013      	str	r3, [r2, #0]

	  fSD = fSD + ((fVelocidadeD+fVelocidadeE)/2)*cos(fTeta);
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <FunctionOdometria+0x204>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe6c 	bl	8000588 <__aeabi_f2d>
 80018b0:	4604      	mov	r4, r0
 80018b2:	460d      	mov	r5, r1
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <FunctionOdometria+0x1fc>)
 80018b6:	ed93 7a00 	vldr	s14, [r3]
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <FunctionOdometria+0x200>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018cc:	ee16 0a90 	vmov	r0, s13
 80018d0:	f7fe fe5a 	bl	8000588 <__aeabi_f2d>
 80018d4:	4680      	mov	r8, r0
 80018d6:	4689      	mov	r9, r1
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <FunctionOdometria+0x1f8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe53 	bl	8000588 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	ec43 2b10 	vmov	d0, r2, r3
 80018ea:	f009 fd35 	bl	800b358 <cos>
 80018ee:	ec53 2b10 	vmov	r2, r3, d0
 80018f2:	4640      	mov	r0, r8
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7fe fe9f 	bl	8000638 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe fce3 	bl	80002cc <__adddf3>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7ff f96b 	bl	8000be8 <__aeabi_d2f>
 8001912:	4603      	mov	r3, r0
 8001914:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <FunctionOdometria+0x204>)
 8001916:	6013      	str	r3, [r2, #0]
	  fSE = fSE + ((fVelocidadeD+fVelocidadeE)/2)*sin(fTeta);
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <FunctionOdometria+0x208>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe33 	bl	8000588 <__aeabi_f2d>
 8001922:	4604      	mov	r4, r0
 8001924:	460d      	mov	r5, r1
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <FunctionOdometria+0x1fc>)
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <FunctionOdometria+0x200>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800193a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800193e:	ee16 0a90 	vmov	r0, s13
 8001942:	f7fe fe21 	bl	8000588 <__aeabi_f2d>
 8001946:	4680      	mov	r8, r0
 8001948:	4689      	mov	r9, r1
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <FunctionOdometria+0x1f8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe1a 	bl	8000588 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	ec43 2b10 	vmov	d0, r2, r3
 800195c:	f009 fd50 	bl	800b400 <sin>
 8001960:	ec53 2b10 	vmov	r2, r3, d0
 8001964:	4640      	mov	r0, r8
 8001966:	4649      	mov	r1, r9
 8001968:	f7fe fe66 	bl	8000638 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fcaa 	bl	80002cc <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f932 	bl	8000be8 <__aeabi_d2f>
 8001984:	4603      	mov	r3, r0
 8001986:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <FunctionOdometria+0x208>)
 8001988:	6013      	str	r3, [r2, #0]

	  fDistanciaO = sqrt(pow(fSD,2) + pow(fSE,2));
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <FunctionOdometria+0x204>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdfa 	bl	8000588 <__aeabi_f2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001a10 <FunctionOdometria+0x1e0>
 800199c:	ec43 2b10 	vmov	d0, r2, r3
 80019a0:	f009 fd86 	bl	800b4b0 <pow>
 80019a4:	ec55 4b10 	vmov	r4, r5, d0
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <FunctionOdometria+0x208>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdeb 	bl	8000588 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001a10 <FunctionOdometria+0x1e0>
 80019ba:	ec43 2b10 	vmov	d0, r2, r3
 80019be:	f009 fd77 	bl	800b4b0 <pow>
 80019c2:	ec53 2b10 	vmov	r2, r3, d0
 80019c6:	4620      	mov	r0, r4
 80019c8:	4629      	mov	r1, r5
 80019ca:	f7fe fc7f 	bl	80002cc <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ec43 2b17 	vmov	d7, r2, r3
 80019d6:	eeb0 0a47 	vmov.f32	s0, s14
 80019da:	eef0 0a67 	vmov.f32	s1, s15
 80019de:	f009 fdd7 	bl	800b590 <sqrt>
 80019e2:	ec53 2b10 	vmov	r2, r3, d0
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f8fd 	bl	8000be8 <__aeabi_d2f>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <FunctionOdometria+0x20c>)
 80019f2:	6013      	str	r3, [r2, #0]
	  osSemaphoreRelease(SemaphoreComunicaHandle);
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <FunctionOdometria+0x1f4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f006 fbbb 	bl	8008174 <osSemaphoreRelease>
	  osDelay(100);
 80019fe:	2064      	movs	r0, #100	; 0x64
 8001a00:	f006 fac2 	bl	8007f88 <osDelay>
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 100);
 8001a04:	e722      	b.n	800184c <FunctionOdometria+0x1c>
 8001a06:	bf00      	nop
 8001a08:	fbe76c8b 	.word	0xfbe76c8b
 8001a0c:	3fc2f1a9 	.word	0x3fc2f1a9
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40000000 	.word	0x40000000
 8001a18:	200002e4 	.word	0x200002e4
 8001a1c:	20000200 	.word	0x20000200
 8001a20:	20000298 	.word	0x20000298
 8001a24:	2000016c 	.word	0x2000016c
 8001a28:	200000c4 	.word	0x200000c4
 8001a2c:	200000e0 	.word	0x200000e0
 8001a30:	200000d8 	.word	0x200000d8
 8001a34:	200000c8 	.word	0x200000c8
 8001a38:	200000cc 	.word	0x200000cc
 8001a3c:	200000d0 	.word	0x200000d0

08001a40 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){//ultrassonico
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a69      	ldr	r2, [pc, #420]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f040 80c6 	bne.w	8001bde <HAL_TIM_IC_CaptureCallback+0x19e>
		if(uiIsFirst){
 8001a52:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01b      	beq.n	8001a92 <HAL_TIM_IC_CaptureCallback+0x52>
			lValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001a5a:	2108      	movs	r1, #8
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f003 fd25 	bl	80054ac <HAL_TIM_ReadCapturedValue>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001a68:	601a      	str	r2, [r3, #0]
			uiIsFirst=0;
 8001a6a:	4b62      	ldr	r3, [pc, #392]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a1a      	ldr	r2, [r3, #32]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001a7e:	621a      	str	r2, [r3, #32]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8e:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
		}
	}
}
 8001a90:	e0a5      	b.n	8001bde <HAL_TIM_IC_CaptureCallback+0x19e>
			lValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001a92:	2108      	movs	r1, #8
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f003 fd09 	bl	80054ac <HAL_TIM_ReadCapturedValue>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001aa0:	601a      	str	r2, [r3, #0]
			uiIsFirst=1;
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
			fDiferenca = (float)((unsigned)lValor2-(unsigned)lValor1);
 8001aa8:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001abe:	edc3 7a00 	vstr	s15, [r3]
			fDistancia = ((fDiferenca/2)*0.0001)*340/2 < 100?((fDiferenca/2)*0.0001)*340/2 : fDistancia;
 8001ac2:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001acc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ad0:	ee16 0a90 	vmov	r0, s13
 8001ad4:	f7fe fd58 	bl	8000588 <__aeabi_f2d>
 8001ad8:	a343      	add	r3, pc, #268	; (adr r3, 8001be8 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fdab 	bl	8000638 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b45      	ldr	r3, [pc, #276]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001af0:	f7fe fda2 	bl	8000638 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b04:	f7fe fec2 	bl	800088c <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001b16:	f7ff f801 	bl	8000b1c <__aeabi_dcmplt>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d02a      	beq.n	8001b76 <HAL_TIM_IC_CaptureCallback+0x136>
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b2e:	ee16 0a90 	vmov	r0, s13
 8001b32:	f7fe fd29 	bl	8000588 <__aeabi_f2d>
 8001b36:	a32c      	add	r3, pc, #176	; (adr r3, 8001be8 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fd7c 	bl	8000638 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001b4e:	f7fe fd73 	bl	8000638 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b62:	f7fe fe93 	bl	800088c <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f83b 	bl	8000be8 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	e001      	b.n	8001b7a <HAL_TIM_IC_CaptureCallback+0x13a>
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001b7c:	6013      	str	r3, [r2, #0]
			uiBloqueado = (fDistancia>2 && fDistancia<20) ? 1 : 0;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	dd0b      	ble.n	8001baa <HAL_TIM_IC_CaptureCallback+0x16a>
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	d501      	bpl.n	8001baa <HAL_TIM_IC_CaptureCallback+0x16a>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_TIM_IC_CaptureCallback+0x16c>
 8001baa:	2300      	movs	r3, #0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001bb0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001bc0:	621a      	str	r2, [r3, #32]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a12      	ldr	r2, [r2, #32]
 8001bcc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0208 	bic.w	r2, r2, #8
 8001bdc:	60da      	str	r2, [r3, #12]
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	eb1c432d 	.word	0xeb1c432d
 8001bec:	3f1a36e2 	.word	0x3f1a36e2
 8001bf0:	200001b4 	.word	0x200001b4
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	2000009c 	.word	0x2000009c
 8001bfc:	200000a0 	.word	0x200000a0
 8001c00:	200000a4 	.word	0x200000a4
 8001c04:	40754000 	.word	0x40754000
 8001c08:	40590000 	.word	0x40590000
 8001c0c:	200000a8 	.word	0x200000a8
 8001c10:	200000e8 	.word	0x200000e8
 8001c14:	00000000 	.word	0x00000000

08001c18 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a37      	ldr	r2, [pc, #220]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d15f      	bne.n	8001ce8 <HAL_TIM_PeriodElapsedCallback+0xd0>
		ulPulsePerSecondE = __HAL_TIM_GET_COUNTER(&htim2);
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	4a36      	ldr	r2, [pc, #216]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c30:	6013      	str	r3, [r2, #0]
		ulPulsePerSecondD = __HAL_TIM_GET_COUNTER(&htim5);
 8001c32:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	4a35      	ldr	r2, [pc, #212]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001c3a:	6013      	str	r3, [r2, #0]

		fVelocidadeE = ((float)ulPulsePerSecondE/FUROS)*2*3.1415*RAIO;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c48:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c54:	ee17 0a90 	vmov	r0, s15
 8001c58:	f7fe fc96 	bl	8000588 <__aeabi_f2d>
 8001c5c:	a324      	add	r3, pc, #144	; (adr r3, 8001cf0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fce9 	bl	8000638 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	a322      	add	r3, pc, #136	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fce0 	bl	8000638 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7fe ffb2 	bl	8000be8 <__aeabi_d2f>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c88:	6013      	str	r3, [r2, #0]
		fVelocidadeD = ((float)ulPulsePerSecondD/FUROS)*2*3.1415*RAIO;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c96:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ca2:	ee17 0a90 	vmov	r0, s15
 8001ca6:	f7fe fc6f 	bl	8000588 <__aeabi_f2d>
 8001caa:	a311      	add	r3, pc, #68	; (adr r3, 8001cf0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f7fe fcc2 	bl	8000638 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	a30e      	add	r3, pc, #56	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fcb9 	bl	8000638 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe ff8b 	bl	8000be8 <__aeabi_d2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001cd6:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim5,0);
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	c083126f 	.word	0xc083126f
 8001cf4:	400921ca 	.word	0x400921ca
 8001cf8:	76c8b439 	.word	0x76c8b439
 8001cfc:	3f6a9fbe 	.word	0x3f6a9fbe
 8001d00:	200002e4 	.word	0x200002e4
 8001d04:	20000200 	.word	0x20000200
 8001d08:	200000d4 	.word	0x200000d4
 8001d0c:	20000298 	.word	0x20000298
 8001d10:	200000dc 	.word	0x200000dc
 8001d14:	200000d8 	.word	0x200000d8
 8001d18:	200000e0 	.word	0x200000e0

08001d1c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
  {
	  //
  }
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	4a4f      	ldr	r2, [pc, #316]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d52:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a49      	ldr	r2, [pc, #292]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a43      	ldr	r2, [pc, #268]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a3d      	ldr	r2, [pc, #244]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <MX_GPIO_Init+0x158>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin, GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	f248 3120 	movw	r1, #33568	; 0x8320
 8001dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db0:	f001 fa9c 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	4834      	ldr	r0, [pc, #208]	; (8001e8c <MX_GPIO_Init+0x15c>)
 8001dba:	f001 fa97 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	4833      	ldr	r0, [pc, #204]	; (8001e90 <MX_GPIO_Init+0x160>)
 8001dc4:	f001 fa92 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001dce:	4831      	ldr	r0, [pc, #196]	; (8001e94 <MX_GPIO_Init+0x164>)
 8001dd0:	f001 fa8c 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|GPIO_PIN_8
 8001dd4:	f242 3360 	movw	r3, #9056	; 0x2360
 8001dd8:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4828      	ldr	r0, [pc, #160]	; (8001e8c <MX_GPIO_Init+0x15c>)
 8001dea:	f001 f8e5 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin;
 8001dee:	f248 3320 	movw	r3, #33568	; 0x8320
 8001df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0a:	f001 f8d5 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	4819      	ldr	r0, [pc, #100]	; (8001e8c <MX_GPIO_Init+0x15c>)
 8001e26:	f001 f8c7 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f001 f8b9 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001e46:	2304      	movs	r3, #4
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <MX_GPIO_Init+0x160>)
 8001e5e:	f001 f8ab 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin;
 8001e62:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <MX_GPIO_Init+0x164>)
 8001e7c:	f001 f89c 	bl	8002fb8 <HAL_GPIO_Init>

}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000800 	.word	0x48000800
 8001e90:	48000c00 	.word	0x48000c00
 8001e94:	48000400 	.word	0x48000400

08001e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e9c:	f000 ff0b 	bl	8002cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ea0:	f000 f817 	bl	8001ed2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea4:	f7ff ff44 	bl	8001d30 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ea8:	f000 fa90 	bl	80023cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001eac:	f000 fb04 	bl	80024b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001eb0:	f000 fb56 	bl	8002560 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001eb4:	f000 fc0c 	bl	80026d0 <MX_TIM6_Init>
  MX_LPUART1_UART_Init();
 8001eb8:	f000 fd64 	bl	8002984 <MX_LPUART1_UART_Init>
  MX_TIM5_Init();
 8001ebc:	f000 fbb4 	bl	8002628 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001ec0:	f000 fdaa 	bl	8002a18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ec4:	f005 ff84 	bl	8007dd0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ec8:	f7ff f860 	bl	8000f8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ecc:	f005 ffa4 	bl	8007e18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <main+0x38>

08001ed2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b094      	sub	sp, #80	; 0x50
 8001ed6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	2238      	movs	r2, #56	; 0x38
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f008 fd69 	bl	800a9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ef8:	f001 fa10 	bl	800331c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f06:	2340      	movs	r3, #64	; 0x40
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001f16:	2319      	movs	r3, #25
 8001f18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f22:	2302      	movs	r3, #2
 8001f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f26:	f107 0318 	add.w	r3, r7, #24
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 fa9a 	bl	8003464 <HAL_RCC_OscConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001f36:	f000 f819 	bl	8001f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3a:	230f      	movs	r3, #15
 8001f3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f46:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2103      	movs	r1, #3
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 fd9d 	bl	8003a94 <HAL_RCC_ClockConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f60:	f000 f804 	bl	8001f6c <Error_Handler>
  }
}
 8001f64:	bf00      	nop
 8001f66:	3750      	adds	r7, #80	; 0x50
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f70:	b672      	cpsid	i
}
 8001f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <Error_Handler+0x8>
	...

08001f78 <PID_init_D>:
float fKpD, fKiD, fKdD, fTsD, fOutminD, fOutmaxD;

float fErrorP_E, fErrorI_E, fErrorD_E;
float fErrorP_D,fErrorI_D,fErrorD_D;

void PID_init_D(sPID_D *par) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	fKpD = par->fKpD;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <PID_init_D+0x50>)
 8001f86:	6013      	str	r3, [r2, #0]
	fKiD = par->fKiD;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <PID_init_D+0x54>)
 8001f8e:	6013      	str	r3, [r2, #0]
	fKdD = par->fKdD;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <PID_init_D+0x58>)
 8001f96:	6013      	str	r3, [r2, #0]
	fTsD = (par->fTsD) / 1000;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f9e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001fd4 <PID_init_D+0x5c>
 8001fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <PID_init_D+0x60>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
	fOutminD = par->fOutminD;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <PID_init_D+0x64>)
 8001fb2:	6013      	str	r3, [r2, #0]
	fOutmaxD = par->fOutmaxD;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <PID_init_D+0x68>)
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	20000188 	.word	0x20000188
 8001fcc:	2000018c 	.word	0x2000018c
 8001fd0:	20000190 	.word	0x20000190
 8001fd4:	447a0000 	.word	0x447a0000
 8001fd8:	20000194 	.word	0x20000194
 8001fdc:	20000198 	.word	0x20000198
 8001fe0:	2000019c 	.word	0x2000019c

08001fe4 <PID_init_E>:
void PID_init_E(sPID_E *par) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	fKpE = par->fKpE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <PID_init_E+0x50>)
 8001ff2:	6013      	str	r3, [r2, #0]
	fKiE = par->fKiE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <PID_init_E+0x54>)
 8001ffa:	6013      	str	r3, [r2, #0]
	fKdE = par->fKdE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <PID_init_E+0x58>)
 8002002:	6013      	str	r3, [r2, #0]
	fTsE = (par->fTsE) / 1000;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	ed93 7a03 	vldr	s14, [r3, #12]
 800200a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002040 <PID_init_E+0x5c>
 800200e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <PID_init_E+0x60>)
 8002014:	edc3 7a00 	vstr	s15, [r3]
	fOutminE = par->fOutminE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <PID_init_E+0x64>)
 800201e:	6013      	str	r3, [r2, #0]
	fOutmaxE = par->fOutmaxE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	4a09      	ldr	r2, [pc, #36]	; (800204c <PID_init_E+0x68>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	20000170 	.word	0x20000170
 8002038:	20000174 	.word	0x20000174
 800203c:	20000178 	.word	0x20000178
 8002040:	447a0000 	.word	0x447a0000
 8002044:	2000017c 	.word	0x2000017c
 8002048:	20000180 	.word	0x20000180
 800204c:	20000184 	.word	0x20000184

08002050 <PID_E>:

float PID_E(float input, float set_point) {
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	ed87 0a01 	vstr	s0, [r7, #4]
 800205a:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_E;

	fErrorP_E = (set_point - input);
 800205e:	ed97 7a00 	vldr	s14, [r7]
 8002062:	edd7 7a01 	vldr	s15, [r7, #4]
 8002066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206a:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpE * fErrorP_E;
 800206e:	4b35      	ldr	r3, [pc, #212]	; (8002144 <PID_E+0xf4>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ed97 7a06 	vldr	s14, [r7, #24]
 8002078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207c:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_E += fErrorP_E * fTsE;
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <PID_E+0xf8>)
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	edd7 7a06 	vldr	s15, [r7, #24]
 800208a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <PID_E+0xfc>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <PID_E+0xfc>)
 800209a:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiE * fErrorI_E;
 800209e:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <PID_E+0x100>)
 80020a0:	ed93 7a00 	vldr	s14, [r3]
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <PID_E+0xfc>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_E = (fErrorP_E-fErrorD_E)/fTsE;
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <PID_E+0x104>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80020bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <PID_E+0xf8>)
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <PID_E+0x104>)
 80020cc:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdE * fErrorD_E;
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <PID_E+0x108>)
 80020d2:	ed93 7a00 	vldr	s14, [r3]
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <PID_E+0x104>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e0:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 80020e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80020e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxE) {
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <PID_E+0x10c>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ed97 7a07 	vldr	s14, [r7, #28]
 8002106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	dd02      	ble.n	8002116 <PID_E+0xc6>
		fOut = fOutmaxE;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <PID_E+0x10c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61fb      	str	r3, [r7, #28]
	}
	if (fOut < fOutminE) {
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <PID_E+0x110>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	d502      	bpl.n	8002130 <PID_E+0xe0>
		fOut = fOutminE;
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <PID_E+0x110>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	ee07 3a90 	vmov	s15, r3
}
 8002136:	eeb0 0a67 	vmov.f32	s0, s15
 800213a:	3724      	adds	r7, #36	; 0x24
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	20000170 	.word	0x20000170
 8002148:	2000017c 	.word	0x2000017c
 800214c:	200001a0 	.word	0x200001a0
 8002150:	20000174 	.word	0x20000174
 8002154:	200001a4 	.word	0x200001a4
 8002158:	20000178 	.word	0x20000178
 800215c:	20000184 	.word	0x20000184
 8002160:	20000180 	.word	0x20000180

08002164 <PID_D>:
float PID_D(float input, float set_point) {
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	ed87 0a01 	vstr	s0, [r7, #4]
 800216e:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_D;

	fErrorP_D = (set_point - input);
 8002172:	ed97 7a00 	vldr	s14, [r7]
 8002176:	edd7 7a01 	vldr	s15, [r7, #4]
 800217a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217e:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpD * fErrorP_D;
 8002182:	4b36      	ldr	r3, [pc, #216]	; (800225c <PID_D+0xf8>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ed97 7a06 	vldr	s14, [r7, #24]
 800218c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002190:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_D += fErrorP_D * fTsD;
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <PID_D+0xfc>)
 8002196:	ed93 7a00 	vldr	s14, [r3]
 800219a:	edd7 7a06 	vldr	s15, [r7, #24]
 800219e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a2:	4b30      	ldr	r3, [pc, #192]	; (8002264 <PID_D+0x100>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <PID_D+0x100>)
 80021ae:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiD * fErrorI_D;
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <PID_D+0x104>)
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <PID_D+0x100>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c2:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_D = (fErrorP_D-fErrorD_D)/fTsD;
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <PID_D+0x108>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80021d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021d4:	4b22      	ldr	r3, [pc, #136]	; (8002260 <PID_D+0xfc>)
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <PID_D+0x108>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdD * fErrorD_D;
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <PID_D+0x10c>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <PID_D+0x108>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f4:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 80021f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80021fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	ed97 7a03 	vldr	s14, [r7, #12]
 8002208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220c:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxD) {
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <PID_D+0x110>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ed97 7a07 	vldr	s14, [r7, #28]
 800221a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	dd03      	ble.n	800222c <PID_D+0xc8>
		fOut = fOutmaxD;
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <PID_D+0x110>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e00c      	b.n	8002246 <PID_D+0xe2>
	}else if (fOut < fOutminD) {
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <PID_D+0x114>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ed97 7a07 	vldr	s14, [r7, #28]
 8002236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	d502      	bpl.n	8002246 <PID_D+0xe2>
		fOut = fOutminD;
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <PID_D+0x114>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	ee07 3a90 	vmov	s15, r3
}
 800224c:	eeb0 0a67 	vmov.f32	s0, s15
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000188 	.word	0x20000188
 8002260:	20000194 	.word	0x20000194
 8002264:	200001a8 	.word	0x200001a8
 8002268:	2000018c 	.word	0x2000018c
 800226c:	200001ac 	.word	0x200001ac
 8002270:	20000190 	.word	0x20000190
 8002274:	2000019c 	.word	0x2000019c
 8002278:	20000198 	.word	0x20000198

0800227c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_MspInit+0x4c>)
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_MspInit+0x4c>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6613      	str	r3, [r2, #96]	; 0x60
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_MspInit+0x4c>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_MspInit+0x4c>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_MspInit+0x4c>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_MspInit+0x4c>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	210f      	movs	r1, #15
 80022b6:	f06f 0001 	mvn.w	r0, #1
 80022ba:	f000 fe48 	bl	8002f4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <NMI_Handler+0x4>

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fc:	f000 fd2e 	bl	8002d5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002300:	f007 fba4 	bl	8009a4c <xTaskGetSchedulerState>
 8002304:	4603      	mov	r3, r0
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800230a:	f008 f935 	bl	800a578 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <TIM1_CC_IRQHandler+0x10>)
 800231a:	f002 fc81 	bl	8004c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200001b4 	.word	0x200001b4

08002328 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <TIM6_DAC_IRQHandler+0x10>)
 800232e:	f002 fc77 	bl	8004c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200002e4 	.word	0x200002e4

0800233c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <_sbrk+0x5c>)
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <_sbrk+0x60>)
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <_sbrk+0x64>)
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <_sbrk+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d207      	bcs.n	800237c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800236c:	f008 faea 	bl	800a944 <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	220c      	movs	r2, #12
 8002374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e009      	b.n	8002390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <_sbrk+0x64>)
 800238c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20020000 	.word	0x20020000
 800239c:	00000400 	.word	0x00000400
 80023a0:	200001b0 	.word	0x200001b0
 80023a4:	20002670 	.word	0x20002670

080023a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <SystemInit+0x20>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <SystemInit+0x20>)
 80023b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <MX_TIM1_Init+0xe4>)
 80023fa:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <MX_TIM1_Init+0xe8>)
 80023fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <MX_TIM1_Init+0xe4>)
 8002400:	2231      	movs	r2, #49	; 0x31
 8002402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <MX_TIM1_Init+0xe4>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <MX_TIM1_Init+0xe4>)
 800240c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002410:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002412:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <MX_TIM1_Init+0xe4>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <MX_TIM1_Init+0xe4>)
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <MX_TIM1_Init+0xe4>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002424:	4822      	ldr	r0, [pc, #136]	; (80024b0 <MX_TIM1_Init+0xe4>)
 8002426:	f001 ff9f 	bl	8004368 <HAL_TIM_Base_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002430:	f7ff fd9c 	bl	8001f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002438:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	4619      	mov	r1, r3
 8002440:	481b      	ldr	r0, [pc, #108]	; (80024b0 <MX_TIM1_Init+0xe4>)
 8002442:	f002 ff1d 	bl	8005280 <HAL_TIM_ConfigClockSource>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800244c:	f7ff fd8e 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002450:	4817      	ldr	r0, [pc, #92]	; (80024b0 <MX_TIM1_Init+0xe4>)
 8002452:	f002 fa33 	bl	80048bc <HAL_TIM_IC_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800245c:	f7ff fd86 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	480f      	ldr	r0, [pc, #60]	; (80024b0 <MX_TIM1_Init+0xe4>)
 8002474:	f003 fe3a 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800247e:	f7ff fd75 	bl	8001f6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002486:	2301      	movs	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2208      	movs	r2, #8
 8002496:	4619      	mov	r1, r3
 8002498:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_TIM1_Init+0xe4>)
 800249a:	f002 fd40 	bl	8004f1e <HAL_TIM_IC_ConfigChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80024a4:	f7ff fd62 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024a8:	bf00      	nop
 80024aa:	3730      	adds	r7, #48	; 0x30
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200001b4 	.word	0x200001b4
 80024b4:	40012c00 	.word	0x40012c00

080024b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <MX_TIM2_Init+0xa4>)
 80024d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <MX_TIM2_Init+0xa4>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <MX_TIM2_Init+0xa4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <MX_TIM2_Init+0xa4>)
 80024ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <MX_TIM2_Init+0xa4>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <MX_TIM2_Init+0xa4>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <MX_TIM2_Init+0xa4>)
 8002500:	f001 ff32 	bl	8004368 <HAL_TIM_Base_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800250a:	f7ff fd2f 	bl	8001f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800250e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002512:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	4619      	mov	r1, r3
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <MX_TIM2_Init+0xa4>)
 8002528:	f002 feaa 	bl	8005280 <HAL_TIM_ConfigClockSource>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002532:	f7ff fd1b 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4806      	ldr	r0, [pc, #24]	; (800255c <MX_TIM2_Init+0xa4>)
 8002544:	f003 fdd2 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800254e:	f7ff fd0d 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000200 	.word	0x20000200

08002560 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002572:	463b      	mov	r3, r7
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
 8002580:	615a      	str	r2, [r3, #20]
 8002582:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <MX_TIM3_Init+0xc0>)
 8002586:	4a27      	ldr	r2, [pc, #156]	; (8002624 <MX_TIM3_Init+0xc4>)
 8002588:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <MX_TIM3_Init+0xc0>)
 800258c:	2231      	movs	r2, #49	; 0x31
 800258e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002590:	4b23      	ldr	r3, [pc, #140]	; (8002620 <MX_TIM3_Init+0xc0>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <MX_TIM3_Init+0xc0>)
 8002598:	2263      	movs	r2, #99	; 0x63
 800259a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <MX_TIM3_Init+0xc0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <MX_TIM3_Init+0xc0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025a8:	481d      	ldr	r0, [pc, #116]	; (8002620 <MX_TIM3_Init+0xc0>)
 80025aa:	f002 f81d 	bl	80045e8 <HAL_TIM_PWM_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025b4:	f7ff fcda 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	4816      	ldr	r0, [pc, #88]	; (8002620 <MX_TIM3_Init+0xc0>)
 80025c8:	f003 fd90 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025d2:	f7ff fccb 	bl	8001f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d6:	2360      	movs	r3, #96	; 0x60
 80025d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025e6:	463b      	mov	r3, r7
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <MX_TIM3_Init+0xc0>)
 80025ee:	f002 fd33 	bl	8005058 <HAL_TIM_PWM_ConfigChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80025f8:	f7ff fcb8 	bl	8001f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025fc:	463b      	mov	r3, r7
 80025fe:	2204      	movs	r2, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4807      	ldr	r0, [pc, #28]	; (8002620 <MX_TIM3_Init+0xc0>)
 8002604:	f002 fd28 	bl	8005058 <HAL_TIM_PWM_ConfigChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800260e:	f7ff fcad 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002612:	4803      	ldr	r0, [pc, #12]	; (8002620 <MX_TIM3_Init+0xc0>)
 8002614:	f000 f97e 	bl	8002914 <HAL_TIM_MspPostInit>

}
 8002618:	bf00      	nop
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	2000024c 	.word	0x2000024c
 8002624:	40000400 	.word	0x40000400

08002628 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0310 	add.w	r3, r7, #16
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <MX_TIM5_Init+0xa0>)
 8002648:	4a20      	ldr	r2, [pc, #128]	; (80026cc <MX_TIM5_Init+0xa4>)
 800264a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800264c:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <MX_TIM5_Init+0xa0>)
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <MX_TIM5_Init+0xa0>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <MX_TIM5_Init+0xa0>)
 800265a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800265e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <MX_TIM5_Init+0xa0>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <MX_TIM5_Init+0xa0>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800266c:	4816      	ldr	r0, [pc, #88]	; (80026c8 <MX_TIM5_Init+0xa0>)
 800266e:	f001 fe7b 	bl	8004368 <HAL_TIM_Base_Init>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002678:	f7ff fc78 	bl	8001f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800267c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002680:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	4619      	mov	r1, r3
 8002694:	480c      	ldr	r0, [pc, #48]	; (80026c8 <MX_TIM5_Init+0xa0>)
 8002696:	f002 fdf3 	bl	8005280 <HAL_TIM_ConfigClockSource>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80026a0:	f7ff fc64 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a4:	2300      	movs	r3, #0
 80026a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_TIM5_Init+0xa0>)
 80026b2:	f003 fd1b 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80026bc:	f7ff fc56 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026c0:	bf00      	nop
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000298 	.word	0x20000298
 80026cc:	40000c00 	.word	0x40000c00

080026d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <MX_TIM6_Init+0x68>)
 80026e2:	4a16      	ldr	r2, [pc, #88]	; (800273c <MX_TIM6_Init+0x6c>)
 80026e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5000-1;
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <MX_TIM6_Init+0x68>)
 80026e8:	f241 3287 	movw	r2, #4999	; 0x1387
 80026ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <MX_TIM6_Init+0x68>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <MX_TIM6_Init+0x68>)
 80026f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <MX_TIM6_Init+0x68>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002702:	480d      	ldr	r0, [pc, #52]	; (8002738 <MX_TIM6_Init+0x68>)
 8002704:	f001 fe30 	bl	8004368 <HAL_TIM_Base_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800270e:	f7ff fc2d 	bl	8001f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4806      	ldr	r0, [pc, #24]	; (8002738 <MX_TIM6_Init+0x68>)
 8002720:	f003 fce4 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800272a:	f7ff fc1f 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200002e4 	.word	0x200002e4
 800273c:	40001000 	.word	0x40001000

08002740 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08e      	sub	sp, #56	; 0x38
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_TIM_Base_MspInit+0x17c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d130      	bne.n	80027c4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	4a56      	ldr	r2, [pc, #344]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800276c:	6613      	str	r3, [r2, #96]	; 0x60
 800276e:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	4a50      	ldr	r2, [pc, #320]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002786:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002792:	2304      	movs	r3, #4
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80027a2:	2302      	movs	r3, #2
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027aa:	4619      	mov	r1, r3
 80027ac:	4845      	ldr	r0, [pc, #276]	; (80028c4 <HAL_TIM_Base_MspInit+0x184>)
 80027ae:	f000 fc03 	bl	8002fb8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2105      	movs	r1, #5
 80027b6:	201b      	movs	r0, #27
 80027b8:	f000 fbc9 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80027bc:	201b      	movs	r0, #27
 80027be:	f000 fbe0 	bl	8002f82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80027c2:	e076      	b.n	80028b2 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d129      	bne.n	8002822 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	4a35      	ldr	r2, [pc, #212]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 80027fe:	2301      	movs	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800280e:	230e      	movs	r3, #14
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281c:	f000 fbcc 	bl	8002fb8 <HAL_GPIO_Init>
}
 8002820:	e047      	b.n	80028b2 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM5)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <HAL_TIM_Base_MspInit+0x188>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d129      	bne.n	8002880 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002832:	f043 0308 	orr.w	r3, r3, #8
 8002836:	6593      	str	r3, [r2, #88]	; 0x58
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002844:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002848:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_D_Pin;
 800285c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286a:	2300      	movs	r3, #0
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800286e:	2302      	movs	r3, #2
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4619      	mov	r1, r3
 8002878:	4814      	ldr	r0, [pc, #80]	; (80028cc <HAL_TIM_Base_MspInit+0x18c>)
 800287a:	f000 fb9d 	bl	8002fb8 <HAL_GPIO_Init>
}
 800287e:	e018      	b.n	80028b2 <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM6)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <HAL_TIM_Base_MspInit+0x190>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d113      	bne.n	80028b2 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002890:	f043 0310 	orr.w	r3, r3, #16
 8002894:	6593      	str	r3, [r2, #88]	; 0x58
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_TIM_Base_MspInit+0x180>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2105      	movs	r1, #5
 80028a6:	2036      	movs	r0, #54	; 0x36
 80028a8:	f000 fb51 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028ac:	2036      	movs	r0, #54	; 0x36
 80028ae:	f000 fb68 	bl	8002f82 <HAL_NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3738      	adds	r7, #56	; 0x38
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	48000800 	.word	0x48000800
 80028c8:	40000c00 	.word	0x40000c00
 80028cc:	48000400 	.word	0x48000400
 80028d0:	40001000 	.word	0x40001000

080028d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_TIM_PWM_MspInit+0x38>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10b      	bne.n	80028fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_TIM_PWM_MspInit+0x3c>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_TIM_PWM_MspInit+0x3c>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6593      	str	r3, [r2, #88]	; 0x58
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_TIM_PWM_MspInit+0x3c>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40000400 	.word	0x40000400
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a11      	ldr	r2, [pc, #68]	; (8002978 <HAL_TIM_MspPostInit+0x64>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d11b      	bne.n	800296e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_TIM_MspPostInit+0x68>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	4a10      	ldr	r2, [pc, #64]	; (800297c <HAL_TIM_MspPostInit+0x68>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_TIM_MspPostInit+0x68>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_2_Pin;
 800294e:	2330      	movs	r3, #48	; 0x30
 8002950:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800295e:	2302      	movs	r3, #2
 8002960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	4619      	mov	r1, r3
 8002968:	4805      	ldr	r0, [pc, #20]	; (8002980 <HAL_TIM_MspPostInit+0x6c>)
 800296a:	f000 fb25 	bl	8002fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40000400 	.word	0x40000400
 800297c:	40021000 	.word	0x40021000
 8002980:	48000400 	.word	0x48000400

08002984 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <MX_LPUART1_UART_Init+0x90>)
 800298c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 8002990:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002994:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029aa:	220c      	movs	r2, #12
 80029ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80029c6:	4812      	ldr	r0, [pc, #72]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029c8:	f003 fc6c 	bl	80062a4 <HAL_UART_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80029d2:	f7ff facb 	bl	8001f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029d6:	2100      	movs	r1, #0
 80029d8:	480d      	ldr	r0, [pc, #52]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029da:	f005 f8fa 	bl	8007bd2 <HAL_UARTEx_SetTxFifoThreshold>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80029e4:	f7ff fac2 	bl	8001f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029e8:	2100      	movs	r1, #0
 80029ea:	4809      	ldr	r0, [pc, #36]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029ec:	f005 f92f 	bl	8007c4e <HAL_UARTEx_SetRxFifoThreshold>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80029f6:	f7ff fab9 	bl	8001f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <MX_LPUART1_UART_Init+0x8c>)
 80029fc:	f005 f8b0 	bl	8007b60 <HAL_UARTEx_DisableFifoMode>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002a06:	f7ff fab1 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000330 	.word	0x20000330
 8002a14:	40008000 	.word	0x40008000

08002a18 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a1e:	4a23      	ldr	r2, [pc, #140]	; (8002aac <MX_USART1_UART_Init+0x94>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a60:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a62:	f003 fc1f 	bl	80062a4 <HAL_UART_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a6c:	f7ff fa7e 	bl	8001f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a70:	2100      	movs	r1, #0
 8002a72:	480d      	ldr	r0, [pc, #52]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a74:	f005 f8ad 	bl	8007bd2 <HAL_UARTEx_SetTxFifoThreshold>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a7e:	f7ff fa75 	bl	8001f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a82:	2100      	movs	r1, #0
 8002a84:	4808      	ldr	r0, [pc, #32]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a86:	f005 f8e2 	bl	8007c4e <HAL_UARTEx_SetRxFifoThreshold>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a90:	f7ff fa6c 	bl	8001f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a94:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <MX_USART1_UART_Init+0x90>)
 8002a96:	f005 f863 	bl	8007b60 <HAL_UARTEx_DisableFifoMode>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002aa0:	f7ff fa64 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200003c0 	.word	0x200003c0
 8002aac:	40013800 	.word	0x40013800

08002ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b0a2      	sub	sp, #136	; 0x88
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ac8:	f107 0320 	add.w	r3, r7, #32
 8002acc:	2254      	movs	r2, #84	; 0x54
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f007 ff71 	bl	800a9b8 <memset>
  if(uartHandle->Instance==LPUART1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a5e      	ldr	r2, [pc, #376]	; (8002c54 <HAL_UART_MspInit+0x1a4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d157      	bne.n	8002b90 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ae8:	f107 0320 	add.w	r3, r7, #32
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 f9ed 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002af8:	f7ff fa38 	bl	8001f6c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	4a55      	ldr	r2, [pc, #340]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	4a4f      	ldr	r2, [pc, #316]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b20:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2c:	4b4a      	ldr	r3, [pc, #296]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	4a49      	ldr	r2, [pc, #292]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b38:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b44:	2301      	movs	r3, #1
 8002b46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b56:	2308      	movs	r3, #8
 8002b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b60:	4619      	mov	r1, r3
 8002b62:	483e      	ldr	r0, [pc, #248]	; (8002c5c <HAL_UART_MspInit+0x1ac>)
 8002b64:	f000 fa28 	bl	8002fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b68:	2304      	movs	r3, #4
 8002b6a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b84:	4619      	mov	r1, r3
 8002b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8a:	f000 fa15 	bl	8002fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b8e:	e05c      	b.n	8002c4a <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a32      	ldr	r2, [pc, #200]	; (8002c60 <HAL_UART_MspInit+0x1b0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d157      	bne.n	8002c4a <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba2:	f107 0320 	add.w	r3, r7, #32
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 f990 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_UART_MspInit+0x106>
      Error_Handler();
 8002bb2:	f7ff f9db 	bl	8001f6c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb6:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bba:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_UART_MspInit+0x1a8>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_RX_Pin;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c10:	2307      	movs	r3, #7
 8002c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480f      	ldr	r0, [pc, #60]	; (8002c5c <HAL_UART_MspInit+0x1ac>)
 8002c1e:	f000 f9cb 	bl	8002fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 8002c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c26:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c36:	2307      	movs	r3, #7
 8002c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 8002c3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c40:	4619      	mov	r1, r3
 8002c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c46:	f000 f9b7 	bl	8002fb8 <HAL_GPIO_Init>
}
 8002c4a:	bf00      	nop
 8002c4c:	3788      	adds	r7, #136	; 0x88
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40008000 	.word	0x40008000
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	48000800 	.word	0x48000800
 8002c60:	40013800 	.word	0x40013800

08002c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c64:	480d      	ldr	r0, [pc, #52]	; (8002c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c68:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c6a:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <LoopForever+0xe>)
  movs r3, #0
 8002c6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c70:	e002      	b.n	8002c78 <LoopCopyDataInit>

08002c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c76:	3304      	adds	r3, #4

08002c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c7c:	d3f9      	bcc.n	8002c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c80:	4c0b      	ldr	r4, [pc, #44]	; (8002cb0 <LoopForever+0x16>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c84:	e001      	b.n	8002c8a <LoopFillZerobss>

08002c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c88:	3204      	adds	r2, #4

08002c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c8c:	d3fb      	bcc.n	8002c86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c8e:	f7ff fb8b 	bl	80023a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c92:	f007 fe5d 	bl	800a950 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c96:	f7ff f8ff 	bl	8001e98 <main>

08002c9a <LoopForever>:

LoopForever:
    b LoopForever
 8002c9a:	e7fe      	b.n	8002c9a <LoopForever>
  ldr   r0, =_estack
 8002c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002ca8:	0800d720 	.word	0x0800d720
  ldr r2, =_sbss
 8002cac:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002cb0:	2000266c 	.word	0x2000266c

08002cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC1_2_IRQHandler>

08002cb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f000 f939 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cc6:	200f      	movs	r0, #15
 8002cc8:	f000 f80e 	bl	8002ce8 <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	71fb      	strb	r3, [r7, #7]
 8002cd6:	e001      	b.n	8002cdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cd8:	f7ff fad0 	bl	800227c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cdc:	79fb      	ldrb	r3, [r7, #7]

}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_InitTick+0x68>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d022      	beq.n	8002d42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_InitTick+0x6c>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_InitTick+0x68>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f944 	bl	8002f9e <HAL_SYSTICK_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10f      	bne.n	8002d3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	d809      	bhi.n	8002d36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d22:	2200      	movs	r2, #0
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2a:	f000 f910 	bl	8002f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_InitTick+0x70>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e007      	b.n	8002d46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e004      	b.n	8002d46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000014 	.word	0x20000014
 8002d54:	2000000c 	.word	0x2000000c
 8002d58:	20000010 	.word	0x20000010

08002d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_IncTick+0x1c>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_IncTick+0x20>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_IncTick+0x1c>)
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	20000450 	.word	0x20000450
 8002d7c:	20000014 	.word	0x20000014

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000450 	.word	0x20000450

08002d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <__NVIC_SetPriorityGrouping+0x44>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dca:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <__NVIC_SetPriorityGrouping+0x44>)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	60d3      	str	r3, [r2, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <__NVIC_GetPriorityGrouping+0x18>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f003 0307 	and.w	r3, r3, #7
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	db0b      	blt.n	8002e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	4907      	ldr	r1, [pc, #28]	; (8002e34 <__NVIC_EnableIRQ+0x38>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	db0a      	blt.n	8002e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	490c      	ldr	r1, [pc, #48]	; (8002e84 <__NVIC_SetPriority+0x4c>)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e60:	e00a      	b.n	8002e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4908      	ldr	r1, [pc, #32]	; (8002e88 <__NVIC_SetPriority+0x50>)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	440b      	add	r3, r1
 8002e76:	761a      	strb	r2, [r3, #24]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	; 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f1c3 0307 	rsb	r3, r3, #7
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	bf28      	it	cs
 8002eaa:	2304      	movcs	r3, #4
 8002eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d902      	bls.n	8002ebc <NVIC_EncodePriority+0x30>
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3b03      	subs	r3, #3
 8002eba:	e000      	b.n	8002ebe <NVIC_EncodePriority+0x32>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	401a      	ands	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43d9      	mvns	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	4313      	orrs	r3, r2
         );
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f04:	d301      	bcc.n	8002f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00f      	b.n	8002f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <SysTick_Config+0x40>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f12:	210f      	movs	r1, #15
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f7ff ff8e 	bl	8002e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <SysTick_Config+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f22:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <SysTick_Config+0x40>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000e010 	.word	0xe000e010

08002f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff29 	bl	8002d98 <__NVIC_SetPriorityGrouping>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff40 	bl	8002de0 <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff90 	bl	8002e8c <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5f 	bl	8002e38 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff33 	bl	8002dfc <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa4 	bl	8002ef4 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fc6:	e15a      	b.n	800327e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 814c 	beq.w	8003278 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d005      	beq.n	8002ff8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d130      	bne.n	800305a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800302e:	2201      	movs	r2, #1
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f003 0201 	and.w	r2, r3, #1
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b03      	cmp	r3, #3
 8003064:	d017      	beq.n	8003096 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d123      	bne.n	80030ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	6939      	ldr	r1, [r7, #16]
 80030e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0203 	and.w	r2, r3, #3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80a6 	beq.w	8003278 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312c:	4b5b      	ldr	r3, [pc, #364]	; (800329c <HAL_GPIO_Init+0x2e4>)
 800312e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003130:	4a5a      	ldr	r2, [pc, #360]	; (800329c <HAL_GPIO_Init+0x2e4>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6613      	str	r3, [r2, #96]	; 0x60
 8003138:	4b58      	ldr	r3, [pc, #352]	; (800329c <HAL_GPIO_Init+0x2e4>)
 800313a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003144:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_GPIO_Init+0x2e8>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	3302      	adds	r3, #2
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	220f      	movs	r2, #15
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800316e:	d01f      	beq.n	80031b0 <HAL_GPIO_Init+0x1f8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a4c      	ldr	r2, [pc, #304]	; (80032a4 <HAL_GPIO_Init+0x2ec>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d019      	beq.n	80031ac <HAL_GPIO_Init+0x1f4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <HAL_GPIO_Init+0x2f0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <HAL_GPIO_Init+0x1f0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a4a      	ldr	r2, [pc, #296]	; (80032ac <HAL_GPIO_Init+0x2f4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00d      	beq.n	80031a4 <HAL_GPIO_Init+0x1ec>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a49      	ldr	r2, [pc, #292]	; (80032b0 <HAL_GPIO_Init+0x2f8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d007      	beq.n	80031a0 <HAL_GPIO_Init+0x1e8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a48      	ldr	r2, [pc, #288]	; (80032b4 <HAL_GPIO_Init+0x2fc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_GPIO_Init+0x1e4>
 8003198:	2305      	movs	r3, #5
 800319a:	e00a      	b.n	80031b2 <HAL_GPIO_Init+0x1fa>
 800319c:	2306      	movs	r3, #6
 800319e:	e008      	b.n	80031b2 <HAL_GPIO_Init+0x1fa>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e006      	b.n	80031b2 <HAL_GPIO_Init+0x1fa>
 80031a4:	2303      	movs	r3, #3
 80031a6:	e004      	b.n	80031b2 <HAL_GPIO_Init+0x1fa>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e002      	b.n	80031b2 <HAL_GPIO_Init+0x1fa>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_GPIO_Init+0x1fa>
 80031b0:	2300      	movs	r3, #0
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	f002 0203 	and.w	r2, r2, #3
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	4093      	lsls	r3, r2
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031c2:	4937      	ldr	r1, [pc, #220]	; (80032a0 <HAL_GPIO_Init+0x2e8>)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3302      	adds	r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031d0:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_GPIO_Init+0x300>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031f4:	4a30      	ldr	r2, [pc, #192]	; (80032b8 <HAL_GPIO_Init+0x300>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031fa:	4b2f      	ldr	r3, [pc, #188]	; (80032b8 <HAL_GPIO_Init+0x300>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800321e:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <HAL_GPIO_Init+0x300>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_GPIO_Init+0x300>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_GPIO_Init+0x300>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_GPIO_Init+0x300>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003272:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <HAL_GPIO_Init+0x300>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3301      	adds	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	f47f ae9d 	bne.w	8002fc8 <HAL_GPIO_Init+0x10>
  }
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40021000 	.word	0x40021000
 80032a0:	40010000 	.word	0x40010000
 80032a4:	48000400 	.word	0x48000400
 80032a8:	48000800 	.word	0x48000800
 80032ac:	48000c00 	.word	0x48000c00
 80032b0:	48001000 	.word	0x48001000
 80032b4:	48001400 	.word	0x48001400
 80032b8:	40010400 	.word	0x40010400

080032bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e001      	b.n	80032de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032de:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
 80032f8:	4613      	mov	r3, r2
 80032fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032fc:	787b      	ldrb	r3, [r7, #1]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003308:	e002      	b.n	8003310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d141      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003336:	d131      	bne.n	800339c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003338:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333e:	4a46      	ldr	r2, [pc, #280]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003348:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003350:	4a41      	ldr	r2, [pc, #260]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003356:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003358:	4b40      	ldr	r3, [pc, #256]	; (800345c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2232      	movs	r2, #50	; 0x32
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	4a3f      	ldr	r2, [pc, #252]	; (8003460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	0c9b      	lsrs	r3, r3, #18
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800336e:	e002      	b.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3b01      	subs	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d102      	bne.n	800338a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f2      	bne.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003396:	d158      	bne.n	800344a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e057      	b.n	800344c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a2:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033ac:	e04d      	b.n	800344a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b4:	d141      	bne.n	800343a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d131      	bne.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ca:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d4:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2232      	movs	r2, #50	; 0x32
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	0c9b      	lsrs	r3, r3, #18
 80033f6:	3301      	adds	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033fa:	e002      	b.n	8003402 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3b01      	subs	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d102      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f2      	bne.n	80033fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d112      	bne.n	800344a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e011      	b.n	800344c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003438:	e007      	b.n	800344a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003448:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40007000 	.word	0x40007000
 800345c:	2000000c 	.word	0x2000000c
 8003460:	431bde83 	.word	0x431bde83

08003464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e306      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d075      	beq.n	800356e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003482:	4b97      	ldr	r3, [pc, #604]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348c:	4b94      	ldr	r3, [pc, #592]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d102      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3e>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d002      	beq.n	80034a8 <HAL_RCC_OscConfig+0x44>
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d10b      	bne.n	80034c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a8:	4b8d      	ldr	r3, [pc, #564]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d05b      	beq.n	800356c <HAL_RCC_OscConfig+0x108>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d157      	bne.n	800356c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e2e1      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c8:	d106      	bne.n	80034d8 <HAL_RCC_OscConfig+0x74>
 80034ca:	4b85      	ldr	r3, [pc, #532]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a84      	ldr	r2, [pc, #528]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e01d      	b.n	8003514 <HAL_RCC_OscConfig+0xb0>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x98>
 80034e2:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7e      	ldr	r2, [pc, #504]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80034e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	4b7c      	ldr	r3, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7b      	ldr	r2, [pc, #492]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e00b      	b.n	8003514 <HAL_RCC_OscConfig+0xb0>
 80034fc:	4b78      	ldr	r3, [pc, #480]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a77      	ldr	r2, [pc, #476]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	4b75      	ldr	r3, [pc, #468]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a74      	ldr	r2, [pc, #464]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 800350e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7ff fc30 	bl	8002d80 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7ff fc2c 	bl	8002d80 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e2a6      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0xc0>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7ff fc1c 	bl	8002d80 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7ff fc18 	bl	8002d80 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e292      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800355e:	4b60      	ldr	r3, [pc, #384]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0xe8>
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357a:	4b59      	ldr	r3, [pc, #356]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003584:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b0c      	cmp	r3, #12
 8003592:	d102      	bne.n	800359a <HAL_RCC_OscConfig+0x136>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d002      	beq.n	80035a0 <HAL_RCC_OscConfig+0x13c>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11f      	bne.n	80035e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a0:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_OscConfig+0x154>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e265      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b8:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	4946      	ldr	r1, [pc, #280]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035cc:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fb89 	bl	8002ce8 <HAL_InitTick>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d043      	beq.n	8003664 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e251      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d023      	beq.n	8003630 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e8:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80035ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7ff fbc4 	bl	8002d80 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fc:	f7ff fbc0 	bl	8002d80 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e23a      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	492d      	ldr	r1, [pc, #180]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
 800362e:	e01a      	b.n	8003666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7ff fba0 	bl	8002d80 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003644:	f7ff fb9c 	bl	8002d80 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e216      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x1e0>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d041      	beq.n	80036f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 800367c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003680:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368a:	f7ff fb79 	bl	8002d80 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003692:	f7ff fb75 	bl	8002d80 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1ef      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0ef      	beq.n	8003692 <HAL_RCC_OscConfig+0x22e>
 80036b2:	e020      	b.n	80036f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7ff fb5c 	bl	8002d80 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ca:	e00d      	b.n	80036e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7ff fb58 	bl	8002d80 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d906      	bls.n	80036e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e1d2      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036e8:	4b8c      	ldr	r3, [pc, #560]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ea      	bne.n	80036cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80a6 	beq.w	8003850 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003704:	2300      	movs	r3, #0
 8003706:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003708:	4b84      	ldr	r3, [pc, #528]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_OscConfig+0x2b4>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x2b6>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	4b7f      	ldr	r3, [pc, #508]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	4a7e      	ldr	r2, [pc, #504]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	6593      	str	r3, [r2, #88]	; 0x58
 800372a:	4b7c      	ldr	r3, [pc, #496]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003736:	2301      	movs	r3, #1
 8003738:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373a:	4b79      	ldr	r3, [pc, #484]	; (8003920 <HAL_RCC_OscConfig+0x4bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d118      	bne.n	8003778 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003746:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x4bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a75      	ldr	r2, [pc, #468]	; (8003920 <HAL_RCC_OscConfig+0x4bc>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7ff fb15 	bl	8002d80 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375a:	f7ff fb11 	bl	8002d80 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e18b      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376c:	4b6c      	ldr	r3, [pc, #432]	; (8003920 <HAL_RCC_OscConfig+0x4bc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d108      	bne.n	8003792 <HAL_RCC_OscConfig+0x32e>
 8003780:	4b66      	ldr	r3, [pc, #408]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	4a65      	ldr	r2, [pc, #404]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003790:	e024      	b.n	80037dc <HAL_RCC_OscConfig+0x378>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b05      	cmp	r3, #5
 8003798:	d110      	bne.n	80037bc <HAL_RCC_OscConfig+0x358>
 800379a:	4b60      	ldr	r3, [pc, #384]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	4a5e      	ldr	r2, [pc, #376]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037aa:	4b5c      	ldr	r3, [pc, #368]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	4a5a      	ldr	r2, [pc, #360]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ba:	e00f      	b.n	80037dc <HAL_RCC_OscConfig+0x378>
 80037bc:	4b57      	ldr	r3, [pc, #348]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037cc:	4b53      	ldr	r3, [pc, #332]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a52      	ldr	r2, [pc, #328]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d016      	beq.n	8003812 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7ff facc 	bl	8002d80 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7ff fac8 	bl	8002d80 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e140      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003802:	4b46      	ldr	r3, [pc, #280]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0ed      	beq.n	80037ec <HAL_RCC_OscConfig+0x388>
 8003810:	e015      	b.n	800383e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7ff fab5 	bl	8002d80 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7ff fab1 	bl	8002d80 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e129      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003830:	4b3a      	ldr	r3, [pc, #232]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1ed      	bne.n	800381a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800383e:	7ffb      	ldrb	r3, [r7, #31]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	4a34      	ldr	r2, [pc, #208]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 800384a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800384e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d03c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01c      	beq.n	800389e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003864:	4b2d      	ldr	r3, [pc, #180]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800386a:	4a2c      	ldr	r2, [pc, #176]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7ff fa84 	bl	8002d80 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800387c:	f7ff fa80 	bl	8002d80 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0fa      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800388e:	4b23      	ldr	r3, [pc, #140]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 8003890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ef      	beq.n	800387c <HAL_RCC_OscConfig+0x418>
 800389c:	e01b      	b.n	80038d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800389e:	4b1f      	ldr	r3, [pc, #124]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80038a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ae:	f7ff fa67 	bl	8002d80 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038b6:	f7ff fa63 	bl	8002d80 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0dd      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038c8:	4b14      	ldr	r3, [pc, #80]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ef      	bne.n	80038b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80d1 	beq.w	8003a82 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	f000 808b 	beq.w	8003a04 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d15e      	bne.n	80039b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <HAL_RCC_OscConfig+0x4b8>)
 80038fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7ff fa3d 	bl	8002d80 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003908:	e00c      	b.n	8003924 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390a:	f7ff fa39 	bl	8002d80 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d905      	bls.n	8003924 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e0b3      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
 800391c:	40021000 	.word	0x40021000
 8003920:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003924:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1ec      	bne.n	800390a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003930:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	4b56      	ldr	r3, [pc, #344]	; (8003a90 <HAL_RCC_OscConfig+0x62c>)
 8003936:	4013      	ands	r3, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6a11      	ldr	r1, [r2, #32]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003940:	3a01      	subs	r2, #1
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800394a:	0212      	lsls	r2, r2, #8
 800394c:	4311      	orrs	r1, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003952:	0852      	lsrs	r2, r2, #1
 8003954:	3a01      	subs	r2, #1
 8003956:	0552      	lsls	r2, r2, #21
 8003958:	4311      	orrs	r1, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800395e:	0852      	lsrs	r2, r2, #1
 8003960:	3a01      	subs	r2, #1
 8003962:	0652      	lsls	r2, r2, #25
 8003964:	4311      	orrs	r1, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800396a:	06d2      	lsls	r2, r2, #27
 800396c:	430a      	orrs	r2, r1
 800396e:	4947      	ldr	r1, [pc, #284]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 8003970:	4313      	orrs	r3, r2
 8003972:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003974:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a44      	ldr	r2, [pc, #272]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 800397a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 8003986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7ff f9f8 	bl	8002d80 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003994:	f7ff f9f4 	bl	8002d80 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e06e      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x530>
 80039b2:	e066      	b.n	8003a82 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b4:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 80039ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039c0:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a31      	ldr	r2, [pc, #196]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039cc:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 80039d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7ff f9d0 	bl	8002d80 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7ff f9cc 	bl	8002d80 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e046      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f6:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x580>
 8003a02:	e03e      	b.n	8003a82 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e039      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_RCC_OscConfig+0x628>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 0203 	and.w	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d12c      	bne.n	8003a7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d123      	bne.n	8003a7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d11b      	bne.n	8003a7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d113      	bne.n	8003a7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	3b01      	subs	r3, #1
 8003a64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d109      	bne.n	8003a7e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	3b01      	subs	r3, #1
 8003a78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	019f800c 	.word	0x019f800c

08003a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e11e      	b.n	8003cea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b91      	ldr	r3, [pc, #580]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d910      	bls.n	8003adc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b8e      	ldr	r3, [pc, #568]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 020f 	bic.w	r2, r3, #15
 8003ac2:	498c      	ldr	r1, [pc, #560]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b8a      	ldr	r3, [pc, #552]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e106      	b.n	8003cea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d073      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d129      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af0:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0f4      	b.n	8003cea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b00:	f000 f99e 	bl	8003e40 <RCC_GetSysClockFreqFromPLLSource>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4a7c      	ldr	r2, [pc, #496]	; (8003cfc <HAL_RCC_ClockConfig+0x268>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d93f      	bls.n	8003b8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b0e:	4b7a      	ldr	r3, [pc, #488]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d033      	beq.n	8003b8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d12f      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b2e:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b36:	4a70      	ldr	r2, [pc, #448]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e024      	b.n	8003b8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4c:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0c6      	b.n	8003cea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b5c:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0be      	b.n	8003cea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b6c:	f000 f8ce 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4a61      	ldr	r2, [pc, #388]	; (8003cfc <HAL_RCC_ClockConfig+0x268>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d909      	bls.n	8003b8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b82:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b8e:	4b5a      	ldr	r3, [pc, #360]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4957      	ldr	r1, [pc, #348]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba0:	f7ff f8ee 	bl	8002d80 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba8:	f7ff f8ea 	bl	8002d80 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e095      	b.n	8003cea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 020c 	and.w	r2, r3, #12
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1eb      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d023      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be8:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003bee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bf2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c00:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c08:	4a3b      	ldr	r2, [pc, #236]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4936      	ldr	r1, [pc, #216]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b80      	cmp	r3, #128	; 0x80
 8003c28:	d105      	bne.n	8003c36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c2a:	4b33      	ldr	r3, [pc, #204]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	4a32      	ldr	r2, [pc, #200]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d21d      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 020f 	bic.w	r2, r3, #15
 8003c4c:	4929      	ldr	r1, [pc, #164]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c54:	f7ff f894 	bl	8002d80 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5c:	f7ff f890 	bl	8002d80 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e03b      	b.n	8003cea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCC_ClockConfig+0x260>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d1ed      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4917      	ldr	r1, [pc, #92]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	490f      	ldr	r1, [pc, #60]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cbe:	f000 f825 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	490c      	ldr	r1, [pc, #48]	; (8003d00 <HAL_RCC_ClockConfig+0x26c>)
 8003cd0:	5ccb      	ldrb	r3, [r1, r3]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x270>)
 8003cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_RCC_ClockConfig+0x274>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f800 	bl	8002ce8 <HAL_InitTick>
 8003ce8:	4603      	mov	r3, r0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40022000 	.word	0x40022000
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	04c4b400 	.word	0x04c4b400
 8003d00:	0800d430 	.word	0x0800d430
 8003d04:	2000000c 	.word	0x2000000c
 8003d08:	20000010 	.word	0x20000010

08003d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d12:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d102      	bne.n	8003d24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	e047      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d102      	bne.n	8003d36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	e03e      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d36:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d136      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d42:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	3301      	adds	r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d60:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6a:	68d2      	ldr	r2, [r2, #12]
 8003d6c:	0a12      	lsrs	r2, r2, #8
 8003d6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
      break;
 8003d78:	e00c      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d7a:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	0a12      	lsrs	r2, r2, #8
 8003d88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
      break;
 8003d92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0e5b      	lsrs	r3, r3, #25
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e001      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003db4:	693b      	ldr	r3, [r7, #16]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	007a1200 	.word	0x007a1200

08003dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	2000000c 	.word	0x2000000c

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dec:	f7ff fff0 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	0800d440 	.word	0x0800d440

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e18:	f7ff ffda 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0adb      	lsrs	r3, r3, #11
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4904      	ldr	r1, [pc, #16]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	0800d440 	.word	0x0800d440

08003e40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e46:	4b1e      	ldr	r3, [pc, #120]	; (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d10c      	bne.n	8003e7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e64:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e6e:	68d2      	ldr	r2, [r2, #12]
 8003e70:	0a12      	lsrs	r2, r2, #8
 8003e72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	617b      	str	r3, [r7, #20]
    break;
 8003e7c:	e00c      	b.n	8003e98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e7e:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e88:	68d2      	ldr	r2, [r2, #12]
 8003e8a:	0a12      	lsrs	r2, r2, #8
 8003e8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]
    break;
 8003e96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	0e5b      	lsrs	r3, r3, #25
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003eb2:	687b      	ldr	r3, [r7, #4]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	007a1200 	.word	0x007a1200
 8003ec8:	00f42400 	.word	0x00f42400

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8098 	beq.w	800401a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	4b40      	ldr	r3, [pc, #256]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	4a3f      	ldr	r2, [pc, #252]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6593      	str	r3, [r2, #88]	; 0x58
 8003f06:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f12:	2301      	movs	r3, #1
 8003f14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f16:	4b3a      	ldr	r3, [pc, #232]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a39      	ldr	r2, [pc, #228]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f22:	f7fe ff2d 	bl	8002d80 <HAL_GetTick>
 8003f26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f28:	e009      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2a:	f7fe ff29 	bl	8002d80 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d902      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f3c:	e005      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f3e:	4b30      	ldr	r3, [pc, #192]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ef      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d159      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01e      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d019      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f88:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f98:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fe fee9 	bl	8002d80 <HAL_GetTick>
 8003fae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb0:	e00b      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fe fee5 	bl	8002d80 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d902      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fc8:	e006      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ec      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fec:	4903      	ldr	r1, [pc, #12]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ff4:	e008      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	74bb      	strb	r3, [r7, #18]
 8003ffa:	e005      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004008:	7c7b      	ldrb	r3, [r7, #17]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400e:	4ba7      	ldr	r3, [pc, #668]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	4aa6      	ldr	r2, [pc, #664]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004018:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004026:	4ba1      	ldr	r3, [pc, #644]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f023 0203 	bic.w	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	499d      	ldr	r1, [pc, #628]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004048:	4b98      	ldr	r3, [pc, #608]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 020c 	bic.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4995      	ldr	r1, [pc, #596]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800406a:	4b90      	ldr	r3, [pc, #576]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	498c      	ldr	r1, [pc, #560]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800408c:	4b87      	ldr	r3, [pc, #540]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	4984      	ldr	r1, [pc, #528]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ae:	4b7f      	ldr	r3, [pc, #508]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	497b      	ldr	r1, [pc, #492]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040d0:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	4973      	ldr	r1, [pc, #460]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f2:	4b6e      	ldr	r3, [pc, #440]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	496a      	ldr	r1, [pc, #424]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004114:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	4962      	ldr	r1, [pc, #392]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004136:	4b5d      	ldr	r3, [pc, #372]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	4959      	ldr	r1, [pc, #356]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004158:	4b54      	ldr	r3, [pc, #336]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800415e:	f023 0203 	bic.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	4951      	ldr	r1, [pc, #324]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417a:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4948      	ldr	r1, [pc, #288]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800419c:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	4940      	ldr	r1, [pc, #256]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ba:	d105      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4a3a      	ldr	r2, [pc, #232]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d015      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041d4:	4b35      	ldr	r3, [pc, #212]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	4932      	ldr	r1, [pc, #200]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f2:	d105      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f4:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d015      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	4924      	ldr	r1, [pc, #144]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800422a:	d105      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800422c:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004236:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	4916      	ldr	r1, [pc, #88]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004262:	d105      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800426e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d019      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4908      	ldr	r1, [pc, #32]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800429a:	d109      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a02      	ldr	r2, [pc, #8]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a6:	60d3      	str	r3, [r2, #12]
 80042a8:	e002      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042bc:	4b29      	ldr	r3, [pc, #164]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	4926      	ldr	r1, [pc, #152]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042da:	d105      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a20      	ldr	r2, [pc, #128]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042f4:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004302:	4918      	ldr	r1, [pc, #96]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d105      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a12      	ldr	r2, [pc, #72]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800431a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800432e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	490a      	ldr	r1, [pc, #40]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800434a:	d105      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004356:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004358:	7cbb      	ldrb	r3, [r7, #18]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000

08004368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e049      	b.n	800440e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe f9d6 	bl	8002740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f001 f8e2 	bl	8005570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d001      	beq.n	8004430 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e04c      	b.n	80044ca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <HAL_TIM_Base_Start+0xc0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_TIM_Base_Start+0x70>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d01d      	beq.n	8004488 <HAL_TIM_Base_Start+0x70>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a22      	ldr	r2, [pc, #136]	; (80044dc <HAL_TIM_Base_Start+0xc4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_TIM_Base_Start+0x70>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <HAL_TIM_Base_Start+0xc8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_TIM_Base_Start+0x70>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_TIM_Base_Start+0xcc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_TIM_Base_Start+0x70>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <HAL_TIM_Base_Start+0xd0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_TIM_Base_Start+0x70>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_TIM_Base_Start+0xd4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIM_Base_Start+0x70>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_TIM_Base_Start+0xd8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d115      	bne.n	80044b4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <HAL_TIM_Base_Start+0xdc>)
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b06      	cmp	r3, #6
 8004498:	d015      	beq.n	80044c6 <HAL_TIM_Base_Start+0xae>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d011      	beq.n	80044c6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b2:	e008      	b.n	80044c6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e000      	b.n	80044c8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40013400 	.word	0x40013400
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40015000 	.word	0x40015000
 80044f4:	00010007 	.word	0x00010007

080044f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d001      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e054      	b.n	80045ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d022      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d01d      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a22      	ldr	r2, [pc, #136]	; (80045cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d018      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a21      	ldr	r2, [pc, #132]	; (80045d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00e      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <HAL_TIM_Base_Start_IT+0xe4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x80>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d115      	bne.n	80045a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_TIM_Base_Start_IT+0xec>)
 8004580:	4013      	ands	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b06      	cmp	r3, #6
 8004588:	d015      	beq.n	80045b6 <HAL_TIM_Base_Start_IT+0xbe>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d011      	beq.n	80045b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a2:	e008      	b.n	80045b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e000      	b.n	80045b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40013400 	.word	0x40013400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40015000 	.word	0x40015000
 80045e4:	00010007 	.word	0x00010007

080045e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e049      	b.n	800468e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fe f960 	bl	80028d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 ffa2 	bl	8005570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_TIM_PWM_Start+0x24>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e03c      	b.n	8004736 <HAL_TIM_PWM_Start+0x9e>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d109      	bne.n	80046d6 <HAL_TIM_PWM_Start+0x3e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	e02f      	b.n	8004736 <HAL_TIM_PWM_Start+0x9e>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x58>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e022      	b.n	8004736 <HAL_TIM_PWM_Start+0x9e>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b0c      	cmp	r3, #12
 80046f4:	d109      	bne.n	800470a <HAL_TIM_PWM_Start+0x72>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	e015      	b.n	8004736 <HAL_TIM_PWM_Start+0x9e>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b10      	cmp	r3, #16
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x8c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e008      	b.n	8004736 <HAL_TIM_PWM_Start+0x9e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0a6      	b.n	800488c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0xb6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800474c:	e023      	b.n	8004796 <HAL_TIM_PWM_Start+0xfe>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0xc6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475c:	e01b      	b.n	8004796 <HAL_TIM_PWM_Start+0xfe>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xd6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800476c:	e013      	b.n	8004796 <HAL_TIM_PWM_Start+0xfe>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Start+0xe6>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800477c:	e00b      	b.n	8004796 <HAL_TIM_PWM_Start+0xfe>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b10      	cmp	r3, #16
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Start+0xf6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	e003      	b.n	8004796 <HAL_TIM_PWM_Start+0xfe>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 fc7e 	bl	80060a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3a      	ldr	r2, [pc, #232]	; (8004894 <HAL_TIM_PWM_Start+0x1fc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d018      	beq.n	80047e0 <HAL_TIM_PWM_Start+0x148>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a39      	ldr	r2, [pc, #228]	; (8004898 <HAL_TIM_PWM_Start+0x200>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d013      	beq.n	80047e0 <HAL_TIM_PWM_Start+0x148>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a37      	ldr	r2, [pc, #220]	; (800489c <HAL_TIM_PWM_Start+0x204>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <HAL_TIM_PWM_Start+0x148>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a36      	ldr	r2, [pc, #216]	; (80048a0 <HAL_TIM_PWM_Start+0x208>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_TIM_PWM_Start+0x148>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a34      	ldr	r2, [pc, #208]	; (80048a4 <HAL_TIM_PWM_Start+0x20c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_TIM_PWM_Start+0x148>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a33      	ldr	r2, [pc, #204]	; (80048a8 <HAL_TIM_PWM_Start+0x210>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_PWM_Start+0x14c>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_TIM_PWM_Start+0x14e>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a25      	ldr	r2, [pc, #148]	; (8004894 <HAL_TIM_PWM_Start+0x1fc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_TIM_PWM_Start+0x1b2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d01d      	beq.n	800484a <HAL_TIM_PWM_Start+0x1b2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a26      	ldr	r2, [pc, #152]	; (80048ac <HAL_TIM_PWM_Start+0x214>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_TIM_PWM_Start+0x1b2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <HAL_TIM_PWM_Start+0x218>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_TIM_PWM_Start+0x1b2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <HAL_TIM_PWM_Start+0x21c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_TIM_PWM_Start+0x1b2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a19      	ldr	r2, [pc, #100]	; (8004898 <HAL_TIM_PWM_Start+0x200>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_TIM_PWM_Start+0x1b2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_TIM_PWM_Start+0x204>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIM_PWM_Start+0x1b2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_TIM_PWM_Start+0x210>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d115      	bne.n	8004876 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_TIM_PWM_Start+0x220>)
 8004852:	4013      	ands	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b06      	cmp	r3, #6
 800485a:	d015      	beq.n	8004888 <HAL_TIM_PWM_Start+0x1f0>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004862:	d011      	beq.n	8004888 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004874:	e008      	b.n	8004888 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e000      	b.n	800488a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004888:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800
 80048a8:	40015000 	.word	0x40015000
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	00010007 	.word	0x00010007

080048bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e049      	b.n	8004962 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f841 	bl	800496a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f000 fe38 	bl	8005570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <HAL_TIM_IC_Start_IT+0x1e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e023      	b.n	80049e6 <HAL_TIM_IC_Start_IT+0x66>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_IC_Start_IT+0x2e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e01b      	b.n	80049e6 <HAL_TIM_IC_Start_IT+0x66>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d104      	bne.n	80049be <HAL_TIM_IC_Start_IT+0x3e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e013      	b.n	80049e6 <HAL_TIM_IC_Start_IT+0x66>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_IC_Start_IT+0x4e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e00b      	b.n	80049e6 <HAL_TIM_IC_Start_IT+0x66>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d104      	bne.n	80049de <HAL_TIM_IC_Start_IT+0x5e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	e003      	b.n	80049e6 <HAL_TIM_IC_Start_IT+0x66>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <HAL_TIM_IC_Start_IT+0x78>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e013      	b.n	8004a20 <HAL_TIM_IC_Start_IT+0xa0>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d104      	bne.n	8004a08 <HAL_TIM_IC_Start_IT+0x88>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e00b      	b.n	8004a20 <HAL_TIM_IC_Start_IT+0xa0>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d104      	bne.n	8004a18 <HAL_TIM_IC_Start_IT+0x98>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e003      	b.n	8004a20 <HAL_TIM_IC_Start_IT+0xa0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a22:	7bbb      	ldrb	r3, [r7, #14]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d102      	bne.n	8004a2e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a28:	7b7b      	ldrb	r3, [r7, #13]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d001      	beq.n	8004a32 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e0e2      	b.n	8004bf8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_IC_Start_IT+0xc2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a40:	e023      	b.n	8004a8a <HAL_TIM_IC_Start_IT+0x10a>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_IC_Start_IT+0xd2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a50:	e01b      	b.n	8004a8a <HAL_TIM_IC_Start_IT+0x10a>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_IC_Start_IT+0xe2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a60:	e013      	b.n	8004a8a <HAL_TIM_IC_Start_IT+0x10a>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_IC_Start_IT+0xf2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a70:	e00b      	b.n	8004a8a <HAL_TIM_IC_Start_IT+0x10a>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_IC_Start_IT+0x102>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	e003      	b.n	8004a8a <HAL_TIM_IC_Start_IT+0x10a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_IC_Start_IT+0x11a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a98:	e013      	b.n	8004ac2 <HAL_TIM_IC_Start_IT+0x142>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_IC_Start_IT+0x12a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa8:	e00b      	b.n	8004ac2 <HAL_TIM_IC_Start_IT+0x142>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_IC_Start_IT+0x13a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ab8:	e003      	b.n	8004ac2 <HAL_TIM_IC_Start_IT+0x142>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b0c      	cmp	r3, #12
 8004ac6:	d841      	bhi.n	8004b4c <HAL_TIM_IC_Start_IT+0x1cc>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <HAL_TIM_IC_Start_IT+0x150>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b05 	.word	0x08004b05
 8004ad4:	08004b4d 	.word	0x08004b4d
 8004ad8:	08004b4d 	.word	0x08004b4d
 8004adc:	08004b4d 	.word	0x08004b4d
 8004ae0:	08004b17 	.word	0x08004b17
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004b4d 	.word	0x08004b4d
 8004aec:	08004b4d 	.word	0x08004b4d
 8004af0:	08004b29 	.word	0x08004b29
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004b4d 	.word	0x08004b4d
 8004b00:	08004b3b 	.word	0x08004b3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0202 	orr.w	r2, r2, #2
 8004b12:	60da      	str	r2, [r3, #12]
      break;
 8004b14:	e01d      	b.n	8004b52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0204 	orr.w	r2, r2, #4
 8004b24:	60da      	str	r2, [r3, #12]
      break;
 8004b26:	e014      	b.n	8004b52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	60da      	str	r2, [r3, #12]
      break;
 8004b38:	e00b      	b.n	8004b52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0210 	orr.w	r2, r2, #16
 8004b48:	60da      	str	r2, [r3, #12]
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b50:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d14e      	bne.n	8004bf6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	6839      	ldr	r1, [r7, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 fa9d 	bl	80060a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_TIM_IC_Start_IT+0x280>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d022      	beq.n	8004bb6 <HAL_TIM_IC_Start_IT+0x236>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d01d      	beq.n	8004bb6 <HAL_TIM_IC_Start_IT+0x236>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <HAL_TIM_IC_Start_IT+0x284>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d018      	beq.n	8004bb6 <HAL_TIM_IC_Start_IT+0x236>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <HAL_TIM_IC_Start_IT+0x288>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <HAL_TIM_IC_Start_IT+0x236>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <HAL_TIM_IC_Start_IT+0x28c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_TIM_IC_Start_IT+0x236>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_TIM_IC_Start_IT+0x290>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_TIM_IC_Start_IT+0x236>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_TIM_IC_Start_IT+0x294>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_TIM_IC_Start_IT+0x236>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <HAL_TIM_IC_Start_IT+0x298>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d115      	bne.n	8004be2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <HAL_TIM_IC_Start_IT+0x29c>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b06      	cmp	r3, #6
 8004bc6:	d015      	beq.n	8004bf4 <HAL_TIM_IC_Start_IT+0x274>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bce:	d011      	beq.n	8004bf4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be0:	e008      	b.n	8004bf4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e000      	b.n	8004bf6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40015000 	.word	0x40015000
 8004c1c:	00010007 	.word	0x00010007

08004c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d122      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d11b      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0202 	mvn.w	r2, #2
 8004c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc feec 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 8004c68:	e005      	b.n	8004c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fc62 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fc69 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d122      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d11b      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0204 	mvn.w	r2, #4
 8004ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fc fec2 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fc38 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fc3f 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d122      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d11b      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0208 	mvn.w	r2, #8
 8004cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fe98 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fc0e 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fc15 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d122      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d11b      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0210 	mvn.w	r2, #16
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc fe6e 	bl	8001a40 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fbe4 	bl	8005534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fbeb 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10e      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0201 	mvn.w	r2, #1
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc ff3a 	bl	8001c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b80      	cmp	r3, #128	; 0x80
 8004db0:	d10e      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d107      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 fa2e 	bl	800622c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dde:	d10e      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d107      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f001 fa21 	bl	8006240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d10e      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d107      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fb99 	bl	800555c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d10e      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d107      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f06f 0220 	mvn.w	r2, #32
 8004e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f001 f9e1 	bl	8006218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e64:	d10f      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 f9e7 	bl	8006254 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e94:	d10f      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea4:	d107      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 f9d9 	bl	8006268 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed4:	d107      	bne.n	8004ee6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 f9cb 	bl	800627c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ef0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef4:	d10f      	bne.n	8004f16 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f04:	d107      	bne.n	8004f16 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 f9bd 	bl	8006290 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e088      	b.n	800504e <HAL_TIM_IC_ConfigChannel+0x130>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d11b      	bne.n	8004f82 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f000 fedb 	bl	8005d14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 020c 	bic.w	r2, r2, #12
 8004f6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6999      	ldr	r1, [r3, #24]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	619a      	str	r2, [r3, #24]
 8004f80:	e060      	b.n	8005044 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d11c      	bne.n	8004fc2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6819      	ldr	r1, [r3, #0]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f000 ff5f 	bl	8005e5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004faa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6999      	ldr	r1, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	021a      	lsls	r2, r3, #8
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	619a      	str	r2, [r3, #24]
 8004fc0:	e040      	b.n	8005044 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f000 ffac 	bl	8005f34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 020c 	bic.w	r2, r2, #12
 8004fea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69d9      	ldr	r1, [r3, #28]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	61da      	str	r2, [r3, #28]
 8004ffe:	e021      	b.n	8005044 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b0c      	cmp	r3, #12
 8005004:	d11c      	bne.n	8005040 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f000 ffc9 	bl	8005fac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005028:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69d9      	ldr	r1, [r3, #28]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	021a      	lsls	r2, r3, #8
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	61da      	str	r2, [r3, #28]
 800503e:	e001      	b.n	8005044 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800504c:	7dfb      	ldrb	r3, [r7, #23]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005072:	2302      	movs	r3, #2
 8005074:	e0ff      	b.n	8005276 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b14      	cmp	r3, #20
 8005082:	f200 80f0 	bhi.w	8005266 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005086:	a201      	add	r2, pc, #4	; (adr r2, 800508c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050e1 	.word	0x080050e1
 8005090:	08005267 	.word	0x08005267
 8005094:	08005267 	.word	0x08005267
 8005098:	08005267 	.word	0x08005267
 800509c:	08005121 	.word	0x08005121
 80050a0:	08005267 	.word	0x08005267
 80050a4:	08005267 	.word	0x08005267
 80050a8:	08005267 	.word	0x08005267
 80050ac:	08005163 	.word	0x08005163
 80050b0:	08005267 	.word	0x08005267
 80050b4:	08005267 	.word	0x08005267
 80050b8:	08005267 	.word	0x08005267
 80050bc:	080051a3 	.word	0x080051a3
 80050c0:	08005267 	.word	0x08005267
 80050c4:	08005267 	.word	0x08005267
 80050c8:	08005267 	.word	0x08005267
 80050cc:	080051e5 	.word	0x080051e5
 80050d0:	08005267 	.word	0x08005267
 80050d4:	08005267 	.word	0x08005267
 80050d8:	08005267 	.word	0x08005267
 80050dc:	08005225 	.word	0x08005225
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 faea 	bl	80056c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0208 	orr.w	r2, r2, #8
 80050fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	619a      	str	r2, [r3, #24]
      break;
 800511e:	e0a5      	b.n	800526c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fb64 	bl	80057f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6999      	ldr	r1, [r3, #24]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	021a      	lsls	r2, r3, #8
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	619a      	str	r2, [r3, #24]
      break;
 8005160:	e084      	b.n	800526c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fbd7 	bl	800591c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0208 	orr.w	r2, r2, #8
 800517c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0204 	bic.w	r2, r2, #4
 800518c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	61da      	str	r2, [r3, #28]
      break;
 80051a0:	e064      	b.n	800526c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fc49 	bl	8005a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69d9      	ldr	r1, [r3, #28]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	021a      	lsls	r2, r3, #8
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	61da      	str	r2, [r3, #28]
      break;
 80051e2:	e043      	b.n	800526c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fcbc 	bl	8005b68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0208 	orr.w	r2, r2, #8
 80051fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0204 	bic.w	r2, r2, #4
 800520e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005222:	e023      	b.n	800526c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fd06 	bl	8005c3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005264:	e002      	b.n	800526c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]
      break;
 800526a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop

08005280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_TIM_ConfigClockSource+0x1c>
 8005298:	2302      	movs	r3, #2
 800529a:	e0f6      	b.n	800548a <HAL_TIM_ConfigClockSource+0x20a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80052ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a6f      	ldr	r2, [pc, #444]	; (8005494 <HAL_TIM_ConfigClockSource+0x214>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	f000 80c1 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x1de>
 80052dc:	4a6d      	ldr	r2, [pc, #436]	; (8005494 <HAL_TIM_ConfigClockSource+0x214>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	f200 80c6 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 80052e4:	4a6c      	ldr	r2, [pc, #432]	; (8005498 <HAL_TIM_ConfigClockSource+0x218>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	f000 80b9 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x1de>
 80052ec:	4a6a      	ldr	r2, [pc, #424]	; (8005498 <HAL_TIM_ConfigClockSource+0x218>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	f200 80be 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 80052f4:	4a69      	ldr	r2, [pc, #420]	; (800549c <HAL_TIM_ConfigClockSource+0x21c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	f000 80b1 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x1de>
 80052fc:	4a67      	ldr	r2, [pc, #412]	; (800549c <HAL_TIM_ConfigClockSource+0x21c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	f200 80b6 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005304:	4a66      	ldr	r2, [pc, #408]	; (80054a0 <HAL_TIM_ConfigClockSource+0x220>)
 8005306:	4293      	cmp	r3, r2
 8005308:	f000 80a9 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x1de>
 800530c:	4a64      	ldr	r2, [pc, #400]	; (80054a0 <HAL_TIM_ConfigClockSource+0x220>)
 800530e:	4293      	cmp	r3, r2
 8005310:	f200 80ae 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005314:	4a63      	ldr	r2, [pc, #396]	; (80054a4 <HAL_TIM_ConfigClockSource+0x224>)
 8005316:	4293      	cmp	r3, r2
 8005318:	f000 80a1 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x1de>
 800531c:	4a61      	ldr	r2, [pc, #388]	; (80054a4 <HAL_TIM_ConfigClockSource+0x224>)
 800531e:	4293      	cmp	r3, r2
 8005320:	f200 80a6 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005324:	4a60      	ldr	r2, [pc, #384]	; (80054a8 <HAL_TIM_ConfigClockSource+0x228>)
 8005326:	4293      	cmp	r3, r2
 8005328:	f000 8099 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x1de>
 800532c:	4a5e      	ldr	r2, [pc, #376]	; (80054a8 <HAL_TIM_ConfigClockSource+0x228>)
 800532e:	4293      	cmp	r3, r2
 8005330:	f200 809e 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005334:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005338:	f000 8091 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x1de>
 800533c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005340:	f200 8096 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005348:	f000 8089 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x1de>
 800534c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005350:	f200 808e 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005358:	d03e      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0x158>
 800535a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535e:	f200 8087 	bhi.w	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005366:	f000 8086 	beq.w	8005476 <HAL_TIM_ConfigClockSource+0x1f6>
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536e:	d87f      	bhi.n	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005370:	2b70      	cmp	r3, #112	; 0x70
 8005372:	d01a      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x12a>
 8005374:	2b70      	cmp	r3, #112	; 0x70
 8005376:	d87b      	bhi.n	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005378:	2b60      	cmp	r3, #96	; 0x60
 800537a:	d050      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x19e>
 800537c:	2b60      	cmp	r3, #96	; 0x60
 800537e:	d877      	bhi.n	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005380:	2b50      	cmp	r3, #80	; 0x50
 8005382:	d03c      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x17e>
 8005384:	2b50      	cmp	r3, #80	; 0x50
 8005386:	d873      	bhi.n	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d058      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x1be>
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d86f      	bhi.n	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005390:	2b30      	cmp	r3, #48	; 0x30
 8005392:	d064      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x1de>
 8005394:	2b30      	cmp	r3, #48	; 0x30
 8005396:	d86b      	bhi.n	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 8005398:	2b20      	cmp	r3, #32
 800539a:	d060      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x1de>
 800539c:	2b20      	cmp	r3, #32
 800539e:	d867      	bhi.n	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d05c      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x1de>
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d05a      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x1de>
 80053a8:	e062      	b.n	8005470 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6899      	ldr	r1, [r3, #8]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f000 fe51 	bl	8006060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	609a      	str	r2, [r3, #8]
      break;
 80053d6:	e04f      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6899      	ldr	r1, [r3, #8]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f000 fe3a 	bl	8006060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fa:	609a      	str	r2, [r3, #8]
      break;
 80053fc:	e03c      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	461a      	mov	r2, r3
 800540c:	f000 fcf6 	bl	8005dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2150      	movs	r1, #80	; 0x50
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fe05 	bl	8006026 <TIM_ITRx_SetConfig>
      break;
 800541c:	e02c      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	461a      	mov	r2, r3
 800542c:	f000 fd52 	bl	8005ed4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2160      	movs	r1, #96	; 0x60
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fdf5 	bl	8006026 <TIM_ITRx_SetConfig>
      break;
 800543c:	e01c      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	461a      	mov	r2, r3
 800544c:	f000 fcd6 	bl	8005dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2140      	movs	r1, #64	; 0x40
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fde5 	bl	8006026 <TIM_ITRx_SetConfig>
      break;
 800545c:	e00c      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f000 fddc 	bl	8006026 <TIM_ITRx_SetConfig>
      break;
 800546e:	e003      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
      break;
 8005474:	e000      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	00100070 	.word	0x00100070
 8005498:	00100060 	.word	0x00100060
 800549c:	00100050 	.word	0x00100050
 80054a0:	00100040 	.word	0x00100040
 80054a4:	00100030 	.word	0x00100030
 80054a8:	00100020 	.word	0x00100020

080054ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b0c      	cmp	r3, #12
 80054be:	d831      	bhi.n	8005524 <HAL_TIM_ReadCapturedValue+0x78>
 80054c0:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	080054fd 	.word	0x080054fd
 80054cc:	08005525 	.word	0x08005525
 80054d0:	08005525 	.word	0x08005525
 80054d4:	08005525 	.word	0x08005525
 80054d8:	08005507 	.word	0x08005507
 80054dc:	08005525 	.word	0x08005525
 80054e0:	08005525 	.word	0x08005525
 80054e4:	08005525 	.word	0x08005525
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005525 	.word	0x08005525
 80054f0:	08005525 	.word	0x08005525
 80054f4:	08005525 	.word	0x08005525
 80054f8:	0800551b 	.word	0x0800551b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	60fb      	str	r3, [r7, #12]

      break;
 8005504:	e00f      	b.n	8005526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	60fb      	str	r3, [r7, #12]

      break;
 800550e:	e00a      	b.n	8005526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	60fb      	str	r3, [r7, #12]

      break;
 8005518:	e005      	b.n	8005526 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	60fb      	str	r3, [r7, #12]

      break;
 8005522:	e000      	b.n	8005526 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005524:	bf00      	nop
  }

  return tmpreg;
 8005526:	68fb      	ldr	r3, [r7, #12]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a46      	ldr	r2, [pc, #280]	; (800569c <TIM_Base_SetConfig+0x12c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d017      	beq.n	80055b8 <TIM_Base_SetConfig+0x48>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d013      	beq.n	80055b8 <TIM_Base_SetConfig+0x48>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a43      	ldr	r2, [pc, #268]	; (80056a0 <TIM_Base_SetConfig+0x130>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00f      	beq.n	80055b8 <TIM_Base_SetConfig+0x48>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a42      	ldr	r2, [pc, #264]	; (80056a4 <TIM_Base_SetConfig+0x134>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00b      	beq.n	80055b8 <TIM_Base_SetConfig+0x48>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a41      	ldr	r2, [pc, #260]	; (80056a8 <TIM_Base_SetConfig+0x138>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <TIM_Base_SetConfig+0x48>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a40      	ldr	r2, [pc, #256]	; (80056ac <TIM_Base_SetConfig+0x13c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_Base_SetConfig+0x48>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3f      	ldr	r2, [pc, #252]	; (80056b0 <TIM_Base_SetConfig+0x140>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d108      	bne.n	80055ca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a33      	ldr	r2, [pc, #204]	; (800569c <TIM_Base_SetConfig+0x12c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d023      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d8:	d01f      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a30      	ldr	r2, [pc, #192]	; (80056a0 <TIM_Base_SetConfig+0x130>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01b      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2f      	ldr	r2, [pc, #188]	; (80056a4 <TIM_Base_SetConfig+0x134>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d017      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2e      	ldr	r2, [pc, #184]	; (80056a8 <TIM_Base_SetConfig+0x138>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2d      	ldr	r2, [pc, #180]	; (80056ac <TIM_Base_SetConfig+0x13c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00f      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2d      	ldr	r2, [pc, #180]	; (80056b4 <TIM_Base_SetConfig+0x144>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <TIM_Base_SetConfig+0x148>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2b      	ldr	r2, [pc, #172]	; (80056bc <TIM_Base_SetConfig+0x14c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_Base_SetConfig+0xaa>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <TIM_Base_SetConfig+0x140>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a12      	ldr	r2, [pc, #72]	; (800569c <TIM_Base_SetConfig+0x12c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d013      	beq.n	8005680 <TIM_Base_SetConfig+0x110>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a14      	ldr	r2, [pc, #80]	; (80056ac <TIM_Base_SetConfig+0x13c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00f      	beq.n	8005680 <TIM_Base_SetConfig+0x110>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <TIM_Base_SetConfig+0x144>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00b      	beq.n	8005680 <TIM_Base_SetConfig+0x110>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <TIM_Base_SetConfig+0x148>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d007      	beq.n	8005680 <TIM_Base_SetConfig+0x110>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a12      	ldr	r2, [pc, #72]	; (80056bc <TIM_Base_SetConfig+0x14c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0x110>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0d      	ldr	r2, [pc, #52]	; (80056b0 <TIM_Base_SetConfig+0x140>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d103      	bne.n	8005688 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	615a      	str	r2, [r3, #20]
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40013400 	.word	0x40013400
 80056b0:	40015000 	.word	0x40015000
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800

080056c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f023 0302 	bic.w	r3, r3, #2
 800570c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a30      	ldr	r2, [pc, #192]	; (80057dc <TIM_OC1_SetConfig+0x11c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d013      	beq.n	8005748 <TIM_OC1_SetConfig+0x88>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a2f      	ldr	r2, [pc, #188]	; (80057e0 <TIM_OC1_SetConfig+0x120>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00f      	beq.n	8005748 <TIM_OC1_SetConfig+0x88>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a2e      	ldr	r2, [pc, #184]	; (80057e4 <TIM_OC1_SetConfig+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00b      	beq.n	8005748 <TIM_OC1_SetConfig+0x88>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a2d      	ldr	r2, [pc, #180]	; (80057e8 <TIM_OC1_SetConfig+0x128>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d007      	beq.n	8005748 <TIM_OC1_SetConfig+0x88>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a2c      	ldr	r2, [pc, #176]	; (80057ec <TIM_OC1_SetConfig+0x12c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_OC1_SetConfig+0x88>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a2b      	ldr	r2, [pc, #172]	; (80057f0 <TIM_OC1_SetConfig+0x130>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d10c      	bne.n	8005762 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0308 	bic.w	r3, r3, #8
 800574e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f023 0304 	bic.w	r3, r3, #4
 8005760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1d      	ldr	r2, [pc, #116]	; (80057dc <TIM_OC1_SetConfig+0x11c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_OC1_SetConfig+0xd2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1c      	ldr	r2, [pc, #112]	; (80057e0 <TIM_OC1_SetConfig+0x120>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_OC1_SetConfig+0xd2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <TIM_OC1_SetConfig+0x124>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_OC1_SetConfig+0xd2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1a      	ldr	r2, [pc, #104]	; (80057e8 <TIM_OC1_SetConfig+0x128>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_OC1_SetConfig+0xd2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a19      	ldr	r2, [pc, #100]	; (80057ec <TIM_OC1_SetConfig+0x12c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_OC1_SetConfig+0xd2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <TIM_OC1_SetConfig+0x130>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d111      	bne.n	80057b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	621a      	str	r2, [r3, #32]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40013400 	.word	0x40013400
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40014400 	.word	0x40014400
 80057ec:	40014800 	.word	0x40014800
 80057f0:	40015000 	.word	0x40015000

080057f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0210 	bic.w	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0320 	bic.w	r3, r3, #32
 8005842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <TIM_OC2_SetConfig+0x110>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_OC2_SetConfig+0x74>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <TIM_OC2_SetConfig+0x114>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_OC2_SetConfig+0x74>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a2a      	ldr	r2, [pc, #168]	; (800590c <TIM_OC2_SetConfig+0x118>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d10d      	bne.n	8005884 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005882:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a1f      	ldr	r2, [pc, #124]	; (8005904 <TIM_OC2_SetConfig+0x110>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <TIM_OC2_SetConfig+0xc0>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1e      	ldr	r2, [pc, #120]	; (8005908 <TIM_OC2_SetConfig+0x114>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_OC2_SetConfig+0xc0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1e      	ldr	r2, [pc, #120]	; (8005910 <TIM_OC2_SetConfig+0x11c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_OC2_SetConfig+0xc0>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a1d      	ldr	r2, [pc, #116]	; (8005914 <TIM_OC2_SetConfig+0x120>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_OC2_SetConfig+0xc0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a1c      	ldr	r2, [pc, #112]	; (8005918 <TIM_OC2_SetConfig+0x124>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC2_SetConfig+0xc0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <TIM_OC2_SetConfig+0x118>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d113      	bne.n	80058dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40013400 	.word	0x40013400
 800590c:	40015000 	.word	0x40015000
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800

0800591c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2b      	ldr	r2, [pc, #172]	; (8005a28 <TIM_OC3_SetConfig+0x10c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <TIM_OC3_SetConfig+0x72>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2a      	ldr	r2, [pc, #168]	; (8005a2c <TIM_OC3_SetConfig+0x110>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <TIM_OC3_SetConfig+0x72>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a29      	ldr	r2, [pc, #164]	; (8005a30 <TIM_OC3_SetConfig+0x114>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10d      	bne.n	80059aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <TIM_OC3_SetConfig+0x10c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <TIM_OC3_SetConfig+0xbe>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <TIM_OC3_SetConfig+0x110>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00f      	beq.n	80059da <TIM_OC3_SetConfig+0xbe>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <TIM_OC3_SetConfig+0x118>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00b      	beq.n	80059da <TIM_OC3_SetConfig+0xbe>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <TIM_OC3_SetConfig+0x11c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d007      	beq.n	80059da <TIM_OC3_SetConfig+0xbe>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <TIM_OC3_SetConfig+0x120>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d003      	beq.n	80059da <TIM_OC3_SetConfig+0xbe>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <TIM_OC3_SetConfig+0x114>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d113      	bne.n	8005a02 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	621a      	str	r2, [r3, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	40012c00 	.word	0x40012c00
 8005a2c:	40013400 	.word	0x40013400
 8005a30:	40015000 	.word	0x40015000
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800

08005a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	031b      	lsls	r3, r3, #12
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a2c      	ldr	r2, [pc, #176]	; (8005b50 <TIM_OC4_SetConfig+0x110>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_OC4_SetConfig+0x74>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a2b      	ldr	r2, [pc, #172]	; (8005b54 <TIM_OC4_SetConfig+0x114>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC4_SetConfig+0x74>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2a      	ldr	r2, [pc, #168]	; (8005b58 <TIM_OC4_SetConfig+0x118>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10d      	bne.n	8005ad0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	031b      	lsls	r3, r3, #12
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <TIM_OC4_SetConfig+0x110>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <TIM_OC4_SetConfig+0xc0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <TIM_OC4_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <TIM_OC4_SetConfig+0xc0>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <TIM_OC4_SetConfig+0x11c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <TIM_OC4_SetConfig+0xc0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a1d      	ldr	r2, [pc, #116]	; (8005b60 <TIM_OC4_SetConfig+0x120>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_OC4_SetConfig+0xc0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <TIM_OC4_SetConfig+0x124>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC4_SetConfig+0xc0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <TIM_OC4_SetConfig+0x118>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d113      	bne.n	8005b28 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	019b      	lsls	r3, r3, #6
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40015000 	.word	0x40015000
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800

08005b68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a19      	ldr	r2, [pc, #100]	; (8005c24 <TIM_OC5_SetConfig+0xbc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <TIM_OC5_SetConfig+0x82>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <TIM_OC5_SetConfig+0xc0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00f      	beq.n	8005bea <TIM_OC5_SetConfig+0x82>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <TIM_OC5_SetConfig+0xc4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <TIM_OC5_SetConfig+0x82>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <TIM_OC5_SetConfig+0xc8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_OC5_SetConfig+0x82>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <TIM_OC5_SetConfig+0xcc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_OC5_SetConfig+0x82>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a14      	ldr	r2, [pc, #80]	; (8005c38 <TIM_OC5_SetConfig+0xd0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d109      	bne.n	8005bfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	621a      	str	r2, [r3, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800
 8005c38:	40015000 	.word	0x40015000

08005c3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	051b      	lsls	r3, r3, #20
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <TIM_OC6_SetConfig+0xc0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x84>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <TIM_OC6_SetConfig+0xc4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x84>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <TIM_OC6_SetConfig+0xc8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x84>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <TIM_OC6_SetConfig+0xcc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x84>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <TIM_OC6_SetConfig+0xd0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC6_SetConfig+0x84>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <TIM_OC6_SetConfig+0xd4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d109      	bne.n	8005cd4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	029b      	lsls	r3, r3, #10
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800
 8005d10:	40015000 	.word	0x40015000

08005d14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0201 	bic.w	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4a28      	ldr	r2, [pc, #160]	; (8005de0 <TIM_TI1_SetConfig+0xcc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01b      	beq.n	8005d7a <TIM_TI1_SetConfig+0x66>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d017      	beq.n	8005d7a <TIM_TI1_SetConfig+0x66>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <TIM_TI1_SetConfig+0xd0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <TIM_TI1_SetConfig+0x66>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a24      	ldr	r2, [pc, #144]	; (8005de8 <TIM_TI1_SetConfig+0xd4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <TIM_TI1_SetConfig+0x66>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a23      	ldr	r2, [pc, #140]	; (8005dec <TIM_TI1_SetConfig+0xd8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <TIM_TI1_SetConfig+0x66>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4a22      	ldr	r2, [pc, #136]	; (8005df0 <TIM_TI1_SetConfig+0xdc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_TI1_SetConfig+0x66>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a21      	ldr	r2, [pc, #132]	; (8005df4 <TIM_TI1_SetConfig+0xe0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_TI1_SetConfig+0x66>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4a20      	ldr	r2, [pc, #128]	; (8005df8 <TIM_TI1_SetConfig+0xe4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <TIM_TI1_SetConfig+0x6a>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <TIM_TI1_SetConfig+0x6c>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e003      	b.n	8005d9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f023 030a 	bic.w	r3, r3, #10
 8005db8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f003 030a 	and.w	r3, r3, #10
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40013400 	.word	0x40013400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40015000 	.word	0x40015000

08005dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 030a 	bic.w	r3, r3, #10
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
 8005e66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f023 0210 	bic.w	r2, r3, #16
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	031b      	lsls	r3, r3, #12
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f023 0210 	bic.w	r2, r3, #16
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005efe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 0303 	bic.w	r3, r3, #3
 8005f60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	031b      	lsls	r3, r3, #12
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	031b      	lsls	r3, r3, #12
 8006004:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800603c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	f043 0307 	orr.w	r3, r3, #7
 800604c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	609a      	str	r2, [r3, #8]
}
 8006054:	bf00      	nop
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800607a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	021a      	lsls	r2, r3, #8
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	431a      	orrs	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	609a      	str	r2, [r3, #8]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2201      	movs	r2, #1
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	43db      	mvns	r3, r3
 80060c2:	401a      	ands	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	fa01 f303 	lsl.w	r3, r1, r3
 80060d8:	431a      	orrs	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006100:	2302      	movs	r3, #2
 8006102:	e074      	b.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a34      	ldr	r2, [pc, #208]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a33      	ldr	r2, [pc, #204]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a31      	ldr	r2, [pc, #196]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d108      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006148:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a21      	ldr	r2, [pc, #132]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d022      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006184:	d01d      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1f      	ldr	r2, [pc, #124]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d018      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a1d      	ldr	r2, [pc, #116]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00e      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a15      	ldr	r2, [pc, #84]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a18      	ldr	r2, [pc, #96]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d004      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a11      	ldr	r2, [pc, #68]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10c      	bne.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40013400 	.word	0x40013400
 8006204:	40015000 	.word	0x40015000
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800
 8006210:	40000c00 	.word	0x40000c00
 8006214:	40014000 	.word	0x40014000

08006218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e042      	b.n	800633c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fc fbf1 	bl	8002ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2224      	movs	r2, #36	; 0x24
 80062d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa02 	bl	80066f0 <UART_SetConfig>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e022      	b.n	800633c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fcf2 	bl	8006ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fd79 	bl	8006e2c <UART_CheckIdleState>
 800633a:	4603      	mov	r3, r0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	; 0x28
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635a:	2b20      	cmp	r3, #32
 800635c:	f040 8083 	bne.w	8006466 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_UART_Transmit+0x28>
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e07b      	b.n	8006468 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_UART_Transmit+0x3a>
 800637a:	2302      	movs	r3, #2
 800637c:	e074      	b.n	8006468 <HAL_UART_Transmit+0x124>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2221      	movs	r2, #33	; 0x21
 8006392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006396:	f7fc fcf3 	bl	8002d80 <HAL_GetTick>
 800639a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d108      	bne.n	80063c8 <HAL_UART_Transmit+0x84>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d104      	bne.n	80063c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	e003      	b.n	80063d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80063d8:	e02c      	b.n	8006434 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	2180      	movs	r1, #128	; 0x80
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fd6c 	bl	8006ec2 <UART_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e039      	b.n	8006468 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10b      	bne.n	8006412 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006408:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	3302      	adds	r3, #2
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	e007      	b.n	8006422 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	3301      	adds	r3, #1
 8006420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1cc      	bne.n	80063da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2200      	movs	r2, #0
 8006448:	2140      	movs	r1, #64	; 0x40
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fd39 	bl	8006ec2 <UART_WaitOnFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e006      	b.n	8006468 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	2b20      	cmp	r3, #32
 8006488:	f040 80c0 	bne.w	800660c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_UART_Receive+0x28>
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0b8      	b.n	800660e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_UART_Receive+0x3a>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e0b1      	b.n	800660e <HAL_UART_Receive+0x19e>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2222      	movs	r2, #34	; 0x22
 80064be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064c8:	f7fc fc5a 	bl	8002d80 <HAL_GetTick>
 80064cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e6:	d10e      	bne.n	8006506 <HAL_UART_Receive+0x96>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d105      	bne.n	80064fc <HAL_UART_Receive+0x8c>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064fa:	e02d      	b.n	8006558 <HAL_UART_Receive+0xe8>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	22ff      	movs	r2, #255	; 0xff
 8006500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006504:	e028      	b.n	8006558 <HAL_UART_Receive+0xe8>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <HAL_UART_Receive+0xba>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <HAL_UART_Receive+0xb0>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	22ff      	movs	r2, #255	; 0xff
 800651a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800651e:	e01b      	b.n	8006558 <HAL_UART_Receive+0xe8>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	227f      	movs	r2, #127	; 0x7f
 8006524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006528:	e016      	b.n	8006558 <HAL_UART_Receive+0xe8>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006532:	d10d      	bne.n	8006550 <HAL_UART_Receive+0xe0>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <HAL_UART_Receive+0xd6>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	227f      	movs	r2, #127	; 0x7f
 8006540:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006544:	e008      	b.n	8006558 <HAL_UART_Receive+0xe8>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	223f      	movs	r2, #63	; 0x3f
 800654a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800654e:	e003      	b.n	8006558 <HAL_UART_Receive+0xe8>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800655e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006568:	d108      	bne.n	800657c <HAL_UART_Receive+0x10c>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e003      	b.n	8006584 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800658c:	e032      	b.n	80065f4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2200      	movs	r2, #0
 8006596:	2120      	movs	r1, #32
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fc92 	bl	8006ec2 <UART_WaitOnFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e032      	b.n	800660e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10c      	bne.n	80065c8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	8a7b      	ldrh	r3, [r7, #18]
 80065b8:	4013      	ands	r3, r2
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	3302      	adds	r3, #2
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	e00c      	b.n	80065e2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	8a7b      	ldrh	r3, [r7, #18]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	4013      	ands	r3, r2
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	3301      	adds	r3, #1
 80065e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1c6      	bne.n	800658e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2220      	movs	r2, #32
 8006604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e000      	b.n	800660e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800660c:	2302      	movs	r3, #2
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	3720      	adds	r7, #32
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662c:	2b20      	cmp	r3, #32
 800662e:	d142      	bne.n	80066b6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_UART_Receive_IT+0x24>
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e03b      	b.n	80066b8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_UART_Receive_IT+0x36>
 800664a:	2302      	movs	r3, #2
 800664c:	e034      	b.n	80066b8 <HAL_UART_Receive_IT+0xa0>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <HAL_UART_Receive_IT+0xa8>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01f      	beq.n	80066a6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d018      	beq.n	80066a6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	613b      	str	r3, [r7, #16]
   return(result);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	623b      	str	r3, [r7, #32]
 8006694:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	69f9      	ldr	r1, [r7, #28]
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e6      	bne.n	8006674 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	461a      	mov	r2, r3
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fcd1 	bl	8007054 <UART_Start_Receive_IT>
 80066b2:	4603      	mov	r3, r0
 80066b4:	e000      	b.n	80066b8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40008000 	.word	0x40008000

080066c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f4:	b08c      	sub	sp, #48	; 0x30
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	431a      	orrs	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	431a      	orrs	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	4313      	orrs	r3, r2
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4baa      	ldr	r3, [pc, #680]	; (80069c8 <UART_SetConfig+0x2d8>)
 8006720:	4013      	ands	r3, r2
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006728:	430b      	orrs	r3, r1
 800672a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a9f      	ldr	r2, [pc, #636]	; (80069cc <UART_SetConfig+0x2dc>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006758:	4313      	orrs	r3, r2
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006766:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006770:	430b      	orrs	r3, r1
 8006772:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	f023 010f 	bic.w	r1, r3, #15
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a90      	ldr	r2, [pc, #576]	; (80069d0 <UART_SetConfig+0x2e0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d125      	bne.n	80067e0 <UART_SetConfig+0xf0>
 8006794:	4b8f      	ldr	r3, [pc, #572]	; (80069d4 <UART_SetConfig+0x2e4>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d81a      	bhi.n	80067d8 <UART_SetConfig+0xe8>
 80067a2:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <UART_SetConfig+0xb8>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	080067b9 	.word	0x080067b9
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067d1 	.word	0x080067d1
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067be:	e116      	b.n	80069ee <UART_SetConfig+0x2fe>
 80067c0:	2302      	movs	r3, #2
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c6:	e112      	b.n	80069ee <UART_SetConfig+0x2fe>
 80067c8:	2304      	movs	r3, #4
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ce:	e10e      	b.n	80069ee <UART_SetConfig+0x2fe>
 80067d0:	2308      	movs	r3, #8
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d6:	e10a      	b.n	80069ee <UART_SetConfig+0x2fe>
 80067d8:	2310      	movs	r3, #16
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067de:	e106      	b.n	80069ee <UART_SetConfig+0x2fe>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a7c      	ldr	r2, [pc, #496]	; (80069d8 <UART_SetConfig+0x2e8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d138      	bne.n	800685c <UART_SetConfig+0x16c>
 80067ea:	4b7a      	ldr	r3, [pc, #488]	; (80069d4 <UART_SetConfig+0x2e4>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f0:	f003 030c 	and.w	r3, r3, #12
 80067f4:	2b0c      	cmp	r3, #12
 80067f6:	d82d      	bhi.n	8006854 <UART_SetConfig+0x164>
 80067f8:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x110>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	08006835 	.word	0x08006835
 8006804:	08006855 	.word	0x08006855
 8006808:	08006855 	.word	0x08006855
 800680c:	08006855 	.word	0x08006855
 8006810:	08006845 	.word	0x08006845
 8006814:	08006855 	.word	0x08006855
 8006818:	08006855 	.word	0x08006855
 800681c:	08006855 	.word	0x08006855
 8006820:	0800683d 	.word	0x0800683d
 8006824:	08006855 	.word	0x08006855
 8006828:	08006855 	.word	0x08006855
 800682c:	08006855 	.word	0x08006855
 8006830:	0800684d 	.word	0x0800684d
 8006834:	2300      	movs	r3, #0
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683a:	e0d8      	b.n	80069ee <UART_SetConfig+0x2fe>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006842:	e0d4      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684a:	e0d0      	b.n	80069ee <UART_SetConfig+0x2fe>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006852:	e0cc      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685a:	e0c8      	b.n	80069ee <UART_SetConfig+0x2fe>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a5e      	ldr	r2, [pc, #376]	; (80069dc <UART_SetConfig+0x2ec>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d125      	bne.n	80068b2 <UART_SetConfig+0x1c2>
 8006866:	4b5b      	ldr	r3, [pc, #364]	; (80069d4 <UART_SetConfig+0x2e4>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006870:	2b30      	cmp	r3, #48	; 0x30
 8006872:	d016      	beq.n	80068a2 <UART_SetConfig+0x1b2>
 8006874:	2b30      	cmp	r3, #48	; 0x30
 8006876:	d818      	bhi.n	80068aa <UART_SetConfig+0x1ba>
 8006878:	2b20      	cmp	r3, #32
 800687a:	d00a      	beq.n	8006892 <UART_SetConfig+0x1a2>
 800687c:	2b20      	cmp	r3, #32
 800687e:	d814      	bhi.n	80068aa <UART_SetConfig+0x1ba>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <UART_SetConfig+0x19a>
 8006884:	2b10      	cmp	r3, #16
 8006886:	d008      	beq.n	800689a <UART_SetConfig+0x1aa>
 8006888:	e00f      	b.n	80068aa <UART_SetConfig+0x1ba>
 800688a:	2300      	movs	r3, #0
 800688c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006890:	e0ad      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006892:	2302      	movs	r3, #2
 8006894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006898:	e0a9      	b.n	80069ee <UART_SetConfig+0x2fe>
 800689a:	2304      	movs	r3, #4
 800689c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a0:	e0a5      	b.n	80069ee <UART_SetConfig+0x2fe>
 80068a2:	2308      	movs	r3, #8
 80068a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a8:	e0a1      	b.n	80069ee <UART_SetConfig+0x2fe>
 80068aa:	2310      	movs	r3, #16
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b0:	e09d      	b.n	80069ee <UART_SetConfig+0x2fe>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a4a      	ldr	r2, [pc, #296]	; (80069e0 <UART_SetConfig+0x2f0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d125      	bne.n	8006908 <UART_SetConfig+0x218>
 80068bc:	4b45      	ldr	r3, [pc, #276]	; (80069d4 <UART_SetConfig+0x2e4>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068c6:	2bc0      	cmp	r3, #192	; 0xc0
 80068c8:	d016      	beq.n	80068f8 <UART_SetConfig+0x208>
 80068ca:	2bc0      	cmp	r3, #192	; 0xc0
 80068cc:	d818      	bhi.n	8006900 <UART_SetConfig+0x210>
 80068ce:	2b80      	cmp	r3, #128	; 0x80
 80068d0:	d00a      	beq.n	80068e8 <UART_SetConfig+0x1f8>
 80068d2:	2b80      	cmp	r3, #128	; 0x80
 80068d4:	d814      	bhi.n	8006900 <UART_SetConfig+0x210>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <UART_SetConfig+0x1f0>
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	d008      	beq.n	80068f0 <UART_SetConfig+0x200>
 80068de:	e00f      	b.n	8006900 <UART_SetConfig+0x210>
 80068e0:	2300      	movs	r3, #0
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e6:	e082      	b.n	80069ee <UART_SetConfig+0x2fe>
 80068e8:	2302      	movs	r3, #2
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ee:	e07e      	b.n	80069ee <UART_SetConfig+0x2fe>
 80068f0:	2304      	movs	r3, #4
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f6:	e07a      	b.n	80069ee <UART_SetConfig+0x2fe>
 80068f8:	2308      	movs	r3, #8
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fe:	e076      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006900:	2310      	movs	r3, #16
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006906:	e072      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a35      	ldr	r2, [pc, #212]	; (80069e4 <UART_SetConfig+0x2f4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d12a      	bne.n	8006968 <UART_SetConfig+0x278>
 8006912:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <UART_SetConfig+0x2e4>)
 8006914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006920:	d01a      	beq.n	8006958 <UART_SetConfig+0x268>
 8006922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006926:	d81b      	bhi.n	8006960 <UART_SetConfig+0x270>
 8006928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692c:	d00c      	beq.n	8006948 <UART_SetConfig+0x258>
 800692e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006932:	d815      	bhi.n	8006960 <UART_SetConfig+0x270>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <UART_SetConfig+0x250>
 8006938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693c:	d008      	beq.n	8006950 <UART_SetConfig+0x260>
 800693e:	e00f      	b.n	8006960 <UART_SetConfig+0x270>
 8006940:	2300      	movs	r3, #0
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006946:	e052      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006948:	2302      	movs	r3, #2
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694e:	e04e      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006950:	2304      	movs	r3, #4
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006956:	e04a      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006958:	2308      	movs	r3, #8
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695e:	e046      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006960:	2310      	movs	r3, #16
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006966:	e042      	b.n	80069ee <UART_SetConfig+0x2fe>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a17      	ldr	r2, [pc, #92]	; (80069cc <UART_SetConfig+0x2dc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d13a      	bne.n	80069e8 <UART_SetConfig+0x2f8>
 8006972:	4b18      	ldr	r3, [pc, #96]	; (80069d4 <UART_SetConfig+0x2e4>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800697c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006980:	d01a      	beq.n	80069b8 <UART_SetConfig+0x2c8>
 8006982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006986:	d81b      	bhi.n	80069c0 <UART_SetConfig+0x2d0>
 8006988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698c:	d00c      	beq.n	80069a8 <UART_SetConfig+0x2b8>
 800698e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006992:	d815      	bhi.n	80069c0 <UART_SetConfig+0x2d0>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <UART_SetConfig+0x2b0>
 8006998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699c:	d008      	beq.n	80069b0 <UART_SetConfig+0x2c0>
 800699e:	e00f      	b.n	80069c0 <UART_SetConfig+0x2d0>
 80069a0:	2300      	movs	r3, #0
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a6:	e022      	b.n	80069ee <UART_SetConfig+0x2fe>
 80069a8:	2302      	movs	r3, #2
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ae:	e01e      	b.n	80069ee <UART_SetConfig+0x2fe>
 80069b0:	2304      	movs	r3, #4
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069b6:	e01a      	b.n	80069ee <UART_SetConfig+0x2fe>
 80069b8:	2308      	movs	r3, #8
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069be:	e016      	b.n	80069ee <UART_SetConfig+0x2fe>
 80069c0:	2310      	movs	r3, #16
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069c6:	e012      	b.n	80069ee <UART_SetConfig+0x2fe>
 80069c8:	cfff69f3 	.word	0xcfff69f3
 80069cc:	40008000 	.word	0x40008000
 80069d0:	40013800 	.word	0x40013800
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40004400 	.word	0x40004400
 80069dc:	40004800 	.word	0x40004800
 80069e0:	40004c00 	.word	0x40004c00
 80069e4:	40005000 	.word	0x40005000
 80069e8:	2310      	movs	r3, #16
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4aae      	ldr	r2, [pc, #696]	; (8006cac <UART_SetConfig+0x5bc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	f040 8097 	bne.w	8006b28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d823      	bhi.n	8006a4a <UART_SetConfig+0x35a>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0x318>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a4b 	.word	0x08006a4b
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a4b 	.word	0x08006a4b
 8006a18:	08006a3b 	.word	0x08006a3b
 8006a1c:	08006a4b 	.word	0x08006a4b
 8006a20:	08006a4b 	.word	0x08006a4b
 8006a24:	08006a4b 	.word	0x08006a4b
 8006a28:	08006a43 	.word	0x08006a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a2c:	f7fd f9dc 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8006a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a32:	e010      	b.n	8006a56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a34:	4b9e      	ldr	r3, [pc, #632]	; (8006cb0 <UART_SetConfig+0x5c0>)
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a38:	e00d      	b.n	8006a56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3a:	f7fd f967 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8006a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a40:	e009      	b.n	8006a56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a48:	e005      	b.n	8006a56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8130 	beq.w	8006cbe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	4a94      	ldr	r2, [pc, #592]	; (8006cb4 <UART_SetConfig+0x5c4>)
 8006a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d305      	bcc.n	8006a8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d903      	bls.n	8006a96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a94:	e113      	b.n	8006cbe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	2200      	movs	r2, #0
 8006a9a:	60bb      	str	r3, [r7, #8]
 8006a9c:	60fa      	str	r2, [r7, #12]
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	4a84      	ldr	r2, [pc, #528]	; (8006cb4 <UART_SetConfig+0x5c4>)
 8006aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2200      	movs	r2, #0
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ab8:	f7fa f8e6 	bl	8000c88 <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	020b      	lsls	r3, r1, #8
 8006ace:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ad2:	0202      	lsls	r2, r0, #8
 8006ad4:	6979      	ldr	r1, [r7, #20]
 8006ad6:	6849      	ldr	r1, [r1, #4]
 8006ad8:	0849      	lsrs	r1, r1, #1
 8006ada:	2000      	movs	r0, #0
 8006adc:	460c      	mov	r4, r1
 8006ade:	4605      	mov	r5, r0
 8006ae0:	eb12 0804 	adds.w	r8, r2, r4
 8006ae4:	eb43 0905 	adc.w	r9, r3, r5
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	469a      	mov	sl, r3
 8006af0:	4693      	mov	fp, r2
 8006af2:	4652      	mov	r2, sl
 8006af4:	465b      	mov	r3, fp
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f7fa f8c5 	bl	8000c88 <__aeabi_uldivmod>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4613      	mov	r3, r2
 8006b04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0c:	d308      	bcc.n	8006b20 <UART_SetConfig+0x430>
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b14:	d204      	bcs.n	8006b20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a3a      	ldr	r2, [r7, #32]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e0ce      	b.n	8006cbe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b26:	e0ca      	b.n	8006cbe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b30:	d166      	bne.n	8006c00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d827      	bhi.n	8006b8a <UART_SetConfig+0x49a>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x450>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b6d 	.word	0x08006b6d
 8006b48:	08006b75 	.word	0x08006b75
 8006b4c:	08006b8b 	.word	0x08006b8b
 8006b50:	08006b7b 	.word	0x08006b7b
 8006b54:	08006b8b 	.word	0x08006b8b
 8006b58:	08006b8b 	.word	0x08006b8b
 8006b5c:	08006b8b 	.word	0x08006b8b
 8006b60:	08006b83 	.word	0x08006b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fd f940 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8006b68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b6a:	e014      	b.n	8006b96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b6c:	f7fd f952 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8006b70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b72:	e010      	b.n	8006b96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b74:	4b4e      	ldr	r3, [pc, #312]	; (8006cb0 <UART_SetConfig+0x5c0>)
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b78:	e00d      	b.n	8006b96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b7a:	f7fd f8c7 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8006b7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b80:	e009      	b.n	8006b96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b88:	e005      	b.n	8006b96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8090 	beq.w	8006cbe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	4a44      	ldr	r2, [pc, #272]	; (8006cb4 <UART_SetConfig+0x5c4>)
 8006ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bb0:	005a      	lsls	r2, r3, #1
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	441a      	add	r2, r3
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	d916      	bls.n	8006bf8 <UART_SetConfig+0x508>
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d212      	bcs.n	8006bf8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f023 030f 	bic.w	r3, r3, #15
 8006bda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	8bfb      	ldrh	r3, [r7, #30]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	8bfa      	ldrh	r2, [r7, #30]
 8006bf4:	60da      	str	r2, [r3, #12]
 8006bf6:	e062      	b.n	8006cbe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bfe:	e05e      	b.n	8006cbe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d828      	bhi.n	8006c5a <UART_SetConfig+0x56a>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x520>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	08006c5b 	.word	0x08006c5b
 8006c20:	08006c4b 	.word	0x08006c4b
 8006c24:	08006c5b 	.word	0x08006c5b
 8006c28:	08006c5b 	.word	0x08006c5b
 8006c2c:	08006c5b 	.word	0x08006c5b
 8006c30:	08006c53 	.word	0x08006c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7fd f8d8 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8006c38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c3a:	e014      	b.n	8006c66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fd f8ea 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c42:	e010      	b.n	8006c66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c44:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <UART_SetConfig+0x5c0>)
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c48:	e00d      	b.n	8006c66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4a:	f7fd f85f 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c50:	e009      	b.n	8006c66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c58:	e005      	b.n	8006c66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c64:	bf00      	nop
    }

    if (pclk != 0U)
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d028      	beq.n	8006cbe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	4a10      	ldr	r2, [pc, #64]	; (8006cb4 <UART_SetConfig+0x5c4>)
 8006c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c76:	461a      	mov	r2, r3
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	441a      	add	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	d910      	bls.n	8006cb8 <UART_SetConfig+0x5c8>
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9c:	d20c      	bcs.n	8006cb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60da      	str	r2, [r3, #12]
 8006ca8:	e009      	b.n	8006cbe <UART_SetConfig+0x5ce>
 8006caa:	bf00      	nop
 8006cac:	40008000 	.word	0x40008000
 8006cb0:	00f42400 	.word	0x00f42400
 8006cb4:	0800d448 	.word	0x0800d448
      }
      else
      {
        ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006cda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3730      	adds	r7, #48	; 0x30
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01a      	beq.n	8006dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de6:	d10a      	bne.n	8006dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	605a      	str	r2, [r3, #4]
  }
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e3c:	f7fb ffa0 	bl	8002d80 <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d10e      	bne.n	8006e6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f82f 	bl	8006ec2 <UART_WaitOnFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e025      	b.n	8006eba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d10e      	bne.n	8006e9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f819 	bl	8006ec2 <UART_WaitOnFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e00f      	b.n	8006eba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b09c      	sub	sp, #112	; 0x70
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed2:	e0a9      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	f000 80a5 	beq.w	8007028 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ede:	f7fb ff4f 	bl	8002d80 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d302      	bcc.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d140      	bne.n	8006f76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f08:	667b      	str	r3, [r7, #100]	; 0x64
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e6      	bne.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	f023 0301 	bic.w	r3, r3, #1
 8006f3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e5      	bne.n	8006f26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e069      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d051      	beq.n	8007028 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f92:	d149      	bne.n	8007028 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e6      	bne.n	8006f9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f023 0301 	bic.w	r3, r3, #1
 8006fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3308      	adds	r3, #8
 8006fee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ff0:	623a      	str	r2, [r7, #32]
 8006ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	69f9      	ldr	r1, [r7, #28]
 8006ff6:	6a3a      	ldr	r2, [r7, #32]
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e5      	bne.n	8006fd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e010      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69da      	ldr	r2, [r3, #28]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4013      	ands	r3, r2
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	429a      	cmp	r2, r3
 8007036:	bf0c      	ite	eq
 8007038:	2301      	moveq	r3, #1
 800703a:	2300      	movne	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	429a      	cmp	r2, r3
 8007044:	f43f af46 	beq.w	8006ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3770      	adds	r7, #112	; 0x70
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007054:	b480      	push	{r7}
 8007056:	b0a3      	sub	sp, #140	; 0x8c
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007086:	d10e      	bne.n	80070a6 <UART_Start_Receive_IT+0x52>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d105      	bne.n	800709c <UART_Start_Receive_IT+0x48>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007096:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800709a:	e02d      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	22ff      	movs	r2, #255	; 0xff
 80070a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070a4:	e028      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10d      	bne.n	80070ca <UART_Start_Receive_IT+0x76>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <UART_Start_Receive_IT+0x6c>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070be:	e01b      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	227f      	movs	r2, #127	; 0x7f
 80070c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070c8:	e016      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d2:	d10d      	bne.n	80070f0 <UART_Start_Receive_IT+0x9c>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <UART_Start_Receive_IT+0x92>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	227f      	movs	r2, #127	; 0x7f
 80070e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070e4:	e008      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	223f      	movs	r2, #63	; 0x3f
 80070ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070ee:	e003      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2222      	movs	r2, #34	; 0x22
 8007104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3308      	adds	r3, #8
 800710e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800712c:	673a      	str	r2, [r7, #112]	; 0x70
 800712e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007132:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800713a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e3      	bne.n	8007108 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007148:	d153      	bne.n	80071f2 <UART_Start_Receive_IT+0x19e>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007150:	88fa      	ldrh	r2, [r7, #6]
 8007152:	429a      	cmp	r2, r3
 8007154:	d34d      	bcc.n	80071f2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715e:	d107      	bne.n	8007170 <UART_Start_Receive_IT+0x11c>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a4b      	ldr	r2, [pc, #300]	; (8007298 <UART_Start_Receive_IT+0x244>)
 800716c:	671a      	str	r2, [r3, #112]	; 0x70
 800716e:	e002      	b.n	8007176 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a4a      	ldr	r2, [pc, #296]	; (800729c <UART_Start_Receive_IT+0x248>)
 8007174:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01a      	beq.n	80071bc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e4      	bne.n	8007186 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3308      	adds	r3, #8
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3308      	adds	r3, #8
 80071da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80071dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80071de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e5      	bne.n	80071bc <UART_Start_Receive_IT+0x168>
 80071f0:	e04a      	b.n	8007288 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fa:	d107      	bne.n	800720c <UART_Start_Receive_IT+0x1b8>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d103      	bne.n	800720c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a26      	ldr	r2, [pc, #152]	; (80072a0 <UART_Start_Receive_IT+0x24c>)
 8007208:	671a      	str	r2, [r3, #112]	; 0x70
 800720a:	e002      	b.n	8007212 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <UART_Start_Receive_IT+0x250>)
 8007210:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d019      	beq.n	8007256 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007236:	677b      	str	r3, [r7, #116]	; 0x74
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
 8007242:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e6      	bne.n	8007222 <UART_Start_Receive_IT+0x1ce>
 8007254:	e018      	b.n	8007288 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	613b      	str	r3, [r7, #16]
   return(result);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f043 0320 	orr.w	r3, r3, #32
 800726a:	67bb      	str	r3, [r7, #120]	; 0x78
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007274:	623b      	str	r3, [r7, #32]
 8007276:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	69f9      	ldr	r1, [r7, #28]
 800727a:	6a3a      	ldr	r2, [r7, #32]
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	61bb      	str	r3, [r7, #24]
   return(result);
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e6      	bne.n	8007256 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	378c      	adds	r7, #140	; 0x8c
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	08007861 	.word	0x08007861
 800729c:	08007569 	.word	0x08007569
 80072a0:	08007409 	.word	0x08007409
 80072a4:	080072a9 	.word	0x080072a9

080072a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b096      	sub	sp, #88	; 0x58
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c0:	2b22      	cmp	r3, #34	; 0x22
 80072c2:	f040 8095 	bne.w	80073f0 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80072d4:	b2d9      	uxtb	r1, r3
 80072d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e0:	400a      	ands	r2, r1
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d178      	bne.n	8007400 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800731c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007322:	653b      	str	r3, [r7, #80]	; 0x50
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732c:	647b      	str	r3, [r7, #68]	; 0x44
 800732e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800733a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e6      	bne.n	800730e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3308      	adds	r3, #8
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	623b      	str	r3, [r7, #32]
   return(result);
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3308      	adds	r3, #8
 800735e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007360:	633a      	str	r2, [r7, #48]	; 0x30
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e5      	bne.n	8007340 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2220      	movs	r2, #32
 8007378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007386:	2b01      	cmp	r3, #1
 8007388:	d12e      	bne.n	80073e8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	60fb      	str	r3, [r7, #12]
   return(result);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f023 0310 	bic.w	r3, r3, #16
 80073a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	69b9      	ldr	r1, [r7, #24]
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	617b      	str	r3, [r7, #20]
   return(result);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e6      	bne.n	8007390 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d103      	bne.n	80073d8 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2210      	movs	r2, #16
 80073d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff f979 	bl	80066d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073e6:	e00b      	b.n	8007400 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fa fc97 	bl	8001d1c <HAL_UART_RxCpltCallback>
}
 80073ee:	e007      	b.n	8007400 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0208 	orr.w	r2, r2, #8
 80073fe:	619a      	str	r2, [r3, #24]
}
 8007400:	bf00      	nop
 8007402:	3758      	adds	r7, #88	; 0x58
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b096      	sub	sp, #88	; 0x58
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007416:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	2b22      	cmp	r3, #34	; 0x22
 8007422:	f040 8095 	bne.w	8007550 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007434:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007436:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800743a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800743e:	4013      	ands	r3, r2
 8007440:	b29a      	uxth	r2, r3
 8007442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007444:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	1c9a      	adds	r2, r3, #2
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d178      	bne.n	8007560 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748c:	643b      	str	r3, [r7, #64]	; 0x40
 800748e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3308      	adds	r3, #8
 80074a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e5      	bne.n	80074a0 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d12e      	bne.n	8007548 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f023 0310 	bic.w	r3, r3, #16
 8007504:	647b      	str	r3, [r7, #68]	; 0x44
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6979      	ldr	r1, [r7, #20]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	613b      	str	r3, [r7, #16]
   return(result);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e6      	bne.n	80074f0 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b10      	cmp	r3, #16
 800752e:	d103      	bne.n	8007538 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2210      	movs	r2, #16
 8007536:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff f8c9 	bl	80066d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007546:	e00b      	b.n	8007560 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fa fbe7 	bl	8001d1c <HAL_UART_RxCpltCallback>
}
 800754e:	e007      	b.n	8007560 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699a      	ldr	r2, [r3, #24]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0208 	orr.w	r2, r2, #8
 800755e:	619a      	str	r2, [r3, #24]
}
 8007560:	bf00      	nop
 8007562:	3758      	adds	r7, #88	; 0x58
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b0a6      	sub	sp, #152	; 0x98
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007576:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759e:	2b22      	cmp	r3, #34	; 0x22
 80075a0:	f040 814f 	bne.w	8007842 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075aa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075ae:	e0f6      	b.n	800779e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80075ba:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80075be:	b2d9      	uxtb	r1, r3
 80075c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ca:	400a      	ands	r2, r1
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d053      	beq.n	80076aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007602:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d011      	beq.n	8007632 <UART_RxISR_8BIT_FIFOEN+0xca>
 800760e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2201      	movs	r2, #1
 8007620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007628:	f043 0201 	orr.w	r2, r3, #1
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d011      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800763e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2202      	movs	r2, #2
 8007650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007658:	f043 0204 	orr.w	r2, r3, #4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007662:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	d011      	beq.n	8007692 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800766e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2204      	movs	r2, #4
 8007680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007688:	f043 0202 	orr.w	r2, r3, #2
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d006      	beq.n	80076aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff f811 	bl	80066c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d173      	bne.n	800779e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80076c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80076da:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80076de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80076e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e4      	bne.n	80076b6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3308      	adds	r3, #8
 80076f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80076fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007702:	f023 0301 	bic.w	r3, r3, #1
 8007706:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3308      	adds	r3, #8
 800770e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007710:	657a      	str	r2, [r7, #84]	; 0x54
 8007712:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800771e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e3      	bne.n	80076ec <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2220      	movs	r2, #32
 8007728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007736:	2b01      	cmp	r3, #1
 8007738:	d12e      	bne.n	8007798 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	f023 0310 	bic.w	r3, r3, #16
 8007754:	67bb      	str	r3, [r7, #120]	; 0x78
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800775e:	643b      	str	r3, [r7, #64]	; 0x40
 8007760:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e6      	bne.n	8007740 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	f003 0310 	and.w	r3, r3, #16
 800777c:	2b10      	cmp	r3, #16
 800777e:	d103      	bne.n	8007788 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2210      	movs	r2, #16
 8007786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7fe ffa1 	bl	80066d8 <HAL_UARTEx_RxEventCallback>
 8007796:	e002      	b.n	800779e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fa fabf 	bl	8001d1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800779e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d006      	beq.n	80077b4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80077a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f47f aefe 	bne.w	80075b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d045      	beq.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d23e      	bcs.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3308      	adds	r3, #8
 80077da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077ea:	673b      	str	r3, [r7, #112]	; 0x70
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80077f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e5      	bne.n	80077d4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a14      	ldr	r2, [pc, #80]	; (800785c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800780c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	60bb      	str	r3, [r7, #8]
   return(result);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f043 0320 	orr.w	r3, r3, #32
 8007822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6979      	ldr	r1, [r7, #20]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	613b      	str	r3, [r7, #16]
   return(result);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e6      	bne.n	800780e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007840:	e007      	b.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0208 	orr.w	r2, r2, #8
 8007850:	619a      	str	r2, [r3, #24]
}
 8007852:	bf00      	nop
 8007854:	3798      	adds	r7, #152	; 0x98
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	080072a9 	.word	0x080072a9

08007860 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b0a8      	sub	sp, #160	; 0xa0
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800786e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007896:	2b22      	cmp	r3, #34	; 0x22
 8007898:	f040 8153 	bne.w	8007b42 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80078a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078a6:	e0fa      	b.n	8007a9e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80078ba:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80078be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80078c2:	4013      	ands	r3, r2
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d0:	1c9a      	adds	r2, r3, #2
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d053      	beq.n	80079a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d011      	beq.n	800792e <UART_RxISR_16BIT_FIFOEN+0xce>
 800790a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800790e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00b      	beq.n	800792e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2201      	movs	r2, #1
 800791c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007924:	f043 0201 	orr.w	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800792e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d011      	beq.n	800795e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800793a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2202      	movs	r2, #2
 800794c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007954:	f043 0204 	orr.w	r2, r3, #4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800795e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007962:	f003 0304 	and.w	r3, r3, #4
 8007966:	2b00      	cmp	r3, #0
 8007968:	d011      	beq.n	800798e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800796a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00b      	beq.n	800798e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2204      	movs	r2, #4
 800797c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007984:	f043 0202 	orr.w	r2, r3, #2
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7fe fe93 	bl	80066c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d175      	bne.n	8007a9e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079d6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e4      	bne.n	80079b2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079fe:	f023 0301 	bic.w	r3, r3, #1
 8007a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a10:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e1      	bne.n	80079e8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d12e      	bne.n	8007a98 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a50:	f023 0310 	bic.w	r3, r3, #16
 8007a54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e6      	bne.n	8007a40 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d103      	bne.n	8007a88 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2210      	movs	r2, #16
 8007a86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fe fe21 	bl	80066d8 <HAL_UARTEx_RxEventCallback>
 8007a96:	e002      	b.n	8007a9e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fa f93f 	bl	8001d1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d006      	beq.n	8007ab4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f47f aefa 	bne.w	80078a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007abe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d045      	beq.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007acc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d23e      	bcs.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aea:	677b      	str	r3, [r7, #116]	; 0x74
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3308      	adds	r3, #8
 8007af2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007af4:	633a      	str	r2, [r7, #48]	; 0x30
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e5      	bne.n	8007ad4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a14      	ldr	r2, [pc, #80]	; (8007b5c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007b0c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f043 0320 	orr.w	r3, r3, #32
 8007b22:	673b      	str	r3, [r7, #112]	; 0x70
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b2c:	61fb      	str	r3, [r7, #28]
 8007b2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	69b9      	ldr	r1, [r7, #24]
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	617b      	str	r3, [r7, #20]
   return(result);
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e6      	bne.n	8007b0e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b40:	e007      	b.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0208 	orr.w	r2, r2, #8
 8007b50:	619a      	str	r2, [r3, #24]
}
 8007b52:	bf00      	nop
 8007b54:	37a0      	adds	r7, #160	; 0xa0
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	08007409 	.word	0x08007409

08007b60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e027      	b.n	8007bc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2224      	movs	r2, #36	; 0x24
 8007b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e02d      	b.n	8007c46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2224      	movs	r2, #36	; 0x24
 8007bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0201 	bic.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f850 	bl	8007ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e02d      	b.n	8007cc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2224      	movs	r2, #36	; 0x24
 8007c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0201 	bic.w	r2, r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f812 	bl	8007ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d108      	bne.n	8007cee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cec:	e031      	b.n	8007d52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cee:	2308      	movs	r3, #8
 8007cf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cf2:	2308      	movs	r3, #8
 8007cf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	0e5b      	lsrs	r3, r3, #25
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	0f5b      	lsrs	r3, r3, #29
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	7b3a      	ldrb	r2, [r7, #12]
 8007d1a:	4911      	ldr	r1, [pc, #68]	; (8007d60 <UARTEx_SetNbDataToProcess+0x94>)
 8007d1c:	5c8a      	ldrb	r2, [r1, r2]
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d22:	7b3a      	ldrb	r2, [r7, #12]
 8007d24:	490f      	ldr	r1, [pc, #60]	; (8007d64 <UARTEx_SetNbDataToProcess+0x98>)
 8007d26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	7b7a      	ldrb	r2, [r7, #13]
 8007d38:	4909      	ldr	r1, [pc, #36]	; (8007d60 <UARTEx_SetNbDataToProcess+0x94>)
 8007d3a:	5c8a      	ldrb	r2, [r1, r2]
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d40:	7b7a      	ldrb	r2, [r7, #13]
 8007d42:	4908      	ldr	r1, [pc, #32]	; (8007d64 <UARTEx_SetNbDataToProcess+0x98>)
 8007d44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d52:	bf00      	nop
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	0800d460 	.word	0x0800d460
 8007d64:	0800d468 	.word	0x0800d468

08007d68 <__NVIC_SetPriority>:
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	6039      	str	r1, [r7, #0]
 8007d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	db0a      	blt.n	8007d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	490c      	ldr	r1, [pc, #48]	; (8007db4 <__NVIC_SetPriority+0x4c>)
 8007d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d86:	0112      	lsls	r2, r2, #4
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007d90:	e00a      	b.n	8007da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	4908      	ldr	r1, [pc, #32]	; (8007db8 <__NVIC_SetPriority+0x50>)
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	3b04      	subs	r3, #4
 8007da0:	0112      	lsls	r2, r2, #4
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	440b      	add	r3, r1
 8007da6:	761a      	strb	r2, [r3, #24]
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	e000e100 	.word	0xe000e100
 8007db8:	e000ed00 	.word	0xe000ed00

08007dbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	f06f 0004 	mvn.w	r0, #4
 8007dc6:	f7ff ffcf 	bl	8007d68 <__NVIC_SetPriority>
#endif
}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd6:	f3ef 8305 	mrs	r3, IPSR
 8007dda:	603b      	str	r3, [r7, #0]
  return(result);
 8007ddc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007de2:	f06f 0305 	mvn.w	r3, #5
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	e00c      	b.n	8007e04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007dea:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <osKernelInitialize+0x44>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d105      	bne.n	8007dfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007df2:	4b08      	ldr	r3, [pc, #32]	; (8007e14 <osKernelInitialize+0x44>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	607b      	str	r3, [r7, #4]
 8007dfc:	e002      	b.n	8007e04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007e02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e04:	687b      	ldr	r3, [r7, #4]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000454 	.word	0x20000454

08007e18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1e:	f3ef 8305 	mrs	r3, IPSR
 8007e22:	603b      	str	r3, [r7, #0]
  return(result);
 8007e24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e2a:	f06f 0305 	mvn.w	r3, #5
 8007e2e:	607b      	str	r3, [r7, #4]
 8007e30:	e010      	b.n	8007e54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e32:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <osKernelStart+0x48>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d109      	bne.n	8007e4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e3a:	f7ff ffbf 	bl	8007dbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e3e:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <osKernelStart+0x48>)
 8007e40:	2202      	movs	r2, #2
 8007e42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e44:	f001 fa3c 	bl	80092c0 <vTaskStartScheduler>
      stat = osOK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	e002      	b.n	8007e54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e54:	687b      	ldr	r3, [r7, #4]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000454 	.word	0x20000454

08007e64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08e      	sub	sp, #56	; 0x38
 8007e68:	af04      	add	r7, sp, #16
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e70:	2300      	movs	r3, #0
 8007e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e74:	f3ef 8305 	mrs	r3, IPSR
 8007e78:	617b      	str	r3, [r7, #20]
  return(result);
 8007e7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d17e      	bne.n	8007f7e <osThreadNew+0x11a>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d07b      	beq.n	8007f7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e86:	2380      	movs	r3, #128	; 0x80
 8007e88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e8a:	2318      	movs	r3, #24
 8007e8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007e92:	f04f 33ff 	mov.w	r3, #4294967295
 8007e96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d045      	beq.n	8007f2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <osThreadNew+0x48>
        name = attr->name;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <osThreadNew+0x6e>
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2b38      	cmp	r3, #56	; 0x38
 8007ec4:	d805      	bhi.n	8007ed2 <osThreadNew+0x6e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <osThreadNew+0x72>
        return (NULL);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e054      	b.n	8007f80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00e      	beq.n	8007f0c <osThreadNew+0xa8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	2bbb      	cmp	r3, #187	; 0xbb
 8007ef4:	d90a      	bls.n	8007f0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d006      	beq.n	8007f0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <osThreadNew+0xa8>
        mem = 1;
 8007f06:	2301      	movs	r3, #1
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	e010      	b.n	8007f2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10c      	bne.n	8007f2e <osThreadNew+0xca>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d108      	bne.n	8007f2e <osThreadNew+0xca>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d104      	bne.n	8007f2e <osThreadNew+0xca>
          mem = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61bb      	str	r3, [r7, #24]
 8007f28:	e001      	b.n	8007f2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d110      	bne.n	8007f56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f3c:	9202      	str	r2, [sp, #8]
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f001 f818 	bl	8008f80 <xTaskCreateStatic>
 8007f50:	4603      	mov	r3, r0
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	e013      	b.n	8007f7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d110      	bne.n	8007f7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f107 0310 	add.w	r3, r7, #16
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f001 f836 	bl	8008fe0 <xTaskCreate>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d001      	beq.n	8007f7e <osThreadNew+0x11a>
            hTask = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f7e:	693b      	ldr	r3, [r7, #16]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3728      	adds	r7, #40	; 0x28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f90:	f3ef 8305 	mrs	r3, IPSR
 8007f94:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <osDelay+0x1c>
    stat = osErrorISR;
 8007f9c:	f06f 0305 	mvn.w	r3, #5
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	e007      	b.n	8007fb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 f962 	bl	8009278 <vTaskDelay>
    }
  }

  return (stat);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b08a      	sub	sp, #40	; 0x28
 8007fc2:	af02      	add	r7, sp, #8
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fce:	f3ef 8305 	mrs	r3, IPSR
 8007fd2:	613b      	str	r3, [r7, #16]
  return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d175      	bne.n	80080c6 <osSemaphoreNew+0x108>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d072      	beq.n	80080c6 <osSemaphoreNew+0x108>
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d86e      	bhi.n	80080c6 <osSemaphoreNew+0x108>
    mem = -1;
 8007fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d015      	beq.n	8008020 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d006      	beq.n	800800a <osSemaphoreNew+0x4c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b4f      	cmp	r3, #79	; 0x4f
 8008002:	d902      	bls.n	800800a <osSemaphoreNew+0x4c>
        mem = 1;
 8008004:	2301      	movs	r3, #1
 8008006:	61bb      	str	r3, [r7, #24]
 8008008:	e00c      	b.n	8008024 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d108      	bne.n	8008024 <osSemaphoreNew+0x66>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <osSemaphoreNew+0x66>
          mem = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	e001      	b.n	8008024 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	d04c      	beq.n	80080c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d128      	bne.n	8008084 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d10a      	bne.n	800804e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2203      	movs	r2, #3
 800803e:	9200      	str	r2, [sp, #0]
 8008040:	2200      	movs	r2, #0
 8008042:	2100      	movs	r1, #0
 8008044:	2001      	movs	r0, #1
 8008046:	f000 fa1b 	bl	8008480 <xQueueGenericCreateStatic>
 800804a:	61f8      	str	r0, [r7, #28]
 800804c:	e005      	b.n	800805a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800804e:	2203      	movs	r2, #3
 8008050:	2100      	movs	r1, #0
 8008052:	2001      	movs	r0, #1
 8008054:	f000 fa33 	bl	80084be <xQueueGenericCreate>
 8008058:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d022      	beq.n	80080a6 <osSemaphoreNew+0xe8>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d01f      	beq.n	80080a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008066:	2300      	movs	r3, #0
 8008068:	2200      	movs	r2, #0
 800806a:	2100      	movs	r1, #0
 800806c:	69f8      	ldr	r0, [r7, #28]
 800806e:	f000 faa5 	bl	80085bc <xQueueGenericSend>
 8008072:	4603      	mov	r3, r0
 8008074:	2b01      	cmp	r3, #1
 8008076:	d016      	beq.n	80080a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008078:	69f8      	ldr	r0, [r7, #28]
 800807a:	f000 fdbc 	bl	8008bf6 <vQueueDelete>
            hSemaphore = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	e010      	b.n	80080a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d108      	bne.n	800809c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	461a      	mov	r2, r3
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fa62 	bl	800855c <xQueueCreateCountingSemaphoreStatic>
 8008098:	61f8      	str	r0, [r7, #28]
 800809a:	e004      	b.n	80080a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fa76 	bl	8008590 <xQueueCreateCountingSemaphore>
 80080a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00c      	beq.n	80080c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <osSemaphoreNew+0xfc>
          name = attr->name;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	e001      	b.n	80080be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80080be:	6979      	ldr	r1, [r7, #20]
 80080c0:	69f8      	ldr	r0, [r7, #28]
 80080c2:	f000 fed5 	bl	8008e70 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80080de:	2300      	movs	r3, #0
 80080e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80080e8:	f06f 0303 	mvn.w	r3, #3
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	e039      	b.n	8008164 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f0:	f3ef 8305 	mrs	r3, IPSR
 80080f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80080f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d022      	beq.n	8008142 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008102:	f06f 0303 	mvn.w	r3, #3
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e02c      	b.n	8008164 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800810a:	2300      	movs	r3, #0
 800810c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800810e:	f107 0308 	add.w	r3, r7, #8
 8008112:	461a      	mov	r2, r3
 8008114:	2100      	movs	r1, #0
 8008116:	6938      	ldr	r0, [r7, #16]
 8008118:	f000 fd16 	bl	8008b48 <xQueueReceiveFromISR>
 800811c:	4603      	mov	r3, r0
 800811e:	2b01      	cmp	r3, #1
 8008120:	d003      	beq.n	800812a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008122:	f06f 0302 	mvn.w	r3, #2
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e01c      	b.n	8008164 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d019      	beq.n	8008164 <osSemaphoreAcquire+0x94>
 8008130:	4b0f      	ldr	r3, [pc, #60]	; (8008170 <osSemaphoreAcquire+0xa0>)
 8008132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	e010      	b.n	8008164 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6938      	ldr	r0, [r7, #16]
 8008146:	f000 fc37 	bl	80089b8 <xQueueSemaphoreTake>
 800814a:	4603      	mov	r3, r0
 800814c:	2b01      	cmp	r3, #1
 800814e:	d009      	beq.n	8008164 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008156:	f06f 0301 	mvn.w	r3, #1
 800815a:	617b      	str	r3, [r7, #20]
 800815c:	e002      	b.n	8008164 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800815e:	f06f 0302 	mvn.w	r3, #2
 8008162:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008164:	697b      	ldr	r3, [r7, #20]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008180:	2300      	movs	r3, #0
 8008182:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d103      	bne.n	8008192 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800818a:	f06f 0303 	mvn.w	r3, #3
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	e02c      	b.n	80081ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008192:	f3ef 8305 	mrs	r3, IPSR
 8008196:	60fb      	str	r3, [r7, #12]
  return(result);
 8008198:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800819a:	2b00      	cmp	r3, #0
 800819c:	d01a      	beq.n	80081d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	4619      	mov	r1, r3
 80081a8:	6938      	ldr	r0, [r7, #16]
 80081aa:	f000 fb0e 	bl	80087ca <xQueueGiveFromISR>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d003      	beq.n	80081bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80081b4:	f06f 0302 	mvn.w	r3, #2
 80081b8:	617b      	str	r3, [r7, #20]
 80081ba:	e017      	b.n	80081ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d014      	beq.n	80081ec <osSemaphoreRelease+0x78>
 80081c2:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <osSemaphoreRelease+0x84>)
 80081c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	e00b      	b.n	80081ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081d4:	2300      	movs	r3, #0
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f000 f9ee 	bl	80085bc <xQueueGenericSend>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d002      	beq.n	80081ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80081e6:	f06f 0302 	mvn.w	r3, #2
 80081ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80081ec:	697b      	ldr	r3, [r7, #20]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4a07      	ldr	r2, [pc, #28]	; (8008228 <vApplicationGetIdleTaskMemory+0x2c>)
 800820c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4a06      	ldr	r2, [pc, #24]	; (800822c <vApplicationGetIdleTaskMemory+0x30>)
 8008212:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2280      	movs	r2, #128	; 0x80
 8008218:	601a      	str	r2, [r3, #0]
}
 800821a:	bf00      	nop
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	20000458 	.word	0x20000458
 800822c:	20000514 	.word	0x20000514

08008230 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4a07      	ldr	r2, [pc, #28]	; (800825c <vApplicationGetTimerTaskMemory+0x2c>)
 8008240:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	4a06      	ldr	r2, [pc, #24]	; (8008260 <vApplicationGetTimerTaskMemory+0x30>)
 8008246:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800824e:	601a      	str	r2, [r3, #0]
}
 8008250:	bf00      	nop
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000714 	.word	0x20000714
 8008260:	200007d0 	.word	0x200007d0

08008264 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f103 0208 	add.w	r2, r3, #8
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f04f 32ff 	mov.w	r2, #4294967295
 800827c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f103 0208 	add.w	r2, r3, #8
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f103 0208 	add.w	r2, r3, #8
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008306:	b480      	push	{r7}
 8008308:	b085      	sub	sp, #20
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d103      	bne.n	8008326 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e00c      	b.n	8008340 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3308      	adds	r3, #8
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e002      	b.n	8008334 <vListInsert+0x2e>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	429a      	cmp	r2, r3
 800833e:	d2f6      	bcs.n	800832e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	601a      	str	r2, [r3, #0]
}
 800836c:	bf00      	nop
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6892      	ldr	r2, [r2, #8]
 800838e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6852      	ldr	r2, [r2, #4]
 8008398:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d103      	bne.n	80083ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	1e5a      	subs	r2, r3, #1
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80083da:	f002 f863 	bl	800a4a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083ea:	fb01 f303 	mul.w	r3, r1, r3
 80083ee:	441a      	add	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	3b01      	subs	r3, #1
 800840c:	68f9      	ldr	r1, [r7, #12]
 800840e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	441a      	add	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	22ff      	movs	r2, #255	; 0xff
 800841e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	22ff      	movs	r2, #255	; 0xff
 8008426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d114      	bne.n	800845a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01a      	beq.n	800846e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3310      	adds	r3, #16
 800843c:	4618      	mov	r0, r3
 800843e:	f001 f97d 	bl	800973c <xTaskRemoveFromEventList>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d012      	beq.n	800846e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <xQueueGenericReset+0xb0>)
 800844a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	e009      	b.n	800846e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3310      	adds	r3, #16
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff ff00 	bl	8008264 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3324      	adds	r3, #36	; 0x24
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff fefb 	bl	8008264 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800846e:	f002 f833 	bl	800a4d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008472:	2301      	movs	r3, #1
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00d      	beq.n	80084b4 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	4613      	mov	r3, r2
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 f831 	bl	8008516 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084b4:	697b      	ldr	r3, [r7, #20]
	}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b08a      	sub	sp, #40	; 0x28
 80084c2:	af02      	add	r7, sp, #8
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	4613      	mov	r3, r2
 80084ca:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	3350      	adds	r3, #80	; 0x50
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 f89c 	bl	800a618 <pvPortMalloc>
 80084e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d011      	beq.n	800850c <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	3350      	adds	r3, #80	; 0x50
 80084f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084fa:	79fa      	ldrb	r2, [r7, #7]
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	4613      	mov	r3, r2
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f805 	bl	8008516 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800850c:	69bb      	ldr	r3, [r7, #24]
	}
 800850e:	4618      	mov	r0, r3
 8008510:	3720      	adds	r7, #32
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d103      	bne.n	8008532 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	e002      	b.n	8008538 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008544:	2101      	movs	r1, #1
 8008546:	69b8      	ldr	r0, [r7, #24]
 8008548:	f7ff ff40 	bl	80083cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008568:	2302      	movs	r3, #2
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7ff ff84 	bl	8008480 <xQueueGenericCreateStatic>
 8008578:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008586:	697b      	ldr	r3, [r7, #20]
	}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800859a:	2202      	movs	r2, #2
 800859c:	2100      	movs	r1, #0
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff ff8d 	bl	80084be <xQueueGenericCreate>
 80085a4:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80085b2:	68fb      	ldr	r3, [r7, #12]
	}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085ca:	2300      	movs	r3, #0
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085d2:	f001 ff67 	bl	800a4a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085de:	429a      	cmp	r2, r3
 80085e0:	d302      	bcc.n	80085e8 <xQueueGenericSend+0x2c>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d129      	bne.n	800863c <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	68b9      	ldr	r1, [r7, #8]
 80085ec:	6a38      	ldr	r0, [r7, #32]
 80085ee:	f000 fb2f 	bl	8008c50 <prvCopyDataToQueue>
 80085f2:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d010      	beq.n	800861e <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	3324      	adds	r3, #36	; 0x24
 8008600:	4618      	mov	r0, r3
 8008602:	f001 f89b 	bl	800973c <xTaskRemoveFromEventList>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d013      	beq.n	8008634 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800860c:	4b3f      	ldr	r3, [pc, #252]	; (800870c <xQueueGenericSend+0x150>)
 800860e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	e00a      	b.n	8008634 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008624:	4b39      	ldr	r3, [pc, #228]	; (800870c <xQueueGenericSend+0x150>)
 8008626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008634:	f001 ff50 	bl	800a4d8 <vPortExitCritical>
				return pdPASS;
 8008638:	2301      	movs	r3, #1
 800863a:	e063      	b.n	8008704 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d103      	bne.n	800864a <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008642:	f001 ff49 	bl	800a4d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008646:	2300      	movs	r3, #0
 8008648:	e05c      	b.n	8008704 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d106      	bne.n	800865e <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008650:	f107 0314 	add.w	r3, r7, #20
 8008654:	4618      	mov	r0, r3
 8008656:	f001 f8c7 	bl	80097e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800865a:	2301      	movs	r3, #1
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800865e:	f001 ff3b 	bl	800a4d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008662:	f000 fe8d 	bl	8009380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008666:	f001 ff1d 	bl	800a4a4 <vPortEnterCritical>
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008670:	b25b      	sxtb	r3, r3
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008676:	d103      	bne.n	8008680 <xQueueGenericSend+0xc4>
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008686:	b25b      	sxtb	r3, r3
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d103      	bne.n	8008696 <xQueueGenericSend+0xda>
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008696:	f001 ff1f 	bl	800a4d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800869a:	1d3a      	adds	r2, r7, #4
 800869c:	f107 0314 	add.w	r3, r7, #20
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 f8b6 	bl	8009814 <xTaskCheckForTimeOut>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d124      	bne.n	80086f8 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086ae:	6a38      	ldr	r0, [r7, #32]
 80086b0:	f000 fbc6 	bl	8008e40 <prvIsQueueFull>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d018      	beq.n	80086ec <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	3310      	adds	r3, #16
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 f806 	bl	80096d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086c8:	6a38      	ldr	r0, [r7, #32]
 80086ca:	f000 fb51 	bl	8008d70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086ce:	f000 fe65 	bl	800939c <xTaskResumeAll>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f47f af7c 	bne.w	80085d2 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <xQueueGenericSend+0x150>)
 80086dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	e772      	b.n	80085d2 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086ec:	6a38      	ldr	r0, [r7, #32]
 80086ee:	f000 fb3f 	bl	8008d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086f2:	f000 fe53 	bl	800939c <xTaskResumeAll>
 80086f6:	e76c      	b.n	80085d2 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086f8:	6a38      	ldr	r0, [r7, #32]
 80086fa:	f000 fb39 	bl	8008d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086fe:	f000 fe4d 	bl	800939c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008704:	4618      	mov	r0, r3
 8008706:	3728      	adds	r7, #40	; 0x28
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08c      	sub	sp, #48	; 0x30
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008722:	f3ef 8211 	mrs	r2, BASEPRI
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	61ba      	str	r2, [r7, #24]
 8008738:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800873a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	429a      	cmp	r2, r3
 8008748:	d302      	bcc.n	8008750 <xQueueGenericSendFromISR+0x40>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d12f      	bne.n	80087b0 <xQueueGenericSendFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875e:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008766:	f000 fa73 	bl	8008c50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800876a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d112      	bne.n	800879a <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	d016      	beq.n	80087aa <xQueueGenericSendFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	3324      	adds	r3, #36	; 0x24
 8008780:	4618      	mov	r0, r3
 8008782:	f000 ffdb 	bl	800973c <xTaskRemoveFromEventList>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00e      	beq.n	80087aa <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <xQueueGenericSendFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e007      	b.n	80087aa <xQueueGenericSendFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800879a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800879e:	3301      	adds	r3, #1
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	b25a      	sxtb	r2, r3
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087aa:	2301      	movs	r3, #1
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 80087ae:	e001      	b.n	80087b4 <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087b0:	2300      	movs	r3, #0
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3730      	adds	r7, #48	; 0x30
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b08a      	sub	sp, #40	; 0x28
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	623b      	str	r3, [r7, #32]
	__asm volatile
 80087d8:	f3ef 8211 	mrs	r2, BASEPRI
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	613a      	str	r2, [r7, #16]
 80087ee:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 80087f0:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087f2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	429a      	cmp	r2, r3
 8008802:	d229      	bcs.n	8008858 <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800880a:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d112      	bne.n	8008844 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	2b00      	cmp	r3, #0
 8008824:	d015      	beq.n	8008852 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	3324      	adds	r3, #36	; 0x24
 800882a:	4618      	mov	r0, r3
 800882c:	f000 ff86 	bl	800973c <xTaskRemoveFromEventList>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00d      	beq.n	8008852 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e006      	b.n	8008852 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	3301      	adds	r3, #1
 8008848:	b2db      	uxtb	r3, r3
 800884a:	b25a      	sxtb	r2, r3
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008852:	2301      	movs	r3, #1
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
 8008856:	e001      	b.n	800885c <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008858:	2300      	movs	r3, #0
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f383 8811 	msr	BASEPRI, r3
}
 8008866:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800886a:	4618      	mov	r0, r3
 800886c:	3728      	adds	r7, #40	; 0x28
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08a      	sub	sp, #40	; 0x28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008880:	2300      	movs	r3, #0
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008888:	f001 fe0c 	bl	800a4a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01f      	beq.n	80088d8 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	6a38      	ldr	r0, [r7, #32]
 800889c:	f000 fa42 	bl	8008d24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	1e5a      	subs	r2, r3, #1
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00f      	beq.n	80088d0 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	3310      	adds	r3, #16
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 ff41 	bl	800973c <xTaskRemoveFromEventList>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088c0:	4b3c      	ldr	r3, [pc, #240]	; (80089b4 <xQueueReceive+0x140>)
 80088c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088d0:	f001 fe02 	bl	800a4d8 <vPortExitCritical>
				return pdPASS;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e069      	b.n	80089ac <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088de:	f001 fdfb 	bl	800a4d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088e2:	2300      	movs	r3, #0
 80088e4:	e062      	b.n	80089ac <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d106      	bne.n	80088fa <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088ec:	f107 0314 	add.w	r3, r7, #20
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 ff79 	bl	80097e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088f6:	2301      	movs	r3, #1
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088fa:	f001 fded 	bl	800a4d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088fe:	f000 fd3f 	bl	8009380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008902:	f001 fdcf 	bl	800a4a4 <vPortEnterCritical>
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800890c:	b25b      	sxtb	r3, r3
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d103      	bne.n	800891c <xQueueReceive+0xa8>
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008922:	b25b      	sxtb	r3, r3
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d103      	bne.n	8008932 <xQueueReceive+0xbe>
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008932:	f001 fdd1 	bl	800a4d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008936:	1d3a      	adds	r2, r7, #4
 8008938:	f107 0314 	add.w	r3, r7, #20
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f000 ff68 	bl	8009814 <xTaskCheckForTimeOut>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d123      	bne.n	8008992 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800894a:	6a38      	ldr	r0, [r7, #32]
 800894c:	f000 fa62 	bl	8008e14 <prvIsQueueEmpty>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d017      	beq.n	8008986 <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	3324      	adds	r3, #36	; 0x24
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f000 feb8 	bl	80096d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008964:	6a38      	ldr	r0, [r7, #32]
 8008966:	f000 fa03 	bl	8008d70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800896a:	f000 fd17 	bl	800939c <xTaskResumeAll>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d189      	bne.n	8008888 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <xQueueReceive+0x140>)
 8008976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	e780      	b.n	8008888 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008986:	6a38      	ldr	r0, [r7, #32]
 8008988:	f000 f9f2 	bl	8008d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800898c:	f000 fd06 	bl	800939c <xTaskResumeAll>
 8008990:	e77a      	b.n	8008888 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008992:	6a38      	ldr	r0, [r7, #32]
 8008994:	f000 f9ec 	bl	8008d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008998:	f000 fd00 	bl	800939c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800899c:	6a38      	ldr	r0, [r7, #32]
 800899e:	f000 fa39 	bl	8008e14 <prvIsQueueEmpty>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f43f af6f 	beq.w	8008888 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3728      	adds	r7, #40	; 0x28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	e000ed04 	.word	0xe000ed04

080089b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08a      	sub	sp, #40	; 0x28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ce:	f001 fd69 	bl	800a4a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d024      	beq.n	8008a28 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	1e5a      	subs	r2, r3, #1
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089ee:	f001 f95f 	bl	8009cb0 <pvTaskIncrementMutexHeldCount>
 80089f2:	4602      	mov	r2, r0
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00f      	beq.n	8008a20 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	3310      	adds	r3, #16
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fe99 	bl	800973c <xTaskRemoveFromEventList>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a10:	4b4c      	ldr	r3, [pc, #304]	; (8008b44 <xQueueSemaphoreTake+0x18c>)
 8008a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a20:	f001 fd5a 	bl	800a4d8 <vPortExitCritical>
				return pdPASS;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e089      	b.n	8008b3c <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d103      	bne.n	8008a36 <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a2e:	f001 fd53 	bl	800a4d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a32:	2300      	movs	r3, #0
 8008a34:	e082      	b.n	8008b3c <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a3c:	f107 030c 	add.w	r3, r7, #12
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fed1 	bl	80097e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a46:	2301      	movs	r3, #1
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a4a:	f001 fd45 	bl	800a4d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a4e:	f000 fc97 	bl	8009380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a52:	f001 fd27 	bl	800a4a4 <vPortEnterCritical>
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a5c:	b25b      	sxtb	r3, r3
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	d103      	bne.n	8008a6c <xQueueSemaphoreTake+0xb4>
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a72:	b25b      	sxtb	r3, r3
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d103      	bne.n	8008a82 <xQueueSemaphoreTake+0xca>
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a82:	f001 fd29 	bl	800a4d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a86:	463a      	mov	r2, r7
 8008a88:	f107 030c 	add.w	r3, r7, #12
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fec0 	bl	8009814 <xTaskCheckForTimeOut>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d132      	bne.n	8008b00 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a9a:	69f8      	ldr	r0, [r7, #28]
 8008a9c:	f000 f9ba 	bl	8008e14 <prvIsQueueEmpty>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d026      	beq.n	8008af4 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d109      	bne.n	8008ac2 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8008aae:	f001 fcf9 	bl	800a4a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 ffe6 	bl	8009a88 <xTaskPriorityInherit>
 8008abc:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8008abe:	f001 fd0b 	bl	800a4d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	3324      	adds	r3, #36	; 0x24
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fe02 	bl	80096d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ad0:	69f8      	ldr	r0, [r7, #28]
 8008ad2:	f000 f94d 	bl	8008d70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ad6:	f000 fc61 	bl	800939c <xTaskResumeAll>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f47f af76 	bne.w	80089ce <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8008ae2:	4b18      	ldr	r3, [pc, #96]	; (8008b44 <xQueueSemaphoreTake+0x18c>)
 8008ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	e76c      	b.n	80089ce <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008af4:	69f8      	ldr	r0, [r7, #28]
 8008af6:	f000 f93b 	bl	8008d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008afa:	f000 fc4f 	bl	800939c <xTaskResumeAll>
 8008afe:	e766      	b.n	80089ce <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b00:	69f8      	ldr	r0, [r7, #28]
 8008b02:	f000 f935 	bl	8008d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b06:	f000 fc49 	bl	800939c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b0a:	69f8      	ldr	r0, [r7, #28]
 8008b0c:	f000 f982 	bl	8008e14 <prvIsQueueEmpty>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f43f af5b 	beq.w	80089ce <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8008b1e:	f001 fcc1 	bl	800a4a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b22:	69f8      	ldr	r0, [r7, #28]
 8008b24:	f000 f87c 	bl	8008c20 <prvGetDisinheritPriorityAfterTimeout>
 8008b28:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	6979      	ldr	r1, [r7, #20]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f001 f85d 	bl	8009bf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b36:	f001 fccf 	bl	800a4d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3728      	adds	r7, #40	; 0x28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	e000ed04 	.word	0xe000ed04

08008b48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08c      	sub	sp, #48	; 0x30
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 8008b58:	f3ef 8211 	mrs	r2, BASEPRI
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	61ba      	str	r2, [r7, #24]
 8008b6e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008b70:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d02d      	beq.n	8008bdc <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b86:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b88:	68b9      	ldr	r1, [r7, #8]
 8008b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b8c:	f000 f8ca 	bl	8008d24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	1e5a      	subs	r2, r3, #1
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008b98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba0:	d112      	bne.n	8008bc8 <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d015      	beq.n	8008bd6 <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	3310      	adds	r3, #16
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fdc4 	bl	800973c <xTaskRemoveFromEventList>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00d      	beq.n	8008bd6 <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	e006      	b.n	8008bd6 <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008bc8:	7ffb      	ldrb	r3, [r7, #31]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	b25a      	sxtb	r2, r3
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bda:	e001      	b.n	8008be0 <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f383 8811 	msr	BASEPRI, r3
}
 8008bea:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3730      	adds	r7, #48	; 0x30
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f95e 	bl	8008ec4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d102      	bne.n	8008c18 <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f001 fd9a 	bl	800a74c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008c18:	bf00      	nop
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d006      	beq.n	8008c3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e001      	b.n	8008c42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008c42:	68fb      	ldr	r3, [r7, #12]
	}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10d      	bne.n	8008c8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d14d      	bne.n	8008d12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 ff6c 	bl	8009b58 <xTaskPriorityDisinherit>
 8008c80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	609a      	str	r2, [r3, #8]
 8008c88:	e043      	b.n	8008d12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d119      	bne.n	8008cc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6858      	ldr	r0, [r3, #4]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	f001 fe7e 	bl	800a99c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	441a      	add	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d32b      	bcc.n	8008d12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	e026      	b.n	8008d12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68d8      	ldr	r0, [r3, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ccc:	461a      	mov	r2, r3
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	f001 fe64 	bl	800a99c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cdc:	425b      	negs	r3, r3
 8008cde:	441a      	add	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d207      	bcs.n	8008d00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	425b      	negs	r3, r3
 8008cfa:	441a      	add	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d105      	bne.n	8008d12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d1a:	697b      	ldr	r3, [r7, #20]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d018      	beq.n	8008d68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68da      	ldr	r2, [r3, #12]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	441a      	add	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d303      	bcc.n	8008d58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68d9      	ldr	r1, [r3, #12]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	461a      	mov	r2, r3
 8008d62:	6838      	ldr	r0, [r7, #0]
 8008d64:	f001 fe1a 	bl	800a99c <memcpy>
	}
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d78:	f001 fb94 	bl	800a4a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d84:	e011      	b.n	8008daa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d012      	beq.n	8008db4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3324      	adds	r3, #36	; 0x24
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fcd2 	bl	800973c <xTaskRemoveFromEventList>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d9e:	f000 fd7f 	bl	80098a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	dce9      	bgt.n	8008d86 <prvUnlockQueue+0x16>
 8008db2:	e000      	b.n	8008db6 <prvUnlockQueue+0x46>
					break;
 8008db4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	22ff      	movs	r2, #255	; 0xff
 8008dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008dbe:	f001 fb8b 	bl	800a4d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008dc2:	f001 fb6f 	bl	800a4a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dce:	e011      	b.n	8008df4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d012      	beq.n	8008dfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3310      	adds	r3, #16
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fcad 	bl	800973c <xTaskRemoveFromEventList>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008de8:	f000 fd5a 	bl	80098a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dce9      	bgt.n	8008dd0 <prvUnlockQueue+0x60>
 8008dfc:	e000      	b.n	8008e00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	22ff      	movs	r2, #255	; 0xff
 8008e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e08:	f001 fb66 	bl	800a4d8 <vPortExitCritical>
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e1c:	f001 fb42 	bl	800a4a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d102      	bne.n	8008e2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	e001      	b.n	8008e32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e32:	f001 fb51 	bl	800a4d8 <vPortExitCritical>

	return xReturn;
 8008e36:	68fb      	ldr	r3, [r7, #12]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e48:	f001 fb2c 	bl	800a4a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d102      	bne.n	8008e5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	e001      	b.n	8008e62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e62:	f001 fb39 	bl	800a4d8 <vPortExitCritical>

	return xReturn;
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	e014      	b.n	8008eaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e80:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <vQueueAddToRegistry+0x50>)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10b      	bne.n	8008ea4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e8c:	490c      	ldr	r1, [pc, #48]	; (8008ec0 <vQueueAddToRegistry+0x50>)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e96:	4a0a      	ldr	r2, [pc, #40]	; (8008ec0 <vQueueAddToRegistry+0x50>)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ea2:	e006      	b.n	8008eb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b07      	cmp	r3, #7
 8008eae:	d9e7      	bls.n	8008e80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000bd0 	.word	0x20000bd0

08008ec4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	e016      	b.n	8008f00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ed2:	4a10      	ldr	r2, [pc, #64]	; (8008f14 <vQueueUnregisterQueue+0x50>)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	4413      	add	r3, r2
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d10b      	bne.n	8008efa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008ee2:	4a0c      	ldr	r2, [pc, #48]	; (8008f14 <vQueueUnregisterQueue+0x50>)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008eec:	4a09      	ldr	r2, [pc, #36]	; (8008f14 <vQueueUnregisterQueue+0x50>)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	605a      	str	r2, [r3, #4]
				break;
 8008ef8:	e006      	b.n	8008f08 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b07      	cmp	r3, #7
 8008f04:	d9e5      	bls.n	8008ed2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008f06:	bf00      	nop
 8008f08:	bf00      	nop
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	20000bd0 	.word	0x20000bd0

08008f18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f28:	f001 fabc 	bl	800a4a4 <vPortEnterCritical>
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f32:	b25b      	sxtb	r3, r3
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f38:	d103      	bne.n	8008f42 <vQueueWaitForMessageRestricted+0x2a>
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f48:	b25b      	sxtb	r3, r3
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d103      	bne.n	8008f58 <vQueueWaitForMessageRestricted+0x40>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f58:	f001 fabe 	bl	800a4d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	3324      	adds	r3, #36	; 0x24
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fbc7 	bl	8009700 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f72:	6978      	ldr	r0, [r7, #20]
 8008f74:	f7ff fefc 	bl	8008d70 <prvUnlockQueue>
	}
 8008f78:	bf00      	nop
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08a      	sub	sp, #40	; 0x28
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01e      	beq.n	8008fd2 <xTaskCreateStatic+0x52>
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d01b      	beq.n	8008fd2 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fac:	2300      	movs	r3, #0
 8008fae:	9303      	str	r3, [sp, #12]
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	f107 0310 	add.w	r3, r7, #16
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 f851 	bl	800906c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fca:	6978      	ldr	r0, [r7, #20]
 8008fcc:	f000 f8e4 	bl	8009198 <prvAddNewTaskToReadyList>
 8008fd0:	e001      	b.n	8008fd6 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8008fd6:	693b      	ldr	r3, [r7, #16]
	}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08c      	sub	sp, #48	; 0x30
 8008fe4:	af04      	add	r7, sp, #16
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	4613      	mov	r3, r2
 8008fee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ff0:	88fb      	ldrh	r3, [r7, #6]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f001 fb0f 	bl	800a618 <pvPortMalloc>
 8008ffa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00e      	beq.n	8009020 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009002:	20bc      	movs	r0, #188	; 0xbc
 8009004:	f001 fb08 	bl	800a618 <pvPortMalloc>
 8009008:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	631a      	str	r2, [r3, #48]	; 0x30
 8009016:	e005      	b.n	8009024 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009018:	6978      	ldr	r0, [r7, #20]
 800901a:	f001 fb97 	bl	800a74c <vPortFree>
 800901e:	e001      	b.n	8009024 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009020:	2300      	movs	r3, #0
 8009022:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d017      	beq.n	800905a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009032:	88fa      	ldrh	r2, [r7, #6]
 8009034:	2300      	movs	r3, #0
 8009036:	9303      	str	r3, [sp, #12]
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	9302      	str	r3, [sp, #8]
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f80f 	bl	800906c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800904e:	69f8      	ldr	r0, [r7, #28]
 8009050:	f000 f8a2 	bl	8009198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009054:	2301      	movs	r3, #1
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	e002      	b.n	8009060 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800905a:	f04f 33ff 	mov.w	r3, #4294967295
 800905e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009060:	69bb      	ldr	r3, [r7, #24]
	}
 8009062:	4618      	mov	r0, r3
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	461a      	mov	r2, r3
 8009084:	21a5      	movs	r1, #165	; 0xa5
 8009086:	f001 fc97 	bl	800a9b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009094:	3b01      	subs	r3, #1
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d01f      	beq.n	80090ea <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090aa:	2300      	movs	r3, #0
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e012      	b.n	80090d6 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	4413      	add	r3, r2
 80090b6:	7819      	ldrb	r1, [r3, #0]
 80090b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	4413      	add	r3, r2
 80090be:	3334      	adds	r3, #52	; 0x34
 80090c0:	460a      	mov	r2, r1
 80090c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	4413      	add	r3, r2
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d006      	beq.n	80090de <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	3301      	adds	r3, #1
 80090d4:	617b      	str	r3, [r7, #20]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b0f      	cmp	r3, #15
 80090da:	d9e9      	bls.n	80090b0 <prvInitialiseNewTask+0x44>
 80090dc:	e000      	b.n	80090e0 <prvInitialiseNewTask+0x74>
			{
				break;
 80090de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090e8:	e003      	b.n	80090f2 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	2b37      	cmp	r3, #55	; 0x37
 80090f6:	d901      	bls.n	80090fc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090f8:	2337      	movs	r3, #55	; 0x37
 80090fa:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	6a3a      	ldr	r2, [r7, #32]
 8009100:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009104:	6a3a      	ldr	r2, [r7, #32]
 8009106:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	2200      	movs	r2, #0
 800910c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	3304      	adds	r3, #4
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff f8c6 	bl	80082a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	3318      	adds	r3, #24
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff f8c1 	bl	80082a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009126:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009136:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	2200      	movs	r2, #0
 800913c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	2200      	movs	r2, #0
 8009144:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	3354      	adds	r3, #84	; 0x54
 800914c:	2260      	movs	r2, #96	; 0x60
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f001 fc31 	bl	800a9b8 <memset>
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	4a0c      	ldr	r2, [pc, #48]	; (800918c <prvInitialiseNewTask+0x120>)
 800915a:	659a      	str	r2, [r3, #88]	; 0x58
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	4a0c      	ldr	r2, [pc, #48]	; (8009190 <prvInitialiseNewTask+0x124>)
 8009160:	65da      	str	r2, [r3, #92]	; 0x5c
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	4a0b      	ldr	r2, [pc, #44]	; (8009194 <prvInitialiseNewTask+0x128>)
 8009166:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	68f9      	ldr	r1, [r7, #12]
 800916c:	6938      	ldr	r0, [r7, #16]
 800916e:	f001 f8f5 	bl	800a35c <pxPortInitialiseStack>
 8009172:	4602      	mov	r2, r0
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009182:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009184:	bf00      	nop
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	0800d490 	.word	0x0800d490
 8009190:	0800d4b0 	.word	0x0800d4b0
 8009194:	0800d470 	.word	0x0800d470

08009198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091a0:	f001 f980 	bl	800a4a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091a4:	4b2d      	ldr	r3, [pc, #180]	; (800925c <prvAddNewTaskToReadyList+0xc4>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	4a2c      	ldr	r2, [pc, #176]	; (800925c <prvAddNewTaskToReadyList+0xc4>)
 80091ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091ae:	4b2c      	ldr	r3, [pc, #176]	; (8009260 <prvAddNewTaskToReadyList+0xc8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d109      	bne.n	80091ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091b6:	4a2a      	ldr	r2, [pc, #168]	; (8009260 <prvAddNewTaskToReadyList+0xc8>)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091bc:	4b27      	ldr	r3, [pc, #156]	; (800925c <prvAddNewTaskToReadyList+0xc4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d110      	bne.n	80091e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091c4:	f000 fb90 	bl	80098e8 <prvInitialiseTaskLists>
 80091c8:	e00d      	b.n	80091e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091ca:	4b26      	ldr	r3, [pc, #152]	; (8009264 <prvAddNewTaskToReadyList+0xcc>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d109      	bne.n	80091e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091d2:	4b23      	ldr	r3, [pc, #140]	; (8009260 <prvAddNewTaskToReadyList+0xc8>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	429a      	cmp	r2, r3
 80091de:	d802      	bhi.n	80091e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091e0:	4a1f      	ldr	r2, [pc, #124]	; (8009260 <prvAddNewTaskToReadyList+0xc8>)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091e6:	4b20      	ldr	r3, [pc, #128]	; (8009268 <prvAddNewTaskToReadyList+0xd0>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	4a1e      	ldr	r2, [pc, #120]	; (8009268 <prvAddNewTaskToReadyList+0xd0>)
 80091ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80091f0:	4b1d      	ldr	r3, [pc, #116]	; (8009268 <prvAddNewTaskToReadyList+0xd0>)
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fc:	4b1b      	ldr	r3, [pc, #108]	; (800926c <prvAddNewTaskToReadyList+0xd4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d903      	bls.n	800920c <prvAddNewTaskToReadyList+0x74>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	4a18      	ldr	r2, [pc, #96]	; (800926c <prvAddNewTaskToReadyList+0xd4>)
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4a15      	ldr	r2, [pc, #84]	; (8009270 <prvAddNewTaskToReadyList+0xd8>)
 800921a:	441a      	add	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7ff f84b 	bl	80082be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009228:	f001 f956 	bl	800a4d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <prvAddNewTaskToReadyList+0xcc>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00e      	beq.n	8009252 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <prvAddNewTaskToReadyList+0xc8>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	429a      	cmp	r2, r3
 8009240:	d207      	bcs.n	8009252 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009242:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <prvAddNewTaskToReadyList+0xdc>)
 8009244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200010e4 	.word	0x200010e4
 8009260:	20000c10 	.word	0x20000c10
 8009264:	200010f0 	.word	0x200010f0
 8009268:	20001100 	.word	0x20001100
 800926c:	200010ec 	.word	0x200010ec
 8009270:	20000c14 	.word	0x20000c14
 8009274:	e000ed04 	.word	0xe000ed04

08009278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d008      	beq.n	800929c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800928a:	f000 f879 	bl	8009380 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800928e:	2100      	movs	r1, #0
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fd21 	bl	8009cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009296:	f000 f881 	bl	800939c <xTaskResumeAll>
 800929a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d107      	bne.n	80092b2 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80092a2:	4b06      	ldr	r3, [pc, #24]	; (80092bc <vTaskDelay+0x44>)
 80092a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092b2:	bf00      	nop
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	; 0x28
 80092c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092ce:	1d3a      	adds	r2, r7, #4
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	f107 030c 	add.w	r3, r7, #12
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe ff8f 	bl	80081fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	9202      	str	r2, [sp, #8]
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	2300      	movs	r3, #0
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	2300      	movs	r3, #0
 80092ee:	460a      	mov	r2, r1
 80092f0:	491b      	ldr	r1, [pc, #108]	; (8009360 <vTaskStartScheduler+0xa0>)
 80092f2:	481c      	ldr	r0, [pc, #112]	; (8009364 <vTaskStartScheduler+0xa4>)
 80092f4:	f7ff fe44 	bl	8008f80 <xTaskCreateStatic>
 80092f8:	4603      	mov	r3, r0
 80092fa:	4a1b      	ldr	r2, [pc, #108]	; (8009368 <vTaskStartScheduler+0xa8>)
 80092fc:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092fe:	4b1a      	ldr	r3, [pc, #104]	; (8009368 <vTaskStartScheduler+0xa8>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8009306:	2301      	movs	r3, #1
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	e001      	b.n	8009310 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d102      	bne.n	800931c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8009316:	f000 fd33 	bl	8009d80 <xTimerCreateTimerTask>
 800931a:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d11a      	bne.n	8009358 <vTaskStartScheduler+0x98>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	613b      	str	r3, [r7, #16]
}
 8009334:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009336:	4b0d      	ldr	r3, [pc, #52]	; (800936c <vTaskStartScheduler+0xac>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3354      	adds	r3, #84	; 0x54
 800933c:	4a0c      	ldr	r2, [pc, #48]	; (8009370 <vTaskStartScheduler+0xb0>)
 800933e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <vTaskStartScheduler+0xb4>)
 8009342:	f04f 32ff 	mov.w	r2, #4294967295
 8009346:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009348:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <vTaskStartScheduler+0xb8>)
 800934a:	2201      	movs	r2, #1
 800934c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <vTaskStartScheduler+0xbc>)
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009354:	f001 f87c 	bl	800a450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009358:	bf00      	nop
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	0800d344 	.word	0x0800d344
 8009364:	080098b9 	.word	0x080098b9
 8009368:	20001108 	.word	0x20001108
 800936c:	20000c10 	.word	0x20000c10
 8009370:	2000001c 	.word	0x2000001c
 8009374:	20001104 	.word	0x20001104
 8009378:	200010f0 	.word	0x200010f0
 800937c:	200010e8 	.word	0x200010e8

08009380 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009384:	4b04      	ldr	r3, [pc, #16]	; (8009398 <vTaskSuspendAll+0x18>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3301      	adds	r3, #1
 800938a:	4a03      	ldr	r2, [pc, #12]	; (8009398 <vTaskSuspendAll+0x18>)
 800938c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800938e:	bf00      	nop
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr
 8009398:	2000110c 	.word	0x2000110c

0800939c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093aa:	f001 f87b 	bl	800a4a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093ae:	4b39      	ldr	r3, [pc, #228]	; (8009494 <xTaskResumeAll+0xf8>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	4a37      	ldr	r2, [pc, #220]	; (8009494 <xTaskResumeAll+0xf8>)
 80093b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093b8:	4b36      	ldr	r3, [pc, #216]	; (8009494 <xTaskResumeAll+0xf8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d162      	bne.n	8009486 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093c0:	4b35      	ldr	r3, [pc, #212]	; (8009498 <xTaskResumeAll+0xfc>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d05e      	beq.n	8009486 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093c8:	e02f      	b.n	800942a <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ca:	4b34      	ldr	r3, [pc, #208]	; (800949c <xTaskResumeAll+0x100>)
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3318      	adds	r3, #24
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe ffce 	bl	8008378 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3304      	adds	r3, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe ffc9 	bl	8008378 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ea:	4b2d      	ldr	r3, [pc, #180]	; (80094a0 <xTaskResumeAll+0x104>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d903      	bls.n	80093fa <xTaskResumeAll+0x5e>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f6:	4a2a      	ldr	r2, [pc, #168]	; (80094a0 <xTaskResumeAll+0x104>)
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4a27      	ldr	r2, [pc, #156]	; (80094a4 <xTaskResumeAll+0x108>)
 8009408:	441a      	add	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3304      	adds	r3, #4
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f7fe ff54 	bl	80082be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	4b23      	ldr	r3, [pc, #140]	; (80094a8 <xTaskResumeAll+0x10c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	429a      	cmp	r2, r3
 8009422:	d302      	bcc.n	800942a <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8009424:	4b21      	ldr	r3, [pc, #132]	; (80094ac <xTaskResumeAll+0x110>)
 8009426:	2201      	movs	r2, #1
 8009428:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800942a:	4b1c      	ldr	r3, [pc, #112]	; (800949c <xTaskResumeAll+0x100>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1cb      	bne.n	80093ca <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009438:	f000 fae8 	bl	8009a0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800943c:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <xTaskResumeAll+0x114>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d010      	beq.n	800946a <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009448:	f000 f846 	bl	80094d8 <xTaskIncrementTick>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8009452:	4b16      	ldr	r3, [pc, #88]	; (80094ac <xTaskResumeAll+0x110>)
 8009454:	2201      	movs	r2, #1
 8009456:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3b01      	subs	r3, #1
 800945c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1f1      	bne.n	8009448 <xTaskResumeAll+0xac>

						xPendedTicks = 0;
 8009464:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <xTaskResumeAll+0x114>)
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800946a:	4b10      	ldr	r3, [pc, #64]	; (80094ac <xTaskResumeAll+0x110>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009472:	2301      	movs	r3, #1
 8009474:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <xTaskResumeAll+0x118>)
 8009478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009486:	f001 f827 	bl	800a4d8 <vPortExitCritical>

	return xAlreadyYielded;
 800948a:	68bb      	ldr	r3, [r7, #8]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	2000110c 	.word	0x2000110c
 8009498:	200010e4 	.word	0x200010e4
 800949c:	200010a4 	.word	0x200010a4
 80094a0:	200010ec 	.word	0x200010ec
 80094a4:	20000c14 	.word	0x20000c14
 80094a8:	20000c10 	.word	0x20000c10
 80094ac:	200010f8 	.word	0x200010f8
 80094b0:	200010f4 	.word	0x200010f4
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <xTaskGetTickCount+0x1c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094c4:	687b      	ldr	r3, [r7, #4]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	200010e8 	.word	0x200010e8

080094d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094e2:	4b46      	ldr	r3, [pc, #280]	; (80095fc <xTaskIncrementTick+0x124>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d17e      	bne.n	80095e8 <xTaskIncrementTick+0x110>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094ea:	4b45      	ldr	r3, [pc, #276]	; (8009600 <xTaskIncrementTick+0x128>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094f2:	4a43      	ldr	r2, [pc, #268]	; (8009600 <xTaskIncrementTick+0x128>)
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d110      	bne.n	8009520 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80094fe:	4b41      	ldr	r3, [pc, #260]	; (8009604 <xTaskIncrementTick+0x12c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	4b40      	ldr	r3, [pc, #256]	; (8009608 <xTaskIncrementTick+0x130>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a3e      	ldr	r2, [pc, #248]	; (8009604 <xTaskIncrementTick+0x12c>)
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	4a3e      	ldr	r2, [pc, #248]	; (8009608 <xTaskIncrementTick+0x130>)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	4b3e      	ldr	r3, [pc, #248]	; (800960c <xTaskIncrementTick+0x134>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3301      	adds	r3, #1
 8009518:	4a3c      	ldr	r2, [pc, #240]	; (800960c <xTaskIncrementTick+0x134>)
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	f000 fa76 	bl	8009a0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009520:	4b3b      	ldr	r3, [pc, #236]	; (8009610 <xTaskIncrementTick+0x138>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	d349      	bcc.n	80095be <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800952a:	4b36      	ldr	r3, [pc, #216]	; (8009604 <xTaskIncrementTick+0x12c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d104      	bne.n	800953e <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009534:	4b36      	ldr	r3, [pc, #216]	; (8009610 <xTaskIncrementTick+0x138>)
 8009536:	f04f 32ff 	mov.w	r2, #4294967295
 800953a:	601a      	str	r2, [r3, #0]
					break;
 800953c:	e03f      	b.n	80095be <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800953e:	4b31      	ldr	r3, [pc, #196]	; (8009604 <xTaskIncrementTick+0x12c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	429a      	cmp	r2, r3
 8009554:	d203      	bcs.n	800955e <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009556:	4a2e      	ldr	r2, [pc, #184]	; (8009610 <xTaskIncrementTick+0x138>)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800955c:	e02f      	b.n	80095be <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	3304      	adds	r3, #4
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe ff08 	bl	8008378 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956c:	2b00      	cmp	r3, #0
 800956e:	d004      	beq.n	800957a <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	3318      	adds	r3, #24
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe feff 	bl	8008378 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957e:	4b25      	ldr	r3, [pc, #148]	; (8009614 <xTaskIncrementTick+0x13c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d903      	bls.n	800958e <xTaskIncrementTick+0xb6>
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	4a22      	ldr	r2, [pc, #136]	; (8009614 <xTaskIncrementTick+0x13c>)
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4a1f      	ldr	r2, [pc, #124]	; (8009618 <xTaskIncrementTick+0x140>)
 800959c:	441a      	add	r2, r3
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	3304      	adds	r3, #4
 80095a2:	4619      	mov	r1, r3
 80095a4:	4610      	mov	r0, r2
 80095a6:	f7fe fe8a 	bl	80082be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	4b1b      	ldr	r3, [pc, #108]	; (800961c <xTaskIncrementTick+0x144>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d3b8      	bcc.n	800952a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80095b8:	2301      	movs	r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095bc:	e7b5      	b.n	800952a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095be:	4b17      	ldr	r3, [pc, #92]	; (800961c <xTaskIncrementTick+0x144>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c4:	4914      	ldr	r1, [pc, #80]	; (8009618 <xTaskIncrementTick+0x140>)
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d901      	bls.n	80095da <xTaskIncrementTick+0x102>
			{
				xSwitchRequired = pdTRUE;
 80095d6:	2301      	movs	r3, #1
 80095d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095da:	4b11      	ldr	r3, [pc, #68]	; (8009620 <xTaskIncrementTick+0x148>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d007      	beq.n	80095f2 <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 80095e2:	2301      	movs	r3, #1
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	e004      	b.n	80095f2 <xTaskIncrementTick+0x11a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095e8:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <xTaskIncrementTick+0x14c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3301      	adds	r3, #1
 80095ee:	4a0d      	ldr	r2, [pc, #52]	; (8009624 <xTaskIncrementTick+0x14c>)
 80095f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095f2:	697b      	ldr	r3, [r7, #20]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	2000110c 	.word	0x2000110c
 8009600:	200010e8 	.word	0x200010e8
 8009604:	2000109c 	.word	0x2000109c
 8009608:	200010a0 	.word	0x200010a0
 800960c:	200010fc 	.word	0x200010fc
 8009610:	20001104 	.word	0x20001104
 8009614:	200010ec 	.word	0x200010ec
 8009618:	20000c14 	.word	0x20000c14
 800961c:	20000c10 	.word	0x20000c10
 8009620:	200010f8 	.word	0x200010f8
 8009624:	200010f4 	.word	0x200010f4

08009628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800962e:	4b23      	ldr	r3, [pc, #140]	; (80096bc <vTaskSwitchContext+0x94>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009636:	4b22      	ldr	r3, [pc, #136]	; (80096c0 <vTaskSwitchContext+0x98>)
 8009638:	2201      	movs	r2, #1
 800963a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800963c:	e038      	b.n	80096b0 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 800963e:	4b20      	ldr	r3, [pc, #128]	; (80096c0 <vTaskSwitchContext+0x98>)
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009644:	4b1f      	ldr	r3, [pc, #124]	; (80096c4 <vTaskSwitchContext+0x9c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	607b      	str	r3, [r7, #4]
 800964a:	e002      	b.n	8009652 <vTaskSwitchContext+0x2a>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3b01      	subs	r3, #1
 8009650:	607b      	str	r3, [r7, #4]
 8009652:	491d      	ldr	r1, [pc, #116]	; (80096c8 <vTaskSwitchContext+0xa0>)
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	440b      	add	r3, r1
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0f2      	beq.n	800964c <vTaskSwitchContext+0x24>
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4a15      	ldr	r2, [pc, #84]	; (80096c8 <vTaskSwitchContext+0xa0>)
 8009672:	4413      	add	r3, r2
 8009674:	603b      	str	r3, [r7, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	605a      	str	r2, [r3, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	429a      	cmp	r2, r3
 800968a:	d104      	bne.n	8009696 <vTaskSwitchContext+0x6e>
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	605a      	str	r2, [r3, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	4a0b      	ldr	r2, [pc, #44]	; (80096cc <vTaskSwitchContext+0xa4>)
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	4a08      	ldr	r2, [pc, #32]	; (80096c4 <vTaskSwitchContext+0x9c>)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096a6:	4b09      	ldr	r3, [pc, #36]	; (80096cc <vTaskSwitchContext+0xa4>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3354      	adds	r3, #84	; 0x54
 80096ac:	4a08      	ldr	r2, [pc, #32]	; (80096d0 <vTaskSwitchContext+0xa8>)
 80096ae:	6013      	str	r3, [r2, #0]
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	2000110c 	.word	0x2000110c
 80096c0:	200010f8 	.word	0x200010f8
 80096c4:	200010ec 	.word	0x200010ec
 80096c8:	20000c14 	.word	0x20000c14
 80096cc:	20000c10 	.word	0x20000c10
 80096d0:	2000001c 	.word	0x2000001c

080096d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096de:	4b07      	ldr	r3, [pc, #28]	; (80096fc <vTaskPlaceOnEventList+0x28>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3318      	adds	r3, #24
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7fe fe0d 	bl	8008306 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096ec:	2101      	movs	r1, #1
 80096ee:	6838      	ldr	r0, [r7, #0]
 80096f0:	f000 faf2 	bl	8009cd8 <prvAddCurrentTaskToDelayedList>
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20000c10 	.word	0x20000c10

08009700 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800970c:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <vTaskPlaceOnEventListRestricted+0x38>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3318      	adds	r3, #24
 8009712:	4619      	mov	r1, r3
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7fe fdd2 	bl	80082be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8009720:	f04f 33ff 	mov.w	r3, #4294967295
 8009724:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	68b8      	ldr	r0, [r7, #8]
 800972a:	f000 fad5 	bl	8009cd8 <prvAddCurrentTaskToDelayedList>
	}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20000c10 	.word	0x20000c10

0800973c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	3318      	adds	r3, #24
 8009750:	4618      	mov	r0, r3
 8009752:	f7fe fe11 	bl	8008378 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009756:	4b1e      	ldr	r3, [pc, #120]	; (80097d0 <xTaskRemoveFromEventList+0x94>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d11d      	bne.n	800979a <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	3304      	adds	r3, #4
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fe08 	bl	8008378 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976c:	4b19      	ldr	r3, [pc, #100]	; (80097d4 <xTaskRemoveFromEventList+0x98>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	429a      	cmp	r2, r3
 8009772:	d903      	bls.n	800977c <xTaskRemoveFromEventList+0x40>
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	4a16      	ldr	r2, [pc, #88]	; (80097d4 <xTaskRemoveFromEventList+0x98>)
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	4613      	mov	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4a13      	ldr	r2, [pc, #76]	; (80097d8 <xTaskRemoveFromEventList+0x9c>)
 800978a:	441a      	add	r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	3304      	adds	r3, #4
 8009790:	4619      	mov	r1, r3
 8009792:	4610      	mov	r0, r2
 8009794:	f7fe fd93 	bl	80082be <vListInsertEnd>
 8009798:	e005      	b.n	80097a6 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	3318      	adds	r3, #24
 800979e:	4619      	mov	r1, r3
 80097a0:	480e      	ldr	r0, [pc, #56]	; (80097dc <xTaskRemoveFromEventList+0xa0>)
 80097a2:	f7fe fd8c 	bl	80082be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <xTaskRemoveFromEventList+0xa4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d905      	bls.n	80097c0 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097b4:	2301      	movs	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <xTaskRemoveFromEventList+0xa8>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	e001      	b.n	80097c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80097c4:	68fb      	ldr	r3, [r7, #12]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	2000110c 	.word	0x2000110c
 80097d4:	200010ec 	.word	0x200010ec
 80097d8:	20000c14 	.word	0x20000c14
 80097dc:	200010a4 	.word	0x200010a4
 80097e0:	20000c10 	.word	0x20000c10
 80097e4:	200010f8 	.word	0x200010f8

080097e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097f0:	4b06      	ldr	r3, [pc, #24]	; (800980c <vTaskInternalSetTimeOutState+0x24>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097f8:	4b05      	ldr	r3, [pc, #20]	; (8009810 <vTaskInternalSetTimeOutState+0x28>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	605a      	str	r2, [r3, #4]
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	200010fc 	.word	0x200010fc
 8009810:	200010e8 	.word	0x200010e8

08009814 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 800981e:	f000 fe41 	bl	800a4a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009822:	4b1d      	ldr	r3, [pc, #116]	; (8009898 <xTaskCheckForTimeOut+0x84>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983a:	d102      	bne.n	8009842 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800983c:	2300      	movs	r3, #0
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	e023      	b.n	800988a <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	4b15      	ldr	r3, [pc, #84]	; (800989c <xTaskCheckForTimeOut+0x88>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	d007      	beq.n	800985e <xTaskCheckForTimeOut+0x4a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	429a      	cmp	r2, r3
 8009856:	d302      	bcc.n	800985e <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	617b      	str	r3, [r7, #20]
 800985c:	e015      	b.n	800988a <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	429a      	cmp	r2, r3
 8009866:	d20b      	bcs.n	8009880 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff ffb7 	bl	80097e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800987a:	2300      	movs	r3, #0
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	e004      	b.n	800988a <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009886:	2301      	movs	r3, #1
 8009888:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800988a:	f000 fe25 	bl	800a4d8 <vPortExitCritical>

	return xReturn;
 800988e:	697b      	ldr	r3, [r7, #20]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	200010e8 	.word	0x200010e8
 800989c:	200010fc 	.word	0x200010fc

080098a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098a0:	b480      	push	{r7}
 80098a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098a4:	4b03      	ldr	r3, [pc, #12]	; (80098b4 <vTaskMissedYield+0x14>)
 80098a6:	2201      	movs	r2, #1
 80098a8:	601a      	str	r2, [r3, #0]
}
 80098aa:	bf00      	nop
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	200010f8 	.word	0x200010f8

080098b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098c0:	f000 f852 	bl	8009968 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098c4:	4b06      	ldr	r3, [pc, #24]	; (80098e0 <prvIdleTask+0x28>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d9f9      	bls.n	80098c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098cc:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <prvIdleTask+0x2c>)
 80098ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098dc:	e7f0      	b.n	80098c0 <prvIdleTask+0x8>
 80098de:	bf00      	nop
 80098e0:	20000c14 	.word	0x20000c14
 80098e4:	e000ed04 	.word	0xe000ed04

080098e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ee:	2300      	movs	r3, #0
 80098f0:	607b      	str	r3, [r7, #4]
 80098f2:	e00c      	b.n	800990e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4a12      	ldr	r2, [pc, #72]	; (8009948 <prvInitialiseTaskLists+0x60>)
 8009900:	4413      	add	r3, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe fcae 	bl	8008264 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3301      	adds	r3, #1
 800990c:	607b      	str	r3, [r7, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b37      	cmp	r3, #55	; 0x37
 8009912:	d9ef      	bls.n	80098f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009914:	480d      	ldr	r0, [pc, #52]	; (800994c <prvInitialiseTaskLists+0x64>)
 8009916:	f7fe fca5 	bl	8008264 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800991a:	480d      	ldr	r0, [pc, #52]	; (8009950 <prvInitialiseTaskLists+0x68>)
 800991c:	f7fe fca2 	bl	8008264 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009920:	480c      	ldr	r0, [pc, #48]	; (8009954 <prvInitialiseTaskLists+0x6c>)
 8009922:	f7fe fc9f 	bl	8008264 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009926:	480c      	ldr	r0, [pc, #48]	; (8009958 <prvInitialiseTaskLists+0x70>)
 8009928:	f7fe fc9c 	bl	8008264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800992c:	480b      	ldr	r0, [pc, #44]	; (800995c <prvInitialiseTaskLists+0x74>)
 800992e:	f7fe fc99 	bl	8008264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009932:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <prvInitialiseTaskLists+0x78>)
 8009934:	4a05      	ldr	r2, [pc, #20]	; (800994c <prvInitialiseTaskLists+0x64>)
 8009936:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009938:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <prvInitialiseTaskLists+0x7c>)
 800993a:	4a05      	ldr	r2, [pc, #20]	; (8009950 <prvInitialiseTaskLists+0x68>)
 800993c:	601a      	str	r2, [r3, #0]
}
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000c14 	.word	0x20000c14
 800994c:	20001074 	.word	0x20001074
 8009950:	20001088 	.word	0x20001088
 8009954:	200010a4 	.word	0x200010a4
 8009958:	200010b8 	.word	0x200010b8
 800995c:	200010d0 	.word	0x200010d0
 8009960:	2000109c 	.word	0x2000109c
 8009964:	200010a0 	.word	0x200010a0

08009968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800996e:	e019      	b.n	80099a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009970:	f000 fd98 	bl	800a4a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009974:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <prvCheckTasksWaitingTermination+0x50>)
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	3304      	adds	r3, #4
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fcf9 	bl	8008378 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009986:	4b0d      	ldr	r3, [pc, #52]	; (80099bc <prvCheckTasksWaitingTermination+0x54>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3b01      	subs	r3, #1
 800998c:	4a0b      	ldr	r2, [pc, #44]	; (80099bc <prvCheckTasksWaitingTermination+0x54>)
 800998e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009990:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <prvCheckTasksWaitingTermination+0x58>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3b01      	subs	r3, #1
 8009996:	4a0a      	ldr	r2, [pc, #40]	; (80099c0 <prvCheckTasksWaitingTermination+0x58>)
 8009998:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800999a:	f000 fd9d 	bl	800a4d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f810 	bl	80099c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099a4:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <prvCheckTasksWaitingTermination+0x58>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e1      	bne.n	8009970 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	200010b8 	.word	0x200010b8
 80099bc:	200010e4 	.word	0x200010e4
 80099c0:	200010cc 	.word	0x200010cc

080099c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3354      	adds	r3, #84	; 0x54
 80099d0:	4618      	mov	r0, r3
 80099d2:	f001 f89b 	bl	800ab0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d108      	bne.n	80099f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 feb1 	bl	800a74c <vPortFree>
				vPortFree( pxTCB );
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 feae 	bl	800a74c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099f0:	e007      	b.n	8009a02 <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d102      	bne.n	8009a02 <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fea5 	bl	800a74c <vPortFree>
	}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a12:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <prvResetNextTaskUnblockTime+0x38>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <prvResetNextTaskUnblockTime+0x3c>)
 8009a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a24:	e008      	b.n	8009a38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a26:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <prvResetNextTaskUnblockTime+0x38>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	4a04      	ldr	r2, [pc, #16]	; (8009a48 <prvResetNextTaskUnblockTime+0x3c>)
 8009a36:	6013      	str	r3, [r2, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	2000109c 	.word	0x2000109c
 8009a48:	20001104 	.word	0x20001104

08009a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a52:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <xTaskGetSchedulerState+0x34>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	e008      	b.n	8009a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a60:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <xTaskGetSchedulerState+0x38>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a68:	2302      	movs	r3, #2
 8009a6a:	607b      	str	r3, [r7, #4]
 8009a6c:	e001      	b.n	8009a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a72:	687b      	ldr	r3, [r7, #4]
	}
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	200010f0 	.word	0x200010f0
 8009a84:	2000110c 	.word	0x2000110c

08009a88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a94:	2300      	movs	r3, #0
 8009a96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d051      	beq.n	8009b42 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa2:	4b2a      	ldr	r3, [pc, #168]	; (8009b4c <xTaskPriorityInherit+0xc4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d241      	bcs.n	8009b30 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	db06      	blt.n	8009ac2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab4:	4b25      	ldr	r3, [pc, #148]	; (8009b4c <xTaskPriorityInherit+0xc4>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	6959      	ldr	r1, [r3, #20]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <xTaskPriorityInherit+0xc8>)
 8009ad4:	4413      	add	r3, r2
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	d122      	bne.n	8009b20 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	3304      	adds	r3, #4
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fc4a 	bl	8008378 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ae4:	4b19      	ldr	r3, [pc, #100]	; (8009b4c <xTaskPriorityInherit+0xc4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af2:	4b18      	ldr	r3, [pc, #96]	; (8009b54 <xTaskPriorityInherit+0xcc>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d903      	bls.n	8009b02 <xTaskPriorityInherit+0x7a>
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	4a15      	ldr	r2, [pc, #84]	; (8009b54 <xTaskPriorityInherit+0xcc>)
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b06:	4613      	mov	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4a10      	ldr	r2, [pc, #64]	; (8009b50 <xTaskPriorityInherit+0xc8>)
 8009b10:	441a      	add	r2, r3
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	3304      	adds	r3, #4
 8009b16:	4619      	mov	r1, r3
 8009b18:	4610      	mov	r0, r2
 8009b1a:	f7fe fbd0 	bl	80082be <vListInsertEnd>
 8009b1e:	e004      	b.n	8009b2a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b20:	4b0a      	ldr	r3, [pc, #40]	; (8009b4c <xTaskPriorityInherit+0xc4>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	60fb      	str	r3, [r7, #12]
 8009b2e:	e008      	b.n	8009b42 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b34:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <xTaskPriorityInherit+0xc4>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d201      	bcs.n	8009b42 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b42:	68fb      	ldr	r3, [r7, #12]
	}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000c10 	.word	0x20000c10
 8009b50:	20000c14 	.word	0x20000c14
 8009b54:	200010ec 	.word	0x200010ec

08009b58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d037      	beq.n	8009bde <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b72:	1e5a      	subs	r2, r3, #1
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d02c      	beq.n	8009bde <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d128      	bne.n	8009bde <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fbf1 	bl	8008378 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bae:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <xTaskPriorityDisinherit+0x90>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d903      	bls.n	8009bbe <xTaskPriorityDisinherit+0x66>
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bba:	4a0b      	ldr	r2, [pc, #44]	; (8009be8 <xTaskPriorityDisinherit+0x90>)
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4a08      	ldr	r2, [pc, #32]	; (8009bec <xTaskPriorityDisinherit+0x94>)
 8009bcc:	441a      	add	r2, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f7fe fb72 	bl	80082be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bde:	68fb      	ldr	r3, [r7, #12]
	}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	200010ec 	.word	0x200010ec
 8009bec:	20000c14 	.word	0x20000c14

08009bf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d04b      	beq.n	8009ca0 <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d902      	bls.n	8009c18 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	e002      	b.n	8009c1e <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d03b      	beq.n	8009ca0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d136      	bne.n	8009ca0 <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c36:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	db04      	blt.n	8009c50 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	6959      	ldr	r1, [r3, #20]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4a12      	ldr	r2, [pc, #72]	; (8009ca8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009c60:	4413      	add	r3, r2
 8009c62:	4299      	cmp	r1, r3
 8009c64:	d11c      	bne.n	8009ca0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fb84 	bl	8008378 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d903      	bls.n	8009c84 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4a05      	ldr	r2, [pc, #20]	; (8009ca8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009c92:	441a      	add	r2, r3
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	3304      	adds	r3, #4
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f7fe fb0f 	bl	80082be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ca0:	bf00      	nop
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20000c14 	.word	0x20000c14
 8009cac:	200010ec 	.word	0x200010ec

08009cb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009cb4:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d004      	beq.n	8009cc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cc2:	3201      	adds	r2, #1
 8009cc4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009cc6:	4b03      	ldr	r3, [pc, #12]	; (8009cd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
	}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20000c10 	.word	0x20000c10

08009cd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ce2:	4b21      	ldr	r3, [pc, #132]	; (8009d68 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ce8:	4b20      	ldr	r3, [pc, #128]	; (8009d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fb42 	bl	8008378 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d10a      	bne.n	8009d12 <prvAddCurrentTaskToDelayedList+0x3a>
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d007      	beq.n	8009d12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d02:	4b1a      	ldr	r3, [pc, #104]	; (8009d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4819      	ldr	r0, [pc, #100]	; (8009d70 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d0c:	f7fe fad7 	bl	80082be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d10:	e026      	b.n	8009d60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d1a:	4b14      	ldr	r3, [pc, #80]	; (8009d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d209      	bcs.n	8009d3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d2a:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4619      	mov	r1, r3
 8009d36:	4610      	mov	r0, r2
 8009d38:	f7fe fae5 	bl	8008306 <vListInsert>
}
 8009d3c:	e010      	b.n	8009d60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d3e:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fe fadb 	bl	8008306 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d50:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d202      	bcs.n	8009d60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d5a:	4a08      	ldr	r2, [pc, #32]	; (8009d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	6013      	str	r3, [r2, #0]
}
 8009d60:	bf00      	nop
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	200010e8 	.word	0x200010e8
 8009d6c:	20000c10 	.word	0x20000c10
 8009d70:	200010d0 	.word	0x200010d0
 8009d74:	200010a0 	.word	0x200010a0
 8009d78:	2000109c 	.word	0x2000109c
 8009d7c:	20001104 	.word	0x20001104

08009d80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d8a:	f000 faa7 	bl	800a2dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d8e:	4b15      	ldr	r3, [pc, #84]	; (8009de4 <xTimerCreateTimerTask+0x64>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d020      	beq.n	8009dd8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d9e:	463a      	mov	r2, r7
 8009da0:	1d39      	adds	r1, r7, #4
 8009da2:	f107 0308 	add.w	r3, r7, #8
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe fa42 	bl	8008230 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	9202      	str	r2, [sp, #8]
 8009db4:	9301      	str	r3, [sp, #4]
 8009db6:	2302      	movs	r3, #2
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	460a      	mov	r2, r1
 8009dbe:	490a      	ldr	r1, [pc, #40]	; (8009de8 <xTimerCreateTimerTask+0x68>)
 8009dc0:	480a      	ldr	r0, [pc, #40]	; (8009dec <xTimerCreateTimerTask+0x6c>)
 8009dc2:	f7ff f8dd 	bl	8008f80 <xTaskCreateStatic>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <xTimerCreateTimerTask+0x70>)
 8009dca:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009dcc:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <xTimerCreateTimerTask+0x70>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20001140 	.word	0x20001140
 8009de8:	0800d34c 	.word	0x0800d34c
 8009dec:	08009ef5 	.word	0x08009ef5
 8009df0:	20001144 	.word	0x20001144

08009df4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08a      	sub	sp, #40	; 0x28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e06:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <xTimerGenericCommand+0x7c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d02a      	beq.n	8009e64 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b05      	cmp	r3, #5
 8009e1e:	dc18      	bgt.n	8009e52 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e20:	f7ff fe14 	bl	8009a4c <xTaskGetSchedulerState>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d109      	bne.n	8009e3e <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e2a:	4b11      	ldr	r3, [pc, #68]	; (8009e70 <xTimerGenericCommand+0x7c>)
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	f107 0114 	add.w	r1, r7, #20
 8009e32:	2300      	movs	r3, #0
 8009e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e36:	f7fe fbc1 	bl	80085bc <xQueueGenericSend>
 8009e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e3c:	e012      	b.n	8009e64 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e3e:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <xTimerGenericCommand+0x7c>)
 8009e40:	6818      	ldr	r0, [r3, #0]
 8009e42:	f107 0114 	add.w	r1, r7, #20
 8009e46:	2300      	movs	r3, #0
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f7fe fbb7 	bl	80085bc <xQueueGenericSend>
 8009e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8009e50:	e008      	b.n	8009e64 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e52:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <xTimerGenericCommand+0x7c>)
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	f107 0114 	add.w	r1, r7, #20
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	f7fe fc57 	bl	8008710 <xQueueGenericSendFromISR>
 8009e62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3728      	adds	r7, #40	; 0x28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20001140 	.word	0x20001140

08009e74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e7e:	4b1c      	ldr	r3, [pc, #112]	; (8009ef0 <prvProcessExpiredTimer+0x7c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fa73 	bl	8008378 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e98:	f003 0304 	and.w	r3, r3, #4
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d015      	beq.n	8009ecc <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	699a      	ldr	r2, [r3, #24]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	18d1      	adds	r1, r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 f8c5 	bl	800a03c <prvInsertTimerInActiveList>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d012      	beq.n	8009ede <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7ff ff96 	bl	8009df4 <xTimerGenericCommand>
 8009ec8:	60b8      	str	r0, [r7, #8]
 8009eca:	e008      	b.n	8009ede <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ed2:	f023 0301 	bic.w	r3, r3, #1
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	4798      	blx	r3
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20001138 	.word	0x20001138

08009ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009efc:	f107 0308 	add.w	r3, r7, #8
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 f857 	bl	8009fb4 <prvGetNextExpireTime>
 8009f06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f000 f803 	bl	8009f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f12:	f000 f8d5 	bl	800a0c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f16:	e7f1      	b.n	8009efc <prvTimerTask+0x8>

08009f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f22:	f7ff fa2d 	bl	8009380 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f26:	f107 0308 	add.w	r3, r7, #8
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 f866 	bl	8009ffc <prvSampleTimeNow>
 8009f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d130      	bne.n	8009f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <prvProcessTimerOrBlockTask+0x3c>
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d806      	bhi.n	8009f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f46:	f7ff fa29 	bl	800939c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff ff91 	bl	8009e74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f52:	e024      	b.n	8009f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f5a:	4b13      	ldr	r3, [pc, #76]	; (8009fa8 <prvProcessTimerOrBlockTask+0x90>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <prvProcessTimerOrBlockTask+0x50>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <prvProcessTimerOrBlockTask+0x52>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f6c:	4b0f      	ldr	r3, [pc, #60]	; (8009fac <prvProcessTimerOrBlockTask+0x94>)
 8009f6e:	6818      	ldr	r0, [r3, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f7fe ffcd 	bl	8008f18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f7e:	f7ff fa0d 	bl	800939c <xTaskResumeAll>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f88:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <prvProcessTimerOrBlockTask+0x98>)
 8009f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	f3bf 8f6f 	isb	sy
}
 8009f98:	e001      	b.n	8009f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f9a:	f7ff f9ff 	bl	800939c <xTaskResumeAll>
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	2000113c 	.word	0x2000113c
 8009fac:	20001140 	.word	0x20001140
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fbc:	4b0e      	ldr	r3, [pc, #56]	; (8009ff8 <prvGetNextExpireTime+0x44>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <prvGetNextExpireTime+0x16>
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	e000      	b.n	8009fcc <prvGetNextExpireTime+0x18>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d105      	bne.n	8009fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fd8:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <prvGetNextExpireTime+0x44>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	e001      	b.n	8009fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20001138 	.word	0x20001138

08009ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a004:	f7ff fa58 	bl	80094b8 <xTaskGetTickCount>
 800a008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <prvSampleTimeNow+0x3c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	429a      	cmp	r2, r3
 800a012:	d205      	bcs.n	800a020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a014:	f000 f90c 	bl	800a230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	e002      	b.n	800a026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a026:	4a04      	ldr	r2, [pc, #16]	; (800a038 <prvSampleTimeNow+0x3c>)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20001148 	.word	0x20001148

0800a03c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d812      	bhi.n	800a088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	1ad2      	subs	r2, r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d302      	bcc.n	800a076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a070:	2301      	movs	r3, #1
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	e01b      	b.n	800a0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a076:	4b10      	ldr	r3, [pc, #64]	; (800a0b8 <prvInsertTimerInActiveList+0x7c>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fe f940 	bl	8008306 <vListInsert>
 800a086:	e012      	b.n	800a0ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d206      	bcs.n	800a09e <prvInsertTimerInActiveList+0x62>
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	429a      	cmp	r2, r3
 800a096:	d302      	bcc.n	800a09e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a098:	2301      	movs	r3, #1
 800a09a:	617b      	str	r3, [r7, #20]
 800a09c:	e007      	b.n	800a0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a09e:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <prvInsertTimerInActiveList+0x80>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	f7fe f92c 	bl	8008306 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0ae:	697b      	ldr	r3, [r7, #20]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	2000113c 	.word	0x2000113c
 800a0bc:	20001138 	.word	0x20001138

0800a0c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08c      	sub	sp, #48	; 0x30
 800a0c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0c6:	e0a0      	b.n	800a20a <prvProcessReceivedCommands+0x14a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	da0b      	bge.n	800a0e6 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0ce:	f107 0308 	add.w	r3, r7, #8
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0dc:	6850      	ldr	r0, [r2, #4]
 800a0de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e0:	6892      	ldr	r2, [r2, #8]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f2c0 808d 	blt.w	800a208 <prvProcessReceivedCommands+0x148>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d004      	beq.n	800a104 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe f93a 	bl	8008378 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a104:	1d3b      	adds	r3, r7, #4
 800a106:	4618      	mov	r0, r3
 800a108:	f7ff ff78 	bl	8009ffc <prvSampleTimeNow>
 800a10c:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b09      	cmp	r3, #9
 800a112:	d87a      	bhi.n	800a20a <prvProcessReceivedCommands+0x14a>
 800a114:	a201      	add	r2, pc, #4	; (adr r2, 800a11c <prvProcessReceivedCommands+0x5c>)
 800a116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11a:	bf00      	nop
 800a11c:	0800a145 	.word	0x0800a145
 800a120:	0800a145 	.word	0x0800a145
 800a124:	0800a145 	.word	0x0800a145
 800a128:	0800a19f 	.word	0x0800a19f
 800a12c:	0800a1b3 	.word	0x0800a1b3
 800a130:	0800a1df 	.word	0x0800a1df
 800a134:	0800a145 	.word	0x0800a145
 800a138:	0800a145 	.word	0x0800a145
 800a13c:	0800a19f 	.word	0x0800a19f
 800a140:	0800a1b3 	.word	0x0800a1b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a14a:	f043 0301 	orr.w	r3, r3, #1
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	18d1      	adds	r1, r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	69fa      	ldr	r2, [r7, #28]
 800a162:	6a38      	ldr	r0, [r7, #32]
 800a164:	f7ff ff6a 	bl	800a03c <prvInsertTimerInActiveList>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d04d      	beq.n	800a20a <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	6a38      	ldr	r0, [r7, #32]
 800a174:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a17c:	f003 0304 	and.w	r3, r3, #4
 800a180:	2b00      	cmp	r3, #0
 800a182:	d042      	beq.n	800a20a <prvProcessReceivedCommands+0x14a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	441a      	add	r2, r3
 800a18c:	2300      	movs	r3, #0
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	2300      	movs	r3, #0
 800a192:	2100      	movs	r1, #0
 800a194:	6a38      	ldr	r0, [r7, #32]
 800a196:	f7ff fe2d 	bl	8009df4 <xTimerGenericCommand>
 800a19a:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800a19c:	e035      	b.n	800a20a <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1a4:	f023 0301 	bic.w	r3, r3, #1
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1b0:	e02b      	b.n	800a20a <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1b8:	f043 0301 	orr.w	r3, r3, #1
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	18d1      	adds	r1, r2, r3
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	69fa      	ldr	r2, [r7, #28]
 800a1d6:	6a38      	ldr	r0, [r7, #32]
 800a1d8:	f7ff ff30 	bl	800a03c <prvInsertTimerInActiveList>
					break;
 800a1dc:	e015      	b.n	800a20a <prvProcessReceivedCommands+0x14a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d103      	bne.n	800a1f4 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 800a1ec:	6a38      	ldr	r0, [r7, #32]
 800a1ee:	f000 faad 	bl	800a74c <vPortFree>
 800a1f2:	e00a      	b.n	800a20a <prvProcessReceivedCommands+0x14a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1fa:	f023 0301 	bic.w	r3, r3, #1
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a206:	e000      	b.n	800a20a <prvProcessReceivedCommands+0x14a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a208:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a20a:	4b08      	ldr	r3, [pc, #32]	; (800a22c <prvProcessReceivedCommands+0x16c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f107 0108 	add.w	r1, r7, #8
 800a212:	2200      	movs	r2, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe fb2d 	bl	8008874 <xQueueReceive>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f47f af53 	bne.w	800a0c8 <prvProcessReceivedCommands+0x8>
	}
}
 800a222:	bf00      	nop
 800a224:	bf00      	nop
 800a226:	3728      	adds	r7, #40	; 0x28
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20001140 	.word	0x20001140

0800a230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a236:	e03a      	b.n	800a2ae <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a238:	4b26      	ldr	r3, [pc, #152]	; (800a2d4 <prvSwitchTimerLists+0xa4>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a242:	4b24      	ldr	r3, [pc, #144]	; (800a2d4 <prvSwitchTimerLists+0xa4>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3304      	adds	r3, #4
 800a250:	4618      	mov	r0, r3
 800a252:	f7fe f891 	bl	8008378 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a264:	f003 0304 	and.w	r3, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d020      	beq.n	800a2ae <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	4413      	add	r3, r2
 800a274:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d90e      	bls.n	800a29c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a28a:	4b12      	ldr	r3, [pc, #72]	; (800a2d4 <prvSwitchTimerLists+0xa4>)
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3304      	adds	r3, #4
 800a292:	4619      	mov	r1, r3
 800a294:	4610      	mov	r0, r2
 800a296:	f7fe f836 	bl	8008306 <vListInsert>
 800a29a:	e008      	b.n	800a2ae <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a29c:	2300      	movs	r3, #0
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7ff fda4 	bl	8009df4 <xTimerGenericCommand>
 800a2ac:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2ae:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <prvSwitchTimerLists+0xa4>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1bf      	bne.n	800a238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <prvSwitchTimerLists+0xa4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2be:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <prvSwitchTimerLists+0xa8>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a04      	ldr	r2, [pc, #16]	; (800a2d4 <prvSwitchTimerLists+0xa4>)
 800a2c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2c6:	4a04      	ldr	r2, [pc, #16]	; (800a2d8 <prvSwitchTimerLists+0xa8>)
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	6013      	str	r3, [r2, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	20001138 	.word	0x20001138
 800a2d8:	2000113c 	.word	0x2000113c

0800a2dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2e2:	f000 f8df 	bl	800a4a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2e6:	4b15      	ldr	r3, [pc, #84]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d120      	bne.n	800a330 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2ee:	4814      	ldr	r0, [pc, #80]	; (800a340 <prvCheckForValidListAndQueue+0x64>)
 800a2f0:	f7fd ffb8 	bl	8008264 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2f4:	4813      	ldr	r0, [pc, #76]	; (800a344 <prvCheckForValidListAndQueue+0x68>)
 800a2f6:	f7fd ffb5 	bl	8008264 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2fa:	4b13      	ldr	r3, [pc, #76]	; (800a348 <prvCheckForValidListAndQueue+0x6c>)
 800a2fc:	4a10      	ldr	r2, [pc, #64]	; (800a340 <prvCheckForValidListAndQueue+0x64>)
 800a2fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a300:	4b12      	ldr	r3, [pc, #72]	; (800a34c <prvCheckForValidListAndQueue+0x70>)
 800a302:	4a10      	ldr	r2, [pc, #64]	; (800a344 <prvCheckForValidListAndQueue+0x68>)
 800a304:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a306:	2300      	movs	r3, #0
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	4b11      	ldr	r3, [pc, #68]	; (800a350 <prvCheckForValidListAndQueue+0x74>)
 800a30c:	4a11      	ldr	r2, [pc, #68]	; (800a354 <prvCheckForValidListAndQueue+0x78>)
 800a30e:	2110      	movs	r1, #16
 800a310:	200a      	movs	r0, #10
 800a312:	f7fe f8b5 	bl	8008480 <xQueueGenericCreateStatic>
 800a316:	4603      	mov	r3, r0
 800a318:	4a08      	ldr	r2, [pc, #32]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a31a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d005      	beq.n	800a330 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	490b      	ldr	r1, [pc, #44]	; (800a358 <prvCheckForValidListAndQueue+0x7c>)
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fda0 	bl	8008e70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a330:	f000 f8d2 	bl	800a4d8 <vPortExitCritical>
}
 800a334:	bf00      	nop
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20001140 	.word	0x20001140
 800a340:	20001110 	.word	0x20001110
 800a344:	20001124 	.word	0x20001124
 800a348:	20001138 	.word	0x20001138
 800a34c:	2000113c 	.word	0x2000113c
 800a350:	200011ec 	.word	0x200011ec
 800a354:	2000114c 	.word	0x2000114c
 800a358:	0800d354 	.word	0x0800d354

0800a35c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3b04      	subs	r3, #4
 800a36c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3b04      	subs	r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f023 0201 	bic.w	r2, r3, #1
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3b04      	subs	r3, #4
 800a38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a38c:	4a0c      	ldr	r2, [pc, #48]	; (800a3c0 <pxPortInitialiseStack+0x64>)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3b14      	subs	r3, #20
 800a396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3b04      	subs	r3, #4
 800a3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f06f 0202 	mvn.w	r2, #2
 800a3aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3b20      	subs	r3, #32
 800a3b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	0800a3c5 	.word	0x0800a3c5

0800a3c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	607b      	str	r3, [r7, #4]
}
 800a3e0:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3e2:	bf00      	nop
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0fc      	beq.n	800a3e4 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3ea:	bf00      	nop
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
	...

0800a400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <pxCurrentTCBConst2>)
 800a402:	6819      	ldr	r1, [r3, #0]
 800a404:	6808      	ldr	r0, [r1, #0]
 800a406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40a:	f380 8809 	msr	PSP, r0
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f04f 0000 	mov.w	r0, #0
 800a416:	f380 8811 	msr	BASEPRI, r0
 800a41a:	4770      	bx	lr
 800a41c:	f3af 8000 	nop.w

0800a420 <pxCurrentTCBConst2>:
 800a420:	20000c10 	.word	0x20000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop

0800a428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a428:	4808      	ldr	r0, [pc, #32]	; (800a44c <prvPortStartFirstTask+0x24>)
 800a42a:	6800      	ldr	r0, [r0, #0]
 800a42c:	6800      	ldr	r0, [r0, #0]
 800a42e:	f380 8808 	msr	MSP, r0
 800a432:	f04f 0000 	mov.w	r0, #0
 800a436:	f380 8814 	msr	CONTROL, r0
 800a43a:	b662      	cpsie	i
 800a43c:	b661      	cpsie	f
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	df00      	svc	0
 800a448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a44a:	bf00      	nop
 800a44c:	e000ed08 	.word	0xe000ed08

0800a450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a454:	4b10      	ldr	r3, [pc, #64]	; (800a498 <xPortStartScheduler+0x48>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a0f      	ldr	r2, [pc, #60]	; (800a498 <xPortStartScheduler+0x48>)
 800a45a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a45e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a460:	4b0d      	ldr	r3, [pc, #52]	; (800a498 <xPortStartScheduler+0x48>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a0c      	ldr	r2, [pc, #48]	; (800a498 <xPortStartScheduler+0x48>)
 800a466:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a46a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a46c:	f000 f8a6 	bl	800a5bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a470:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <xPortStartScheduler+0x4c>)
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a476:	f000 f8c5 	bl	800a604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <xPortStartScheduler+0x50>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a08      	ldr	r2, [pc, #32]	; (800a4a0 <xPortStartScheduler+0x50>)
 800a480:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a484:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a486:	f7ff ffcf 	bl	800a428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a48a:	f7ff f8cd 	bl	8009628 <vTaskSwitchContext>
	prvTaskExitError();
 800a48e:	f7ff ff99 	bl	800a3c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	bd80      	pop	{r7, pc}
 800a498:	e000ed20 	.word	0xe000ed20
 800a49c:	20000018 	.word	0x20000018
 800a4a0:	e000ef34 	.word	0xe000ef34

0800a4a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	607b      	str	r3, [r7, #4]
}
 800a4bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4be:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <vPortEnterCritical+0x30>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	4a03      	ldr	r2, [pc, #12]	; (800a4d4 <vPortEnterCritical+0x30>)
 800a4c6:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	20000018 	.word	0x20000018

0800a4d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800a4de:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <vPortExitCritical+0x30>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	4a08      	ldr	r2, [pc, #32]	; (800a508 <vPortExitCritical+0x30>)
 800a4e6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4e8:	4b07      	ldr	r3, [pc, #28]	; (800a508 <vPortExitCritical+0x30>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d105      	bne.n	800a4fc <vPortExitCritical+0x24>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	607b      	str	r3, [r7, #4]
	__asm volatile
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f383 8811 	msr	BASEPRI, r3
}
 800a4fa:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	20000018 	.word	0x20000018
 800a50c:	00000000 	.word	0x00000000

0800a510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a510:	f3ef 8009 	mrs	r0, PSP
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	4b15      	ldr	r3, [pc, #84]	; (800a570 <pxCurrentTCBConst>)
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	f01e 0f10 	tst.w	lr, #16
 800a520:	bf08      	it	eq
 800a522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52a:	6010      	str	r0, [r2, #0]
 800a52c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a530:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a534:	f380 8811 	msr	BASEPRI, r0
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f7ff f872 	bl	8009628 <vTaskSwitchContext>
 800a544:	f04f 0000 	mov.w	r0, #0
 800a548:	f380 8811 	msr	BASEPRI, r0
 800a54c:	bc09      	pop	{r0, r3}
 800a54e:	6819      	ldr	r1, [r3, #0]
 800a550:	6808      	ldr	r0, [r1, #0]
 800a552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a556:	f01e 0f10 	tst.w	lr, #16
 800a55a:	bf08      	it	eq
 800a55c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a560:	f380 8809 	msr	PSP, r0
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	f3af 8000 	nop.w

0800a570 <pxCurrentTCBConst>:
 800a570:	20000c10 	.word	0x20000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop

0800a578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	607b      	str	r3, [r7, #4]
}
 800a590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a592:	f7fe ffa1 	bl	80094d8 <xTaskIncrementTick>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a59c:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <xPortSysTickHandler+0x40>)
 800a59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	f383 8811 	msr	BASEPRI, r3
}
 800a5ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	e000ed04 	.word	0xe000ed04

0800a5bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <vPortSetupTimerInterrupt+0x34>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5c6:	4b0b      	ldr	r3, [pc, #44]	; (800a5f4 <vPortSetupTimerInterrupt+0x38>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <vPortSetupTimerInterrupt+0x3c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a0a      	ldr	r2, [pc, #40]	; (800a5fc <vPortSetupTimerInterrupt+0x40>)
 800a5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d6:	099b      	lsrs	r3, r3, #6
 800a5d8:	4a09      	ldr	r2, [pc, #36]	; (800a600 <vPortSetupTimerInterrupt+0x44>)
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5de:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <vPortSetupTimerInterrupt+0x34>)
 800a5e0:	2207      	movs	r2, #7
 800a5e2:	601a      	str	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	e000e010 	.word	0xe000e010
 800a5f4:	e000e018 	.word	0xe000e018
 800a5f8:	2000000c 	.word	0x2000000c
 800a5fc:	10624dd3 	.word	0x10624dd3
 800a600:	e000e014 	.word	0xe000e014

0800a604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a614 <vPortEnableVFP+0x10>
 800a608:	6801      	ldr	r1, [r0, #0]
 800a60a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a60e:	6001      	str	r1, [r0, #0]
 800a610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a612:	bf00      	nop
 800a614:	e000ed88 	.word	0xe000ed88

0800a618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a620:	2300      	movs	r3, #0
 800a622:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a624:	f7fe feac 	bl	8009380 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a628:	4b42      	ldr	r3, [pc, #264]	; (800a734 <pvPortMalloc+0x11c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a630:	f000 f8cc 	bl	800a7cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a634:	4b40      	ldr	r3, [pc, #256]	; (800a738 <pvPortMalloc+0x120>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4013      	ands	r3, r2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d172      	bne.n	800a726 <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00d      	beq.n	800a662 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800a646:	2208      	movs	r2, #8
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4413      	add	r3, r2
 800a64c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	2b00      	cmp	r3, #0
 800a656:	d004      	beq.n	800a662 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f023 0307 	bic.w	r3, r3, #7
 800a65e:	3308      	adds	r3, #8
 800a660:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d05e      	beq.n	800a726 <pvPortMalloc+0x10e>
 800a668:	4b34      	ldr	r3, [pc, #208]	; (800a73c <pvPortMalloc+0x124>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d859      	bhi.n	800a726 <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a672:	4b33      	ldr	r3, [pc, #204]	; (800a740 <pvPortMalloc+0x128>)
 800a674:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a676:	4b32      	ldr	r3, [pc, #200]	; (800a740 <pvPortMalloc+0x128>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a67c:	e004      	b.n	800a688 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d903      	bls.n	800a69a <pvPortMalloc+0x82>
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1f1      	bne.n	800a67e <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a69a:	4b26      	ldr	r3, [pc, #152]	; (800a734 <pvPortMalloc+0x11c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d040      	beq.n	800a726 <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	4413      	add	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	1ad2      	subs	r2, r2, r3
 800a6be:	2308      	movs	r3, #8
 800a6c0:	005b      	lsls	r3, r3, #1
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d90f      	bls.n	800a6e6 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	1ad2      	subs	r2, r2, r3
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6e0:	68b8      	ldr	r0, [r7, #8]
 800a6e2:	f000 f8d5 	bl	800a890 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6e6:	4b15      	ldr	r3, [pc, #84]	; (800a73c <pvPortMalloc+0x124>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	4a12      	ldr	r2, [pc, #72]	; (800a73c <pvPortMalloc+0x124>)
 800a6f2:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6f4:	4b11      	ldr	r3, [pc, #68]	; (800a73c <pvPortMalloc+0x124>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	4b12      	ldr	r3, [pc, #72]	; (800a744 <pvPortMalloc+0x12c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d203      	bcs.n	800a708 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a700:	4b0e      	ldr	r3, [pc, #56]	; (800a73c <pvPortMalloc+0x124>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a0f      	ldr	r2, [pc, #60]	; (800a744 <pvPortMalloc+0x12c>)
 800a706:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <pvPortMalloc+0x120>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	431a      	orrs	r2, r3
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a71c:	4b0a      	ldr	r3, [pc, #40]	; (800a748 <pvPortMalloc+0x130>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3301      	adds	r3, #1
 800a722:	4a09      	ldr	r2, [pc, #36]	; (800a748 <pvPortMalloc+0x130>)
 800a724:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a726:	f7fe fe39 	bl	800939c <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 800a72a:	68fb      	ldr	r3, [r7, #12]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	20002644 	.word	0x20002644
 800a738:	20002658 	.word	0x20002658
 800a73c:	20002648 	.word	0x20002648
 800a740:	2000263c 	.word	0x2000263c
 800a744:	2000264c 	.word	0x2000264c
 800a748:	20002650 	.word	0x20002650

0800a74c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d02c      	beq.n	800a7b8 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a75e:	2308      	movs	r3, #8
 800a760:	425b      	negs	r3, r3
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4413      	add	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	4b13      	ldr	r3, [pc, #76]	; (800a7c0 <vPortFree+0x74>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4013      	ands	r3, r2
 800a776:	2b00      	cmp	r3, #0
 800a778:	d01e      	beq.n	800a7b8 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d11a      	bne.n	800a7b8 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <vPortFree+0x74>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	43db      	mvns	r3, r3
 800a78c:	401a      	ands	r2, r3
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a792:	f7fe fdf5 	bl	8009380 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <vPortFree+0x78>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4413      	add	r3, r2
 800a7a0:	4a08      	ldr	r2, [pc, #32]	; (800a7c4 <vPortFree+0x78>)
 800a7a2:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7a4:	68b8      	ldr	r0, [r7, #8]
 800a7a6:	f000 f873 	bl	800a890 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7aa:	4b07      	ldr	r3, [pc, #28]	; (800a7c8 <vPortFree+0x7c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	4a05      	ldr	r2, [pc, #20]	; (800a7c8 <vPortFree+0x7c>)
 800a7b2:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7b4:	f7fe fdf2 	bl	800939c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7b8:	bf00      	nop
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	20002658 	.word	0x20002658
 800a7c4:	20002648 	.word	0x20002648
 800a7c8:	20002654 	.word	0x20002654

0800a7cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a7d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7d8:	4b27      	ldr	r3, [pc, #156]	; (800a878 <prvHeapInit+0xac>)
 800a7da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f003 0307 	and.w	r3, r3, #7
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00c      	beq.n	800a800 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3307      	adds	r3, #7
 800a7ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f023 0307 	bic.w	r3, r3, #7
 800a7f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	4a1f      	ldr	r2, [pc, #124]	; (800a878 <prvHeapInit+0xac>)
 800a7fc:	4413      	add	r3, r2
 800a7fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a804:	4a1d      	ldr	r2, [pc, #116]	; (800a87c <prvHeapInit+0xb0>)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a80a:	4b1c      	ldr	r3, [pc, #112]	; (800a87c <prvHeapInit+0xb0>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	4413      	add	r3, r2
 800a816:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a818:	2208      	movs	r2, #8
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	1a9b      	subs	r3, r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 0307 	bic.w	r3, r3, #7
 800a826:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4a15      	ldr	r2, [pc, #84]	; (800a880 <prvHeapInit+0xb4>)
 800a82c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a82e:	4b14      	ldr	r3, [pc, #80]	; (800a880 <prvHeapInit+0xb4>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2200      	movs	r2, #0
 800a834:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a836:	4b12      	ldr	r3, [pc, #72]	; (800a880 <prvHeapInit+0xb4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2200      	movs	r2, #0
 800a83c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	1ad2      	subs	r2, r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a84c:	4b0c      	ldr	r3, [pc, #48]	; (800a880 <prvHeapInit+0xb4>)
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	4a0a      	ldr	r2, [pc, #40]	; (800a884 <prvHeapInit+0xb8>)
 800a85a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4a09      	ldr	r2, [pc, #36]	; (800a888 <prvHeapInit+0xbc>)
 800a862:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a864:	4b09      	ldr	r3, [pc, #36]	; (800a88c <prvHeapInit+0xc0>)
 800a866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a86a:	601a      	str	r2, [r3, #0]
}
 800a86c:	bf00      	nop
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	2000123c 	.word	0x2000123c
 800a87c:	2000263c 	.word	0x2000263c
 800a880:	20002644 	.word	0x20002644
 800a884:	2000264c 	.word	0x2000264c
 800a888:	20002648 	.word	0x20002648
 800a88c:	20002658 	.word	0x20002658

0800a890 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a898:	4b28      	ldr	r3, [pc, #160]	; (800a93c <prvInsertBlockIntoFreeList+0xac>)
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	e002      	b.n	800a8a4 <prvInsertBlockIntoFreeList+0x14>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d8f7      	bhi.n	800a89e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d108      	bne.n	800a8d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	441a      	add	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	441a      	add	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d118      	bne.n	800a918 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	4b15      	ldr	r3, [pc, #84]	; (800a940 <prvInsertBlockIntoFreeList+0xb0>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d00d      	beq.n	800a90e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	441a      	add	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	e008      	b.n	800a920 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a90e:	4b0c      	ldr	r3, [pc, #48]	; (800a940 <prvInsertBlockIntoFreeList+0xb0>)
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	e003      	b.n	800a920 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d002      	beq.n	800a92e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a92e:	bf00      	nop
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	2000263c 	.word	0x2000263c
 800a940:	20002644 	.word	0x20002644

0800a944 <__errno>:
 800a944:	4b01      	ldr	r3, [pc, #4]	; (800a94c <__errno+0x8>)
 800a946:	6818      	ldr	r0, [r3, #0]
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	2000001c 	.word	0x2000001c

0800a950 <__libc_init_array>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	4d0d      	ldr	r5, [pc, #52]	; (800a988 <__libc_init_array+0x38>)
 800a954:	4c0d      	ldr	r4, [pc, #52]	; (800a98c <__libc_init_array+0x3c>)
 800a956:	1b64      	subs	r4, r4, r5
 800a958:	10a4      	asrs	r4, r4, #2
 800a95a:	2600      	movs	r6, #0
 800a95c:	42a6      	cmp	r6, r4
 800a95e:	d109      	bne.n	800a974 <__libc_init_array+0x24>
 800a960:	4d0b      	ldr	r5, [pc, #44]	; (800a990 <__libc_init_array+0x40>)
 800a962:	4c0c      	ldr	r4, [pc, #48]	; (800a994 <__libc_init_array+0x44>)
 800a964:	f002 fc52 	bl	800d20c <_init>
 800a968:	1b64      	subs	r4, r4, r5
 800a96a:	10a4      	asrs	r4, r4, #2
 800a96c:	2600      	movs	r6, #0
 800a96e:	42a6      	cmp	r6, r4
 800a970:	d105      	bne.n	800a97e <__libc_init_array+0x2e>
 800a972:	bd70      	pop	{r4, r5, r6, pc}
 800a974:	f855 3b04 	ldr.w	r3, [r5], #4
 800a978:	4798      	blx	r3
 800a97a:	3601      	adds	r6, #1
 800a97c:	e7ee      	b.n	800a95c <__libc_init_array+0xc>
 800a97e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a982:	4798      	blx	r3
 800a984:	3601      	adds	r6, #1
 800a986:	e7f2      	b.n	800a96e <__libc_init_array+0x1e>
 800a988:	0800d718 	.word	0x0800d718
 800a98c:	0800d718 	.word	0x0800d718
 800a990:	0800d718 	.word	0x0800d718
 800a994:	0800d71c 	.word	0x0800d71c

0800a998 <__retarget_lock_acquire_recursive>:
 800a998:	4770      	bx	lr

0800a99a <__retarget_lock_release_recursive>:
 800a99a:	4770      	bx	lr

0800a99c <memcpy>:
 800a99c:	440a      	add	r2, r1
 800a99e:	4291      	cmp	r1, r2
 800a9a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9a4:	d100      	bne.n	800a9a8 <memcpy+0xc>
 800a9a6:	4770      	bx	lr
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	d1f9      	bne.n	800a9aa <memcpy+0xe>
 800a9b6:	bd10      	pop	{r4, pc}

0800a9b8 <memset>:
 800a9b8:	4402      	add	r2, r0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d100      	bne.n	800a9c2 <memset+0xa>
 800a9c0:	4770      	bx	lr
 800a9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c6:	e7f9      	b.n	800a9bc <memset+0x4>

0800a9c8 <sbrk_aligned>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	4e0e      	ldr	r6, [pc, #56]	; (800aa04 <sbrk_aligned+0x3c>)
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	6831      	ldr	r1, [r6, #0]
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	b911      	cbnz	r1, 800a9da <sbrk_aligned+0x12>
 800a9d4:	f000 f8f6 	bl	800abc4 <_sbrk_r>
 800a9d8:	6030      	str	r0, [r6, #0]
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f000 f8f1 	bl	800abc4 <_sbrk_r>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	d00a      	beq.n	800a9fc <sbrk_aligned+0x34>
 800a9e6:	1cc4      	adds	r4, r0, #3
 800a9e8:	f024 0403 	bic.w	r4, r4, #3
 800a9ec:	42a0      	cmp	r0, r4
 800a9ee:	d007      	beq.n	800aa00 <sbrk_aligned+0x38>
 800a9f0:	1a21      	subs	r1, r4, r0
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f000 f8e6 	bl	800abc4 <_sbrk_r>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d101      	bne.n	800aa00 <sbrk_aligned+0x38>
 800a9fc:	f04f 34ff 	mov.w	r4, #4294967295
 800aa00:	4620      	mov	r0, r4
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	20002664 	.word	0x20002664

0800aa08 <_malloc_r>:
 800aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0c:	1ccd      	adds	r5, r1, #3
 800aa0e:	f025 0503 	bic.w	r5, r5, #3
 800aa12:	3508      	adds	r5, #8
 800aa14:	2d0c      	cmp	r5, #12
 800aa16:	bf38      	it	cc
 800aa18:	250c      	movcc	r5, #12
 800aa1a:	2d00      	cmp	r5, #0
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	db01      	blt.n	800aa24 <_malloc_r+0x1c>
 800aa20:	42a9      	cmp	r1, r5
 800aa22:	d905      	bls.n	800aa30 <_malloc_r+0x28>
 800aa24:	230c      	movs	r3, #12
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	2600      	movs	r6, #0
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa30:	4e2e      	ldr	r6, [pc, #184]	; (800aaec <_malloc_r+0xe4>)
 800aa32:	f000 f8f7 	bl	800ac24 <__malloc_lock>
 800aa36:	6833      	ldr	r3, [r6, #0]
 800aa38:	461c      	mov	r4, r3
 800aa3a:	bb34      	cbnz	r4, 800aa8a <_malloc_r+0x82>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f7ff ffc2 	bl	800a9c8 <sbrk_aligned>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	4604      	mov	r4, r0
 800aa48:	d14d      	bne.n	800aae6 <_malloc_r+0xde>
 800aa4a:	6834      	ldr	r4, [r6, #0]
 800aa4c:	4626      	mov	r6, r4
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	d140      	bne.n	800aad4 <_malloc_r+0xcc>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	4631      	mov	r1, r6
 800aa56:	4638      	mov	r0, r7
 800aa58:	eb04 0803 	add.w	r8, r4, r3
 800aa5c:	f000 f8b2 	bl	800abc4 <_sbrk_r>
 800aa60:	4580      	cmp	r8, r0
 800aa62:	d13a      	bne.n	800aada <_malloc_r+0xd2>
 800aa64:	6821      	ldr	r1, [r4, #0]
 800aa66:	3503      	adds	r5, #3
 800aa68:	1a6d      	subs	r5, r5, r1
 800aa6a:	f025 0503 	bic.w	r5, r5, #3
 800aa6e:	3508      	adds	r5, #8
 800aa70:	2d0c      	cmp	r5, #12
 800aa72:	bf38      	it	cc
 800aa74:	250c      	movcc	r5, #12
 800aa76:	4629      	mov	r1, r5
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f7ff ffa5 	bl	800a9c8 <sbrk_aligned>
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d02b      	beq.n	800aada <_malloc_r+0xd2>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	442b      	add	r3, r5
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	e00e      	b.n	800aaa8 <_malloc_r+0xa0>
 800aa8a:	6822      	ldr	r2, [r4, #0]
 800aa8c:	1b52      	subs	r2, r2, r5
 800aa8e:	d41e      	bmi.n	800aace <_malloc_r+0xc6>
 800aa90:	2a0b      	cmp	r2, #11
 800aa92:	d916      	bls.n	800aac2 <_malloc_r+0xba>
 800aa94:	1961      	adds	r1, r4, r5
 800aa96:	42a3      	cmp	r3, r4
 800aa98:	6025      	str	r5, [r4, #0]
 800aa9a:	bf18      	it	ne
 800aa9c:	6059      	strne	r1, [r3, #4]
 800aa9e:	6863      	ldr	r3, [r4, #4]
 800aaa0:	bf08      	it	eq
 800aaa2:	6031      	streq	r1, [r6, #0]
 800aaa4:	5162      	str	r2, [r4, r5]
 800aaa6:	604b      	str	r3, [r1, #4]
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	f104 060b 	add.w	r6, r4, #11
 800aaae:	f000 f8bf 	bl	800ac30 <__malloc_unlock>
 800aab2:	f026 0607 	bic.w	r6, r6, #7
 800aab6:	1d23      	adds	r3, r4, #4
 800aab8:	1af2      	subs	r2, r6, r3
 800aaba:	d0b6      	beq.n	800aa2a <_malloc_r+0x22>
 800aabc:	1b9b      	subs	r3, r3, r6
 800aabe:	50a3      	str	r3, [r4, r2]
 800aac0:	e7b3      	b.n	800aa2a <_malloc_r+0x22>
 800aac2:	6862      	ldr	r2, [r4, #4]
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	bf0c      	ite	eq
 800aac8:	6032      	streq	r2, [r6, #0]
 800aaca:	605a      	strne	r2, [r3, #4]
 800aacc:	e7ec      	b.n	800aaa8 <_malloc_r+0xa0>
 800aace:	4623      	mov	r3, r4
 800aad0:	6864      	ldr	r4, [r4, #4]
 800aad2:	e7b2      	b.n	800aa3a <_malloc_r+0x32>
 800aad4:	4634      	mov	r4, r6
 800aad6:	6876      	ldr	r6, [r6, #4]
 800aad8:	e7b9      	b.n	800aa4e <_malloc_r+0x46>
 800aada:	230c      	movs	r3, #12
 800aadc:	603b      	str	r3, [r7, #0]
 800aade:	4638      	mov	r0, r7
 800aae0:	f000 f8a6 	bl	800ac30 <__malloc_unlock>
 800aae4:	e7a1      	b.n	800aa2a <_malloc_r+0x22>
 800aae6:	6025      	str	r5, [r4, #0]
 800aae8:	e7de      	b.n	800aaa8 <_malloc_r+0xa0>
 800aaea:	bf00      	nop
 800aaec:	20002660 	.word	0x20002660

0800aaf0 <cleanup_glue>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	6809      	ldr	r1, [r1, #0]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	b109      	cbz	r1, 800aafe <cleanup_glue+0xe>
 800aafa:	f7ff fff9 	bl	800aaf0 <cleanup_glue>
 800aafe:	4621      	mov	r1, r4
 800ab00:	4628      	mov	r0, r5
 800ab02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab06:	f000 b899 	b.w	800ac3c <_free_r>
	...

0800ab0c <_reclaim_reent>:
 800ab0c:	4b2c      	ldr	r3, [pc, #176]	; (800abc0 <_reclaim_reent+0xb4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4283      	cmp	r3, r0
 800ab12:	b570      	push	{r4, r5, r6, lr}
 800ab14:	4604      	mov	r4, r0
 800ab16:	d051      	beq.n	800abbc <_reclaim_reent+0xb0>
 800ab18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab1a:	b143      	cbz	r3, 800ab2e <_reclaim_reent+0x22>
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d14a      	bne.n	800abb8 <_reclaim_reent+0xac>
 800ab22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab24:	6819      	ldr	r1, [r3, #0]
 800ab26:	b111      	cbz	r1, 800ab2e <_reclaim_reent+0x22>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 f887 	bl	800ac3c <_free_r>
 800ab2e:	6961      	ldr	r1, [r4, #20]
 800ab30:	b111      	cbz	r1, 800ab38 <_reclaim_reent+0x2c>
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 f882 	bl	800ac3c <_free_r>
 800ab38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab3a:	b111      	cbz	r1, 800ab42 <_reclaim_reent+0x36>
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 f87d 	bl	800ac3c <_free_r>
 800ab42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab44:	b111      	cbz	r1, 800ab4c <_reclaim_reent+0x40>
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 f878 	bl	800ac3c <_free_r>
 800ab4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab4e:	b111      	cbz	r1, 800ab56 <_reclaim_reent+0x4a>
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 f873 	bl	800ac3c <_free_r>
 800ab56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab58:	b111      	cbz	r1, 800ab60 <_reclaim_reent+0x54>
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 f86e 	bl	800ac3c <_free_r>
 800ab60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab62:	b111      	cbz	r1, 800ab6a <_reclaim_reent+0x5e>
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 f869 	bl	800ac3c <_free_r>
 800ab6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ab6c:	b111      	cbz	r1, 800ab74 <_reclaim_reent+0x68>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f000 f864 	bl	800ac3c <_free_r>
 800ab74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab76:	b111      	cbz	r1, 800ab7e <_reclaim_reent+0x72>
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 f85f 	bl	800ac3c <_free_r>
 800ab7e:	69a3      	ldr	r3, [r4, #24]
 800ab80:	b1e3      	cbz	r3, 800abbc <_reclaim_reent+0xb0>
 800ab82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab84:	4620      	mov	r0, r4
 800ab86:	4798      	blx	r3
 800ab88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ab8a:	b1b9      	cbz	r1, 800abbc <_reclaim_reent+0xb0>
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab92:	f7ff bfad 	b.w	800aaf0 <cleanup_glue>
 800ab96:	5949      	ldr	r1, [r1, r5]
 800ab98:	b941      	cbnz	r1, 800abac <_reclaim_reent+0xa0>
 800ab9a:	3504      	adds	r5, #4
 800ab9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab9e:	2d80      	cmp	r5, #128	; 0x80
 800aba0:	68d9      	ldr	r1, [r3, #12]
 800aba2:	d1f8      	bne.n	800ab96 <_reclaim_reent+0x8a>
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 f849 	bl	800ac3c <_free_r>
 800abaa:	e7ba      	b.n	800ab22 <_reclaim_reent+0x16>
 800abac:	680e      	ldr	r6, [r1, #0]
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 f844 	bl	800ac3c <_free_r>
 800abb4:	4631      	mov	r1, r6
 800abb6:	e7ef      	b.n	800ab98 <_reclaim_reent+0x8c>
 800abb8:	2500      	movs	r5, #0
 800abba:	e7ef      	b.n	800ab9c <_reclaim_reent+0x90>
 800abbc:	bd70      	pop	{r4, r5, r6, pc}
 800abbe:	bf00      	nop
 800abc0:	2000001c 	.word	0x2000001c

0800abc4 <_sbrk_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4d06      	ldr	r5, [pc, #24]	; (800abe0 <_sbrk_r+0x1c>)
 800abc8:	2300      	movs	r3, #0
 800abca:	4604      	mov	r4, r0
 800abcc:	4608      	mov	r0, r1
 800abce:	602b      	str	r3, [r5, #0]
 800abd0:	f7f7 fbb4 	bl	800233c <_sbrk>
 800abd4:	1c43      	adds	r3, r0, #1
 800abd6:	d102      	bne.n	800abde <_sbrk_r+0x1a>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	b103      	cbz	r3, 800abde <_sbrk_r+0x1a>
 800abdc:	6023      	str	r3, [r4, #0]
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	20002668 	.word	0x20002668

0800abe4 <siprintf>:
 800abe4:	b40e      	push	{r1, r2, r3}
 800abe6:	b500      	push	{lr}
 800abe8:	b09c      	sub	sp, #112	; 0x70
 800abea:	ab1d      	add	r3, sp, #116	; 0x74
 800abec:	9002      	str	r0, [sp, #8]
 800abee:	9006      	str	r0, [sp, #24]
 800abf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abf4:	4809      	ldr	r0, [pc, #36]	; (800ac1c <siprintf+0x38>)
 800abf6:	9107      	str	r1, [sp, #28]
 800abf8:	9104      	str	r1, [sp, #16]
 800abfa:	4909      	ldr	r1, [pc, #36]	; (800ac20 <siprintf+0x3c>)
 800abfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac00:	9105      	str	r1, [sp, #20]
 800ac02:	6800      	ldr	r0, [r0, #0]
 800ac04:	9301      	str	r3, [sp, #4]
 800ac06:	a902      	add	r1, sp, #8
 800ac08:	f000 f8c0 	bl	800ad8c <_svfiprintf_r>
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	b01c      	add	sp, #112	; 0x70
 800ac14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac18:	b003      	add	sp, #12
 800ac1a:	4770      	bx	lr
 800ac1c:	2000001c 	.word	0x2000001c
 800ac20:	ffff0208 	.word	0xffff0208

0800ac24 <__malloc_lock>:
 800ac24:	4801      	ldr	r0, [pc, #4]	; (800ac2c <__malloc_lock+0x8>)
 800ac26:	f7ff beb7 	b.w	800a998 <__retarget_lock_acquire_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	2000265c 	.word	0x2000265c

0800ac30 <__malloc_unlock>:
 800ac30:	4801      	ldr	r0, [pc, #4]	; (800ac38 <__malloc_unlock+0x8>)
 800ac32:	f7ff beb2 	b.w	800a99a <__retarget_lock_release_recursive>
 800ac36:	bf00      	nop
 800ac38:	2000265c 	.word	0x2000265c

0800ac3c <_free_r>:
 800ac3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	d044      	beq.n	800accc <_free_r+0x90>
 800ac42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac46:	9001      	str	r0, [sp, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac4e:	bfb8      	it	lt
 800ac50:	18e4      	addlt	r4, r4, r3
 800ac52:	f7ff ffe7 	bl	800ac24 <__malloc_lock>
 800ac56:	4a1e      	ldr	r2, [pc, #120]	; (800acd0 <_free_r+0x94>)
 800ac58:	9801      	ldr	r0, [sp, #4]
 800ac5a:	6813      	ldr	r3, [r2, #0]
 800ac5c:	b933      	cbnz	r3, 800ac6c <_free_r+0x30>
 800ac5e:	6063      	str	r3, [r4, #4]
 800ac60:	6014      	str	r4, [r2, #0]
 800ac62:	b003      	add	sp, #12
 800ac64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac68:	f7ff bfe2 	b.w	800ac30 <__malloc_unlock>
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	d908      	bls.n	800ac82 <_free_r+0x46>
 800ac70:	6825      	ldr	r5, [r4, #0]
 800ac72:	1961      	adds	r1, r4, r5
 800ac74:	428b      	cmp	r3, r1
 800ac76:	bf01      	itttt	eq
 800ac78:	6819      	ldreq	r1, [r3, #0]
 800ac7a:	685b      	ldreq	r3, [r3, #4]
 800ac7c:	1949      	addeq	r1, r1, r5
 800ac7e:	6021      	streq	r1, [r4, #0]
 800ac80:	e7ed      	b.n	800ac5e <_free_r+0x22>
 800ac82:	461a      	mov	r2, r3
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	b10b      	cbz	r3, 800ac8c <_free_r+0x50>
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	d9fa      	bls.n	800ac82 <_free_r+0x46>
 800ac8c:	6811      	ldr	r1, [r2, #0]
 800ac8e:	1855      	adds	r5, r2, r1
 800ac90:	42a5      	cmp	r5, r4
 800ac92:	d10b      	bne.n	800acac <_free_r+0x70>
 800ac94:	6824      	ldr	r4, [r4, #0]
 800ac96:	4421      	add	r1, r4
 800ac98:	1854      	adds	r4, r2, r1
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	6011      	str	r1, [r2, #0]
 800ac9e:	d1e0      	bne.n	800ac62 <_free_r+0x26>
 800aca0:	681c      	ldr	r4, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	6053      	str	r3, [r2, #4]
 800aca6:	4421      	add	r1, r4
 800aca8:	6011      	str	r1, [r2, #0]
 800acaa:	e7da      	b.n	800ac62 <_free_r+0x26>
 800acac:	d902      	bls.n	800acb4 <_free_r+0x78>
 800acae:	230c      	movs	r3, #12
 800acb0:	6003      	str	r3, [r0, #0]
 800acb2:	e7d6      	b.n	800ac62 <_free_r+0x26>
 800acb4:	6825      	ldr	r5, [r4, #0]
 800acb6:	1961      	adds	r1, r4, r5
 800acb8:	428b      	cmp	r3, r1
 800acba:	bf04      	itt	eq
 800acbc:	6819      	ldreq	r1, [r3, #0]
 800acbe:	685b      	ldreq	r3, [r3, #4]
 800acc0:	6063      	str	r3, [r4, #4]
 800acc2:	bf04      	itt	eq
 800acc4:	1949      	addeq	r1, r1, r5
 800acc6:	6021      	streq	r1, [r4, #0]
 800acc8:	6054      	str	r4, [r2, #4]
 800acca:	e7ca      	b.n	800ac62 <_free_r+0x26>
 800accc:	b003      	add	sp, #12
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	20002660 	.word	0x20002660

0800acd4 <__ssputs_r>:
 800acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	688e      	ldr	r6, [r1, #8]
 800acda:	429e      	cmp	r6, r3
 800acdc:	4682      	mov	sl, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	4690      	mov	r8, r2
 800ace2:	461f      	mov	r7, r3
 800ace4:	d838      	bhi.n	800ad58 <__ssputs_r+0x84>
 800ace6:	898a      	ldrh	r2, [r1, #12]
 800ace8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acec:	d032      	beq.n	800ad54 <__ssputs_r+0x80>
 800acee:	6825      	ldr	r5, [r4, #0]
 800acf0:	6909      	ldr	r1, [r1, #16]
 800acf2:	eba5 0901 	sub.w	r9, r5, r1
 800acf6:	6965      	ldr	r5, [r4, #20]
 800acf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad00:	3301      	adds	r3, #1
 800ad02:	444b      	add	r3, r9
 800ad04:	106d      	asrs	r5, r5, #1
 800ad06:	429d      	cmp	r5, r3
 800ad08:	bf38      	it	cc
 800ad0a:	461d      	movcc	r5, r3
 800ad0c:	0553      	lsls	r3, r2, #21
 800ad0e:	d531      	bpl.n	800ad74 <__ssputs_r+0xa0>
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7ff fe79 	bl	800aa08 <_malloc_r>
 800ad16:	4606      	mov	r6, r0
 800ad18:	b950      	cbnz	r0, 800ad30 <__ssputs_r+0x5c>
 800ad1a:	230c      	movs	r3, #12
 800ad1c:	f8ca 3000 	str.w	r3, [sl]
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad30:	6921      	ldr	r1, [r4, #16]
 800ad32:	464a      	mov	r2, r9
 800ad34:	f7ff fe32 	bl	800a99c <memcpy>
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad42:	81a3      	strh	r3, [r4, #12]
 800ad44:	6126      	str	r6, [r4, #16]
 800ad46:	6165      	str	r5, [r4, #20]
 800ad48:	444e      	add	r6, r9
 800ad4a:	eba5 0509 	sub.w	r5, r5, r9
 800ad4e:	6026      	str	r6, [r4, #0]
 800ad50:	60a5      	str	r5, [r4, #8]
 800ad52:	463e      	mov	r6, r7
 800ad54:	42be      	cmp	r6, r7
 800ad56:	d900      	bls.n	800ad5a <__ssputs_r+0x86>
 800ad58:	463e      	mov	r6, r7
 800ad5a:	6820      	ldr	r0, [r4, #0]
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	4641      	mov	r1, r8
 800ad60:	f000 faa8 	bl	800b2b4 <memmove>
 800ad64:	68a3      	ldr	r3, [r4, #8]
 800ad66:	1b9b      	subs	r3, r3, r6
 800ad68:	60a3      	str	r3, [r4, #8]
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	4433      	add	r3, r6
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	2000      	movs	r0, #0
 800ad72:	e7db      	b.n	800ad2c <__ssputs_r+0x58>
 800ad74:	462a      	mov	r2, r5
 800ad76:	f000 fab7 	bl	800b2e8 <_realloc_r>
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d1e1      	bne.n	800ad44 <__ssputs_r+0x70>
 800ad80:	6921      	ldr	r1, [r4, #16]
 800ad82:	4650      	mov	r0, sl
 800ad84:	f7ff ff5a 	bl	800ac3c <_free_r>
 800ad88:	e7c7      	b.n	800ad1a <__ssputs_r+0x46>
	...

0800ad8c <_svfiprintf_r>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	4698      	mov	r8, r3
 800ad92:	898b      	ldrh	r3, [r1, #12]
 800ad94:	061b      	lsls	r3, r3, #24
 800ad96:	b09d      	sub	sp, #116	; 0x74
 800ad98:	4607      	mov	r7, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	4614      	mov	r4, r2
 800ad9e:	d50e      	bpl.n	800adbe <_svfiprintf_r+0x32>
 800ada0:	690b      	ldr	r3, [r1, #16]
 800ada2:	b963      	cbnz	r3, 800adbe <_svfiprintf_r+0x32>
 800ada4:	2140      	movs	r1, #64	; 0x40
 800ada6:	f7ff fe2f 	bl	800aa08 <_malloc_r>
 800adaa:	6028      	str	r0, [r5, #0]
 800adac:	6128      	str	r0, [r5, #16]
 800adae:	b920      	cbnz	r0, 800adba <_svfiprintf_r+0x2e>
 800adb0:	230c      	movs	r3, #12
 800adb2:	603b      	str	r3, [r7, #0]
 800adb4:	f04f 30ff 	mov.w	r0, #4294967295
 800adb8:	e0d1      	b.n	800af5e <_svfiprintf_r+0x1d2>
 800adba:	2340      	movs	r3, #64	; 0x40
 800adbc:	616b      	str	r3, [r5, #20]
 800adbe:	2300      	movs	r3, #0
 800adc0:	9309      	str	r3, [sp, #36]	; 0x24
 800adc2:	2320      	movs	r3, #32
 800adc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800adcc:	2330      	movs	r3, #48	; 0x30
 800adce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af78 <_svfiprintf_r+0x1ec>
 800add2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800add6:	f04f 0901 	mov.w	r9, #1
 800adda:	4623      	mov	r3, r4
 800addc:	469a      	mov	sl, r3
 800adde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade2:	b10a      	cbz	r2, 800ade8 <_svfiprintf_r+0x5c>
 800ade4:	2a25      	cmp	r2, #37	; 0x25
 800ade6:	d1f9      	bne.n	800addc <_svfiprintf_r+0x50>
 800ade8:	ebba 0b04 	subs.w	fp, sl, r4
 800adec:	d00b      	beq.n	800ae06 <_svfiprintf_r+0x7a>
 800adee:	465b      	mov	r3, fp
 800adf0:	4622      	mov	r2, r4
 800adf2:	4629      	mov	r1, r5
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff ff6d 	bl	800acd4 <__ssputs_r>
 800adfa:	3001      	adds	r0, #1
 800adfc:	f000 80aa 	beq.w	800af54 <_svfiprintf_r+0x1c8>
 800ae00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae02:	445a      	add	r2, fp
 800ae04:	9209      	str	r2, [sp, #36]	; 0x24
 800ae06:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 80a2 	beq.w	800af54 <_svfiprintf_r+0x1c8>
 800ae10:	2300      	movs	r3, #0
 800ae12:	f04f 32ff 	mov.w	r2, #4294967295
 800ae16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae1a:	f10a 0a01 	add.w	sl, sl, #1
 800ae1e:	9304      	str	r3, [sp, #16]
 800ae20:	9307      	str	r3, [sp, #28]
 800ae22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae26:	931a      	str	r3, [sp, #104]	; 0x68
 800ae28:	4654      	mov	r4, sl
 800ae2a:	2205      	movs	r2, #5
 800ae2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae30:	4851      	ldr	r0, [pc, #324]	; (800af78 <_svfiprintf_r+0x1ec>)
 800ae32:	f7f5 f9f5 	bl	8000220 <memchr>
 800ae36:	9a04      	ldr	r2, [sp, #16]
 800ae38:	b9d8      	cbnz	r0, 800ae72 <_svfiprintf_r+0xe6>
 800ae3a:	06d0      	lsls	r0, r2, #27
 800ae3c:	bf44      	itt	mi
 800ae3e:	2320      	movmi	r3, #32
 800ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae44:	0711      	lsls	r1, r2, #28
 800ae46:	bf44      	itt	mi
 800ae48:	232b      	movmi	r3, #43	; 0x2b
 800ae4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae52:	2b2a      	cmp	r3, #42	; 0x2a
 800ae54:	d015      	beq.n	800ae82 <_svfiprintf_r+0xf6>
 800ae56:	9a07      	ldr	r2, [sp, #28]
 800ae58:	4654      	mov	r4, sl
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	f04f 0c0a 	mov.w	ip, #10
 800ae60:	4621      	mov	r1, r4
 800ae62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae66:	3b30      	subs	r3, #48	; 0x30
 800ae68:	2b09      	cmp	r3, #9
 800ae6a:	d94e      	bls.n	800af0a <_svfiprintf_r+0x17e>
 800ae6c:	b1b0      	cbz	r0, 800ae9c <_svfiprintf_r+0x110>
 800ae6e:	9207      	str	r2, [sp, #28]
 800ae70:	e014      	b.n	800ae9c <_svfiprintf_r+0x110>
 800ae72:	eba0 0308 	sub.w	r3, r0, r8
 800ae76:	fa09 f303 	lsl.w	r3, r9, r3
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	46a2      	mov	sl, r4
 800ae80:	e7d2      	b.n	800ae28 <_svfiprintf_r+0x9c>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	1d19      	adds	r1, r3, #4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	9103      	str	r1, [sp, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	bfbb      	ittet	lt
 800ae8e:	425b      	neglt	r3, r3
 800ae90:	f042 0202 	orrlt.w	r2, r2, #2
 800ae94:	9307      	strge	r3, [sp, #28]
 800ae96:	9307      	strlt	r3, [sp, #28]
 800ae98:	bfb8      	it	lt
 800ae9a:	9204      	strlt	r2, [sp, #16]
 800ae9c:	7823      	ldrb	r3, [r4, #0]
 800ae9e:	2b2e      	cmp	r3, #46	; 0x2e
 800aea0:	d10c      	bne.n	800aebc <_svfiprintf_r+0x130>
 800aea2:	7863      	ldrb	r3, [r4, #1]
 800aea4:	2b2a      	cmp	r3, #42	; 0x2a
 800aea6:	d135      	bne.n	800af14 <_svfiprintf_r+0x188>
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	1d1a      	adds	r2, r3, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	9203      	str	r2, [sp, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	bfb8      	it	lt
 800aeb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeb8:	3402      	adds	r4, #2
 800aeba:	9305      	str	r3, [sp, #20]
 800aebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af88 <_svfiprintf_r+0x1fc>
 800aec0:	7821      	ldrb	r1, [r4, #0]
 800aec2:	2203      	movs	r2, #3
 800aec4:	4650      	mov	r0, sl
 800aec6:	f7f5 f9ab 	bl	8000220 <memchr>
 800aeca:	b140      	cbz	r0, 800aede <_svfiprintf_r+0x152>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	eba0 000a 	sub.w	r0, r0, sl
 800aed2:	fa03 f000 	lsl.w	r0, r3, r0
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	4303      	orrs	r3, r0
 800aeda:	3401      	adds	r4, #1
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee2:	4826      	ldr	r0, [pc, #152]	; (800af7c <_svfiprintf_r+0x1f0>)
 800aee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aee8:	2206      	movs	r2, #6
 800aeea:	f7f5 f999 	bl	8000220 <memchr>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d038      	beq.n	800af64 <_svfiprintf_r+0x1d8>
 800aef2:	4b23      	ldr	r3, [pc, #140]	; (800af80 <_svfiprintf_r+0x1f4>)
 800aef4:	bb1b      	cbnz	r3, 800af3e <_svfiprintf_r+0x1b2>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	3307      	adds	r3, #7
 800aefa:	f023 0307 	bic.w	r3, r3, #7
 800aefe:	3308      	adds	r3, #8
 800af00:	9303      	str	r3, [sp, #12]
 800af02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af04:	4433      	add	r3, r6
 800af06:	9309      	str	r3, [sp, #36]	; 0x24
 800af08:	e767      	b.n	800adda <_svfiprintf_r+0x4e>
 800af0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0e:	460c      	mov	r4, r1
 800af10:	2001      	movs	r0, #1
 800af12:	e7a5      	b.n	800ae60 <_svfiprintf_r+0xd4>
 800af14:	2300      	movs	r3, #0
 800af16:	3401      	adds	r4, #1
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	4619      	mov	r1, r3
 800af1c:	f04f 0c0a 	mov.w	ip, #10
 800af20:	4620      	mov	r0, r4
 800af22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af26:	3a30      	subs	r2, #48	; 0x30
 800af28:	2a09      	cmp	r2, #9
 800af2a:	d903      	bls.n	800af34 <_svfiprintf_r+0x1a8>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0c5      	beq.n	800aebc <_svfiprintf_r+0x130>
 800af30:	9105      	str	r1, [sp, #20]
 800af32:	e7c3      	b.n	800aebc <_svfiprintf_r+0x130>
 800af34:	fb0c 2101 	mla	r1, ip, r1, r2
 800af38:	4604      	mov	r4, r0
 800af3a:	2301      	movs	r3, #1
 800af3c:	e7f0      	b.n	800af20 <_svfiprintf_r+0x194>
 800af3e:	ab03      	add	r3, sp, #12
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	462a      	mov	r2, r5
 800af44:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <_svfiprintf_r+0x1f8>)
 800af46:	a904      	add	r1, sp, #16
 800af48:	4638      	mov	r0, r7
 800af4a:	f3af 8000 	nop.w
 800af4e:	1c42      	adds	r2, r0, #1
 800af50:	4606      	mov	r6, r0
 800af52:	d1d6      	bne.n	800af02 <_svfiprintf_r+0x176>
 800af54:	89ab      	ldrh	r3, [r5, #12]
 800af56:	065b      	lsls	r3, r3, #25
 800af58:	f53f af2c 	bmi.w	800adb4 <_svfiprintf_r+0x28>
 800af5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5e:	b01d      	add	sp, #116	; 0x74
 800af60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af64:	ab03      	add	r3, sp, #12
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	462a      	mov	r2, r5
 800af6a:	4b06      	ldr	r3, [pc, #24]	; (800af84 <_svfiprintf_r+0x1f8>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	4638      	mov	r0, r7
 800af70:	f000 f87a 	bl	800b068 <_printf_i>
 800af74:	e7eb      	b.n	800af4e <_svfiprintf_r+0x1c2>
 800af76:	bf00      	nop
 800af78:	0800d4d0 	.word	0x0800d4d0
 800af7c:	0800d4da 	.word	0x0800d4da
 800af80:	00000000 	.word	0x00000000
 800af84:	0800acd5 	.word	0x0800acd5
 800af88:	0800d4d6 	.word	0x0800d4d6

0800af8c <_printf_common>:
 800af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af90:	4616      	mov	r6, r2
 800af92:	4699      	mov	r9, r3
 800af94:	688a      	ldr	r2, [r1, #8]
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	bfb8      	it	lt
 800afa0:	4613      	movlt	r3, r2
 800afa2:	6033      	str	r3, [r6, #0]
 800afa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afa8:	4607      	mov	r7, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b10a      	cbz	r2, 800afb2 <_printf_common+0x26>
 800afae:	3301      	adds	r3, #1
 800afb0:	6033      	str	r3, [r6, #0]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	0699      	lsls	r1, r3, #26
 800afb6:	bf42      	ittt	mi
 800afb8:	6833      	ldrmi	r3, [r6, #0]
 800afba:	3302      	addmi	r3, #2
 800afbc:	6033      	strmi	r3, [r6, #0]
 800afbe:	6825      	ldr	r5, [r4, #0]
 800afc0:	f015 0506 	ands.w	r5, r5, #6
 800afc4:	d106      	bne.n	800afd4 <_printf_common+0x48>
 800afc6:	f104 0a19 	add.w	sl, r4, #25
 800afca:	68e3      	ldr	r3, [r4, #12]
 800afcc:	6832      	ldr	r2, [r6, #0]
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	42ab      	cmp	r3, r5
 800afd2:	dc26      	bgt.n	800b022 <_printf_common+0x96>
 800afd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afd8:	1e13      	subs	r3, r2, #0
 800afda:	6822      	ldr	r2, [r4, #0]
 800afdc:	bf18      	it	ne
 800afde:	2301      	movne	r3, #1
 800afe0:	0692      	lsls	r2, r2, #26
 800afe2:	d42b      	bmi.n	800b03c <_printf_common+0xb0>
 800afe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afe8:	4649      	mov	r1, r9
 800afea:	4638      	mov	r0, r7
 800afec:	47c0      	blx	r8
 800afee:	3001      	adds	r0, #1
 800aff0:	d01e      	beq.n	800b030 <_printf_common+0xa4>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	68e5      	ldr	r5, [r4, #12]
 800aff6:	6832      	ldr	r2, [r6, #0]
 800aff8:	f003 0306 	and.w	r3, r3, #6
 800affc:	2b04      	cmp	r3, #4
 800affe:	bf08      	it	eq
 800b000:	1aad      	subeq	r5, r5, r2
 800b002:	68a3      	ldr	r3, [r4, #8]
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	bf0c      	ite	eq
 800b008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b00c:	2500      	movne	r5, #0
 800b00e:	4293      	cmp	r3, r2
 800b010:	bfc4      	itt	gt
 800b012:	1a9b      	subgt	r3, r3, r2
 800b014:	18ed      	addgt	r5, r5, r3
 800b016:	2600      	movs	r6, #0
 800b018:	341a      	adds	r4, #26
 800b01a:	42b5      	cmp	r5, r6
 800b01c:	d11a      	bne.n	800b054 <_printf_common+0xc8>
 800b01e:	2000      	movs	r0, #0
 800b020:	e008      	b.n	800b034 <_printf_common+0xa8>
 800b022:	2301      	movs	r3, #1
 800b024:	4652      	mov	r2, sl
 800b026:	4649      	mov	r1, r9
 800b028:	4638      	mov	r0, r7
 800b02a:	47c0      	blx	r8
 800b02c:	3001      	adds	r0, #1
 800b02e:	d103      	bne.n	800b038 <_printf_common+0xac>
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b038:	3501      	adds	r5, #1
 800b03a:	e7c6      	b.n	800afca <_printf_common+0x3e>
 800b03c:	18e1      	adds	r1, r4, r3
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	2030      	movs	r0, #48	; 0x30
 800b042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b046:	4422      	add	r2, r4
 800b048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b04c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b050:	3302      	adds	r3, #2
 800b052:	e7c7      	b.n	800afe4 <_printf_common+0x58>
 800b054:	2301      	movs	r3, #1
 800b056:	4622      	mov	r2, r4
 800b058:	4649      	mov	r1, r9
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c0      	blx	r8
 800b05e:	3001      	adds	r0, #1
 800b060:	d0e6      	beq.n	800b030 <_printf_common+0xa4>
 800b062:	3601      	adds	r6, #1
 800b064:	e7d9      	b.n	800b01a <_printf_common+0x8e>
	...

0800b068 <_printf_i>:
 800b068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	7e0f      	ldrb	r7, [r1, #24]
 800b06e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b070:	2f78      	cmp	r7, #120	; 0x78
 800b072:	4691      	mov	r9, r2
 800b074:	4680      	mov	r8, r0
 800b076:	460c      	mov	r4, r1
 800b078:	469a      	mov	sl, r3
 800b07a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b07e:	d807      	bhi.n	800b090 <_printf_i+0x28>
 800b080:	2f62      	cmp	r7, #98	; 0x62
 800b082:	d80a      	bhi.n	800b09a <_printf_i+0x32>
 800b084:	2f00      	cmp	r7, #0
 800b086:	f000 80d8 	beq.w	800b23a <_printf_i+0x1d2>
 800b08a:	2f58      	cmp	r7, #88	; 0x58
 800b08c:	f000 80a3 	beq.w	800b1d6 <_printf_i+0x16e>
 800b090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b098:	e03a      	b.n	800b110 <_printf_i+0xa8>
 800b09a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b09e:	2b15      	cmp	r3, #21
 800b0a0:	d8f6      	bhi.n	800b090 <_printf_i+0x28>
 800b0a2:	a101      	add	r1, pc, #4	; (adr r1, 800b0a8 <_printf_i+0x40>)
 800b0a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b091 	.word	0x0800b091
 800b0b4:	0800b091 	.word	0x0800b091
 800b0b8:	0800b091 	.word	0x0800b091
 800b0bc:	0800b091 	.word	0x0800b091
 800b0c0:	0800b115 	.word	0x0800b115
 800b0c4:	0800b091 	.word	0x0800b091
 800b0c8:	0800b091 	.word	0x0800b091
 800b0cc:	0800b091 	.word	0x0800b091
 800b0d0:	0800b091 	.word	0x0800b091
 800b0d4:	0800b221 	.word	0x0800b221
 800b0d8:	0800b145 	.word	0x0800b145
 800b0dc:	0800b203 	.word	0x0800b203
 800b0e0:	0800b091 	.word	0x0800b091
 800b0e4:	0800b091 	.word	0x0800b091
 800b0e8:	0800b243 	.word	0x0800b243
 800b0ec:	0800b091 	.word	0x0800b091
 800b0f0:	0800b145 	.word	0x0800b145
 800b0f4:	0800b091 	.word	0x0800b091
 800b0f8:	0800b091 	.word	0x0800b091
 800b0fc:	0800b20b 	.word	0x0800b20b
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	602a      	str	r2, [r5, #0]
 800b108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b10c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b110:	2301      	movs	r3, #1
 800b112:	e0a3      	b.n	800b25c <_printf_i+0x1f4>
 800b114:	6820      	ldr	r0, [r4, #0]
 800b116:	6829      	ldr	r1, [r5, #0]
 800b118:	0606      	lsls	r6, r0, #24
 800b11a:	f101 0304 	add.w	r3, r1, #4
 800b11e:	d50a      	bpl.n	800b136 <_printf_i+0xce>
 800b120:	680e      	ldr	r6, [r1, #0]
 800b122:	602b      	str	r3, [r5, #0]
 800b124:	2e00      	cmp	r6, #0
 800b126:	da03      	bge.n	800b130 <_printf_i+0xc8>
 800b128:	232d      	movs	r3, #45	; 0x2d
 800b12a:	4276      	negs	r6, r6
 800b12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b130:	485e      	ldr	r0, [pc, #376]	; (800b2ac <_printf_i+0x244>)
 800b132:	230a      	movs	r3, #10
 800b134:	e019      	b.n	800b16a <_printf_i+0x102>
 800b136:	680e      	ldr	r6, [r1, #0]
 800b138:	602b      	str	r3, [r5, #0]
 800b13a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b13e:	bf18      	it	ne
 800b140:	b236      	sxthne	r6, r6
 800b142:	e7ef      	b.n	800b124 <_printf_i+0xbc>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	6820      	ldr	r0, [r4, #0]
 800b148:	1d19      	adds	r1, r3, #4
 800b14a:	6029      	str	r1, [r5, #0]
 800b14c:	0601      	lsls	r1, r0, #24
 800b14e:	d501      	bpl.n	800b154 <_printf_i+0xec>
 800b150:	681e      	ldr	r6, [r3, #0]
 800b152:	e002      	b.n	800b15a <_printf_i+0xf2>
 800b154:	0646      	lsls	r6, r0, #25
 800b156:	d5fb      	bpl.n	800b150 <_printf_i+0xe8>
 800b158:	881e      	ldrh	r6, [r3, #0]
 800b15a:	4854      	ldr	r0, [pc, #336]	; (800b2ac <_printf_i+0x244>)
 800b15c:	2f6f      	cmp	r7, #111	; 0x6f
 800b15e:	bf0c      	ite	eq
 800b160:	2308      	moveq	r3, #8
 800b162:	230a      	movne	r3, #10
 800b164:	2100      	movs	r1, #0
 800b166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b16a:	6865      	ldr	r5, [r4, #4]
 800b16c:	60a5      	str	r5, [r4, #8]
 800b16e:	2d00      	cmp	r5, #0
 800b170:	bfa2      	ittt	ge
 800b172:	6821      	ldrge	r1, [r4, #0]
 800b174:	f021 0104 	bicge.w	r1, r1, #4
 800b178:	6021      	strge	r1, [r4, #0]
 800b17a:	b90e      	cbnz	r6, 800b180 <_printf_i+0x118>
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	d04d      	beq.n	800b21c <_printf_i+0x1b4>
 800b180:	4615      	mov	r5, r2
 800b182:	fbb6 f1f3 	udiv	r1, r6, r3
 800b186:	fb03 6711 	mls	r7, r3, r1, r6
 800b18a:	5dc7      	ldrb	r7, [r0, r7]
 800b18c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b190:	4637      	mov	r7, r6
 800b192:	42bb      	cmp	r3, r7
 800b194:	460e      	mov	r6, r1
 800b196:	d9f4      	bls.n	800b182 <_printf_i+0x11a>
 800b198:	2b08      	cmp	r3, #8
 800b19a:	d10b      	bne.n	800b1b4 <_printf_i+0x14c>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	07de      	lsls	r6, r3, #31
 800b1a0:	d508      	bpl.n	800b1b4 <_printf_i+0x14c>
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	6861      	ldr	r1, [r4, #4]
 800b1a6:	4299      	cmp	r1, r3
 800b1a8:	bfde      	ittt	le
 800b1aa:	2330      	movle	r3, #48	; 0x30
 800b1ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1b4:	1b52      	subs	r2, r2, r5
 800b1b6:	6122      	str	r2, [r4, #16]
 800b1b8:	f8cd a000 	str.w	sl, [sp]
 800b1bc:	464b      	mov	r3, r9
 800b1be:	aa03      	add	r2, sp, #12
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	f7ff fee2 	bl	800af8c <_printf_common>
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	d14c      	bne.n	800b266 <_printf_i+0x1fe>
 800b1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d0:	b004      	add	sp, #16
 800b1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d6:	4835      	ldr	r0, [pc, #212]	; (800b2ac <_printf_i+0x244>)
 800b1d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1dc:	6829      	ldr	r1, [r5, #0]
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1e4:	6029      	str	r1, [r5, #0]
 800b1e6:	061d      	lsls	r5, r3, #24
 800b1e8:	d514      	bpl.n	800b214 <_printf_i+0x1ac>
 800b1ea:	07df      	lsls	r7, r3, #31
 800b1ec:	bf44      	itt	mi
 800b1ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b1f2:	6023      	strmi	r3, [r4, #0]
 800b1f4:	b91e      	cbnz	r6, 800b1fe <_printf_i+0x196>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	f023 0320 	bic.w	r3, r3, #32
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	2310      	movs	r3, #16
 800b200:	e7b0      	b.n	800b164 <_printf_i+0xfc>
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	f043 0320 	orr.w	r3, r3, #32
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	2378      	movs	r3, #120	; 0x78
 800b20c:	4828      	ldr	r0, [pc, #160]	; (800b2b0 <_printf_i+0x248>)
 800b20e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b212:	e7e3      	b.n	800b1dc <_printf_i+0x174>
 800b214:	0659      	lsls	r1, r3, #25
 800b216:	bf48      	it	mi
 800b218:	b2b6      	uxthmi	r6, r6
 800b21a:	e7e6      	b.n	800b1ea <_printf_i+0x182>
 800b21c:	4615      	mov	r5, r2
 800b21e:	e7bb      	b.n	800b198 <_printf_i+0x130>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	6826      	ldr	r6, [r4, #0]
 800b224:	6961      	ldr	r1, [r4, #20]
 800b226:	1d18      	adds	r0, r3, #4
 800b228:	6028      	str	r0, [r5, #0]
 800b22a:	0635      	lsls	r5, r6, #24
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	d501      	bpl.n	800b234 <_printf_i+0x1cc>
 800b230:	6019      	str	r1, [r3, #0]
 800b232:	e002      	b.n	800b23a <_printf_i+0x1d2>
 800b234:	0670      	lsls	r0, r6, #25
 800b236:	d5fb      	bpl.n	800b230 <_printf_i+0x1c8>
 800b238:	8019      	strh	r1, [r3, #0]
 800b23a:	2300      	movs	r3, #0
 800b23c:	6123      	str	r3, [r4, #16]
 800b23e:	4615      	mov	r5, r2
 800b240:	e7ba      	b.n	800b1b8 <_printf_i+0x150>
 800b242:	682b      	ldr	r3, [r5, #0]
 800b244:	1d1a      	adds	r2, r3, #4
 800b246:	602a      	str	r2, [r5, #0]
 800b248:	681d      	ldr	r5, [r3, #0]
 800b24a:	6862      	ldr	r2, [r4, #4]
 800b24c:	2100      	movs	r1, #0
 800b24e:	4628      	mov	r0, r5
 800b250:	f7f4 ffe6 	bl	8000220 <memchr>
 800b254:	b108      	cbz	r0, 800b25a <_printf_i+0x1f2>
 800b256:	1b40      	subs	r0, r0, r5
 800b258:	6060      	str	r0, [r4, #4]
 800b25a:	6863      	ldr	r3, [r4, #4]
 800b25c:	6123      	str	r3, [r4, #16]
 800b25e:	2300      	movs	r3, #0
 800b260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b264:	e7a8      	b.n	800b1b8 <_printf_i+0x150>
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	462a      	mov	r2, r5
 800b26a:	4649      	mov	r1, r9
 800b26c:	4640      	mov	r0, r8
 800b26e:	47d0      	blx	sl
 800b270:	3001      	adds	r0, #1
 800b272:	d0ab      	beq.n	800b1cc <_printf_i+0x164>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	079b      	lsls	r3, r3, #30
 800b278:	d413      	bmi.n	800b2a2 <_printf_i+0x23a>
 800b27a:	68e0      	ldr	r0, [r4, #12]
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	4298      	cmp	r0, r3
 800b280:	bfb8      	it	lt
 800b282:	4618      	movlt	r0, r3
 800b284:	e7a4      	b.n	800b1d0 <_printf_i+0x168>
 800b286:	2301      	movs	r3, #1
 800b288:	4632      	mov	r2, r6
 800b28a:	4649      	mov	r1, r9
 800b28c:	4640      	mov	r0, r8
 800b28e:	47d0      	blx	sl
 800b290:	3001      	adds	r0, #1
 800b292:	d09b      	beq.n	800b1cc <_printf_i+0x164>
 800b294:	3501      	adds	r5, #1
 800b296:	68e3      	ldr	r3, [r4, #12]
 800b298:	9903      	ldr	r1, [sp, #12]
 800b29a:	1a5b      	subs	r3, r3, r1
 800b29c:	42ab      	cmp	r3, r5
 800b29e:	dcf2      	bgt.n	800b286 <_printf_i+0x21e>
 800b2a0:	e7eb      	b.n	800b27a <_printf_i+0x212>
 800b2a2:	2500      	movs	r5, #0
 800b2a4:	f104 0619 	add.w	r6, r4, #25
 800b2a8:	e7f5      	b.n	800b296 <_printf_i+0x22e>
 800b2aa:	bf00      	nop
 800b2ac:	0800d4e1 	.word	0x0800d4e1
 800b2b0:	0800d4f2 	.word	0x0800d4f2

0800b2b4 <memmove>:
 800b2b4:	4288      	cmp	r0, r1
 800b2b6:	b510      	push	{r4, lr}
 800b2b8:	eb01 0402 	add.w	r4, r1, r2
 800b2bc:	d902      	bls.n	800b2c4 <memmove+0x10>
 800b2be:	4284      	cmp	r4, r0
 800b2c0:	4623      	mov	r3, r4
 800b2c2:	d807      	bhi.n	800b2d4 <memmove+0x20>
 800b2c4:	1e43      	subs	r3, r0, #1
 800b2c6:	42a1      	cmp	r1, r4
 800b2c8:	d008      	beq.n	800b2dc <memmove+0x28>
 800b2ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2d2:	e7f8      	b.n	800b2c6 <memmove+0x12>
 800b2d4:	4402      	add	r2, r0
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	428a      	cmp	r2, r1
 800b2da:	d100      	bne.n	800b2de <memmove+0x2a>
 800b2dc:	bd10      	pop	{r4, pc}
 800b2de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2e6:	e7f7      	b.n	800b2d8 <memmove+0x24>

0800b2e8 <_realloc_r>:
 800b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ec:	4680      	mov	r8, r0
 800b2ee:	4614      	mov	r4, r2
 800b2f0:	460e      	mov	r6, r1
 800b2f2:	b921      	cbnz	r1, 800b2fe <_realloc_r+0x16>
 800b2f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	f7ff bb85 	b.w	800aa08 <_malloc_r>
 800b2fe:	b92a      	cbnz	r2, 800b30c <_realloc_r+0x24>
 800b300:	f7ff fc9c 	bl	800ac3c <_free_r>
 800b304:	4625      	mov	r5, r4
 800b306:	4628      	mov	r0, r5
 800b308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b30c:	f000 f81b 	bl	800b346 <_malloc_usable_size_r>
 800b310:	4284      	cmp	r4, r0
 800b312:	4607      	mov	r7, r0
 800b314:	d802      	bhi.n	800b31c <_realloc_r+0x34>
 800b316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b31a:	d812      	bhi.n	800b342 <_realloc_r+0x5a>
 800b31c:	4621      	mov	r1, r4
 800b31e:	4640      	mov	r0, r8
 800b320:	f7ff fb72 	bl	800aa08 <_malloc_r>
 800b324:	4605      	mov	r5, r0
 800b326:	2800      	cmp	r0, #0
 800b328:	d0ed      	beq.n	800b306 <_realloc_r+0x1e>
 800b32a:	42bc      	cmp	r4, r7
 800b32c:	4622      	mov	r2, r4
 800b32e:	4631      	mov	r1, r6
 800b330:	bf28      	it	cs
 800b332:	463a      	movcs	r2, r7
 800b334:	f7ff fb32 	bl	800a99c <memcpy>
 800b338:	4631      	mov	r1, r6
 800b33a:	4640      	mov	r0, r8
 800b33c:	f7ff fc7e 	bl	800ac3c <_free_r>
 800b340:	e7e1      	b.n	800b306 <_realloc_r+0x1e>
 800b342:	4635      	mov	r5, r6
 800b344:	e7df      	b.n	800b306 <_realloc_r+0x1e>

0800b346 <_malloc_usable_size_r>:
 800b346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b34a:	1f18      	subs	r0, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	bfbc      	itt	lt
 800b350:	580b      	ldrlt	r3, [r1, r0]
 800b352:	18c0      	addlt	r0, r0, r3
 800b354:	4770      	bx	lr
	...

0800b358 <cos>:
 800b358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b35a:	ec53 2b10 	vmov	r2, r3, d0
 800b35e:	4826      	ldr	r0, [pc, #152]	; (800b3f8 <cos+0xa0>)
 800b360:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b364:	4281      	cmp	r1, r0
 800b366:	dc06      	bgt.n	800b376 <cos+0x1e>
 800b368:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b3f0 <cos+0x98>
 800b36c:	b005      	add	sp, #20
 800b36e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b372:	f001 b929 	b.w	800c5c8 <__kernel_cos>
 800b376:	4821      	ldr	r0, [pc, #132]	; (800b3fc <cos+0xa4>)
 800b378:	4281      	cmp	r1, r0
 800b37a:	dd09      	ble.n	800b390 <cos+0x38>
 800b37c:	ee10 0a10 	vmov	r0, s0
 800b380:	4619      	mov	r1, r3
 800b382:	f7f4 ffa1 	bl	80002c8 <__aeabi_dsub>
 800b386:	ec41 0b10 	vmov	d0, r0, r1
 800b38a:	b005      	add	sp, #20
 800b38c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b390:	4668      	mov	r0, sp
 800b392:	f000 fe59 	bl	800c048 <__ieee754_rem_pio2>
 800b396:	f000 0003 	and.w	r0, r0, #3
 800b39a:	2801      	cmp	r0, #1
 800b39c:	d00b      	beq.n	800b3b6 <cos+0x5e>
 800b39e:	2802      	cmp	r0, #2
 800b3a0:	d016      	beq.n	800b3d0 <cos+0x78>
 800b3a2:	b9e0      	cbnz	r0, 800b3de <cos+0x86>
 800b3a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3a8:	ed9d 0b00 	vldr	d0, [sp]
 800b3ac:	f001 f90c 	bl	800c5c8 <__kernel_cos>
 800b3b0:	ec51 0b10 	vmov	r0, r1, d0
 800b3b4:	e7e7      	b.n	800b386 <cos+0x2e>
 800b3b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3ba:	ed9d 0b00 	vldr	d0, [sp]
 800b3be:	f001 fd1b 	bl	800cdf8 <__kernel_sin>
 800b3c2:	ec53 2b10 	vmov	r2, r3, d0
 800b3c6:	ee10 0a10 	vmov	r0, s0
 800b3ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3ce:	e7da      	b.n	800b386 <cos+0x2e>
 800b3d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3d4:	ed9d 0b00 	vldr	d0, [sp]
 800b3d8:	f001 f8f6 	bl	800c5c8 <__kernel_cos>
 800b3dc:	e7f1      	b.n	800b3c2 <cos+0x6a>
 800b3de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3e2:	ed9d 0b00 	vldr	d0, [sp]
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	f001 fd06 	bl	800cdf8 <__kernel_sin>
 800b3ec:	e7e0      	b.n	800b3b0 <cos+0x58>
 800b3ee:	bf00      	nop
	...
 800b3f8:	3fe921fb 	.word	0x3fe921fb
 800b3fc:	7fefffff 	.word	0x7fefffff

0800b400 <sin>:
 800b400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b402:	ec53 2b10 	vmov	r2, r3, d0
 800b406:	4828      	ldr	r0, [pc, #160]	; (800b4a8 <sin+0xa8>)
 800b408:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b40c:	4281      	cmp	r1, r0
 800b40e:	dc07      	bgt.n	800b420 <sin+0x20>
 800b410:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b4a0 <sin+0xa0>
 800b414:	2000      	movs	r0, #0
 800b416:	b005      	add	sp, #20
 800b418:	f85d eb04 	ldr.w	lr, [sp], #4
 800b41c:	f001 bcec 	b.w	800cdf8 <__kernel_sin>
 800b420:	4822      	ldr	r0, [pc, #136]	; (800b4ac <sin+0xac>)
 800b422:	4281      	cmp	r1, r0
 800b424:	dd09      	ble.n	800b43a <sin+0x3a>
 800b426:	ee10 0a10 	vmov	r0, s0
 800b42a:	4619      	mov	r1, r3
 800b42c:	f7f4 ff4c 	bl	80002c8 <__aeabi_dsub>
 800b430:	ec41 0b10 	vmov	d0, r0, r1
 800b434:	b005      	add	sp, #20
 800b436:	f85d fb04 	ldr.w	pc, [sp], #4
 800b43a:	4668      	mov	r0, sp
 800b43c:	f000 fe04 	bl	800c048 <__ieee754_rem_pio2>
 800b440:	f000 0003 	and.w	r0, r0, #3
 800b444:	2801      	cmp	r0, #1
 800b446:	d00c      	beq.n	800b462 <sin+0x62>
 800b448:	2802      	cmp	r0, #2
 800b44a:	d011      	beq.n	800b470 <sin+0x70>
 800b44c:	b9f0      	cbnz	r0, 800b48c <sin+0x8c>
 800b44e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b452:	ed9d 0b00 	vldr	d0, [sp]
 800b456:	2001      	movs	r0, #1
 800b458:	f001 fcce 	bl	800cdf8 <__kernel_sin>
 800b45c:	ec51 0b10 	vmov	r0, r1, d0
 800b460:	e7e6      	b.n	800b430 <sin+0x30>
 800b462:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b466:	ed9d 0b00 	vldr	d0, [sp]
 800b46a:	f001 f8ad 	bl	800c5c8 <__kernel_cos>
 800b46e:	e7f5      	b.n	800b45c <sin+0x5c>
 800b470:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b474:	ed9d 0b00 	vldr	d0, [sp]
 800b478:	2001      	movs	r0, #1
 800b47a:	f001 fcbd 	bl	800cdf8 <__kernel_sin>
 800b47e:	ec53 2b10 	vmov	r2, r3, d0
 800b482:	ee10 0a10 	vmov	r0, s0
 800b486:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b48a:	e7d1      	b.n	800b430 <sin+0x30>
 800b48c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b490:	ed9d 0b00 	vldr	d0, [sp]
 800b494:	f001 f898 	bl	800c5c8 <__kernel_cos>
 800b498:	e7f1      	b.n	800b47e <sin+0x7e>
 800b49a:	bf00      	nop
 800b49c:	f3af 8000 	nop.w
	...
 800b4a8:	3fe921fb 	.word	0x3fe921fb
 800b4ac:	7fefffff 	.word	0x7fefffff

0800b4b0 <pow>:
 800b4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b2:	ed2d 8b02 	vpush	{d8}
 800b4b6:	eeb0 8a40 	vmov.f32	s16, s0
 800b4ba:	eef0 8a60 	vmov.f32	s17, s1
 800b4be:	ec55 4b11 	vmov	r4, r5, d1
 800b4c2:	f000 f891 	bl	800b5e8 <__ieee754_pow>
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	462b      	mov	r3, r5
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	ec57 6b10 	vmov	r6, r7, d0
 800b4d2:	f7f5 fb4b 	bl	8000b6c <__aeabi_dcmpun>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d13b      	bne.n	800b552 <pow+0xa2>
 800b4da:	ec51 0b18 	vmov	r0, r1, d8
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	f7f5 fb11 	bl	8000b08 <__aeabi_dcmpeq>
 800b4e6:	b1b8      	cbz	r0, 800b518 <pow+0x68>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7f5 fb0a 	bl	8000b08 <__aeabi_dcmpeq>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d146      	bne.n	800b586 <pow+0xd6>
 800b4f8:	ec45 4b10 	vmov	d0, r4, r5
 800b4fc:	f001 fd73 	bl	800cfe6 <finite>
 800b500:	b338      	cbz	r0, 800b552 <pow+0xa2>
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	4620      	mov	r0, r4
 800b508:	4629      	mov	r1, r5
 800b50a:	f7f5 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800b50e:	b300      	cbz	r0, 800b552 <pow+0xa2>
 800b510:	f7ff fa18 	bl	800a944 <__errno>
 800b514:	2322      	movs	r3, #34	; 0x22
 800b516:	e01b      	b.n	800b550 <pow+0xa0>
 800b518:	ec47 6b10 	vmov	d0, r6, r7
 800b51c:	f001 fd63 	bl	800cfe6 <finite>
 800b520:	b9e0      	cbnz	r0, 800b55c <pow+0xac>
 800b522:	eeb0 0a48 	vmov.f32	s0, s16
 800b526:	eef0 0a68 	vmov.f32	s1, s17
 800b52a:	f001 fd5c 	bl	800cfe6 <finite>
 800b52e:	b1a8      	cbz	r0, 800b55c <pow+0xac>
 800b530:	ec45 4b10 	vmov	d0, r4, r5
 800b534:	f001 fd57 	bl	800cfe6 <finite>
 800b538:	b180      	cbz	r0, 800b55c <pow+0xac>
 800b53a:	4632      	mov	r2, r6
 800b53c:	463b      	mov	r3, r7
 800b53e:	4630      	mov	r0, r6
 800b540:	4639      	mov	r1, r7
 800b542:	f7f5 fb13 	bl	8000b6c <__aeabi_dcmpun>
 800b546:	2800      	cmp	r0, #0
 800b548:	d0e2      	beq.n	800b510 <pow+0x60>
 800b54a:	f7ff f9fb 	bl	800a944 <__errno>
 800b54e:	2321      	movs	r3, #33	; 0x21
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	ecbd 8b02 	vpop	{d8}
 800b556:	ec47 6b10 	vmov	d0, r6, r7
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55c:	2200      	movs	r2, #0
 800b55e:	2300      	movs	r3, #0
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fad0 	bl	8000b08 <__aeabi_dcmpeq>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d0f2      	beq.n	800b552 <pow+0xa2>
 800b56c:	eeb0 0a48 	vmov.f32	s0, s16
 800b570:	eef0 0a68 	vmov.f32	s1, s17
 800b574:	f001 fd37 	bl	800cfe6 <finite>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d0ea      	beq.n	800b552 <pow+0xa2>
 800b57c:	ec45 4b10 	vmov	d0, r4, r5
 800b580:	f001 fd31 	bl	800cfe6 <finite>
 800b584:	e7c3      	b.n	800b50e <pow+0x5e>
 800b586:	4f01      	ldr	r7, [pc, #4]	; (800b58c <pow+0xdc>)
 800b588:	2600      	movs	r6, #0
 800b58a:	e7e2      	b.n	800b552 <pow+0xa2>
 800b58c:	3ff00000 	.word	0x3ff00000

0800b590 <sqrt>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	ed2d 8b02 	vpush	{d8}
 800b596:	ec55 4b10 	vmov	r4, r5, d0
 800b59a:	f000 ff61 	bl	800c460 <__ieee754_sqrt>
 800b59e:	4622      	mov	r2, r4
 800b5a0:	462b      	mov	r3, r5
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	eeb0 8a40 	vmov.f32	s16, s0
 800b5aa:	eef0 8a60 	vmov.f32	s17, s1
 800b5ae:	f7f5 fadd 	bl	8000b6c <__aeabi_dcmpun>
 800b5b2:	b990      	cbnz	r0, 800b5da <sqrt+0x4a>
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	f7f5 faae 	bl	8000b1c <__aeabi_dcmplt>
 800b5c0:	b158      	cbz	r0, 800b5da <sqrt+0x4a>
 800b5c2:	f7ff f9bf 	bl	800a944 <__errno>
 800b5c6:	2321      	movs	r3, #33	; 0x21
 800b5c8:	6003      	str	r3, [r0, #0]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f7f5 f95b 	bl	800088c <__aeabi_ddiv>
 800b5d6:	ec41 0b18 	vmov	d8, r0, r1
 800b5da:	eeb0 0a48 	vmov.f32	s0, s16
 800b5de:	eef0 0a68 	vmov.f32	s1, s17
 800b5e2:	ecbd 8b02 	vpop	{d8}
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}

0800b5e8 <__ieee754_pow>:
 800b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	ed2d 8b06 	vpush	{d8-d10}
 800b5f0:	b089      	sub	sp, #36	; 0x24
 800b5f2:	ed8d 1b00 	vstr	d1, [sp]
 800b5f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b5fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b5fe:	ea58 0102 	orrs.w	r1, r8, r2
 800b602:	ec57 6b10 	vmov	r6, r7, d0
 800b606:	d115      	bne.n	800b634 <__ieee754_pow+0x4c>
 800b608:	19b3      	adds	r3, r6, r6
 800b60a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b60e:	4152      	adcs	r2, r2
 800b610:	4299      	cmp	r1, r3
 800b612:	4b89      	ldr	r3, [pc, #548]	; (800b838 <__ieee754_pow+0x250>)
 800b614:	4193      	sbcs	r3, r2
 800b616:	f080 84d2 	bcs.w	800bfbe <__ieee754_pow+0x9d6>
 800b61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b61e:	4630      	mov	r0, r6
 800b620:	4639      	mov	r1, r7
 800b622:	f7f4 fe53 	bl	80002cc <__adddf3>
 800b626:	ec41 0b10 	vmov	d0, r0, r1
 800b62a:	b009      	add	sp, #36	; 0x24
 800b62c:	ecbd 8b06 	vpop	{d8-d10}
 800b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b634:	4b81      	ldr	r3, [pc, #516]	; (800b83c <__ieee754_pow+0x254>)
 800b636:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b63a:	429c      	cmp	r4, r3
 800b63c:	ee10 aa10 	vmov	sl, s0
 800b640:	463d      	mov	r5, r7
 800b642:	dc06      	bgt.n	800b652 <__ieee754_pow+0x6a>
 800b644:	d101      	bne.n	800b64a <__ieee754_pow+0x62>
 800b646:	2e00      	cmp	r6, #0
 800b648:	d1e7      	bne.n	800b61a <__ieee754_pow+0x32>
 800b64a:	4598      	cmp	r8, r3
 800b64c:	dc01      	bgt.n	800b652 <__ieee754_pow+0x6a>
 800b64e:	d10f      	bne.n	800b670 <__ieee754_pow+0x88>
 800b650:	b172      	cbz	r2, 800b670 <__ieee754_pow+0x88>
 800b652:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b656:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b65a:	ea55 050a 	orrs.w	r5, r5, sl
 800b65e:	d1dc      	bne.n	800b61a <__ieee754_pow+0x32>
 800b660:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b664:	18db      	adds	r3, r3, r3
 800b666:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b66a:	4152      	adcs	r2, r2
 800b66c:	429d      	cmp	r5, r3
 800b66e:	e7d0      	b.n	800b612 <__ieee754_pow+0x2a>
 800b670:	2d00      	cmp	r5, #0
 800b672:	da3b      	bge.n	800b6ec <__ieee754_pow+0x104>
 800b674:	4b72      	ldr	r3, [pc, #456]	; (800b840 <__ieee754_pow+0x258>)
 800b676:	4598      	cmp	r8, r3
 800b678:	dc51      	bgt.n	800b71e <__ieee754_pow+0x136>
 800b67a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b67e:	4598      	cmp	r8, r3
 800b680:	f340 84ac 	ble.w	800bfdc <__ieee754_pow+0x9f4>
 800b684:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b688:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b68c:	2b14      	cmp	r3, #20
 800b68e:	dd0f      	ble.n	800b6b0 <__ieee754_pow+0xc8>
 800b690:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b694:	fa22 f103 	lsr.w	r1, r2, r3
 800b698:	fa01 f303 	lsl.w	r3, r1, r3
 800b69c:	4293      	cmp	r3, r2
 800b69e:	f040 849d 	bne.w	800bfdc <__ieee754_pow+0x9f4>
 800b6a2:	f001 0101 	and.w	r1, r1, #1
 800b6a6:	f1c1 0302 	rsb	r3, r1, #2
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	b182      	cbz	r2, 800b6d0 <__ieee754_pow+0xe8>
 800b6ae:	e05f      	b.n	800b770 <__ieee754_pow+0x188>
 800b6b0:	2a00      	cmp	r2, #0
 800b6b2:	d15b      	bne.n	800b76c <__ieee754_pow+0x184>
 800b6b4:	f1c3 0314 	rsb	r3, r3, #20
 800b6b8:	fa48 f103 	asr.w	r1, r8, r3
 800b6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b6c0:	4543      	cmp	r3, r8
 800b6c2:	f040 8488 	bne.w	800bfd6 <__ieee754_pow+0x9ee>
 800b6c6:	f001 0101 	and.w	r1, r1, #1
 800b6ca:	f1c1 0302 	rsb	r3, r1, #2
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	4b5c      	ldr	r3, [pc, #368]	; (800b844 <__ieee754_pow+0x25c>)
 800b6d2:	4598      	cmp	r8, r3
 800b6d4:	d132      	bne.n	800b73c <__ieee754_pow+0x154>
 800b6d6:	f1b9 0f00 	cmp.w	r9, #0
 800b6da:	f280 8478 	bge.w	800bfce <__ieee754_pow+0x9e6>
 800b6de:	4959      	ldr	r1, [pc, #356]	; (800b844 <__ieee754_pow+0x25c>)
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	463b      	mov	r3, r7
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	f7f5 f8d1 	bl	800088c <__aeabi_ddiv>
 800b6ea:	e79c      	b.n	800b626 <__ieee754_pow+0x3e>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	9304      	str	r3, [sp, #16]
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	d13d      	bne.n	800b770 <__ieee754_pow+0x188>
 800b6f4:	4b51      	ldr	r3, [pc, #324]	; (800b83c <__ieee754_pow+0x254>)
 800b6f6:	4598      	cmp	r8, r3
 800b6f8:	d1ea      	bne.n	800b6d0 <__ieee754_pow+0xe8>
 800b6fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b6fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b702:	ea53 030a 	orrs.w	r3, r3, sl
 800b706:	f000 845a 	beq.w	800bfbe <__ieee754_pow+0x9d6>
 800b70a:	4b4f      	ldr	r3, [pc, #316]	; (800b848 <__ieee754_pow+0x260>)
 800b70c:	429c      	cmp	r4, r3
 800b70e:	dd08      	ble.n	800b722 <__ieee754_pow+0x13a>
 800b710:	f1b9 0f00 	cmp.w	r9, #0
 800b714:	f2c0 8457 	blt.w	800bfc6 <__ieee754_pow+0x9de>
 800b718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b71c:	e783      	b.n	800b626 <__ieee754_pow+0x3e>
 800b71e:	2302      	movs	r3, #2
 800b720:	e7e5      	b.n	800b6ee <__ieee754_pow+0x106>
 800b722:	f1b9 0f00 	cmp.w	r9, #0
 800b726:	f04f 0000 	mov.w	r0, #0
 800b72a:	f04f 0100 	mov.w	r1, #0
 800b72e:	f6bf af7a 	bge.w	800b626 <__ieee754_pow+0x3e>
 800b732:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b736:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b73a:	e774      	b.n	800b626 <__ieee754_pow+0x3e>
 800b73c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b740:	d106      	bne.n	800b750 <__ieee754_pow+0x168>
 800b742:	4632      	mov	r2, r6
 800b744:	463b      	mov	r3, r7
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	f7f4 ff75 	bl	8000638 <__aeabi_dmul>
 800b74e:	e76a      	b.n	800b626 <__ieee754_pow+0x3e>
 800b750:	4b3e      	ldr	r3, [pc, #248]	; (800b84c <__ieee754_pow+0x264>)
 800b752:	4599      	cmp	r9, r3
 800b754:	d10c      	bne.n	800b770 <__ieee754_pow+0x188>
 800b756:	2d00      	cmp	r5, #0
 800b758:	db0a      	blt.n	800b770 <__ieee754_pow+0x188>
 800b75a:	ec47 6b10 	vmov	d0, r6, r7
 800b75e:	b009      	add	sp, #36	; 0x24
 800b760:	ecbd 8b06 	vpop	{d8-d10}
 800b764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b768:	f000 be7a 	b.w	800c460 <__ieee754_sqrt>
 800b76c:	2300      	movs	r3, #0
 800b76e:	9304      	str	r3, [sp, #16]
 800b770:	ec47 6b10 	vmov	d0, r6, r7
 800b774:	f001 fc2e 	bl	800cfd4 <fabs>
 800b778:	ec51 0b10 	vmov	r0, r1, d0
 800b77c:	f1ba 0f00 	cmp.w	sl, #0
 800b780:	d129      	bne.n	800b7d6 <__ieee754_pow+0x1ee>
 800b782:	b124      	cbz	r4, 800b78e <__ieee754_pow+0x1a6>
 800b784:	4b2f      	ldr	r3, [pc, #188]	; (800b844 <__ieee754_pow+0x25c>)
 800b786:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d123      	bne.n	800b7d6 <__ieee754_pow+0x1ee>
 800b78e:	f1b9 0f00 	cmp.w	r9, #0
 800b792:	da05      	bge.n	800b7a0 <__ieee754_pow+0x1b8>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	2000      	movs	r0, #0
 800b79a:	492a      	ldr	r1, [pc, #168]	; (800b844 <__ieee754_pow+0x25c>)
 800b79c:	f7f5 f876 	bl	800088c <__aeabi_ddiv>
 800b7a0:	2d00      	cmp	r5, #0
 800b7a2:	f6bf af40 	bge.w	800b626 <__ieee754_pow+0x3e>
 800b7a6:	9b04      	ldr	r3, [sp, #16]
 800b7a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b7ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b7b0:	4323      	orrs	r3, r4
 800b7b2:	d108      	bne.n	800b7c6 <__ieee754_pow+0x1de>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	f7f4 fd84 	bl	80002c8 <__aeabi_dsub>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	e78f      	b.n	800b6e6 <__ieee754_pow+0xfe>
 800b7c6:	9b04      	ldr	r3, [sp, #16]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	f47f af2c 	bne.w	800b626 <__ieee754_pow+0x3e>
 800b7ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	e727      	b.n	800b626 <__ieee754_pow+0x3e>
 800b7d6:	0feb      	lsrs	r3, r5, #31
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	9306      	str	r3, [sp, #24]
 800b7dc:	9a06      	ldr	r2, [sp, #24]
 800b7de:	9b04      	ldr	r3, [sp, #16]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	d102      	bne.n	800b7ea <__ieee754_pow+0x202>
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	463b      	mov	r3, r7
 800b7e8:	e7e6      	b.n	800b7b8 <__ieee754_pow+0x1d0>
 800b7ea:	4b19      	ldr	r3, [pc, #100]	; (800b850 <__ieee754_pow+0x268>)
 800b7ec:	4598      	cmp	r8, r3
 800b7ee:	f340 80fb 	ble.w	800b9e8 <__ieee754_pow+0x400>
 800b7f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b7f6:	4598      	cmp	r8, r3
 800b7f8:	4b13      	ldr	r3, [pc, #76]	; (800b848 <__ieee754_pow+0x260>)
 800b7fa:	dd0c      	ble.n	800b816 <__ieee754_pow+0x22e>
 800b7fc:	429c      	cmp	r4, r3
 800b7fe:	dc0f      	bgt.n	800b820 <__ieee754_pow+0x238>
 800b800:	f1b9 0f00 	cmp.w	r9, #0
 800b804:	da0f      	bge.n	800b826 <__ieee754_pow+0x23e>
 800b806:	2000      	movs	r0, #0
 800b808:	b009      	add	sp, #36	; 0x24
 800b80a:	ecbd 8b06 	vpop	{d8-d10}
 800b80e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b812:	f001 bbd6 	b.w	800cfc2 <__math_oflow>
 800b816:	429c      	cmp	r4, r3
 800b818:	dbf2      	blt.n	800b800 <__ieee754_pow+0x218>
 800b81a:	4b0a      	ldr	r3, [pc, #40]	; (800b844 <__ieee754_pow+0x25c>)
 800b81c:	429c      	cmp	r4, r3
 800b81e:	dd19      	ble.n	800b854 <__ieee754_pow+0x26c>
 800b820:	f1b9 0f00 	cmp.w	r9, #0
 800b824:	dcef      	bgt.n	800b806 <__ieee754_pow+0x21e>
 800b826:	2000      	movs	r0, #0
 800b828:	b009      	add	sp, #36	; 0x24
 800b82a:	ecbd 8b06 	vpop	{d8-d10}
 800b82e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b832:	f001 bbbd 	b.w	800cfb0 <__math_uflow>
 800b836:	bf00      	nop
 800b838:	fff00000 	.word	0xfff00000
 800b83c:	7ff00000 	.word	0x7ff00000
 800b840:	433fffff 	.word	0x433fffff
 800b844:	3ff00000 	.word	0x3ff00000
 800b848:	3fefffff 	.word	0x3fefffff
 800b84c:	3fe00000 	.word	0x3fe00000
 800b850:	41e00000 	.word	0x41e00000
 800b854:	4b60      	ldr	r3, [pc, #384]	; (800b9d8 <__ieee754_pow+0x3f0>)
 800b856:	2200      	movs	r2, #0
 800b858:	f7f4 fd36 	bl	80002c8 <__aeabi_dsub>
 800b85c:	a354      	add	r3, pc, #336	; (adr r3, 800b9b0 <__ieee754_pow+0x3c8>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	4604      	mov	r4, r0
 800b864:	460d      	mov	r5, r1
 800b866:	f7f4 fee7 	bl	8000638 <__aeabi_dmul>
 800b86a:	a353      	add	r3, pc, #332	; (adr r3, 800b9b8 <__ieee754_pow+0x3d0>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	4620      	mov	r0, r4
 800b876:	4629      	mov	r1, r5
 800b878:	f7f4 fede 	bl	8000638 <__aeabi_dmul>
 800b87c:	4b57      	ldr	r3, [pc, #348]	; (800b9dc <__ieee754_pow+0x3f4>)
 800b87e:	4682      	mov	sl, r0
 800b880:	468b      	mov	fp, r1
 800b882:	2200      	movs	r2, #0
 800b884:	4620      	mov	r0, r4
 800b886:	4629      	mov	r1, r5
 800b888:	f7f4 fed6 	bl	8000638 <__aeabi_dmul>
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	a14b      	add	r1, pc, #300	; (adr r1, 800b9c0 <__ieee754_pow+0x3d8>)
 800b892:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b896:	f7f4 fd17 	bl	80002c8 <__aeabi_dsub>
 800b89a:	4622      	mov	r2, r4
 800b89c:	462b      	mov	r3, r5
 800b89e:	f7f4 fecb 	bl	8000638 <__aeabi_dmul>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	494d      	ldr	r1, [pc, #308]	; (800b9e0 <__ieee754_pow+0x3f8>)
 800b8aa:	f7f4 fd0d 	bl	80002c8 <__aeabi_dsub>
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4689      	mov	r9, r1
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	f7f4 febd 	bl	8000638 <__aeabi_dmul>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	f7f4 feb7 	bl	8000638 <__aeabi_dmul>
 800b8ca:	a33f      	add	r3, pc, #252	; (adr r3, 800b9c8 <__ieee754_pow+0x3e0>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f7f4 feb2 	bl	8000638 <__aeabi_dmul>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4650      	mov	r0, sl
 800b8da:	4659      	mov	r1, fp
 800b8dc:	f7f4 fcf4 	bl	80002c8 <__aeabi_dsub>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	4689      	mov	r9, r1
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f4 fcee 	bl	80002cc <__adddf3>
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	4632      	mov	r2, r6
 800b8f4:	463b      	mov	r3, r7
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	460d      	mov	r5, r1
 800b8fa:	f7f4 fce5 	bl	80002c8 <__aeabi_dsub>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4640      	mov	r0, r8
 800b904:	4649      	mov	r1, r9
 800b906:	f7f4 fcdf 	bl	80002c8 <__aeabi_dsub>
 800b90a:	9b04      	ldr	r3, [sp, #16]
 800b90c:	9a06      	ldr	r2, [sp, #24]
 800b90e:	3b01      	subs	r3, #1
 800b910:	4313      	orrs	r3, r2
 800b912:	4682      	mov	sl, r0
 800b914:	468b      	mov	fp, r1
 800b916:	f040 81e7 	bne.w	800bce8 <__ieee754_pow+0x700>
 800b91a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b9d0 <__ieee754_pow+0x3e8>
 800b91e:	eeb0 8a47 	vmov.f32	s16, s14
 800b922:	eef0 8a67 	vmov.f32	s17, s15
 800b926:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b92a:	2600      	movs	r6, #0
 800b92c:	4632      	mov	r2, r6
 800b92e:	463b      	mov	r3, r7
 800b930:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b934:	f7f4 fcc8 	bl	80002c8 <__aeabi_dsub>
 800b938:	4622      	mov	r2, r4
 800b93a:	462b      	mov	r3, r5
 800b93c:	f7f4 fe7c 	bl	8000638 <__aeabi_dmul>
 800b940:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b944:	4680      	mov	r8, r0
 800b946:	4689      	mov	r9, r1
 800b948:	4650      	mov	r0, sl
 800b94a:	4659      	mov	r1, fp
 800b94c:	f7f4 fe74 	bl	8000638 <__aeabi_dmul>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4640      	mov	r0, r8
 800b956:	4649      	mov	r1, r9
 800b958:	f7f4 fcb8 	bl	80002cc <__adddf3>
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	4680      	mov	r8, r0
 800b962:	4689      	mov	r9, r1
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	f7f4 fe66 	bl	8000638 <__aeabi_dmul>
 800b96c:	460b      	mov	r3, r1
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
 800b972:	4602      	mov	r2, r0
 800b974:	4649      	mov	r1, r9
 800b976:	4640      	mov	r0, r8
 800b978:	f7f4 fca8 	bl	80002cc <__adddf3>
 800b97c:	4b19      	ldr	r3, [pc, #100]	; (800b9e4 <__ieee754_pow+0x3fc>)
 800b97e:	4299      	cmp	r1, r3
 800b980:	ec45 4b19 	vmov	d9, r4, r5
 800b984:	4606      	mov	r6, r0
 800b986:	460f      	mov	r7, r1
 800b988:	468b      	mov	fp, r1
 800b98a:	f340 82f1 	ble.w	800bf70 <__ieee754_pow+0x988>
 800b98e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b992:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b996:	4303      	orrs	r3, r0
 800b998:	f000 81e4 	beq.w	800bd64 <__ieee754_pow+0x77c>
 800b99c:	ec51 0b18 	vmov	r0, r1, d8
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f7f5 f8ba 	bl	8000b1c <__aeabi_dcmplt>
 800b9a8:	3800      	subs	r0, #0
 800b9aa:	bf18      	it	ne
 800b9ac:	2001      	movne	r0, #1
 800b9ae:	e72b      	b.n	800b808 <__ieee754_pow+0x220>
 800b9b0:	60000000 	.word	0x60000000
 800b9b4:	3ff71547 	.word	0x3ff71547
 800b9b8:	f85ddf44 	.word	0xf85ddf44
 800b9bc:	3e54ae0b 	.word	0x3e54ae0b
 800b9c0:	55555555 	.word	0x55555555
 800b9c4:	3fd55555 	.word	0x3fd55555
 800b9c8:	652b82fe 	.word	0x652b82fe
 800b9cc:	3ff71547 	.word	0x3ff71547
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	bff00000 	.word	0xbff00000
 800b9d8:	3ff00000 	.word	0x3ff00000
 800b9dc:	3fd00000 	.word	0x3fd00000
 800b9e0:	3fe00000 	.word	0x3fe00000
 800b9e4:	408fffff 	.word	0x408fffff
 800b9e8:	4bd5      	ldr	r3, [pc, #852]	; (800bd40 <__ieee754_pow+0x758>)
 800b9ea:	402b      	ands	r3, r5
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	b92b      	cbnz	r3, 800b9fc <__ieee754_pow+0x414>
 800b9f0:	4bd4      	ldr	r3, [pc, #848]	; (800bd44 <__ieee754_pow+0x75c>)
 800b9f2:	f7f4 fe21 	bl	8000638 <__aeabi_dmul>
 800b9f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	1523      	asrs	r3, r4, #20
 800b9fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba02:	4413      	add	r3, r2
 800ba04:	9305      	str	r3, [sp, #20]
 800ba06:	4bd0      	ldr	r3, [pc, #832]	; (800bd48 <__ieee754_pow+0x760>)
 800ba08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ba0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ba10:	429c      	cmp	r4, r3
 800ba12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ba16:	dd08      	ble.n	800ba2a <__ieee754_pow+0x442>
 800ba18:	4bcc      	ldr	r3, [pc, #816]	; (800bd4c <__ieee754_pow+0x764>)
 800ba1a:	429c      	cmp	r4, r3
 800ba1c:	f340 8162 	ble.w	800bce4 <__ieee754_pow+0x6fc>
 800ba20:	9b05      	ldr	r3, [sp, #20]
 800ba22:	3301      	adds	r3, #1
 800ba24:	9305      	str	r3, [sp, #20]
 800ba26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ba2a:	2400      	movs	r4, #0
 800ba2c:	00e3      	lsls	r3, r4, #3
 800ba2e:	9307      	str	r3, [sp, #28]
 800ba30:	4bc7      	ldr	r3, [pc, #796]	; (800bd50 <__ieee754_pow+0x768>)
 800ba32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba36:	ed93 7b00 	vldr	d7, [r3]
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	ec53 2b17 	vmov	r2, r3, d7
 800ba40:	eeb0 9a47 	vmov.f32	s18, s14
 800ba44:	eef0 9a67 	vmov.f32	s19, s15
 800ba48:	4682      	mov	sl, r0
 800ba4a:	f7f4 fc3d 	bl	80002c8 <__aeabi_dsub>
 800ba4e:	4652      	mov	r2, sl
 800ba50:	4606      	mov	r6, r0
 800ba52:	460f      	mov	r7, r1
 800ba54:	462b      	mov	r3, r5
 800ba56:	ec51 0b19 	vmov	r0, r1, d9
 800ba5a:	f7f4 fc37 	bl	80002cc <__adddf3>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	2000      	movs	r0, #0
 800ba64:	49bb      	ldr	r1, [pc, #748]	; (800bd54 <__ieee754_pow+0x76c>)
 800ba66:	f7f4 ff11 	bl	800088c <__aeabi_ddiv>
 800ba6a:	ec41 0b1a 	vmov	d10, r0, r1
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	4630      	mov	r0, r6
 800ba74:	4639      	mov	r1, r7
 800ba76:	f7f4 fddf 	bl	8000638 <__aeabi_dmul>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba80:	9302      	str	r3, [sp, #8]
 800ba82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ba86:	46ab      	mov	fp, r5
 800ba88:	106d      	asrs	r5, r5, #1
 800ba8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ba8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ba92:	ec41 0b18 	vmov	d8, r0, r1
 800ba96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	4649      	mov	r1, r9
 800baa0:	4614      	mov	r4, r2
 800baa2:	461d      	mov	r5, r3
 800baa4:	f7f4 fdc8 	bl	8000638 <__aeabi_dmul>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4630      	mov	r0, r6
 800baae:	4639      	mov	r1, r7
 800bab0:	f7f4 fc0a 	bl	80002c8 <__aeabi_dsub>
 800bab4:	ec53 2b19 	vmov	r2, r3, d9
 800bab8:	4606      	mov	r6, r0
 800baba:	460f      	mov	r7, r1
 800babc:	4620      	mov	r0, r4
 800babe:	4629      	mov	r1, r5
 800bac0:	f7f4 fc02 	bl	80002c8 <__aeabi_dsub>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	4650      	mov	r0, sl
 800baca:	4659      	mov	r1, fp
 800bacc:	f7f4 fbfc 	bl	80002c8 <__aeabi_dsub>
 800bad0:	4642      	mov	r2, r8
 800bad2:	464b      	mov	r3, r9
 800bad4:	f7f4 fdb0 	bl	8000638 <__aeabi_dmul>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4630      	mov	r0, r6
 800bade:	4639      	mov	r1, r7
 800bae0:	f7f4 fbf2 	bl	80002c8 <__aeabi_dsub>
 800bae4:	ec53 2b1a 	vmov	r2, r3, d10
 800bae8:	f7f4 fda6 	bl	8000638 <__aeabi_dmul>
 800baec:	ec53 2b18 	vmov	r2, r3, d8
 800baf0:	ec41 0b19 	vmov	d9, r0, r1
 800baf4:	ec51 0b18 	vmov	r0, r1, d8
 800baf8:	f7f4 fd9e 	bl	8000638 <__aeabi_dmul>
 800bafc:	a37c      	add	r3, pc, #496	; (adr r3, 800bcf0 <__ieee754_pow+0x708>)
 800bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb02:	4604      	mov	r4, r0
 800bb04:	460d      	mov	r5, r1
 800bb06:	f7f4 fd97 	bl	8000638 <__aeabi_dmul>
 800bb0a:	a37b      	add	r3, pc, #492	; (adr r3, 800bcf8 <__ieee754_pow+0x710>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f7f4 fbdc 	bl	80002cc <__adddf3>
 800bb14:	4622      	mov	r2, r4
 800bb16:	462b      	mov	r3, r5
 800bb18:	f7f4 fd8e 	bl	8000638 <__aeabi_dmul>
 800bb1c:	a378      	add	r3, pc, #480	; (adr r3, 800bd00 <__ieee754_pow+0x718>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f7f4 fbd3 	bl	80002cc <__adddf3>
 800bb26:	4622      	mov	r2, r4
 800bb28:	462b      	mov	r3, r5
 800bb2a:	f7f4 fd85 	bl	8000638 <__aeabi_dmul>
 800bb2e:	a376      	add	r3, pc, #472	; (adr r3, 800bd08 <__ieee754_pow+0x720>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	f7f4 fbca 	bl	80002cc <__adddf3>
 800bb38:	4622      	mov	r2, r4
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	f7f4 fd7c 	bl	8000638 <__aeabi_dmul>
 800bb40:	a373      	add	r3, pc, #460	; (adr r3, 800bd10 <__ieee754_pow+0x728>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fbc1 	bl	80002cc <__adddf3>
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	462b      	mov	r3, r5
 800bb4e:	f7f4 fd73 	bl	8000638 <__aeabi_dmul>
 800bb52:	a371      	add	r3, pc, #452	; (adr r3, 800bd18 <__ieee754_pow+0x730>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f7f4 fbb8 	bl	80002cc <__adddf3>
 800bb5c:	4622      	mov	r2, r4
 800bb5e:	4606      	mov	r6, r0
 800bb60:	460f      	mov	r7, r1
 800bb62:	462b      	mov	r3, r5
 800bb64:	4620      	mov	r0, r4
 800bb66:	4629      	mov	r1, r5
 800bb68:	f7f4 fd66 	bl	8000638 <__aeabi_dmul>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 fd60 	bl	8000638 <__aeabi_dmul>
 800bb78:	4642      	mov	r2, r8
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	464b      	mov	r3, r9
 800bb80:	ec51 0b18 	vmov	r0, r1, d8
 800bb84:	f7f4 fba2 	bl	80002cc <__adddf3>
 800bb88:	ec53 2b19 	vmov	r2, r3, d9
 800bb8c:	f7f4 fd54 	bl	8000638 <__aeabi_dmul>
 800bb90:	4622      	mov	r2, r4
 800bb92:	462b      	mov	r3, r5
 800bb94:	f7f4 fb9a 	bl	80002cc <__adddf3>
 800bb98:	4642      	mov	r2, r8
 800bb9a:	4682      	mov	sl, r0
 800bb9c:	468b      	mov	fp, r1
 800bb9e:	464b      	mov	r3, r9
 800bba0:	4640      	mov	r0, r8
 800bba2:	4649      	mov	r1, r9
 800bba4:	f7f4 fd48 	bl	8000638 <__aeabi_dmul>
 800bba8:	4b6b      	ldr	r3, [pc, #428]	; (800bd58 <__ieee754_pow+0x770>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	4606      	mov	r6, r0
 800bbae:	460f      	mov	r7, r1
 800bbb0:	f7f4 fb8c 	bl	80002cc <__adddf3>
 800bbb4:	4652      	mov	r2, sl
 800bbb6:	465b      	mov	r3, fp
 800bbb8:	f7f4 fb88 	bl	80002cc <__adddf3>
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	460d      	mov	r5, r1
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	4649      	mov	r1, r9
 800bbca:	f7f4 fd35 	bl	8000638 <__aeabi_dmul>
 800bbce:	4b62      	ldr	r3, [pc, #392]	; (800bd58 <__ieee754_pow+0x770>)
 800bbd0:	4680      	mov	r8, r0
 800bbd2:	4689      	mov	r9, r1
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f7f4 fb75 	bl	80002c8 <__aeabi_dsub>
 800bbde:	4632      	mov	r2, r6
 800bbe0:	463b      	mov	r3, r7
 800bbe2:	f7f4 fb71 	bl	80002c8 <__aeabi_dsub>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4650      	mov	r0, sl
 800bbec:	4659      	mov	r1, fp
 800bbee:	f7f4 fb6b 	bl	80002c8 <__aeabi_dsub>
 800bbf2:	ec53 2b18 	vmov	r2, r3, d8
 800bbf6:	f7f4 fd1f 	bl	8000638 <__aeabi_dmul>
 800bbfa:	4622      	mov	r2, r4
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	460f      	mov	r7, r1
 800bc00:	462b      	mov	r3, r5
 800bc02:	ec51 0b19 	vmov	r0, r1, d9
 800bc06:	f7f4 fd17 	bl	8000638 <__aeabi_dmul>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4630      	mov	r0, r6
 800bc10:	4639      	mov	r1, r7
 800bc12:	f7f4 fb5b 	bl	80002cc <__adddf3>
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4640      	mov	r0, r8
 800bc20:	4649      	mov	r1, r9
 800bc22:	f7f4 fb53 	bl	80002cc <__adddf3>
 800bc26:	a33e      	add	r3, pc, #248	; (adr r3, 800bd20 <__ieee754_pow+0x738>)
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	4604      	mov	r4, r0
 800bc30:	460d      	mov	r5, r1
 800bc32:	f7f4 fd01 	bl	8000638 <__aeabi_dmul>
 800bc36:	4642      	mov	r2, r8
 800bc38:	ec41 0b18 	vmov	d8, r0, r1
 800bc3c:	464b      	mov	r3, r9
 800bc3e:	4620      	mov	r0, r4
 800bc40:	4629      	mov	r1, r5
 800bc42:	f7f4 fb41 	bl	80002c8 <__aeabi_dsub>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4639      	mov	r1, r7
 800bc4e:	f7f4 fb3b 	bl	80002c8 <__aeabi_dsub>
 800bc52:	a335      	add	r3, pc, #212	; (adr r3, 800bd28 <__ieee754_pow+0x740>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 fcee 	bl	8000638 <__aeabi_dmul>
 800bc5c:	a334      	add	r3, pc, #208	; (adr r3, 800bd30 <__ieee754_pow+0x748>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	4620      	mov	r0, r4
 800bc68:	4629      	mov	r1, r5
 800bc6a:	f7f4 fce5 	bl	8000638 <__aeabi_dmul>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4630      	mov	r0, r6
 800bc74:	4639      	mov	r1, r7
 800bc76:	f7f4 fb29 	bl	80002cc <__adddf3>
 800bc7a:	9a07      	ldr	r2, [sp, #28]
 800bc7c:	4b37      	ldr	r3, [pc, #220]	; (800bd5c <__ieee754_pow+0x774>)
 800bc7e:	4413      	add	r3, r2
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f4 fb22 	bl	80002cc <__adddf3>
 800bc88:	4682      	mov	sl, r0
 800bc8a:	9805      	ldr	r0, [sp, #20]
 800bc8c:	468b      	mov	fp, r1
 800bc8e:	f7f4 fc69 	bl	8000564 <__aeabi_i2d>
 800bc92:	9a07      	ldr	r2, [sp, #28]
 800bc94:	4b32      	ldr	r3, [pc, #200]	; (800bd60 <__ieee754_pow+0x778>)
 800bc96:	4413      	add	r3, r2
 800bc98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	460f      	mov	r7, r1
 800bca0:	4652      	mov	r2, sl
 800bca2:	465b      	mov	r3, fp
 800bca4:	ec51 0b18 	vmov	r0, r1, d8
 800bca8:	f7f4 fb10 	bl	80002cc <__adddf3>
 800bcac:	4642      	mov	r2, r8
 800bcae:	464b      	mov	r3, r9
 800bcb0:	f7f4 fb0c 	bl	80002cc <__adddf3>
 800bcb4:	4632      	mov	r2, r6
 800bcb6:	463b      	mov	r3, r7
 800bcb8:	f7f4 fb08 	bl	80002cc <__adddf3>
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	463b      	mov	r3, r7
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	460d      	mov	r5, r1
 800bcc6:	f7f4 faff 	bl	80002c8 <__aeabi_dsub>
 800bcca:	4642      	mov	r2, r8
 800bccc:	464b      	mov	r3, r9
 800bcce:	f7f4 fafb 	bl	80002c8 <__aeabi_dsub>
 800bcd2:	ec53 2b18 	vmov	r2, r3, d8
 800bcd6:	f7f4 faf7 	bl	80002c8 <__aeabi_dsub>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4650      	mov	r0, sl
 800bce0:	4659      	mov	r1, fp
 800bce2:	e610      	b.n	800b906 <__ieee754_pow+0x31e>
 800bce4:	2401      	movs	r4, #1
 800bce6:	e6a1      	b.n	800ba2c <__ieee754_pow+0x444>
 800bce8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bd38 <__ieee754_pow+0x750>
 800bcec:	e617      	b.n	800b91e <__ieee754_pow+0x336>
 800bcee:	bf00      	nop
 800bcf0:	4a454eef 	.word	0x4a454eef
 800bcf4:	3fca7e28 	.word	0x3fca7e28
 800bcf8:	93c9db65 	.word	0x93c9db65
 800bcfc:	3fcd864a 	.word	0x3fcd864a
 800bd00:	a91d4101 	.word	0xa91d4101
 800bd04:	3fd17460 	.word	0x3fd17460
 800bd08:	518f264d 	.word	0x518f264d
 800bd0c:	3fd55555 	.word	0x3fd55555
 800bd10:	db6fabff 	.word	0xdb6fabff
 800bd14:	3fdb6db6 	.word	0x3fdb6db6
 800bd18:	33333303 	.word	0x33333303
 800bd1c:	3fe33333 	.word	0x3fe33333
 800bd20:	e0000000 	.word	0xe0000000
 800bd24:	3feec709 	.word	0x3feec709
 800bd28:	dc3a03fd 	.word	0xdc3a03fd
 800bd2c:	3feec709 	.word	0x3feec709
 800bd30:	145b01f5 	.word	0x145b01f5
 800bd34:	be3e2fe0 	.word	0xbe3e2fe0
 800bd38:	00000000 	.word	0x00000000
 800bd3c:	3ff00000 	.word	0x3ff00000
 800bd40:	7ff00000 	.word	0x7ff00000
 800bd44:	43400000 	.word	0x43400000
 800bd48:	0003988e 	.word	0x0003988e
 800bd4c:	000bb679 	.word	0x000bb679
 800bd50:	0800d508 	.word	0x0800d508
 800bd54:	3ff00000 	.word	0x3ff00000
 800bd58:	40080000 	.word	0x40080000
 800bd5c:	0800d528 	.word	0x0800d528
 800bd60:	0800d518 	.word	0x0800d518
 800bd64:	a3b5      	add	r3, pc, #724	; (adr r3, 800c03c <__ieee754_pow+0xa54>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	4649      	mov	r1, r9
 800bd6e:	f7f4 faad 	bl	80002cc <__adddf3>
 800bd72:	4622      	mov	r2, r4
 800bd74:	ec41 0b1a 	vmov	d10, r0, r1
 800bd78:	462b      	mov	r3, r5
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	f7f4 faa3 	bl	80002c8 <__aeabi_dsub>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	ec51 0b1a 	vmov	r0, r1, d10
 800bd8a:	f7f4 fee5 	bl	8000b58 <__aeabi_dcmpgt>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f47f ae04 	bne.w	800b99c <__ieee754_pow+0x3b4>
 800bd94:	4aa4      	ldr	r2, [pc, #656]	; (800c028 <__ieee754_pow+0xa40>)
 800bd96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	f340 8108 	ble.w	800bfb0 <__ieee754_pow+0x9c8>
 800bda0:	151b      	asrs	r3, r3, #20
 800bda2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bda6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bdaa:	fa4a f303 	asr.w	r3, sl, r3
 800bdae:	445b      	add	r3, fp
 800bdb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bdb4:	4e9d      	ldr	r6, [pc, #628]	; (800c02c <__ieee754_pow+0xa44>)
 800bdb6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bdba:	4116      	asrs	r6, r2
 800bdbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	ea23 0106 	bic.w	r1, r3, r6
 800bdc6:	f1c2 0214 	rsb	r2, r2, #20
 800bdca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bdce:	fa4a fa02 	asr.w	sl, sl, r2
 800bdd2:	f1bb 0f00 	cmp.w	fp, #0
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4620      	mov	r0, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	bfb8      	it	lt
 800bde0:	f1ca 0a00 	rsblt	sl, sl, #0
 800bde4:	f7f4 fa70 	bl	80002c8 <__aeabi_dsub>
 800bde8:	ec41 0b19 	vmov	d9, r0, r1
 800bdec:	4642      	mov	r2, r8
 800bdee:	464b      	mov	r3, r9
 800bdf0:	ec51 0b19 	vmov	r0, r1, d9
 800bdf4:	f7f4 fa6a 	bl	80002cc <__adddf3>
 800bdf8:	a37b      	add	r3, pc, #492	; (adr r3, 800bfe8 <__ieee754_pow+0xa00>)
 800bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfe:	2000      	movs	r0, #0
 800be00:	4604      	mov	r4, r0
 800be02:	460d      	mov	r5, r1
 800be04:	f7f4 fc18 	bl	8000638 <__aeabi_dmul>
 800be08:	ec53 2b19 	vmov	r2, r3, d9
 800be0c:	4606      	mov	r6, r0
 800be0e:	460f      	mov	r7, r1
 800be10:	4620      	mov	r0, r4
 800be12:	4629      	mov	r1, r5
 800be14:	f7f4 fa58 	bl	80002c8 <__aeabi_dsub>
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4640      	mov	r0, r8
 800be1e:	4649      	mov	r1, r9
 800be20:	f7f4 fa52 	bl	80002c8 <__aeabi_dsub>
 800be24:	a372      	add	r3, pc, #456	; (adr r3, 800bff0 <__ieee754_pow+0xa08>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	f7f4 fc05 	bl	8000638 <__aeabi_dmul>
 800be2e:	a372      	add	r3, pc, #456	; (adr r3, 800bff8 <__ieee754_pow+0xa10>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	4680      	mov	r8, r0
 800be36:	4689      	mov	r9, r1
 800be38:	4620      	mov	r0, r4
 800be3a:	4629      	mov	r1, r5
 800be3c:	f7f4 fbfc 	bl	8000638 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4640      	mov	r0, r8
 800be46:	4649      	mov	r1, r9
 800be48:	f7f4 fa40 	bl	80002cc <__adddf3>
 800be4c:	4604      	mov	r4, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4630      	mov	r0, r6
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fa38 	bl	80002cc <__adddf3>
 800be5c:	4632      	mov	r2, r6
 800be5e:	463b      	mov	r3, r7
 800be60:	4680      	mov	r8, r0
 800be62:	4689      	mov	r9, r1
 800be64:	f7f4 fa30 	bl	80002c8 <__aeabi_dsub>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fa2a 	bl	80002c8 <__aeabi_dsub>
 800be74:	4642      	mov	r2, r8
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	464b      	mov	r3, r9
 800be7c:	4640      	mov	r0, r8
 800be7e:	4649      	mov	r1, r9
 800be80:	f7f4 fbda 	bl	8000638 <__aeabi_dmul>
 800be84:	a35e      	add	r3, pc, #376	; (adr r3, 800c000 <__ieee754_pow+0xa18>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	4604      	mov	r4, r0
 800be8c:	460d      	mov	r5, r1
 800be8e:	f7f4 fbd3 	bl	8000638 <__aeabi_dmul>
 800be92:	a35d      	add	r3, pc, #372	; (adr r3, 800c008 <__ieee754_pow+0xa20>)
 800be94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be98:	f7f4 fa16 	bl	80002c8 <__aeabi_dsub>
 800be9c:	4622      	mov	r2, r4
 800be9e:	462b      	mov	r3, r5
 800bea0:	f7f4 fbca 	bl	8000638 <__aeabi_dmul>
 800bea4:	a35a      	add	r3, pc, #360	; (adr r3, 800c010 <__ieee754_pow+0xa28>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	f7f4 fa0f 	bl	80002cc <__adddf3>
 800beae:	4622      	mov	r2, r4
 800beb0:	462b      	mov	r3, r5
 800beb2:	f7f4 fbc1 	bl	8000638 <__aeabi_dmul>
 800beb6:	a358      	add	r3, pc, #352	; (adr r3, 800c018 <__ieee754_pow+0xa30>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	f7f4 fa04 	bl	80002c8 <__aeabi_dsub>
 800bec0:	4622      	mov	r2, r4
 800bec2:	462b      	mov	r3, r5
 800bec4:	f7f4 fbb8 	bl	8000638 <__aeabi_dmul>
 800bec8:	a355      	add	r3, pc, #340	; (adr r3, 800c020 <__ieee754_pow+0xa38>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	f7f4 f9fd 	bl	80002cc <__adddf3>
 800bed2:	4622      	mov	r2, r4
 800bed4:	462b      	mov	r3, r5
 800bed6:	f7f4 fbaf 	bl	8000638 <__aeabi_dmul>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	4640      	mov	r0, r8
 800bee0:	4649      	mov	r1, r9
 800bee2:	f7f4 f9f1 	bl	80002c8 <__aeabi_dsub>
 800bee6:	4604      	mov	r4, r0
 800bee8:	460d      	mov	r5, r1
 800beea:	4602      	mov	r2, r0
 800beec:	460b      	mov	r3, r1
 800beee:	4640      	mov	r0, r8
 800bef0:	4649      	mov	r1, r9
 800bef2:	f7f4 fba1 	bl	8000638 <__aeabi_dmul>
 800bef6:	2200      	movs	r2, #0
 800bef8:	ec41 0b19 	vmov	d9, r0, r1
 800befc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf00:	4620      	mov	r0, r4
 800bf02:	4629      	mov	r1, r5
 800bf04:	f7f4 f9e0 	bl	80002c8 <__aeabi_dsub>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	ec51 0b19 	vmov	r0, r1, d9
 800bf10:	f7f4 fcbc 	bl	800088c <__aeabi_ddiv>
 800bf14:	4632      	mov	r2, r6
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	4640      	mov	r0, r8
 800bf1e:	4649      	mov	r1, r9
 800bf20:	f7f4 fb8a 	bl	8000638 <__aeabi_dmul>
 800bf24:	4632      	mov	r2, r6
 800bf26:	463b      	mov	r3, r7
 800bf28:	f7f4 f9d0 	bl	80002cc <__adddf3>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4620      	mov	r0, r4
 800bf32:	4629      	mov	r1, r5
 800bf34:	f7f4 f9c8 	bl	80002c8 <__aeabi_dsub>
 800bf38:	4642      	mov	r2, r8
 800bf3a:	464b      	mov	r3, r9
 800bf3c:	f7f4 f9c4 	bl	80002c8 <__aeabi_dsub>
 800bf40:	460b      	mov	r3, r1
 800bf42:	4602      	mov	r2, r0
 800bf44:	493a      	ldr	r1, [pc, #232]	; (800c030 <__ieee754_pow+0xa48>)
 800bf46:	2000      	movs	r0, #0
 800bf48:	f7f4 f9be 	bl	80002c8 <__aeabi_dsub>
 800bf4c:	ec41 0b10 	vmov	d0, r0, r1
 800bf50:	ee10 3a90 	vmov	r3, s1
 800bf54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bf58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf5c:	da2b      	bge.n	800bfb6 <__ieee754_pow+0x9ce>
 800bf5e:	4650      	mov	r0, sl
 800bf60:	f001 f8ce 	bl	800d100 <scalbn>
 800bf64:	ec51 0b10 	vmov	r0, r1, d0
 800bf68:	ec53 2b18 	vmov	r2, r3, d8
 800bf6c:	f7ff bbed 	b.w	800b74a <__ieee754_pow+0x162>
 800bf70:	4b30      	ldr	r3, [pc, #192]	; (800c034 <__ieee754_pow+0xa4c>)
 800bf72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf76:	429e      	cmp	r6, r3
 800bf78:	f77f af0c 	ble.w	800bd94 <__ieee754_pow+0x7ac>
 800bf7c:	4b2e      	ldr	r3, [pc, #184]	; (800c038 <__ieee754_pow+0xa50>)
 800bf7e:	440b      	add	r3, r1
 800bf80:	4303      	orrs	r3, r0
 800bf82:	d009      	beq.n	800bf98 <__ieee754_pow+0x9b0>
 800bf84:	ec51 0b18 	vmov	r0, r1, d8
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f7f4 fdc6 	bl	8000b1c <__aeabi_dcmplt>
 800bf90:	3800      	subs	r0, #0
 800bf92:	bf18      	it	ne
 800bf94:	2001      	movne	r0, #1
 800bf96:	e447      	b.n	800b828 <__ieee754_pow+0x240>
 800bf98:	4622      	mov	r2, r4
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	f7f4 f994 	bl	80002c8 <__aeabi_dsub>
 800bfa0:	4642      	mov	r2, r8
 800bfa2:	464b      	mov	r3, r9
 800bfa4:	f7f4 fdce 	bl	8000b44 <__aeabi_dcmpge>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	f43f aef3 	beq.w	800bd94 <__ieee754_pow+0x7ac>
 800bfae:	e7e9      	b.n	800bf84 <__ieee754_pow+0x99c>
 800bfb0:	f04f 0a00 	mov.w	sl, #0
 800bfb4:	e71a      	b.n	800bdec <__ieee754_pow+0x804>
 800bfb6:	ec51 0b10 	vmov	r0, r1, d0
 800bfba:	4619      	mov	r1, r3
 800bfbc:	e7d4      	b.n	800bf68 <__ieee754_pow+0x980>
 800bfbe:	491c      	ldr	r1, [pc, #112]	; (800c030 <__ieee754_pow+0xa48>)
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	f7ff bb30 	b.w	800b626 <__ieee754_pow+0x3e>
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	2100      	movs	r1, #0
 800bfca:	f7ff bb2c 	b.w	800b626 <__ieee754_pow+0x3e>
 800bfce:	4630      	mov	r0, r6
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	f7ff bb28 	b.w	800b626 <__ieee754_pow+0x3e>
 800bfd6:	9204      	str	r2, [sp, #16]
 800bfd8:	f7ff bb7a 	b.w	800b6d0 <__ieee754_pow+0xe8>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f7ff bb64 	b.w	800b6aa <__ieee754_pow+0xc2>
 800bfe2:	bf00      	nop
 800bfe4:	f3af 8000 	nop.w
 800bfe8:	00000000 	.word	0x00000000
 800bfec:	3fe62e43 	.word	0x3fe62e43
 800bff0:	fefa39ef 	.word	0xfefa39ef
 800bff4:	3fe62e42 	.word	0x3fe62e42
 800bff8:	0ca86c39 	.word	0x0ca86c39
 800bffc:	be205c61 	.word	0xbe205c61
 800c000:	72bea4d0 	.word	0x72bea4d0
 800c004:	3e663769 	.word	0x3e663769
 800c008:	c5d26bf1 	.word	0xc5d26bf1
 800c00c:	3ebbbd41 	.word	0x3ebbbd41
 800c010:	af25de2c 	.word	0xaf25de2c
 800c014:	3f11566a 	.word	0x3f11566a
 800c018:	16bebd93 	.word	0x16bebd93
 800c01c:	3f66c16c 	.word	0x3f66c16c
 800c020:	5555553e 	.word	0x5555553e
 800c024:	3fc55555 	.word	0x3fc55555
 800c028:	3fe00000 	.word	0x3fe00000
 800c02c:	000fffff 	.word	0x000fffff
 800c030:	3ff00000 	.word	0x3ff00000
 800c034:	4090cbff 	.word	0x4090cbff
 800c038:	3f6f3400 	.word	0x3f6f3400
 800c03c:	652b82fe 	.word	0x652b82fe
 800c040:	3c971547 	.word	0x3c971547
 800c044:	00000000 	.word	0x00000000

0800c048 <__ieee754_rem_pio2>:
 800c048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04c:	ed2d 8b02 	vpush	{d8}
 800c050:	ec55 4b10 	vmov	r4, r5, d0
 800c054:	4bca      	ldr	r3, [pc, #808]	; (800c380 <__ieee754_rem_pio2+0x338>)
 800c056:	b08b      	sub	sp, #44	; 0x2c
 800c058:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c05c:	4598      	cmp	r8, r3
 800c05e:	4682      	mov	sl, r0
 800c060:	9502      	str	r5, [sp, #8]
 800c062:	dc08      	bgt.n	800c076 <__ieee754_rem_pio2+0x2e>
 800c064:	2200      	movs	r2, #0
 800c066:	2300      	movs	r3, #0
 800c068:	ed80 0b00 	vstr	d0, [r0]
 800c06c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c070:	f04f 0b00 	mov.w	fp, #0
 800c074:	e028      	b.n	800c0c8 <__ieee754_rem_pio2+0x80>
 800c076:	4bc3      	ldr	r3, [pc, #780]	; (800c384 <__ieee754_rem_pio2+0x33c>)
 800c078:	4598      	cmp	r8, r3
 800c07a:	dc78      	bgt.n	800c16e <__ieee754_rem_pio2+0x126>
 800c07c:	9b02      	ldr	r3, [sp, #8]
 800c07e:	4ec2      	ldr	r6, [pc, #776]	; (800c388 <__ieee754_rem_pio2+0x340>)
 800c080:	2b00      	cmp	r3, #0
 800c082:	ee10 0a10 	vmov	r0, s0
 800c086:	a3b0      	add	r3, pc, #704	; (adr r3, 800c348 <__ieee754_rem_pio2+0x300>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	4629      	mov	r1, r5
 800c08e:	dd39      	ble.n	800c104 <__ieee754_rem_pio2+0xbc>
 800c090:	f7f4 f91a 	bl	80002c8 <__aeabi_dsub>
 800c094:	45b0      	cmp	r8, r6
 800c096:	4604      	mov	r4, r0
 800c098:	460d      	mov	r5, r1
 800c09a:	d01b      	beq.n	800c0d4 <__ieee754_rem_pio2+0x8c>
 800c09c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c350 <__ieee754_rem_pio2+0x308>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 f911 	bl	80002c8 <__aeabi_dsub>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	e9ca 2300 	strd	r2, r3, [sl]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	f7f4 f909 	bl	80002c8 <__aeabi_dsub>
 800c0b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800c350 <__ieee754_rem_pio2+0x308>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	f7f4 f904 	bl	80002c8 <__aeabi_dsub>
 800c0c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c0c4:	f04f 0b01 	mov.w	fp, #1
 800c0c8:	4658      	mov	r0, fp
 800c0ca:	b00b      	add	sp, #44	; 0x2c
 800c0cc:	ecbd 8b02 	vpop	{d8}
 800c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d4:	a3a0      	add	r3, pc, #640	; (adr r3, 800c358 <__ieee754_rem_pio2+0x310>)
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	f7f4 f8f5 	bl	80002c8 <__aeabi_dsub>
 800c0de:	a3a0      	add	r3, pc, #640	; (adr r3, 800c360 <__ieee754_rem_pio2+0x318>)
 800c0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	f7f4 f8ee 	bl	80002c8 <__aeabi_dsub>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	e9ca 2300 	strd	r2, r3, [sl]
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	f7f4 f8e6 	bl	80002c8 <__aeabi_dsub>
 800c0fc:	a398      	add	r3, pc, #608	; (adr r3, 800c360 <__ieee754_rem_pio2+0x318>)
 800c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c102:	e7db      	b.n	800c0bc <__ieee754_rem_pio2+0x74>
 800c104:	f7f4 f8e2 	bl	80002cc <__adddf3>
 800c108:	45b0      	cmp	r8, r6
 800c10a:	4604      	mov	r4, r0
 800c10c:	460d      	mov	r5, r1
 800c10e:	d016      	beq.n	800c13e <__ieee754_rem_pio2+0xf6>
 800c110:	a38f      	add	r3, pc, #572	; (adr r3, 800c350 <__ieee754_rem_pio2+0x308>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	f7f4 f8d9 	bl	80002cc <__adddf3>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	e9ca 2300 	strd	r2, r3, [sl]
 800c122:	4620      	mov	r0, r4
 800c124:	4629      	mov	r1, r5
 800c126:	f7f4 f8cf 	bl	80002c8 <__aeabi_dsub>
 800c12a:	a389      	add	r3, pc, #548	; (adr r3, 800c350 <__ieee754_rem_pio2+0x308>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 f8cc 	bl	80002cc <__adddf3>
 800c134:	f04f 3bff 	mov.w	fp, #4294967295
 800c138:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c13c:	e7c4      	b.n	800c0c8 <__ieee754_rem_pio2+0x80>
 800c13e:	a386      	add	r3, pc, #536	; (adr r3, 800c358 <__ieee754_rem_pio2+0x310>)
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	f7f4 f8c2 	bl	80002cc <__adddf3>
 800c148:	a385      	add	r3, pc, #532	; (adr r3, 800c360 <__ieee754_rem_pio2+0x318>)
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	4604      	mov	r4, r0
 800c150:	460d      	mov	r5, r1
 800c152:	f7f4 f8bb 	bl	80002cc <__adddf3>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	e9ca 2300 	strd	r2, r3, [sl]
 800c15e:	4620      	mov	r0, r4
 800c160:	4629      	mov	r1, r5
 800c162:	f7f4 f8b1 	bl	80002c8 <__aeabi_dsub>
 800c166:	a37e      	add	r3, pc, #504	; (adr r3, 800c360 <__ieee754_rem_pio2+0x318>)
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	e7e0      	b.n	800c130 <__ieee754_rem_pio2+0xe8>
 800c16e:	4b87      	ldr	r3, [pc, #540]	; (800c38c <__ieee754_rem_pio2+0x344>)
 800c170:	4598      	cmp	r8, r3
 800c172:	f300 80d9 	bgt.w	800c328 <__ieee754_rem_pio2+0x2e0>
 800c176:	f000 ff2d 	bl	800cfd4 <fabs>
 800c17a:	ec55 4b10 	vmov	r4, r5, d0
 800c17e:	ee10 0a10 	vmov	r0, s0
 800c182:	a379      	add	r3, pc, #484	; (adr r3, 800c368 <__ieee754_rem_pio2+0x320>)
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	4629      	mov	r1, r5
 800c18a:	f7f4 fa55 	bl	8000638 <__aeabi_dmul>
 800c18e:	4b80      	ldr	r3, [pc, #512]	; (800c390 <__ieee754_rem_pio2+0x348>)
 800c190:	2200      	movs	r2, #0
 800c192:	f7f4 f89b 	bl	80002cc <__adddf3>
 800c196:	f7f4 fcff 	bl	8000b98 <__aeabi_d2iz>
 800c19a:	4683      	mov	fp, r0
 800c19c:	f7f4 f9e2 	bl	8000564 <__aeabi_i2d>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	ec43 2b18 	vmov	d8, r2, r3
 800c1a8:	a367      	add	r3, pc, #412	; (adr r3, 800c348 <__ieee754_rem_pio2+0x300>)
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	f7f4 fa43 	bl	8000638 <__aeabi_dmul>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	f7f4 f885 	bl	80002c8 <__aeabi_dsub>
 800c1be:	a364      	add	r3, pc, #400	; (adr r3, 800c350 <__ieee754_rem_pio2+0x308>)
 800c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	460f      	mov	r7, r1
 800c1c8:	ec51 0b18 	vmov	r0, r1, d8
 800c1cc:	f7f4 fa34 	bl	8000638 <__aeabi_dmul>
 800c1d0:	f1bb 0f1f 	cmp.w	fp, #31
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	dc0d      	bgt.n	800c1f6 <__ieee754_rem_pio2+0x1ae>
 800c1da:	4b6e      	ldr	r3, [pc, #440]	; (800c394 <__ieee754_rem_pio2+0x34c>)
 800c1dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e4:	4543      	cmp	r3, r8
 800c1e6:	d006      	beq.n	800c1f6 <__ieee754_rem_pio2+0x1ae>
 800c1e8:	4622      	mov	r2, r4
 800c1ea:	462b      	mov	r3, r5
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	f7f4 f86a 	bl	80002c8 <__aeabi_dsub>
 800c1f4:	e00f      	b.n	800c216 <__ieee754_rem_pio2+0x1ce>
 800c1f6:	462b      	mov	r3, r5
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	f7f4 f863 	bl	80002c8 <__aeabi_dsub>
 800c202:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c206:	9303      	str	r3, [sp, #12]
 800c208:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c20c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c210:	f1b8 0f10 	cmp.w	r8, #16
 800c214:	dc02      	bgt.n	800c21c <__ieee754_rem_pio2+0x1d4>
 800c216:	e9ca 0100 	strd	r0, r1, [sl]
 800c21a:	e039      	b.n	800c290 <__ieee754_rem_pio2+0x248>
 800c21c:	a34e      	add	r3, pc, #312	; (adr r3, 800c358 <__ieee754_rem_pio2+0x310>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	ec51 0b18 	vmov	r0, r1, d8
 800c226:	f7f4 fa07 	bl	8000638 <__aeabi_dmul>
 800c22a:	4604      	mov	r4, r0
 800c22c:	460d      	mov	r5, r1
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4630      	mov	r0, r6
 800c234:	4639      	mov	r1, r7
 800c236:	f7f4 f847 	bl	80002c8 <__aeabi_dsub>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4680      	mov	r8, r0
 800c240:	4689      	mov	r9, r1
 800c242:	4630      	mov	r0, r6
 800c244:	4639      	mov	r1, r7
 800c246:	f7f4 f83f 	bl	80002c8 <__aeabi_dsub>
 800c24a:	4622      	mov	r2, r4
 800c24c:	462b      	mov	r3, r5
 800c24e:	f7f4 f83b 	bl	80002c8 <__aeabi_dsub>
 800c252:	a343      	add	r3, pc, #268	; (adr r3, 800c360 <__ieee754_rem_pio2+0x318>)
 800c254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c258:	4604      	mov	r4, r0
 800c25a:	460d      	mov	r5, r1
 800c25c:	ec51 0b18 	vmov	r0, r1, d8
 800c260:	f7f4 f9ea 	bl	8000638 <__aeabi_dmul>
 800c264:	4622      	mov	r2, r4
 800c266:	462b      	mov	r3, r5
 800c268:	f7f4 f82e 	bl	80002c8 <__aeabi_dsub>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	4640      	mov	r0, r8
 800c276:	4649      	mov	r1, r9
 800c278:	f7f4 f826 	bl	80002c8 <__aeabi_dsub>
 800c27c:	9a03      	ldr	r2, [sp, #12]
 800c27e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	2b31      	cmp	r3, #49	; 0x31
 800c286:	dc24      	bgt.n	800c2d2 <__ieee754_rem_pio2+0x28a>
 800c288:	e9ca 0100 	strd	r0, r1, [sl]
 800c28c:	4646      	mov	r6, r8
 800c28e:	464f      	mov	r7, r9
 800c290:	e9da 8900 	ldrd	r8, r9, [sl]
 800c294:	4630      	mov	r0, r6
 800c296:	4642      	mov	r2, r8
 800c298:	464b      	mov	r3, r9
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f4 f814 	bl	80002c8 <__aeabi_dsub>
 800c2a0:	462b      	mov	r3, r5
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	f7f4 f810 	bl	80002c8 <__aeabi_dsub>
 800c2a8:	9b02      	ldr	r3, [sp, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c2b0:	f6bf af0a 	bge.w	800c0c8 <__ieee754_rem_pio2+0x80>
 800c2b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c2b8:	f8ca 3004 	str.w	r3, [sl, #4]
 800c2bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2c0:	f8ca 8000 	str.w	r8, [sl]
 800c2c4:	f8ca 0008 	str.w	r0, [sl, #8]
 800c2c8:	f8ca 300c 	str.w	r3, [sl, #12]
 800c2cc:	f1cb 0b00 	rsb	fp, fp, #0
 800c2d0:	e6fa      	b.n	800c0c8 <__ieee754_rem_pio2+0x80>
 800c2d2:	a327      	add	r3, pc, #156	; (adr r3, 800c370 <__ieee754_rem_pio2+0x328>)
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	ec51 0b18 	vmov	r0, r1, d8
 800c2dc:	f7f4 f9ac 	bl	8000638 <__aeabi_dmul>
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4640      	mov	r0, r8
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	f7f3 ffec 	bl	80002c8 <__aeabi_dsub>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	460f      	mov	r7, r1
 800c2f8:	4640      	mov	r0, r8
 800c2fa:	4649      	mov	r1, r9
 800c2fc:	f7f3 ffe4 	bl	80002c8 <__aeabi_dsub>
 800c300:	4622      	mov	r2, r4
 800c302:	462b      	mov	r3, r5
 800c304:	f7f3 ffe0 	bl	80002c8 <__aeabi_dsub>
 800c308:	a31b      	add	r3, pc, #108	; (adr r3, 800c378 <__ieee754_rem_pio2+0x330>)
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	4604      	mov	r4, r0
 800c310:	460d      	mov	r5, r1
 800c312:	ec51 0b18 	vmov	r0, r1, d8
 800c316:	f7f4 f98f 	bl	8000638 <__aeabi_dmul>
 800c31a:	4622      	mov	r2, r4
 800c31c:	462b      	mov	r3, r5
 800c31e:	f7f3 ffd3 	bl	80002c8 <__aeabi_dsub>
 800c322:	4604      	mov	r4, r0
 800c324:	460d      	mov	r5, r1
 800c326:	e75f      	b.n	800c1e8 <__ieee754_rem_pio2+0x1a0>
 800c328:	4b1b      	ldr	r3, [pc, #108]	; (800c398 <__ieee754_rem_pio2+0x350>)
 800c32a:	4598      	cmp	r8, r3
 800c32c:	dd36      	ble.n	800c39c <__ieee754_rem_pio2+0x354>
 800c32e:	ee10 2a10 	vmov	r2, s0
 800c332:	462b      	mov	r3, r5
 800c334:	4620      	mov	r0, r4
 800c336:	4629      	mov	r1, r5
 800c338:	f7f3 ffc6 	bl	80002c8 <__aeabi_dsub>
 800c33c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c340:	e9ca 0100 	strd	r0, r1, [sl]
 800c344:	e694      	b.n	800c070 <__ieee754_rem_pio2+0x28>
 800c346:	bf00      	nop
 800c348:	54400000 	.word	0x54400000
 800c34c:	3ff921fb 	.word	0x3ff921fb
 800c350:	1a626331 	.word	0x1a626331
 800c354:	3dd0b461 	.word	0x3dd0b461
 800c358:	1a600000 	.word	0x1a600000
 800c35c:	3dd0b461 	.word	0x3dd0b461
 800c360:	2e037073 	.word	0x2e037073
 800c364:	3ba3198a 	.word	0x3ba3198a
 800c368:	6dc9c883 	.word	0x6dc9c883
 800c36c:	3fe45f30 	.word	0x3fe45f30
 800c370:	2e000000 	.word	0x2e000000
 800c374:	3ba3198a 	.word	0x3ba3198a
 800c378:	252049c1 	.word	0x252049c1
 800c37c:	397b839a 	.word	0x397b839a
 800c380:	3fe921fb 	.word	0x3fe921fb
 800c384:	4002d97b 	.word	0x4002d97b
 800c388:	3ff921fb 	.word	0x3ff921fb
 800c38c:	413921fb 	.word	0x413921fb
 800c390:	3fe00000 	.word	0x3fe00000
 800c394:	0800d538 	.word	0x0800d538
 800c398:	7fefffff 	.word	0x7fefffff
 800c39c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c3a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c3a4:	ee10 0a10 	vmov	r0, s0
 800c3a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c3ac:	ee10 6a10 	vmov	r6, s0
 800c3b0:	460f      	mov	r7, r1
 800c3b2:	f7f4 fbf1 	bl	8000b98 <__aeabi_d2iz>
 800c3b6:	f7f4 f8d5 	bl	8000564 <__aeabi_i2d>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4630      	mov	r0, r6
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3c6:	f7f3 ff7f 	bl	80002c8 <__aeabi_dsub>
 800c3ca:	4b23      	ldr	r3, [pc, #140]	; (800c458 <__ieee754_rem_pio2+0x410>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f7f4 f933 	bl	8000638 <__aeabi_dmul>
 800c3d2:	460f      	mov	r7, r1
 800c3d4:	4606      	mov	r6, r0
 800c3d6:	f7f4 fbdf 	bl	8000b98 <__aeabi_d2iz>
 800c3da:	f7f4 f8c3 	bl	8000564 <__aeabi_i2d>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3ea:	f7f3 ff6d 	bl	80002c8 <__aeabi_dsub>
 800c3ee:	4b1a      	ldr	r3, [pc, #104]	; (800c458 <__ieee754_rem_pio2+0x410>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f7f4 f921 	bl	8000638 <__aeabi_dmul>
 800c3f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3fa:	ad04      	add	r5, sp, #16
 800c3fc:	f04f 0803 	mov.w	r8, #3
 800c400:	46a9      	mov	r9, r5
 800c402:	2600      	movs	r6, #0
 800c404:	2700      	movs	r7, #0
 800c406:	4632      	mov	r2, r6
 800c408:	463b      	mov	r3, r7
 800c40a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c40e:	46c3      	mov	fp, r8
 800c410:	3d08      	subs	r5, #8
 800c412:	f108 38ff 	add.w	r8, r8, #4294967295
 800c416:	f7f4 fb77 	bl	8000b08 <__aeabi_dcmpeq>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d1f3      	bne.n	800c406 <__ieee754_rem_pio2+0x3be>
 800c41e:	4b0f      	ldr	r3, [pc, #60]	; (800c45c <__ieee754_rem_pio2+0x414>)
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	2302      	movs	r3, #2
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	4622      	mov	r2, r4
 800c428:	465b      	mov	r3, fp
 800c42a:	4651      	mov	r1, sl
 800c42c:	4648      	mov	r0, r9
 800c42e:	f000 f993 	bl	800c758 <__kernel_rem_pio2>
 800c432:	9b02      	ldr	r3, [sp, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	4683      	mov	fp, r0
 800c438:	f6bf ae46 	bge.w	800c0c8 <__ieee754_rem_pio2+0x80>
 800c43c:	e9da 2100 	ldrd	r2, r1, [sl]
 800c440:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c444:	e9ca 2300 	strd	r2, r3, [sl]
 800c448:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c44c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c450:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c454:	e73a      	b.n	800c2cc <__ieee754_rem_pio2+0x284>
 800c456:	bf00      	nop
 800c458:	41700000 	.word	0x41700000
 800c45c:	0800d5b8 	.word	0x0800d5b8

0800c460 <__ieee754_sqrt>:
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	ec55 4b10 	vmov	r4, r5, d0
 800c468:	4e55      	ldr	r6, [pc, #340]	; (800c5c0 <__ieee754_sqrt+0x160>)
 800c46a:	43ae      	bics	r6, r5
 800c46c:	ee10 0a10 	vmov	r0, s0
 800c470:	ee10 3a10 	vmov	r3, s0
 800c474:	462a      	mov	r2, r5
 800c476:	4629      	mov	r1, r5
 800c478:	d110      	bne.n	800c49c <__ieee754_sqrt+0x3c>
 800c47a:	ee10 2a10 	vmov	r2, s0
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 f8da 	bl	8000638 <__aeabi_dmul>
 800c484:	4602      	mov	r2, r0
 800c486:	460b      	mov	r3, r1
 800c488:	4620      	mov	r0, r4
 800c48a:	4629      	mov	r1, r5
 800c48c:	f7f3 ff1e 	bl	80002cc <__adddf3>
 800c490:	4604      	mov	r4, r0
 800c492:	460d      	mov	r5, r1
 800c494:	ec45 4b10 	vmov	d0, r4, r5
 800c498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49c:	2d00      	cmp	r5, #0
 800c49e:	dc10      	bgt.n	800c4c2 <__ieee754_sqrt+0x62>
 800c4a0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c4a4:	4330      	orrs	r0, r6
 800c4a6:	d0f5      	beq.n	800c494 <__ieee754_sqrt+0x34>
 800c4a8:	b15d      	cbz	r5, 800c4c2 <__ieee754_sqrt+0x62>
 800c4aa:	ee10 2a10 	vmov	r2, s0
 800c4ae:	462b      	mov	r3, r5
 800c4b0:	ee10 0a10 	vmov	r0, s0
 800c4b4:	f7f3 ff08 	bl	80002c8 <__aeabi_dsub>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	f7f4 f9e6 	bl	800088c <__aeabi_ddiv>
 800c4c0:	e7e6      	b.n	800c490 <__ieee754_sqrt+0x30>
 800c4c2:	1512      	asrs	r2, r2, #20
 800c4c4:	d074      	beq.n	800c5b0 <__ieee754_sqrt+0x150>
 800c4c6:	07d4      	lsls	r4, r2, #31
 800c4c8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c4cc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c4d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4d4:	bf5e      	ittt	pl
 800c4d6:	0fda      	lsrpl	r2, r3, #31
 800c4d8:	005b      	lslpl	r3, r3, #1
 800c4da:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c4de:	2400      	movs	r4, #0
 800c4e0:	0fda      	lsrs	r2, r3, #31
 800c4e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c4e6:	107f      	asrs	r7, r7, #1
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	2516      	movs	r5, #22
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c4f2:	1886      	adds	r6, r0, r2
 800c4f4:	428e      	cmp	r6, r1
 800c4f6:	bfde      	ittt	le
 800c4f8:	1b89      	suble	r1, r1, r6
 800c4fa:	18b0      	addle	r0, r6, r2
 800c4fc:	18a4      	addle	r4, r4, r2
 800c4fe:	0049      	lsls	r1, r1, #1
 800c500:	3d01      	subs	r5, #1
 800c502:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c506:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c50a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c50e:	d1f0      	bne.n	800c4f2 <__ieee754_sqrt+0x92>
 800c510:	462a      	mov	r2, r5
 800c512:	f04f 0e20 	mov.w	lr, #32
 800c516:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c51a:	4281      	cmp	r1, r0
 800c51c:	eb06 0c05 	add.w	ip, r6, r5
 800c520:	dc02      	bgt.n	800c528 <__ieee754_sqrt+0xc8>
 800c522:	d113      	bne.n	800c54c <__ieee754_sqrt+0xec>
 800c524:	459c      	cmp	ip, r3
 800c526:	d811      	bhi.n	800c54c <__ieee754_sqrt+0xec>
 800c528:	f1bc 0f00 	cmp.w	ip, #0
 800c52c:	eb0c 0506 	add.w	r5, ip, r6
 800c530:	da43      	bge.n	800c5ba <__ieee754_sqrt+0x15a>
 800c532:	2d00      	cmp	r5, #0
 800c534:	db41      	blt.n	800c5ba <__ieee754_sqrt+0x15a>
 800c536:	f100 0801 	add.w	r8, r0, #1
 800c53a:	1a09      	subs	r1, r1, r0
 800c53c:	459c      	cmp	ip, r3
 800c53e:	bf88      	it	hi
 800c540:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c544:	eba3 030c 	sub.w	r3, r3, ip
 800c548:	4432      	add	r2, r6
 800c54a:	4640      	mov	r0, r8
 800c54c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c550:	f1be 0e01 	subs.w	lr, lr, #1
 800c554:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c558:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c55c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c560:	d1db      	bne.n	800c51a <__ieee754_sqrt+0xba>
 800c562:	430b      	orrs	r3, r1
 800c564:	d006      	beq.n	800c574 <__ieee754_sqrt+0x114>
 800c566:	1c50      	adds	r0, r2, #1
 800c568:	bf13      	iteet	ne
 800c56a:	3201      	addne	r2, #1
 800c56c:	3401      	addeq	r4, #1
 800c56e:	4672      	moveq	r2, lr
 800c570:	f022 0201 	bicne.w	r2, r2, #1
 800c574:	1063      	asrs	r3, r4, #1
 800c576:	0852      	lsrs	r2, r2, #1
 800c578:	07e1      	lsls	r1, r4, #31
 800c57a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c57e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c582:	bf48      	it	mi
 800c584:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c588:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c58c:	4614      	mov	r4, r2
 800c58e:	e781      	b.n	800c494 <__ieee754_sqrt+0x34>
 800c590:	0ad9      	lsrs	r1, r3, #11
 800c592:	3815      	subs	r0, #21
 800c594:	055b      	lsls	r3, r3, #21
 800c596:	2900      	cmp	r1, #0
 800c598:	d0fa      	beq.n	800c590 <__ieee754_sqrt+0x130>
 800c59a:	02cd      	lsls	r5, r1, #11
 800c59c:	d50a      	bpl.n	800c5b4 <__ieee754_sqrt+0x154>
 800c59e:	f1c2 0420 	rsb	r4, r2, #32
 800c5a2:	fa23 f404 	lsr.w	r4, r3, r4
 800c5a6:	1e55      	subs	r5, r2, #1
 800c5a8:	4093      	lsls	r3, r2
 800c5aa:	4321      	orrs	r1, r4
 800c5ac:	1b42      	subs	r2, r0, r5
 800c5ae:	e78a      	b.n	800c4c6 <__ieee754_sqrt+0x66>
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	e7f0      	b.n	800c596 <__ieee754_sqrt+0x136>
 800c5b4:	0049      	lsls	r1, r1, #1
 800c5b6:	3201      	adds	r2, #1
 800c5b8:	e7ef      	b.n	800c59a <__ieee754_sqrt+0x13a>
 800c5ba:	4680      	mov	r8, r0
 800c5bc:	e7bd      	b.n	800c53a <__ieee754_sqrt+0xda>
 800c5be:	bf00      	nop
 800c5c0:	7ff00000 	.word	0x7ff00000
 800c5c4:	00000000 	.word	0x00000000

0800c5c8 <__kernel_cos>:
 800c5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	ec57 6b10 	vmov	r6, r7, d0
 800c5d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c5d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c5d8:	ed8d 1b00 	vstr	d1, [sp]
 800c5dc:	da07      	bge.n	800c5ee <__kernel_cos+0x26>
 800c5de:	ee10 0a10 	vmov	r0, s0
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f4 fad8 	bl	8000b98 <__aeabi_d2iz>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	f000 8088 	beq.w	800c6fe <__kernel_cos+0x136>
 800c5ee:	4632      	mov	r2, r6
 800c5f0:	463b      	mov	r3, r7
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	f7f4 f81f 	bl	8000638 <__aeabi_dmul>
 800c5fa:	4b51      	ldr	r3, [pc, #324]	; (800c740 <__kernel_cos+0x178>)
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	4604      	mov	r4, r0
 800c600:	460d      	mov	r5, r1
 800c602:	f7f4 f819 	bl	8000638 <__aeabi_dmul>
 800c606:	a340      	add	r3, pc, #256	; (adr r3, 800c708 <__kernel_cos+0x140>)
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	4682      	mov	sl, r0
 800c60e:	468b      	mov	fp, r1
 800c610:	4620      	mov	r0, r4
 800c612:	4629      	mov	r1, r5
 800c614:	f7f4 f810 	bl	8000638 <__aeabi_dmul>
 800c618:	a33d      	add	r3, pc, #244	; (adr r3, 800c710 <__kernel_cos+0x148>)
 800c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61e:	f7f3 fe55 	bl	80002cc <__adddf3>
 800c622:	4622      	mov	r2, r4
 800c624:	462b      	mov	r3, r5
 800c626:	f7f4 f807 	bl	8000638 <__aeabi_dmul>
 800c62a:	a33b      	add	r3, pc, #236	; (adr r3, 800c718 <__kernel_cos+0x150>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 fe4a 	bl	80002c8 <__aeabi_dsub>
 800c634:	4622      	mov	r2, r4
 800c636:	462b      	mov	r3, r5
 800c638:	f7f3 fffe 	bl	8000638 <__aeabi_dmul>
 800c63c:	a338      	add	r3, pc, #224	; (adr r3, 800c720 <__kernel_cos+0x158>)
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	f7f3 fe43 	bl	80002cc <__adddf3>
 800c646:	4622      	mov	r2, r4
 800c648:	462b      	mov	r3, r5
 800c64a:	f7f3 fff5 	bl	8000638 <__aeabi_dmul>
 800c64e:	a336      	add	r3, pc, #216	; (adr r3, 800c728 <__kernel_cos+0x160>)
 800c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c654:	f7f3 fe38 	bl	80002c8 <__aeabi_dsub>
 800c658:	4622      	mov	r2, r4
 800c65a:	462b      	mov	r3, r5
 800c65c:	f7f3 ffec 	bl	8000638 <__aeabi_dmul>
 800c660:	a333      	add	r3, pc, #204	; (adr r3, 800c730 <__kernel_cos+0x168>)
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f7f3 fe31 	bl	80002cc <__adddf3>
 800c66a:	4622      	mov	r2, r4
 800c66c:	462b      	mov	r3, r5
 800c66e:	f7f3 ffe3 	bl	8000638 <__aeabi_dmul>
 800c672:	4622      	mov	r2, r4
 800c674:	462b      	mov	r3, r5
 800c676:	f7f3 ffdf 	bl	8000638 <__aeabi_dmul>
 800c67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c67e:	4604      	mov	r4, r0
 800c680:	460d      	mov	r5, r1
 800c682:	4630      	mov	r0, r6
 800c684:	4639      	mov	r1, r7
 800c686:	f7f3 ffd7 	bl	8000638 <__aeabi_dmul>
 800c68a:	460b      	mov	r3, r1
 800c68c:	4602      	mov	r2, r0
 800c68e:	4629      	mov	r1, r5
 800c690:	4620      	mov	r0, r4
 800c692:	f7f3 fe19 	bl	80002c8 <__aeabi_dsub>
 800c696:	4b2b      	ldr	r3, [pc, #172]	; (800c744 <__kernel_cos+0x17c>)
 800c698:	4598      	cmp	r8, r3
 800c69a:	4606      	mov	r6, r0
 800c69c:	460f      	mov	r7, r1
 800c69e:	dc10      	bgt.n	800c6c2 <__kernel_cos+0xfa>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4650      	mov	r0, sl
 800c6a6:	4659      	mov	r1, fp
 800c6a8:	f7f3 fe0e 	bl	80002c8 <__aeabi_dsub>
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4926      	ldr	r1, [pc, #152]	; (800c748 <__kernel_cos+0x180>)
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	f7f3 fe08 	bl	80002c8 <__aeabi_dsub>
 800c6b8:	ec41 0b10 	vmov	d0, r0, r1
 800c6bc:	b003      	add	sp, #12
 800c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c2:	4b22      	ldr	r3, [pc, #136]	; (800c74c <__kernel_cos+0x184>)
 800c6c4:	4920      	ldr	r1, [pc, #128]	; (800c748 <__kernel_cos+0x180>)
 800c6c6:	4598      	cmp	r8, r3
 800c6c8:	bfcc      	ite	gt
 800c6ca:	4d21      	ldrgt	r5, [pc, #132]	; (800c750 <__kernel_cos+0x188>)
 800c6cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c6d0:	2400      	movs	r4, #0
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	462b      	mov	r3, r5
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	f7f3 fdf6 	bl	80002c8 <__aeabi_dsub>
 800c6dc:	4622      	mov	r2, r4
 800c6de:	4680      	mov	r8, r0
 800c6e0:	4689      	mov	r9, r1
 800c6e2:	462b      	mov	r3, r5
 800c6e4:	4650      	mov	r0, sl
 800c6e6:	4659      	mov	r1, fp
 800c6e8:	f7f3 fdee 	bl	80002c8 <__aeabi_dsub>
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	463b      	mov	r3, r7
 800c6f0:	f7f3 fdea 	bl	80002c8 <__aeabi_dsub>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	e7da      	b.n	800c6b4 <__kernel_cos+0xec>
 800c6fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c738 <__kernel_cos+0x170>
 800c702:	e7db      	b.n	800c6bc <__kernel_cos+0xf4>
 800c704:	f3af 8000 	nop.w
 800c708:	be8838d4 	.word	0xbe8838d4
 800c70c:	bda8fae9 	.word	0xbda8fae9
 800c710:	bdb4b1c4 	.word	0xbdb4b1c4
 800c714:	3e21ee9e 	.word	0x3e21ee9e
 800c718:	809c52ad 	.word	0x809c52ad
 800c71c:	3e927e4f 	.word	0x3e927e4f
 800c720:	19cb1590 	.word	0x19cb1590
 800c724:	3efa01a0 	.word	0x3efa01a0
 800c728:	16c15177 	.word	0x16c15177
 800c72c:	3f56c16c 	.word	0x3f56c16c
 800c730:	5555554c 	.word	0x5555554c
 800c734:	3fa55555 	.word	0x3fa55555
 800c738:	00000000 	.word	0x00000000
 800c73c:	3ff00000 	.word	0x3ff00000
 800c740:	3fe00000 	.word	0x3fe00000
 800c744:	3fd33332 	.word	0x3fd33332
 800c748:	3ff00000 	.word	0x3ff00000
 800c74c:	3fe90000 	.word	0x3fe90000
 800c750:	3fd20000 	.word	0x3fd20000
 800c754:	00000000 	.word	0x00000000

0800c758 <__kernel_rem_pio2>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	ed2d 8b02 	vpush	{d8}
 800c760:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c764:	f112 0f14 	cmn.w	r2, #20
 800c768:	9308      	str	r3, [sp, #32]
 800c76a:	9101      	str	r1, [sp, #4]
 800c76c:	4bc4      	ldr	r3, [pc, #784]	; (800ca80 <__kernel_rem_pio2+0x328>)
 800c76e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c770:	900b      	str	r0, [sp, #44]	; 0x2c
 800c772:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c776:	9302      	str	r3, [sp, #8]
 800c778:	9b08      	ldr	r3, [sp, #32]
 800c77a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c77e:	bfa8      	it	ge
 800c780:	1ed4      	subge	r4, r2, #3
 800c782:	9306      	str	r3, [sp, #24]
 800c784:	bfb2      	itee	lt
 800c786:	2400      	movlt	r4, #0
 800c788:	2318      	movge	r3, #24
 800c78a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c78e:	f06f 0317 	mvn.w	r3, #23
 800c792:	fb04 3303 	mla	r3, r4, r3, r3
 800c796:	eb03 0a02 	add.w	sl, r3, r2
 800c79a:	9b02      	ldr	r3, [sp, #8]
 800c79c:	9a06      	ldr	r2, [sp, #24]
 800c79e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ca70 <__kernel_rem_pio2+0x318>
 800c7a2:	eb03 0802 	add.w	r8, r3, r2
 800c7a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c7a8:	1aa7      	subs	r7, r4, r2
 800c7aa:	ae22      	add	r6, sp, #136	; 0x88
 800c7ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c7b0:	2500      	movs	r5, #0
 800c7b2:	4545      	cmp	r5, r8
 800c7b4:	dd13      	ble.n	800c7de <__kernel_rem_pio2+0x86>
 800c7b6:	9b08      	ldr	r3, [sp, #32]
 800c7b8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ca70 <__kernel_rem_pio2+0x318>
 800c7bc:	aa22      	add	r2, sp, #136	; 0x88
 800c7be:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c7c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c7c6:	f04f 0800 	mov.w	r8, #0
 800c7ca:	9b02      	ldr	r3, [sp, #8]
 800c7cc:	4598      	cmp	r8, r3
 800c7ce:	dc2f      	bgt.n	800c830 <__kernel_rem_pio2+0xd8>
 800c7d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c7d4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c7d8:	462f      	mov	r7, r5
 800c7da:	2600      	movs	r6, #0
 800c7dc:	e01b      	b.n	800c816 <__kernel_rem_pio2+0xbe>
 800c7de:	42ef      	cmn	r7, r5
 800c7e0:	d407      	bmi.n	800c7f2 <__kernel_rem_pio2+0x9a>
 800c7e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c7e6:	f7f3 febd 	bl	8000564 <__aeabi_i2d>
 800c7ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c7ee:	3501      	adds	r5, #1
 800c7f0:	e7df      	b.n	800c7b2 <__kernel_rem_pio2+0x5a>
 800c7f2:	ec51 0b18 	vmov	r0, r1, d8
 800c7f6:	e7f8      	b.n	800c7ea <__kernel_rem_pio2+0x92>
 800c7f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c800:	f7f3 ff1a 	bl	8000638 <__aeabi_dmul>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c80c:	f7f3 fd5e 	bl	80002cc <__adddf3>
 800c810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c814:	3601      	adds	r6, #1
 800c816:	9b06      	ldr	r3, [sp, #24]
 800c818:	429e      	cmp	r6, r3
 800c81a:	f1a7 0708 	sub.w	r7, r7, #8
 800c81e:	ddeb      	ble.n	800c7f8 <__kernel_rem_pio2+0xa0>
 800c820:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c824:	f108 0801 	add.w	r8, r8, #1
 800c828:	ecab 7b02 	vstmia	fp!, {d7}
 800c82c:	3508      	adds	r5, #8
 800c82e:	e7cc      	b.n	800c7ca <__kernel_rem_pio2+0x72>
 800c830:	9b02      	ldr	r3, [sp, #8]
 800c832:	aa0e      	add	r2, sp, #56	; 0x38
 800c834:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c838:	930d      	str	r3, [sp, #52]	; 0x34
 800c83a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c83c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c840:	9c02      	ldr	r4, [sp, #8]
 800c842:	930c      	str	r3, [sp, #48]	; 0x30
 800c844:	00e3      	lsls	r3, r4, #3
 800c846:	930a      	str	r3, [sp, #40]	; 0x28
 800c848:	ab9a      	add	r3, sp, #616	; 0x268
 800c84a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c84e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c852:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c856:	ab72      	add	r3, sp, #456	; 0x1c8
 800c858:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c85c:	46c3      	mov	fp, r8
 800c85e:	46a1      	mov	r9, r4
 800c860:	f1b9 0f00 	cmp.w	r9, #0
 800c864:	f1a5 0508 	sub.w	r5, r5, #8
 800c868:	dc77      	bgt.n	800c95a <__kernel_rem_pio2+0x202>
 800c86a:	ec47 6b10 	vmov	d0, r6, r7
 800c86e:	4650      	mov	r0, sl
 800c870:	f000 fc46 	bl	800d100 <scalbn>
 800c874:	ec57 6b10 	vmov	r6, r7, d0
 800c878:	2200      	movs	r2, #0
 800c87a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c87e:	ee10 0a10 	vmov	r0, s0
 800c882:	4639      	mov	r1, r7
 800c884:	f7f3 fed8 	bl	8000638 <__aeabi_dmul>
 800c888:	ec41 0b10 	vmov	d0, r0, r1
 800c88c:	f000 fbb8 	bl	800d000 <floor>
 800c890:	4b7c      	ldr	r3, [pc, #496]	; (800ca84 <__kernel_rem_pio2+0x32c>)
 800c892:	ec51 0b10 	vmov	r0, r1, d0
 800c896:	2200      	movs	r2, #0
 800c898:	f7f3 fece 	bl	8000638 <__aeabi_dmul>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f7f3 fd10 	bl	80002c8 <__aeabi_dsub>
 800c8a8:	460f      	mov	r7, r1
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	f7f4 f974 	bl	8000b98 <__aeabi_d2iz>
 800c8b0:	9004      	str	r0, [sp, #16]
 800c8b2:	f7f3 fe57 	bl	8000564 <__aeabi_i2d>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	4639      	mov	r1, r7
 800c8be:	f7f3 fd03 	bl	80002c8 <__aeabi_dsub>
 800c8c2:	f1ba 0f00 	cmp.w	sl, #0
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	460f      	mov	r7, r1
 800c8ca:	dd6d      	ble.n	800c9a8 <__kernel_rem_pio2+0x250>
 800c8cc:	1e62      	subs	r2, r4, #1
 800c8ce:	ab0e      	add	r3, sp, #56	; 0x38
 800c8d0:	9d04      	ldr	r5, [sp, #16]
 800c8d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c8d6:	f1ca 0118 	rsb	r1, sl, #24
 800c8da:	fa40 f301 	asr.w	r3, r0, r1
 800c8de:	441d      	add	r5, r3
 800c8e0:	408b      	lsls	r3, r1
 800c8e2:	1ac0      	subs	r0, r0, r3
 800c8e4:	ab0e      	add	r3, sp, #56	; 0x38
 800c8e6:	9504      	str	r5, [sp, #16]
 800c8e8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c8ec:	f1ca 0317 	rsb	r3, sl, #23
 800c8f0:	fa40 fb03 	asr.w	fp, r0, r3
 800c8f4:	f1bb 0f00 	cmp.w	fp, #0
 800c8f8:	dd65      	ble.n	800c9c6 <__kernel_rem_pio2+0x26e>
 800c8fa:	9b04      	ldr	r3, [sp, #16]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	3301      	adds	r3, #1
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	4615      	mov	r5, r2
 800c904:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c908:	4294      	cmp	r4, r2
 800c90a:	f300 809c 	bgt.w	800ca46 <__kernel_rem_pio2+0x2ee>
 800c90e:	f1ba 0f00 	cmp.w	sl, #0
 800c912:	dd07      	ble.n	800c924 <__kernel_rem_pio2+0x1cc>
 800c914:	f1ba 0f01 	cmp.w	sl, #1
 800c918:	f000 80c0 	beq.w	800ca9c <__kernel_rem_pio2+0x344>
 800c91c:	f1ba 0f02 	cmp.w	sl, #2
 800c920:	f000 80c6 	beq.w	800cab0 <__kernel_rem_pio2+0x358>
 800c924:	f1bb 0f02 	cmp.w	fp, #2
 800c928:	d14d      	bne.n	800c9c6 <__kernel_rem_pio2+0x26e>
 800c92a:	4632      	mov	r2, r6
 800c92c:	463b      	mov	r3, r7
 800c92e:	4956      	ldr	r1, [pc, #344]	; (800ca88 <__kernel_rem_pio2+0x330>)
 800c930:	2000      	movs	r0, #0
 800c932:	f7f3 fcc9 	bl	80002c8 <__aeabi_dsub>
 800c936:	4606      	mov	r6, r0
 800c938:	460f      	mov	r7, r1
 800c93a:	2d00      	cmp	r5, #0
 800c93c:	d043      	beq.n	800c9c6 <__kernel_rem_pio2+0x26e>
 800c93e:	4650      	mov	r0, sl
 800c940:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ca78 <__kernel_rem_pio2+0x320>
 800c944:	f000 fbdc 	bl	800d100 <scalbn>
 800c948:	4630      	mov	r0, r6
 800c94a:	4639      	mov	r1, r7
 800c94c:	ec53 2b10 	vmov	r2, r3, d0
 800c950:	f7f3 fcba 	bl	80002c8 <__aeabi_dsub>
 800c954:	4606      	mov	r6, r0
 800c956:	460f      	mov	r7, r1
 800c958:	e035      	b.n	800c9c6 <__kernel_rem_pio2+0x26e>
 800c95a:	4b4c      	ldr	r3, [pc, #304]	; (800ca8c <__kernel_rem_pio2+0x334>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	4630      	mov	r0, r6
 800c960:	4639      	mov	r1, r7
 800c962:	f7f3 fe69 	bl	8000638 <__aeabi_dmul>
 800c966:	f7f4 f917 	bl	8000b98 <__aeabi_d2iz>
 800c96a:	f7f3 fdfb 	bl	8000564 <__aeabi_i2d>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	ec43 2b18 	vmov	d8, r2, r3
 800c976:	4b46      	ldr	r3, [pc, #280]	; (800ca90 <__kernel_rem_pio2+0x338>)
 800c978:	2200      	movs	r2, #0
 800c97a:	f7f3 fe5d 	bl	8000638 <__aeabi_dmul>
 800c97e:	4602      	mov	r2, r0
 800c980:	460b      	mov	r3, r1
 800c982:	4630      	mov	r0, r6
 800c984:	4639      	mov	r1, r7
 800c986:	f7f3 fc9f 	bl	80002c8 <__aeabi_dsub>
 800c98a:	f7f4 f905 	bl	8000b98 <__aeabi_d2iz>
 800c98e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c992:	f84b 0b04 	str.w	r0, [fp], #4
 800c996:	ec51 0b18 	vmov	r0, r1, d8
 800c99a:	f7f3 fc97 	bl	80002cc <__adddf3>
 800c99e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	460f      	mov	r7, r1
 800c9a6:	e75b      	b.n	800c860 <__kernel_rem_pio2+0x108>
 800c9a8:	d106      	bne.n	800c9b8 <__kernel_rem_pio2+0x260>
 800c9aa:	1e63      	subs	r3, r4, #1
 800c9ac:	aa0e      	add	r2, sp, #56	; 0x38
 800c9ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c9b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c9b6:	e79d      	b.n	800c8f4 <__kernel_rem_pio2+0x19c>
 800c9b8:	4b36      	ldr	r3, [pc, #216]	; (800ca94 <__kernel_rem_pio2+0x33c>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f7f4 f8c2 	bl	8000b44 <__aeabi_dcmpge>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d13d      	bne.n	800ca40 <__kernel_rem_pio2+0x2e8>
 800c9c4:	4683      	mov	fp, r0
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	4639      	mov	r1, r7
 800c9ce:	f7f4 f89b 	bl	8000b08 <__aeabi_dcmpeq>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	f000 80c0 	beq.w	800cb58 <__kernel_rem_pio2+0x400>
 800c9d8:	1e65      	subs	r5, r4, #1
 800c9da:	462b      	mov	r3, r5
 800c9dc:	2200      	movs	r2, #0
 800c9de:	9902      	ldr	r1, [sp, #8]
 800c9e0:	428b      	cmp	r3, r1
 800c9e2:	da6c      	bge.n	800cabe <__kernel_rem_pio2+0x366>
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	f000 8089 	beq.w	800cafc <__kernel_rem_pio2+0x3a4>
 800c9ea:	ab0e      	add	r3, sp, #56	; 0x38
 800c9ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800c9f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 80ad 	beq.w	800cb54 <__kernel_rem_pio2+0x3fc>
 800c9fa:	4650      	mov	r0, sl
 800c9fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ca78 <__kernel_rem_pio2+0x320>
 800ca00:	f000 fb7e 	bl	800d100 <scalbn>
 800ca04:	ab9a      	add	r3, sp, #616	; 0x268
 800ca06:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ca0a:	ec57 6b10 	vmov	r6, r7, d0
 800ca0e:	00ec      	lsls	r4, r5, #3
 800ca10:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ca14:	46aa      	mov	sl, r5
 800ca16:	f1ba 0f00 	cmp.w	sl, #0
 800ca1a:	f280 80d6 	bge.w	800cbca <__kernel_rem_pio2+0x472>
 800ca1e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ca70 <__kernel_rem_pio2+0x318>
 800ca22:	462e      	mov	r6, r5
 800ca24:	2e00      	cmp	r6, #0
 800ca26:	f2c0 8104 	blt.w	800cc32 <__kernel_rem_pio2+0x4da>
 800ca2a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ca2c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ca30:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ca98 <__kernel_rem_pio2+0x340>
 800ca34:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ca38:	f04f 0800 	mov.w	r8, #0
 800ca3c:	1baf      	subs	r7, r5, r6
 800ca3e:	e0ea      	b.n	800cc16 <__kernel_rem_pio2+0x4be>
 800ca40:	f04f 0b02 	mov.w	fp, #2
 800ca44:	e759      	b.n	800c8fa <__kernel_rem_pio2+0x1a2>
 800ca46:	f8d8 3000 	ldr.w	r3, [r8]
 800ca4a:	b955      	cbnz	r5, 800ca62 <__kernel_rem_pio2+0x30a>
 800ca4c:	b123      	cbz	r3, 800ca58 <__kernel_rem_pio2+0x300>
 800ca4e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ca52:	f8c8 3000 	str.w	r3, [r8]
 800ca56:	2301      	movs	r3, #1
 800ca58:	3201      	adds	r2, #1
 800ca5a:	f108 0804 	add.w	r8, r8, #4
 800ca5e:	461d      	mov	r5, r3
 800ca60:	e752      	b.n	800c908 <__kernel_rem_pio2+0x1b0>
 800ca62:	1acb      	subs	r3, r1, r3
 800ca64:	f8c8 3000 	str.w	r3, [r8]
 800ca68:	462b      	mov	r3, r5
 800ca6a:	e7f5      	b.n	800ca58 <__kernel_rem_pio2+0x300>
 800ca6c:	f3af 8000 	nop.w
	...
 800ca7c:	3ff00000 	.word	0x3ff00000
 800ca80:	0800d700 	.word	0x0800d700
 800ca84:	40200000 	.word	0x40200000
 800ca88:	3ff00000 	.word	0x3ff00000
 800ca8c:	3e700000 	.word	0x3e700000
 800ca90:	41700000 	.word	0x41700000
 800ca94:	3fe00000 	.word	0x3fe00000
 800ca98:	0800d6c0 	.word	0x0800d6c0
 800ca9c:	1e62      	subs	r2, r4, #1
 800ca9e:	ab0e      	add	r3, sp, #56	; 0x38
 800caa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800caa8:	a90e      	add	r1, sp, #56	; 0x38
 800caaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800caae:	e739      	b.n	800c924 <__kernel_rem_pio2+0x1cc>
 800cab0:	1e62      	subs	r2, r4, #1
 800cab2:	ab0e      	add	r3, sp, #56	; 0x38
 800cab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cab8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cabc:	e7f4      	b.n	800caa8 <__kernel_rem_pio2+0x350>
 800cabe:	a90e      	add	r1, sp, #56	; 0x38
 800cac0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	430a      	orrs	r2, r1
 800cac8:	e789      	b.n	800c9de <__kernel_rem_pio2+0x286>
 800caca:	3301      	adds	r3, #1
 800cacc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cad0:	2900      	cmp	r1, #0
 800cad2:	d0fa      	beq.n	800caca <__kernel_rem_pio2+0x372>
 800cad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cad6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800cada:	446a      	add	r2, sp
 800cadc:	3a98      	subs	r2, #152	; 0x98
 800cade:	920a      	str	r2, [sp, #40]	; 0x28
 800cae0:	9a08      	ldr	r2, [sp, #32]
 800cae2:	18e3      	adds	r3, r4, r3
 800cae4:	18a5      	adds	r5, r4, r2
 800cae6:	aa22      	add	r2, sp, #136	; 0x88
 800cae8:	f104 0801 	add.w	r8, r4, #1
 800caec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800caf0:	9304      	str	r3, [sp, #16]
 800caf2:	9b04      	ldr	r3, [sp, #16]
 800caf4:	4543      	cmp	r3, r8
 800caf6:	da04      	bge.n	800cb02 <__kernel_rem_pio2+0x3aa>
 800caf8:	461c      	mov	r4, r3
 800cafa:	e6a3      	b.n	800c844 <__kernel_rem_pio2+0xec>
 800cafc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cafe:	2301      	movs	r3, #1
 800cb00:	e7e4      	b.n	800cacc <__kernel_rem_pio2+0x374>
 800cb02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb04:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cb08:	f7f3 fd2c 	bl	8000564 <__aeabi_i2d>
 800cb0c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800cb10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb12:	46ab      	mov	fp, r5
 800cb14:	461c      	mov	r4, r3
 800cb16:	f04f 0900 	mov.w	r9, #0
 800cb1a:	2600      	movs	r6, #0
 800cb1c:	2700      	movs	r7, #0
 800cb1e:	9b06      	ldr	r3, [sp, #24]
 800cb20:	4599      	cmp	r9, r3
 800cb22:	dd06      	ble.n	800cb32 <__kernel_rem_pio2+0x3da>
 800cb24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb26:	e8e3 6702 	strd	r6, r7, [r3], #8
 800cb2a:	f108 0801 	add.w	r8, r8, #1
 800cb2e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb30:	e7df      	b.n	800caf2 <__kernel_rem_pio2+0x39a>
 800cb32:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cb36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cb3a:	f7f3 fd7d 	bl	8000638 <__aeabi_dmul>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4630      	mov	r0, r6
 800cb44:	4639      	mov	r1, r7
 800cb46:	f7f3 fbc1 	bl	80002cc <__adddf3>
 800cb4a:	f109 0901 	add.w	r9, r9, #1
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460f      	mov	r7, r1
 800cb52:	e7e4      	b.n	800cb1e <__kernel_rem_pio2+0x3c6>
 800cb54:	3d01      	subs	r5, #1
 800cb56:	e748      	b.n	800c9ea <__kernel_rem_pio2+0x292>
 800cb58:	ec47 6b10 	vmov	d0, r6, r7
 800cb5c:	f1ca 0000 	rsb	r0, sl, #0
 800cb60:	f000 face 	bl	800d100 <scalbn>
 800cb64:	ec57 6b10 	vmov	r6, r7, d0
 800cb68:	4ba0      	ldr	r3, [pc, #640]	; (800cdec <__kernel_rem_pio2+0x694>)
 800cb6a:	ee10 0a10 	vmov	r0, s0
 800cb6e:	2200      	movs	r2, #0
 800cb70:	4639      	mov	r1, r7
 800cb72:	f7f3 ffe7 	bl	8000b44 <__aeabi_dcmpge>
 800cb76:	b1f8      	cbz	r0, 800cbb8 <__kernel_rem_pio2+0x460>
 800cb78:	4b9d      	ldr	r3, [pc, #628]	; (800cdf0 <__kernel_rem_pio2+0x698>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	4639      	mov	r1, r7
 800cb80:	f7f3 fd5a 	bl	8000638 <__aeabi_dmul>
 800cb84:	f7f4 f808 	bl	8000b98 <__aeabi_d2iz>
 800cb88:	4680      	mov	r8, r0
 800cb8a:	f7f3 fceb 	bl	8000564 <__aeabi_i2d>
 800cb8e:	4b97      	ldr	r3, [pc, #604]	; (800cdec <__kernel_rem_pio2+0x694>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	f7f3 fd51 	bl	8000638 <__aeabi_dmul>
 800cb96:	460b      	mov	r3, r1
 800cb98:	4602      	mov	r2, r0
 800cb9a:	4639      	mov	r1, r7
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7f3 fb93 	bl	80002c8 <__aeabi_dsub>
 800cba2:	f7f3 fff9 	bl	8000b98 <__aeabi_d2iz>
 800cba6:	1c65      	adds	r5, r4, #1
 800cba8:	ab0e      	add	r3, sp, #56	; 0x38
 800cbaa:	f10a 0a18 	add.w	sl, sl, #24
 800cbae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cbb2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cbb6:	e720      	b.n	800c9fa <__kernel_rem_pio2+0x2a2>
 800cbb8:	4630      	mov	r0, r6
 800cbba:	4639      	mov	r1, r7
 800cbbc:	f7f3 ffec 	bl	8000b98 <__aeabi_d2iz>
 800cbc0:	ab0e      	add	r3, sp, #56	; 0x38
 800cbc2:	4625      	mov	r5, r4
 800cbc4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cbc8:	e717      	b.n	800c9fa <__kernel_rem_pio2+0x2a2>
 800cbca:	ab0e      	add	r3, sp, #56	; 0x38
 800cbcc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cbd0:	f7f3 fcc8 	bl	8000564 <__aeabi_i2d>
 800cbd4:	4632      	mov	r2, r6
 800cbd6:	463b      	mov	r3, r7
 800cbd8:	f7f3 fd2e 	bl	8000638 <__aeabi_dmul>
 800cbdc:	4b84      	ldr	r3, [pc, #528]	; (800cdf0 <__kernel_rem_pio2+0x698>)
 800cbde:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	4639      	mov	r1, r7
 800cbe8:	f7f3 fd26 	bl	8000638 <__aeabi_dmul>
 800cbec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbf0:	4606      	mov	r6, r0
 800cbf2:	460f      	mov	r7, r1
 800cbf4:	e70f      	b.n	800ca16 <__kernel_rem_pio2+0x2be>
 800cbf6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cbfa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800cbfe:	f7f3 fd1b 	bl	8000638 <__aeabi_dmul>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc0a:	f7f3 fb5f 	bl	80002cc <__adddf3>
 800cc0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc12:	f108 0801 	add.w	r8, r8, #1
 800cc16:	9b02      	ldr	r3, [sp, #8]
 800cc18:	4598      	cmp	r8, r3
 800cc1a:	dc01      	bgt.n	800cc20 <__kernel_rem_pio2+0x4c8>
 800cc1c:	45b8      	cmp	r8, r7
 800cc1e:	ddea      	ble.n	800cbf6 <__kernel_rem_pio2+0x49e>
 800cc20:	ed9d 7b06 	vldr	d7, [sp, #24]
 800cc24:	ab4a      	add	r3, sp, #296	; 0x128
 800cc26:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cc2a:	ed87 7b00 	vstr	d7, [r7]
 800cc2e:	3e01      	subs	r6, #1
 800cc30:	e6f8      	b.n	800ca24 <__kernel_rem_pio2+0x2cc>
 800cc32:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	dc0b      	bgt.n	800cc50 <__kernel_rem_pio2+0x4f8>
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dc35      	bgt.n	800cca8 <__kernel_rem_pio2+0x550>
 800cc3c:	d059      	beq.n	800ccf2 <__kernel_rem_pio2+0x59a>
 800cc3e:	9b04      	ldr	r3, [sp, #16]
 800cc40:	f003 0007 	and.w	r0, r3, #7
 800cc44:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cc48:	ecbd 8b02 	vpop	{d8}
 800cc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc50:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cc52:	2b03      	cmp	r3, #3
 800cc54:	d1f3      	bne.n	800cc3e <__kernel_rem_pio2+0x4e6>
 800cc56:	ab4a      	add	r3, sp, #296	; 0x128
 800cc58:	4423      	add	r3, r4
 800cc5a:	9306      	str	r3, [sp, #24]
 800cc5c:	461c      	mov	r4, r3
 800cc5e:	469a      	mov	sl, r3
 800cc60:	9502      	str	r5, [sp, #8]
 800cc62:	9b02      	ldr	r3, [sp, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f1aa 0a08 	sub.w	sl, sl, #8
 800cc6a:	dc6b      	bgt.n	800cd44 <__kernel_rem_pio2+0x5ec>
 800cc6c:	46aa      	mov	sl, r5
 800cc6e:	f1ba 0f01 	cmp.w	sl, #1
 800cc72:	f1a4 0408 	sub.w	r4, r4, #8
 800cc76:	f300 8085 	bgt.w	800cd84 <__kernel_rem_pio2+0x62c>
 800cc7a:	9c06      	ldr	r4, [sp, #24]
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	3408      	adds	r4, #8
 800cc80:	2100      	movs	r1, #0
 800cc82:	2d01      	cmp	r5, #1
 800cc84:	f300 809d 	bgt.w	800cdc2 <__kernel_rem_pio2+0x66a>
 800cc88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cc8c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800cc90:	f1bb 0f00 	cmp.w	fp, #0
 800cc94:	f040 809b 	bne.w	800cdce <__kernel_rem_pio2+0x676>
 800cc98:	9b01      	ldr	r3, [sp, #4]
 800cc9a:	e9c3 5600 	strd	r5, r6, [r3]
 800cc9e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cca2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cca6:	e7ca      	b.n	800cc3e <__kernel_rem_pio2+0x4e6>
 800cca8:	3408      	adds	r4, #8
 800ccaa:	ab4a      	add	r3, sp, #296	; 0x128
 800ccac:	441c      	add	r4, r3
 800ccae:	462e      	mov	r6, r5
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	2e00      	cmp	r6, #0
 800ccb6:	da36      	bge.n	800cd26 <__kernel_rem_pio2+0x5ce>
 800ccb8:	f1bb 0f00 	cmp.w	fp, #0
 800ccbc:	d039      	beq.n	800cd32 <__kernel_rem_pio2+0x5da>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccc4:	9c01      	ldr	r4, [sp, #4]
 800ccc6:	e9c4 2300 	strd	r2, r3, [r4]
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ccd2:	f7f3 faf9 	bl	80002c8 <__aeabi_dsub>
 800ccd6:	ae4c      	add	r6, sp, #304	; 0x130
 800ccd8:	2401      	movs	r4, #1
 800ccda:	42a5      	cmp	r5, r4
 800ccdc:	da2c      	bge.n	800cd38 <__kernel_rem_pio2+0x5e0>
 800ccde:	f1bb 0f00 	cmp.w	fp, #0
 800cce2:	d002      	beq.n	800ccea <__kernel_rem_pio2+0x592>
 800cce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cce8:	4619      	mov	r1, r3
 800ccea:	9b01      	ldr	r3, [sp, #4]
 800ccec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ccf0:	e7a5      	b.n	800cc3e <__kernel_rem_pio2+0x4e6>
 800ccf2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ccf6:	eb0d 0403 	add.w	r4, sp, r3
 800ccfa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ccfe:	2000      	movs	r0, #0
 800cd00:	2100      	movs	r1, #0
 800cd02:	2d00      	cmp	r5, #0
 800cd04:	da09      	bge.n	800cd1a <__kernel_rem_pio2+0x5c2>
 800cd06:	f1bb 0f00 	cmp.w	fp, #0
 800cd0a:	d002      	beq.n	800cd12 <__kernel_rem_pio2+0x5ba>
 800cd0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd10:	4619      	mov	r1, r3
 800cd12:	9b01      	ldr	r3, [sp, #4]
 800cd14:	e9c3 0100 	strd	r0, r1, [r3]
 800cd18:	e791      	b.n	800cc3e <__kernel_rem_pio2+0x4e6>
 800cd1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd1e:	f7f3 fad5 	bl	80002cc <__adddf3>
 800cd22:	3d01      	subs	r5, #1
 800cd24:	e7ed      	b.n	800cd02 <__kernel_rem_pio2+0x5aa>
 800cd26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd2a:	f7f3 facf 	bl	80002cc <__adddf3>
 800cd2e:	3e01      	subs	r6, #1
 800cd30:	e7c0      	b.n	800ccb4 <__kernel_rem_pio2+0x55c>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	e7c5      	b.n	800ccc4 <__kernel_rem_pio2+0x56c>
 800cd38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cd3c:	f7f3 fac6 	bl	80002cc <__adddf3>
 800cd40:	3401      	adds	r4, #1
 800cd42:	e7ca      	b.n	800ccda <__kernel_rem_pio2+0x582>
 800cd44:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cd4c:	9b02      	ldr	r3, [sp, #8]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	9302      	str	r3, [sp, #8]
 800cd52:	4632      	mov	r2, r6
 800cd54:	463b      	mov	r3, r7
 800cd56:	4640      	mov	r0, r8
 800cd58:	4649      	mov	r1, r9
 800cd5a:	f7f3 fab7 	bl	80002cc <__adddf3>
 800cd5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	4640      	mov	r0, r8
 800cd68:	4649      	mov	r1, r9
 800cd6a:	f7f3 faad 	bl	80002c8 <__aeabi_dsub>
 800cd6e:	4632      	mov	r2, r6
 800cd70:	463b      	mov	r3, r7
 800cd72:	f7f3 faab 	bl	80002cc <__adddf3>
 800cd76:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cd7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd7e:	ed8a 7b00 	vstr	d7, [sl]
 800cd82:	e76e      	b.n	800cc62 <__kernel_rem_pio2+0x50a>
 800cd84:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cd88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	4632      	mov	r2, r6
 800cd90:	463b      	mov	r3, r7
 800cd92:	4649      	mov	r1, r9
 800cd94:	f7f3 fa9a 	bl	80002cc <__adddf3>
 800cd98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	4640      	mov	r0, r8
 800cda2:	4649      	mov	r1, r9
 800cda4:	f7f3 fa90 	bl	80002c8 <__aeabi_dsub>
 800cda8:	4632      	mov	r2, r6
 800cdaa:	463b      	mov	r3, r7
 800cdac:	f7f3 fa8e 	bl	80002cc <__adddf3>
 800cdb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cdb8:	ed84 7b00 	vstr	d7, [r4]
 800cdbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdc0:	e755      	b.n	800cc6e <__kernel_rem_pio2+0x516>
 800cdc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cdc6:	f7f3 fa81 	bl	80002cc <__adddf3>
 800cdca:	3d01      	subs	r5, #1
 800cdcc:	e759      	b.n	800cc82 <__kernel_rem_pio2+0x52a>
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	9a01      	ldr	r2, [sp, #4]
 800cdd2:	601d      	str	r5, [r3, #0]
 800cdd4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800cdd8:	605c      	str	r4, [r3, #4]
 800cdda:	609f      	str	r7, [r3, #8]
 800cddc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cde0:	60d3      	str	r3, [r2, #12]
 800cde2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cde6:	6110      	str	r0, [r2, #16]
 800cde8:	6153      	str	r3, [r2, #20]
 800cdea:	e728      	b.n	800cc3e <__kernel_rem_pio2+0x4e6>
 800cdec:	41700000 	.word	0x41700000
 800cdf0:	3e700000 	.word	0x3e700000
 800cdf4:	00000000 	.word	0x00000000

0800cdf8 <__kernel_sin>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	ed2d 8b04 	vpush	{d8-d9}
 800ce00:	eeb0 8a41 	vmov.f32	s16, s2
 800ce04:	eef0 8a61 	vmov.f32	s17, s3
 800ce08:	ec55 4b10 	vmov	r4, r5, d0
 800ce0c:	b083      	sub	sp, #12
 800ce0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ce12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ce16:	9001      	str	r0, [sp, #4]
 800ce18:	da06      	bge.n	800ce28 <__kernel_sin+0x30>
 800ce1a:	ee10 0a10 	vmov	r0, s0
 800ce1e:	4629      	mov	r1, r5
 800ce20:	f7f3 feba 	bl	8000b98 <__aeabi_d2iz>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d051      	beq.n	800cecc <__kernel_sin+0xd4>
 800ce28:	4622      	mov	r2, r4
 800ce2a:	462b      	mov	r3, r5
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f7f3 fc02 	bl	8000638 <__aeabi_dmul>
 800ce34:	4682      	mov	sl, r0
 800ce36:	468b      	mov	fp, r1
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	4629      	mov	r1, r5
 800ce40:	f7f3 fbfa 	bl	8000638 <__aeabi_dmul>
 800ce44:	a341      	add	r3, pc, #260	; (adr r3, 800cf4c <__kernel_sin+0x154>)
 800ce46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4a:	4680      	mov	r8, r0
 800ce4c:	4689      	mov	r9, r1
 800ce4e:	4650      	mov	r0, sl
 800ce50:	4659      	mov	r1, fp
 800ce52:	f7f3 fbf1 	bl	8000638 <__aeabi_dmul>
 800ce56:	a33f      	add	r3, pc, #252	; (adr r3, 800cf54 <__kernel_sin+0x15c>)
 800ce58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5c:	f7f3 fa34 	bl	80002c8 <__aeabi_dsub>
 800ce60:	4652      	mov	r2, sl
 800ce62:	465b      	mov	r3, fp
 800ce64:	f7f3 fbe8 	bl	8000638 <__aeabi_dmul>
 800ce68:	a33c      	add	r3, pc, #240	; (adr r3, 800cf5c <__kernel_sin+0x164>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fa2d 	bl	80002cc <__adddf3>
 800ce72:	4652      	mov	r2, sl
 800ce74:	465b      	mov	r3, fp
 800ce76:	f7f3 fbdf 	bl	8000638 <__aeabi_dmul>
 800ce7a:	a33a      	add	r3, pc, #232	; (adr r3, 800cf64 <__kernel_sin+0x16c>)
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	f7f3 fa22 	bl	80002c8 <__aeabi_dsub>
 800ce84:	4652      	mov	r2, sl
 800ce86:	465b      	mov	r3, fp
 800ce88:	f7f3 fbd6 	bl	8000638 <__aeabi_dmul>
 800ce8c:	a337      	add	r3, pc, #220	; (adr r3, 800cf6c <__kernel_sin+0x174>)
 800ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce92:	f7f3 fa1b 	bl	80002cc <__adddf3>
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	4606      	mov	r6, r0
 800ce9a:	460f      	mov	r7, r1
 800ce9c:	b9eb      	cbnz	r3, 800ceda <__kernel_sin+0xe2>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4650      	mov	r0, sl
 800cea4:	4659      	mov	r1, fp
 800cea6:	f7f3 fbc7 	bl	8000638 <__aeabi_dmul>
 800ceaa:	a325      	add	r3, pc, #148	; (adr r3, 800cf40 <__kernel_sin+0x148>)
 800ceac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb0:	f7f3 fa0a 	bl	80002c8 <__aeabi_dsub>
 800ceb4:	4642      	mov	r2, r8
 800ceb6:	464b      	mov	r3, r9
 800ceb8:	f7f3 fbbe 	bl	8000638 <__aeabi_dmul>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	4620      	mov	r0, r4
 800cec2:	4629      	mov	r1, r5
 800cec4:	f7f3 fa02 	bl	80002cc <__adddf3>
 800cec8:	4604      	mov	r4, r0
 800ceca:	460d      	mov	r5, r1
 800cecc:	ec45 4b10 	vmov	d0, r4, r5
 800ced0:	b003      	add	sp, #12
 800ced2:	ecbd 8b04 	vpop	{d8-d9}
 800ced6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceda:	4b1b      	ldr	r3, [pc, #108]	; (800cf48 <__kernel_sin+0x150>)
 800cedc:	ec51 0b18 	vmov	r0, r1, d8
 800cee0:	2200      	movs	r2, #0
 800cee2:	f7f3 fba9 	bl	8000638 <__aeabi_dmul>
 800cee6:	4632      	mov	r2, r6
 800cee8:	ec41 0b19 	vmov	d9, r0, r1
 800ceec:	463b      	mov	r3, r7
 800ceee:	4640      	mov	r0, r8
 800cef0:	4649      	mov	r1, r9
 800cef2:	f7f3 fba1 	bl	8000638 <__aeabi_dmul>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	ec51 0b19 	vmov	r0, r1, d9
 800cefe:	f7f3 f9e3 	bl	80002c8 <__aeabi_dsub>
 800cf02:	4652      	mov	r2, sl
 800cf04:	465b      	mov	r3, fp
 800cf06:	f7f3 fb97 	bl	8000638 <__aeabi_dmul>
 800cf0a:	ec53 2b18 	vmov	r2, r3, d8
 800cf0e:	f7f3 f9db 	bl	80002c8 <__aeabi_dsub>
 800cf12:	a30b      	add	r3, pc, #44	; (adr r3, 800cf40 <__kernel_sin+0x148>)
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	4606      	mov	r6, r0
 800cf1a:	460f      	mov	r7, r1
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	4649      	mov	r1, r9
 800cf20:	f7f3 fb8a 	bl	8000638 <__aeabi_dmul>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	4630      	mov	r0, r6
 800cf2a:	4639      	mov	r1, r7
 800cf2c:	f7f3 f9ce 	bl	80002cc <__adddf3>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4620      	mov	r0, r4
 800cf36:	4629      	mov	r1, r5
 800cf38:	f7f3 f9c6 	bl	80002c8 <__aeabi_dsub>
 800cf3c:	e7c4      	b.n	800cec8 <__kernel_sin+0xd0>
 800cf3e:	bf00      	nop
 800cf40:	55555549 	.word	0x55555549
 800cf44:	3fc55555 	.word	0x3fc55555
 800cf48:	3fe00000 	.word	0x3fe00000
 800cf4c:	5acfd57c 	.word	0x5acfd57c
 800cf50:	3de5d93a 	.word	0x3de5d93a
 800cf54:	8a2b9ceb 	.word	0x8a2b9ceb
 800cf58:	3e5ae5e6 	.word	0x3e5ae5e6
 800cf5c:	57b1fe7d 	.word	0x57b1fe7d
 800cf60:	3ec71de3 	.word	0x3ec71de3
 800cf64:	19c161d5 	.word	0x19c161d5
 800cf68:	3f2a01a0 	.word	0x3f2a01a0
 800cf6c:	1110f8a6 	.word	0x1110f8a6
 800cf70:	3f811111 	.word	0x3f811111

0800cf74 <with_errno>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	4604      	mov	r4, r0
 800cf78:	460d      	mov	r5, r1
 800cf7a:	4616      	mov	r6, r2
 800cf7c:	f7fd fce2 	bl	800a944 <__errno>
 800cf80:	4629      	mov	r1, r5
 800cf82:	6006      	str	r6, [r0, #0]
 800cf84:	4620      	mov	r0, r4
 800cf86:	bd70      	pop	{r4, r5, r6, pc}

0800cf88 <xflow>:
 800cf88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf8a:	4614      	mov	r4, r2
 800cf8c:	461d      	mov	r5, r3
 800cf8e:	b108      	cbz	r0, 800cf94 <xflow+0xc>
 800cf90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf94:	e9cd 2300 	strd	r2, r3, [sp]
 800cf98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	f7f3 fb4a 	bl	8000638 <__aeabi_dmul>
 800cfa4:	2222      	movs	r2, #34	; 0x22
 800cfa6:	b003      	add	sp, #12
 800cfa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfac:	f7ff bfe2 	b.w	800cf74 <with_errno>

0800cfb0 <__math_uflow>:
 800cfb0:	b508      	push	{r3, lr}
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cfb8:	f7ff ffe6 	bl	800cf88 <xflow>
 800cfbc:	ec41 0b10 	vmov	d0, r0, r1
 800cfc0:	bd08      	pop	{r3, pc}

0800cfc2 <__math_oflow>:
 800cfc2:	b508      	push	{r3, lr}
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cfca:	f7ff ffdd 	bl	800cf88 <xflow>
 800cfce:	ec41 0b10 	vmov	d0, r0, r1
 800cfd2:	bd08      	pop	{r3, pc}

0800cfd4 <fabs>:
 800cfd4:	ec51 0b10 	vmov	r0, r1, d0
 800cfd8:	ee10 2a10 	vmov	r2, s0
 800cfdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfe0:	ec43 2b10 	vmov	d0, r2, r3
 800cfe4:	4770      	bx	lr

0800cfe6 <finite>:
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	ed8d 0b00 	vstr	d0, [sp]
 800cfec:	9801      	ldr	r0, [sp, #4]
 800cfee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cff2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cff6:	0fc0      	lsrs	r0, r0, #31
 800cff8:	b002      	add	sp, #8
 800cffa:	4770      	bx	lr
 800cffc:	0000      	movs	r0, r0
	...

0800d000 <floor>:
 800d000:	ec51 0b10 	vmov	r0, r1, d0
 800d004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d008:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d00c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d010:	2e13      	cmp	r6, #19
 800d012:	ee10 5a10 	vmov	r5, s0
 800d016:	ee10 8a10 	vmov	r8, s0
 800d01a:	460c      	mov	r4, r1
 800d01c:	dc32      	bgt.n	800d084 <floor+0x84>
 800d01e:	2e00      	cmp	r6, #0
 800d020:	da14      	bge.n	800d04c <floor+0x4c>
 800d022:	a333      	add	r3, pc, #204	; (adr r3, 800d0f0 <floor+0xf0>)
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	f7f3 f950 	bl	80002cc <__adddf3>
 800d02c:	2200      	movs	r2, #0
 800d02e:	2300      	movs	r3, #0
 800d030:	f7f3 fd92 	bl	8000b58 <__aeabi_dcmpgt>
 800d034:	b138      	cbz	r0, 800d046 <floor+0x46>
 800d036:	2c00      	cmp	r4, #0
 800d038:	da57      	bge.n	800d0ea <floor+0xea>
 800d03a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d03e:	431d      	orrs	r5, r3
 800d040:	d001      	beq.n	800d046 <floor+0x46>
 800d042:	4c2d      	ldr	r4, [pc, #180]	; (800d0f8 <floor+0xf8>)
 800d044:	2500      	movs	r5, #0
 800d046:	4621      	mov	r1, r4
 800d048:	4628      	mov	r0, r5
 800d04a:	e025      	b.n	800d098 <floor+0x98>
 800d04c:	4f2b      	ldr	r7, [pc, #172]	; (800d0fc <floor+0xfc>)
 800d04e:	4137      	asrs	r7, r6
 800d050:	ea01 0307 	and.w	r3, r1, r7
 800d054:	4303      	orrs	r3, r0
 800d056:	d01f      	beq.n	800d098 <floor+0x98>
 800d058:	a325      	add	r3, pc, #148	; (adr r3, 800d0f0 <floor+0xf0>)
 800d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05e:	f7f3 f935 	bl	80002cc <__adddf3>
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	f7f3 fd77 	bl	8000b58 <__aeabi_dcmpgt>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d0eb      	beq.n	800d046 <floor+0x46>
 800d06e:	2c00      	cmp	r4, #0
 800d070:	bfbe      	ittt	lt
 800d072:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d076:	fa43 f606 	asrlt.w	r6, r3, r6
 800d07a:	19a4      	addlt	r4, r4, r6
 800d07c:	ea24 0407 	bic.w	r4, r4, r7
 800d080:	2500      	movs	r5, #0
 800d082:	e7e0      	b.n	800d046 <floor+0x46>
 800d084:	2e33      	cmp	r6, #51	; 0x33
 800d086:	dd0b      	ble.n	800d0a0 <floor+0xa0>
 800d088:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d08c:	d104      	bne.n	800d098 <floor+0x98>
 800d08e:	ee10 2a10 	vmov	r2, s0
 800d092:	460b      	mov	r3, r1
 800d094:	f7f3 f91a 	bl	80002cc <__adddf3>
 800d098:	ec41 0b10 	vmov	d0, r0, r1
 800d09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a8:	fa23 f707 	lsr.w	r7, r3, r7
 800d0ac:	4207      	tst	r7, r0
 800d0ae:	d0f3      	beq.n	800d098 <floor+0x98>
 800d0b0:	a30f      	add	r3, pc, #60	; (adr r3, 800d0f0 <floor+0xf0>)
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	f7f3 f909 	bl	80002cc <__adddf3>
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f7f3 fd4b 	bl	8000b58 <__aeabi_dcmpgt>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d0bf      	beq.n	800d046 <floor+0x46>
 800d0c6:	2c00      	cmp	r4, #0
 800d0c8:	da02      	bge.n	800d0d0 <floor+0xd0>
 800d0ca:	2e14      	cmp	r6, #20
 800d0cc:	d103      	bne.n	800d0d6 <floor+0xd6>
 800d0ce:	3401      	adds	r4, #1
 800d0d0:	ea25 0507 	bic.w	r5, r5, r7
 800d0d4:	e7b7      	b.n	800d046 <floor+0x46>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d0dc:	fa03 f606 	lsl.w	r6, r3, r6
 800d0e0:	4435      	add	r5, r6
 800d0e2:	4545      	cmp	r5, r8
 800d0e4:	bf38      	it	cc
 800d0e6:	18e4      	addcc	r4, r4, r3
 800d0e8:	e7f2      	b.n	800d0d0 <floor+0xd0>
 800d0ea:	2500      	movs	r5, #0
 800d0ec:	462c      	mov	r4, r5
 800d0ee:	e7aa      	b.n	800d046 <floor+0x46>
 800d0f0:	8800759c 	.word	0x8800759c
 800d0f4:	7e37e43c 	.word	0x7e37e43c
 800d0f8:	bff00000 	.word	0xbff00000
 800d0fc:	000fffff 	.word	0x000fffff

0800d100 <scalbn>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	ec55 4b10 	vmov	r4, r5, d0
 800d106:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d10a:	4606      	mov	r6, r0
 800d10c:	462b      	mov	r3, r5
 800d10e:	b99a      	cbnz	r2, 800d138 <scalbn+0x38>
 800d110:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d114:	4323      	orrs	r3, r4
 800d116:	d036      	beq.n	800d186 <scalbn+0x86>
 800d118:	4b39      	ldr	r3, [pc, #228]	; (800d200 <scalbn+0x100>)
 800d11a:	4629      	mov	r1, r5
 800d11c:	ee10 0a10 	vmov	r0, s0
 800d120:	2200      	movs	r2, #0
 800d122:	f7f3 fa89 	bl	8000638 <__aeabi_dmul>
 800d126:	4b37      	ldr	r3, [pc, #220]	; (800d204 <scalbn+0x104>)
 800d128:	429e      	cmp	r6, r3
 800d12a:	4604      	mov	r4, r0
 800d12c:	460d      	mov	r5, r1
 800d12e:	da10      	bge.n	800d152 <scalbn+0x52>
 800d130:	a32b      	add	r3, pc, #172	; (adr r3, 800d1e0 <scalbn+0xe0>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	e03a      	b.n	800d1ae <scalbn+0xae>
 800d138:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d13c:	428a      	cmp	r2, r1
 800d13e:	d10c      	bne.n	800d15a <scalbn+0x5a>
 800d140:	ee10 2a10 	vmov	r2, s0
 800d144:	4620      	mov	r0, r4
 800d146:	4629      	mov	r1, r5
 800d148:	f7f3 f8c0 	bl	80002cc <__adddf3>
 800d14c:	4604      	mov	r4, r0
 800d14e:	460d      	mov	r5, r1
 800d150:	e019      	b.n	800d186 <scalbn+0x86>
 800d152:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d156:	460b      	mov	r3, r1
 800d158:	3a36      	subs	r2, #54	; 0x36
 800d15a:	4432      	add	r2, r6
 800d15c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d160:	428a      	cmp	r2, r1
 800d162:	dd08      	ble.n	800d176 <scalbn+0x76>
 800d164:	2d00      	cmp	r5, #0
 800d166:	a120      	add	r1, pc, #128	; (adr r1, 800d1e8 <scalbn+0xe8>)
 800d168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d16c:	da1c      	bge.n	800d1a8 <scalbn+0xa8>
 800d16e:	a120      	add	r1, pc, #128	; (adr r1, 800d1f0 <scalbn+0xf0>)
 800d170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d174:	e018      	b.n	800d1a8 <scalbn+0xa8>
 800d176:	2a00      	cmp	r2, #0
 800d178:	dd08      	ble.n	800d18c <scalbn+0x8c>
 800d17a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d17e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d182:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d186:	ec45 4b10 	vmov	d0, r4, r5
 800d18a:	bd70      	pop	{r4, r5, r6, pc}
 800d18c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d190:	da19      	bge.n	800d1c6 <scalbn+0xc6>
 800d192:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d196:	429e      	cmp	r6, r3
 800d198:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d19c:	dd0a      	ble.n	800d1b4 <scalbn+0xb4>
 800d19e:	a112      	add	r1, pc, #72	; (adr r1, 800d1e8 <scalbn+0xe8>)
 800d1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1e2      	bne.n	800d16e <scalbn+0x6e>
 800d1a8:	a30f      	add	r3, pc, #60	; (adr r3, 800d1e8 <scalbn+0xe8>)
 800d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ae:	f7f3 fa43 	bl	8000638 <__aeabi_dmul>
 800d1b2:	e7cb      	b.n	800d14c <scalbn+0x4c>
 800d1b4:	a10a      	add	r1, pc, #40	; (adr r1, 800d1e0 <scalbn+0xe0>)
 800d1b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d0b8      	beq.n	800d130 <scalbn+0x30>
 800d1be:	a10e      	add	r1, pc, #56	; (adr r1, 800d1f8 <scalbn+0xf8>)
 800d1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1c4:	e7b4      	b.n	800d130 <scalbn+0x30>
 800d1c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1ca:	3236      	adds	r2, #54	; 0x36
 800d1cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d1d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <scalbn+0x108>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	e7e8      	b.n	800d1ae <scalbn+0xae>
 800d1dc:	f3af 8000 	nop.w
 800d1e0:	c2f8f359 	.word	0xc2f8f359
 800d1e4:	01a56e1f 	.word	0x01a56e1f
 800d1e8:	8800759c 	.word	0x8800759c
 800d1ec:	7e37e43c 	.word	0x7e37e43c
 800d1f0:	8800759c 	.word	0x8800759c
 800d1f4:	fe37e43c 	.word	0xfe37e43c
 800d1f8:	c2f8f359 	.word	0xc2f8f359
 800d1fc:	81a56e1f 	.word	0x81a56e1f
 800d200:	43500000 	.word	0x43500000
 800d204:	ffff3cb0 	.word	0xffff3cb0
 800d208:	3c900000 	.word	0x3c900000

0800d20c <_init>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	bf00      	nop
 800d210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d212:	bc08      	pop	{r3}
 800d214:	469e      	mov	lr, r3
 800d216:	4770      	bx	lr

0800d218 <_fini>:
 800d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21a:	bf00      	nop
 800d21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21e:	bc08      	pop	{r3}
 800d220:	469e      	mov	lr, r3
 800d222:	4770      	bx	lr
