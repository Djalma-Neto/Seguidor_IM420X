
Seguidor_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba18  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800bbf8  0800bbf8  0001bbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be2c  0800be2c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800be2c  0800be2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be34  0800be34  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be34  0800be34  0001be34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be38  0800be38  0001be38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800be3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025f4  20000084  0800bec0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002678  0800bec0  00022678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002111c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fdd  00000000  00000000  000411d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  000451b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00046af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296e9  00000000  00000000  000482a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d47a  00000000  00000000  00071991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107182  00000000  00000000  0008ee0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195f8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  00195fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bbe0 	.word	0x0800bbe0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	0800bbe0 	.word	0x0800bbe0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000e04:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_FREERTOS_Init+0x78>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f007 f81a 	bl	8007e42 <osSemaphoreNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <MX_FREERTOS_Init+0x7c>)
 8000e12:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <MX_FREERTOS_Init+0x80>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f007 f812 	bl	8007e42 <osSemaphoreNew>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_FREERTOS_Init+0x84>)
 8000e22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <MX_FREERTOS_Init+0x88>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4818      	ldr	r0, [pc, #96]	; (8000e8c <MX_FREERTOS_Init+0x8c>)
 8000e2a:	f006 ff5d 	bl	8007ce8 <osThreadNew>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <MX_FREERTOS_Init+0x90>)
 8000e32:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <MX_FREERTOS_Init+0x94>)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <MX_FREERTOS_Init+0x98>)
 8000e3a:	f006 ff55 	bl	8007ce8 <osThreadNew>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <MX_FREERTOS_Init+0x9c>)
 8000e42:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <MX_FREERTOS_Init+0xa0>)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <MX_FREERTOS_Init+0xa4>)
 8000e4a:	f006 ff4d 	bl	8007ce8 <osThreadNew>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <MX_FREERTOS_Init+0xa8>)
 8000e52:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000e54:	4a15      	ldr	r2, [pc, #84]	; (8000eac <MX_FREERTOS_Init+0xac>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <MX_FREERTOS_Init+0xb0>)
 8000e5a:	f006 ff45 	bl	8007ce8 <osThreadNew>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <MX_FREERTOS_Init+0xb4>)
 8000e62:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <MX_FREERTOS_Init+0xb8>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_FREERTOS_Init+0xbc>)
 8000e6a:	f006 ff3d 	bl	8007ce8 <osThreadNew>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <MX_FREERTOS_Init+0xc0>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	0800bd38 	.word	0x0800bd38
 8000e7c:	200001ac 	.word	0x200001ac
 8000e80:	0800bd48 	.word	0x0800bd48
 8000e84:	200001b0 	.word	0x200001b0
 8000e88:	0800bc84 	.word	0x0800bc84
 8000e8c:	08000ec5 	.word	0x08000ec5
 8000e90:	20000198 	.word	0x20000198
 8000e94:	0800bca8 	.word	0x0800bca8
 8000e98:	08000f15 	.word	0x08000f15
 8000e9c:	2000019c 	.word	0x2000019c
 8000ea0:	0800bccc 	.word	0x0800bccc
 8000ea4:	08000fe1 	.word	0x08000fe1
 8000ea8:	200001a0 	.word	0x200001a0
 8000eac:	0800bcf0 	.word	0x0800bcf0
 8000eb0:	080011fd 	.word	0x080011fd
 8000eb4:	200001a4 	.word	0x200001a4
 8000eb8:	0800bd14 	.word	0x0800bd14
 8000ebc:	080012ed 	.word	0x080012ed
 8000ec0:	200001a8 	.word	0x200001a8

08000ec4 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000ed0:	f003 f8b0 	bl	8004034 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
	for(;;)
	{
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0208 	orr.w	r2, r2, #8
 8000ee2:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f001 fdc7 	bl	8002a80 <HAL_GPIO_WritePin>
		osDelay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f006 ff8a 	bl	8007e0c <osDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f001 fdbd 	bl	8002a80 <HAL_GPIO_WritePin>
		osDelay(200);
 8000f06:	20c8      	movs	r0, #200	; 0xc8
 8000f08:	f006 ff80 	bl	8007e0c <osDelay>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8000f0c:	e7e2      	b.n	8000ed4 <FunctionUltrassom+0x10>
 8000f0e:	bf00      	nop
 8000f10:	200001b8 	.word	0x200001b8

08000f14 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
	HAL_UART_Receive_IT(&huart1, (uint8_t *)cData, 100);
 8000f1c:	2264      	movs	r2, #100	; 0x64
 8000f1e:	4928      	ldr	r1, [pc, #160]	; (8000fc0 <FunctionComunica+0xac>)
 8000f20:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <FunctionComunica+0xb0>)
 8000f22:	f004 fed3 	bl	8005ccc <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(HC05_EN_GPIO_Port, HC05_EN_Pin, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2c:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <FunctionComunica+0xb4>)
 8000f2e:	f001 fda7 	bl	8002a80 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <FunctionComunica+0xb8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	21c8      	movs	r1, #200	; 0xc8
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f007 f80b 	bl	8007f54 <osSemaphoreAcquire>

	  int valor1 = (int)fDistancia;
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <FunctionComunica+0xbc>)
 8000f40:	edd3 7a00 	vldr	s15, [r3]
 8000f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f48:	ee17 3a90 	vmov	r3, s15
 8000f4c:	60fb      	str	r3, [r7, #12]
	  int valor2 = (fDistancia-(int)fDistancia)*100;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <FunctionComunica+0xbc>)
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <FunctionComunica+0xbc>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000fd4 <FunctionComunica+0xc0>
 8000f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f72:	ee17 3a90 	vmov	r3, s15
 8000f76:	60bb      	str	r3, [r7, #8]
	  sprintf(cMostrar,"Dis: %d.%02d \r \n ",valor1,valor2);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4916      	ldr	r1, [pc, #88]	; (8000fd8 <FunctionComunica+0xc4>)
 8000f7e:	4817      	ldr	r0, [pc, #92]	; (8000fdc <FunctionComunica+0xc8>)
 8000f80:	f00a fa74 	bl	800b46c <siprintf>

	  HAL_GPIO_WritePin(HC05_STATE_GPIO_Port, HC05_STATE_Pin, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2108      	movs	r1, #8
 8000f88:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <FunctionComunica+0xb4>)
 8000f8a:	f001 fd79 	bl	8002a80 <HAL_GPIO_WritePin>
	  osDelay(500);
 8000f8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f92:	f006 ff3b 	bl	8007e0c <osDelay>
	  HAL_GPIO_WritePin(HC05_STATE_GPIO_Port, HC05_STATE_Pin, 1);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2108      	movs	r1, #8
 8000f9a:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <FunctionComunica+0xb4>)
 8000f9c:	f001 fd70 	bl	8002a80 <HAL_GPIO_WritePin>

	  HAL_UART_Transmit(&huart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	2264      	movs	r2, #100	; 0x64
 8000fa4:	490d      	ldr	r1, [pc, #52]	; (8000fdc <FunctionComunica+0xc8>)
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <FunctionComunica+0xb0>)
 8000fa8:	f004 fd26 	bl	80059f8 <HAL_UART_Transmit>

	  osSemaphoreRelease(SemaphoreComunicaHandle);
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <FunctionComunica+0xb8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f007 f821 	bl	8007ff8 <osSemaphoreRelease>
	  osDelay(500);
 8000fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fba:	f006 ff27 	bl	8007e0c <osDelay>
  {
 8000fbe:	e7b8      	b.n	8000f32 <FunctionComunica+0x1e>
 8000fc0:	20000134 	.word	0x20000134
 8000fc4:	200003c4 	.word	0x200003c4
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	200001b0 	.word	0x200001b0
 8000fd0:	200000ac 	.word	0x200000ac
 8000fd4:	42c80000 	.word	0x42c80000
 8000fd8:	0800bc58 	.word	0x0800bc58
 8000fdc:	200000d0 	.word	0x200000d0

08000fe0 <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8000fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f001 fd2e 	bl	8002a50 <HAL_GPIO_ReadPin>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	4878      	ldr	r0, [pc, #480]	; (80011dc <FunctionSeguidor+0x1fc>)
 8000ffc:	f001 fd28 	bl	8002a50 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8001004:	2140      	movs	r1, #64	; 0x40
 8001006:	4875      	ldr	r0, [pc, #468]	; (80011dc <FunctionSeguidor+0x1fc>)
 8001008:	f001 fd22 	bl	8002a50 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	737b      	strb	r3, [r7, #13]

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8001010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001014:	4871      	ldr	r0, [pc, #452]	; (80011dc <FunctionSeguidor+0x1fc>)
 8001016:	f001 fd1b 	bl	8002a50 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800101e:	4b70      	ldr	r3, [pc, #448]	; (80011e0 <FunctionSeguidor+0x200>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	21c8      	movs	r1, #200	; 0xc8
 8001024:	4618      	mov	r0, r3
 8001026:	f006 ff95 	bl	8007f54 <osSemaphoreAcquire>

    if(uiBTN){
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d022      	beq.n	8001076 <FunctionSeguidor+0x96>
    	lVelocidadeRefD = 1;
 8001030:	4b6c      	ldr	r3, [pc, #432]	; (80011e4 <FunctionSeguidor+0x204>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
    	lVelocidadeRefE = 1;
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <FunctionSeguidor+0x208>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
    	uiStart = uiStart?0:1;
 800103c:	4b6b      	ldr	r3, [pc, #428]	; (80011ec <FunctionSeguidor+0x20c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	4b67      	ldr	r3, [pc, #412]	; (80011ec <FunctionSeguidor+0x20c>)
 800104e:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2104      	movs	r1, #4
 8001054:	4866      	ldr	r0, [pc, #408]	; (80011f0 <FunctionSeguidor+0x210>)
 8001056:	f001 fd13 	bl	8002a80 <HAL_GPIO_WritePin>
    	osDelay(500);
 800105a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105e:	f006 fed5 	bl	8007e0c <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2104      	movs	r1, #4
 8001066:	4862      	ldr	r0, [pc, #392]	; (80011f0 <FunctionSeguidor+0x210>)
 8001068:	f001 fd0a 	bl	8002a80 <HAL_GPIO_WritePin>
    	osDelay(500);
 800106c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001070:	f006 fecc 	bl	8007e0c <osDelay>
 8001074:	e0a9      	b.n	80011ca <FunctionSeguidor+0x1ea>
    }else if(uiS2 && !uiS3 && uiS4 && uiStart){
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d014      	beq.n	80010a6 <FunctionSeguidor+0xc6>
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d111      	bne.n	80010a6 <FunctionSeguidor+0xc6>
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00e      	beq.n	80010a6 <FunctionSeguidor+0xc6>
 8001088:	4b58      	ldr	r3, [pc, #352]	; (80011ec <FunctionSeguidor+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00a      	beq.n	80010a6 <FunctionSeguidor+0xc6>
    	lVelocidadeRefD = uiVelocidade;
 8001090:	4b58      	ldr	r3, [pc, #352]	; (80011f4 <FunctionSeguidor+0x214>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <FunctionSeguidor+0x204>)
 8001098:	601a      	str	r2, [r3, #0]
    	lVelocidadeRefE = uiVelocidade;
 800109a:	4b56      	ldr	r3, [pc, #344]	; (80011f4 <FunctionSeguidor+0x214>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <FunctionSeguidor+0x208>)
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e091      	b.n	80011ca <FunctionSeguidor+0x1ea>
    }else if(uiS2 && uiS3 && !uiS4 && uiStart){
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d028      	beq.n	80010fe <FunctionSeguidor+0x11e>
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d025      	beq.n	80010fe <FunctionSeguidor+0x11e>
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d122      	bne.n	80010fe <FunctionSeguidor+0x11e>
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <FunctionSeguidor+0x20c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d01e      	beq.n	80010fe <FunctionSeguidor+0x11e>
    	lVelocidadeRefE = uiVelocidade;
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <FunctionSeguidor+0x214>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <FunctionSeguidor+0x208>)
 80010c8:	601a      	str	r2, [r3, #0]
    	lVelocidadeRefD = uiVelocidade-(uiVelocidade*fReducao);
 80010ca:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <FunctionSeguidor+0x214>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <FunctionSeguidor+0x214>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010e2:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <FunctionSeguidor+0x218>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f4:	ee17 2a90 	vmov	r2, s15
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <FunctionSeguidor+0x204>)
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e065      	b.n	80011ca <FunctionSeguidor+0x1ea>
    }else if(!uiS2 && uiS3 && uiS4 && uiStart){
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d128      	bne.n	8001156 <FunctionSeguidor+0x176>
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d025      	beq.n	8001156 <FunctionSeguidor+0x176>
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d022      	beq.n	8001156 <FunctionSeguidor+0x176>
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <FunctionSeguidor+0x20c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01e      	beq.n	8001156 <FunctionSeguidor+0x176>
    	lVelocidadeRefE = uiVelocidade-(uiVelocidade*fReducao);
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <FunctionSeguidor+0x214>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <FunctionSeguidor+0x214>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001130:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <FunctionSeguidor+0x218>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001142:	ee17 2a90 	vmov	r2, s15
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <FunctionSeguidor+0x208>)
 8001148:	601a      	str	r2, [r3, #0]
    	lVelocidadeRefD = uiVelocidade;
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <FunctionSeguidor+0x214>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <FunctionSeguidor+0x204>)
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e039      	b.n	80011ca <FunctionSeguidor+0x1ea>
    }else if(((uiS2 && !uiS3 && uiS4)) && uiStart){
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d010      	beq.n	800117e <FunctionSeguidor+0x19e>
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10d      	bne.n	800117e <FunctionSeguidor+0x19e>
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00a      	beq.n	800117e <FunctionSeguidor+0x19e>
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <FunctionSeguidor+0x20c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <FunctionSeguidor+0x19e>
    	lVelocidadeRefD = 1;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <FunctionSeguidor+0x204>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
    	lVelocidadeRefE = 1;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <FunctionSeguidor+0x208>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e025      	b.n	80011ca <FunctionSeguidor+0x1ea>
    } else if(!uiS2 && !uiS3 && !uiS4 && uiStart){
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d122      	bne.n	80011ca <FunctionSeguidor+0x1ea>
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11f      	bne.n	80011ca <FunctionSeguidor+0x1ea>
 800118a:	7b7b      	ldrb	r3, [r7, #13]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d11c      	bne.n	80011ca <FunctionSeguidor+0x1ea>
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <FunctionSeguidor+0x20c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d018      	beq.n	80011ca <FunctionSeguidor+0x1ea>
    	lVelocidadeRefD = 1;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <FunctionSeguidor+0x204>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
		lVelocidadeRefE = 1;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <FunctionSeguidor+0x208>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
		uiStart = 0;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <FunctionSeguidor+0x20c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2104      	movs	r1, #4
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <FunctionSeguidor+0x210>)
 80011b0:	f001 fc66 	bl	8002a80 <HAL_GPIO_WritePin>
    	osDelay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f006 fe29 	bl	8007e0c <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2104      	movs	r1, #4
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <FunctionSeguidor+0x210>)
 80011c0:	f001 fc5e 	bl	8002a80 <HAL_GPIO_WritePin>
    	osDelay(100);
 80011c4:	2064      	movs	r0, #100	; 0x64
 80011c6:	f006 fe21 	bl	8007e0c <osDelay>
    }
    osDelay(100);
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f006 fe1e 	bl	8007e0c <osDelay>
    osSemaphoreRelease(SemaphoreMovimentaHandle);
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <FunctionSeguidor+0x200>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 ff0f 	bl	8007ff8 <osSemaphoreRelease>
  {
 80011da:	e705      	b.n	8000fe8 <FunctionSeguidor+0x8>
 80011dc:	48000800 	.word	0x48000800
 80011e0:	200001ac 	.word	0x200001ac
 80011e4:	200000b0 	.word	0x200000b0
 80011e8:	200000b4 	.word	0x200000b4
 80011ec:	200000cc 	.word	0x200000cc
 80011f0:	48000c00 	.word	0x48000c00
 80011f4:	20000004 	.word	0x20000004
 80011f8:	2000000c 	.word	0x2000000c

080011fc <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4831      	ldr	r0, [pc, #196]	; (80012cc <FunctionAtivarMotores+0xd0>)
 8001208:	f002 fdaa 	bl	8003d60 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800120c:	2104      	movs	r1, #4
 800120e:	482f      	ldr	r0, [pc, #188]	; (80012cc <FunctionAtivarMotores+0xd0>)
 8001210:	f002 fda6 	bl	8003d60 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <FunctionAtivarMotores+0xd4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	21c8      	movs	r1, #200	; 0xc8
 800121a:	4618      	mov	r0, r3
 800121c:	f006 fe9a 	bl	8007f54 <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f001 fc29 	bl	8002a80 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f001 fc22 	bl	8002a80 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	4824      	ldr	r0, [pc, #144]	; (80012d4 <FunctionAtivarMotores+0xd8>)
 8001242:	f001 fc1d 	bl	8002a80 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	4823      	ldr	r0, [pc, #140]	; (80012d8 <FunctionAtivarMotores+0xdc>)
 800124c:	f001 fc18 	bl	8002a80 <HAL_GPIO_WritePin>

	  htim3.Instance->CCR1 = lVelocidadeRefE+(lVelocidadeRefE*fCalibragemE);
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <FunctionAtivarMotores+0xe0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <FunctionAtivarMotores+0xe0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <FunctionAtivarMotores+0xe4>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <FunctionAtivarMotores+0xd0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127e:	ee17 2a90 	vmov	r2, s15
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = lVelocidadeRefD+(lVelocidadeRefD*fCalibragemD);
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <FunctionAtivarMotores+0xe8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <FunctionAtivarMotores+0xe8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <FunctionAtivarMotores+0xec>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <FunctionAtivarMotores+0xd0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b2:	ee17 2a90 	vmov	r2, s15
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38

	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <FunctionAtivarMotores+0xd4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f006 fe9b 	bl	8007ff8 <osSemaphoreRelease>
	  osDelay(200);
 80012c2:	20c8      	movs	r0, #200	; 0xc8
 80012c4:	f006 fda2 	bl	8007e0c <osDelay>
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80012c8:	e7a4      	b.n	8001214 <FunctionAtivarMotores+0x18>
 80012ca:	bf00      	nop
 80012cc:	20000250 	.word	0x20000250
 80012d0:	200001ac 	.word	0x200001ac
 80012d4:	48000800 	.word	0x48000800
 80012d8:	48000400 	.word	0x48000400
 80012dc:	200000b4 	.word	0x200000b4
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	200000b0 	.word	0x200000b0
 80012e8:	20000008 	.word	0x20000008

080012ec <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80012f4:	2100      	movs	r1, #0
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <FunctionOdometria+0x28>)
 80012f8:	f002 fe9c 	bl	8004034 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80012fc:	2104      	movs	r1, #4
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <FunctionOdometria+0x28>)
 8001300:	f002 fe98 	bl	8004034 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <FunctionOdometria+0x2c>)
 8001306:	f002 fc51 	bl	8003bac <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800130a:	2001      	movs	r0, #1
 800130c:	f006 fd7e 	bl	8007e0c <osDelay>
 8001310:	e7fb      	b.n	800130a <FunctionOdometria+0x1e>
 8001312:	bf00      	nop
 8001314:	2000029c 	.word	0x2000029c
 8001318:	200002e8 	.word	0x200002e8
 800131c:	00000000 	.word	0x00000000

08001320 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){//ultrassonico
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a59      	ldr	r2, [pc, #356]	; (8001490 <HAL_TIM_IC_CaptureCallback+0x170>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f040 808b 	bne.w	8001448 <HAL_TIM_IC_CaptureCallback+0x128>
		if(uiIs_First){
 8001332:	4b58      	ldr	r3, [pc, #352]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01b      	beq.n	8001372 <HAL_TIM_IC_CaptureCallback+0x52>
			lValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800133a:	2108      	movs	r1, #8
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f003 fc0f 	bl	8004b60 <HAL_TIM_ReadCapturedValue>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001348:	601a      	str	r2, [r3, #0]
			uiIs_First=0;
 800134a:	4b52      	ldr	r3, [pc, #328]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x174>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a1a      	ldr	r2, [r3, #32]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800135e:	621a      	str	r2, [r3, #32]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	e06a      	b.n	8001448 <HAL_TIM_IC_CaptureCallback+0x128>
		}else{
			lValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001372:	2108      	movs	r1, #8
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f003 fbf3 	bl	8004b60 <HAL_TIM_ReadCapturedValue>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001380:	601a      	str	r2, [r3, #0]
			uiIs_First=1;
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]

			fDiferenca = (float)((unsigned)lValor2-(unsigned)lValor1);
 8001388:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_TIM_IC_CaptureCallback+0x17c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139c:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <HAL_TIM_IC_CaptureCallback+0x180>)
 800139e:	edc3 7a00 	vstr	s15, [r3]
			fDiferenca = (fDiferenca/2)*0.0001;
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_TIM_IC_CaptureCallback+0x180>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013b0:	ee16 0a90 	vmov	r0, s13
 80013b4:	f7ff f8e8 	bl	8000588 <__aeabi_f2d>
 80013b8:	a333      	add	r3, pc, #204	; (adr r3, 8001488 <HAL_TIM_IC_CaptureCallback+0x168>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f93b 	bl	8000638 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fb47 	bl	8000a5c <__aeabi_d2f>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a33      	ldr	r2, [pc, #204]	; (80014a0 <HAL_TIM_IC_CaptureCallback+0x180>)
 80013d2:	6013      	str	r3, [r2, #0]
			fDistancia = (fDiferenca*340)/2>100?fDistancia:(fDiferenca*340)/2;
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_TIM_IC_CaptureCallback+0x180>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80014a4 <HAL_TIM_IC_CaptureCallback+0x184>
 80013de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ea:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80014a8 <HAL_TIM_IC_CaptureCallback+0x188>
 80013ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	dd03      	ble.n	8001400 <HAL_TIM_IC_CaptureCallback+0xe0>
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	e00a      	b.n	8001416 <HAL_TIM_IC_CaptureCallback+0xf6>
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80014a4 <HAL_TIM_IC_CaptureCallback+0x184>
 800140a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800142a:	621a      	str	r2, [r3, #32]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a12      	ldr	r2, [r2, #32]
 8001436:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0208 	bic.w	r2, r2, #8
 8001446:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){//encoder Esquerdo
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0x190>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d108      	bne.n	8001462 <HAL_TIM_IC_CaptureCallback+0x142>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7f1b      	ldrb	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d104      	bne.n	8001462 <HAL_TIM_IC_CaptureCallback+0x142>
		ulPulsePerSecondE++;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x194>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001460:	6013      	str	r3, [r2, #0]
	}
	if(htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){//encoder Direito
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d108      	bne.n	800147c <HAL_TIM_IC_CaptureCallback+0x15c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7f1b      	ldrb	r3, [r3, #28]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d104      	bne.n	800147c <HAL_TIM_IC_CaptureCallback+0x15c>
		ulPulsePerSecondD++;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0x198>)
 800147a:	6013      	str	r3, [r2, #0]
	}
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	eb1c432d 	.word	0xeb1c432d
 800148c:	3f1a36e2 	.word	0x3f1a36e2
 8001490:	200001b8 	.word	0x200001b8
 8001494:	20000000 	.word	0x20000000
 8001498:	200000a0 	.word	0x200000a0
 800149c:	200000a4 	.word	0x200000a4
 80014a0:	200000a8 	.word	0x200000a8
 80014a4:	43aa0000 	.word	0x43aa0000
 80014a8:	42c80000 	.word	0x42c80000
 80014ac:	200000ac 	.word	0x200000ac
 80014b0:	2000029c 	.word	0x2000029c
 80014b4:	200000bc 	.word	0x200000bc
 80014b8:	200000c4 	.word	0x200000c4

080014bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d117      	bne.n	80014fc <HAL_TIM_PeriodElapsedCallback+0x40>
		fRpmE = ulPulsePerSecondE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014da:	edc3 7a00 	vstr	s15, [r3]
		fRpmD = ulPulsePerSecondD;
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80014ec:	edc3 7a00 	vstr	s15, [r3]
		//HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);

		ulPulsePerSecondE = 0;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
		ulPulsePerSecondD = 0;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
	}
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	200002e8 	.word	0x200002e8
 800150c:	200000bc 	.word	0x200000bc
 8001510:	200000c0 	.word	0x200000c0
 8001514:	200000c4 	.word	0x200000c4
 8001518:	200000c8 	.word	0x200000c8

0800151c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_UART_RxCpltCallback+0x40>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d113      	bne.n	8001554 <HAL_UART_RxCpltCallback+0x38>
  {
	  HAL_UART_Receive(&huart1, (uint8_t *)cData, 100, 100);
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	2264      	movs	r2, #100	; 0x64
 8001530:	490b      	ldr	r1, [pc, #44]	; (8001560 <HAL_UART_RxCpltCallback+0x44>)
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <HAL_UART_RxCpltCallback+0x40>)
 8001534:	f004 faf6 	bl	8005b24 <HAL_UART_Receive>
	  HAL_GPIO_WritePin(HC05_STATE_GPIO_Port, HC05_STATE_Pin, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2108      	movs	r1, #8
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <HAL_UART_RxCpltCallback+0x48>)
 800153e:	f001 fa9f 	bl	8002a80 <HAL_GPIO_WritePin>
	  osDelay(500);
 8001542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001546:	f006 fc61 	bl	8007e0c <osDelay>
	  HAL_GPIO_WritePin(HC05_STATE_GPIO_Port, HC05_STATE_Pin, 1);
 800154a:	2201      	movs	r2, #1
 800154c:	2108      	movs	r1, #8
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_UART_RxCpltCallback+0x48>)
 8001550:	f001 fa96 	bl	8002a80 <HAL_GPIO_WritePin>
  }
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200003c4 	.word	0x200003c4
 8001560:	20000134 	.word	0x20000134
 8001564:	48000400 	.word	0x48000400

08001568 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <MX_GPIO_Init+0x158>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a4f      	ldr	r2, [pc, #316]	; (80016c0 <MX_GPIO_Init+0x158>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b4d      	ldr	r3, [pc, #308]	; (80016c0 <MX_GPIO_Init+0x158>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <MX_GPIO_Init+0x158>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <MX_GPIO_Init+0x158>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <MX_GPIO_Init+0x158>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <MX_GPIO_Init+0x158>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a43      	ldr	r2, [pc, #268]	; (80016c0 <MX_GPIO_Init+0x158>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <MX_GPIO_Init+0x158>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <MX_GPIO_Init+0x158>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a3d      	ldr	r2, [pc, #244]	; (80016c0 <MX_GPIO_Init+0x158>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <MX_GPIO_Init+0x158>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	f248 3120 	movw	r1, #33568	; 0x8320
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f001 fa4a 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	4834      	ldr	r0, [pc, #208]	; (80016c4 <MX_GPIO_Init+0x15c>)
 80015f2:	f001 fa45 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2104      	movs	r1, #4
 80015fa:	4833      	ldr	r0, [pc, #204]	; (80016c8 <MX_GPIO_Init+0x160>)
 80015fc:	f001 fa40 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001606:	4831      	ldr	r0, [pc, #196]	; (80016cc <MX_GPIO_Init+0x164>)
 8001608:	f001 fa3a 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|GPIO_PIN_8
 800160c:	f242 3360 	movw	r3, #9056	; 0x2360
 8001610:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4828      	ldr	r0, [pc, #160]	; (80016c4 <MX_GPIO_Init+0x15c>)
 8001622:	f001 f893 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin;
 8001626:	f248 3320 	movw	r3, #33568	; 0x8320
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f001 f883 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4819      	ldr	r0, [pc, #100]	; (80016c4 <MX_GPIO_Init+0x15c>)
 800165e:	f001 f875 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f001 f867 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800167e:	2304      	movs	r3, #4
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_GPIO_Init+0x160>)
 8001696:	f001 f859 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin;
 800169a:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <MX_GPIO_Init+0x164>)
 80016b4:	f001 f84a 	bl	800274c <HAL_GPIO_Init>

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000800 	.word	0x48000800
 80016c8:	48000c00 	.word	0x48000c00
 80016cc:	48000400 	.word	0x48000400

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f000 fdf9 	bl	80022ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f817 	bl	800170a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f7ff ff44 	bl	8001568 <MX_GPIO_Init>
  MX_TIM1_Init();
 80016e0:	f000 f936 	bl	8001950 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016e4:	f000 f9aa 	bl	8001a3c <MX_TIM2_Init>
  MX_TIM3_Init();
 80016e8:	f000 f9f6 	bl	8001ad8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016ec:	f000 fa76 	bl	8001bdc <MX_TIM4_Init>
  MX_TIM6_Init();
 80016f0:	f000 fad4 	bl	8001c9c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80016f4:	f000 fc92 	bl	800201c <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 80016f8:	f000 fc46 	bl	8001f88 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80016fc:	f006 faaa 	bl	8007c54 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001700:	f7ff fb7e 	bl	8000e00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001704:	f006 faca 	bl	8007c9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001708:	e7fe      	b.n	8001708 <main+0x38>

0800170a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b094      	sub	sp, #80	; 0x50
 800170e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	2238      	movs	r2, #56	; 0x38
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f009 fd91 	bl	800b240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800172c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001730:	f001 f9be 	bl	8002ab0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800173e:	2340      	movs	r3, #64	; 0x40
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001742:	2302      	movs	r3, #2
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001746:	2302      	movs	r3, #2
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800174a:	2302      	movs	r3, #2
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 800174e:	2319      	movs	r3, #25
 8001750:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001752:	2302      	movs	r3, #2
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001756:	2302      	movs	r3, #2
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800175a:	2302      	movs	r3, #2
 800175c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	f107 0318 	add.w	r3, r7, #24
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fa48 	bl	8002bf8 <HAL_RCC_OscConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800176e:	f000 f819 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001772:	230f      	movs	r3, #15
 8001774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001776:	2303      	movs	r3, #3
 8001778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800177e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2103      	movs	r1, #3
 800178c:	4618      	mov	r0, r3
 800178e:	f001 fd4b 	bl	8003228 <HAL_RCC_ClockConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001798:	f000 f804 	bl	80017a4 <Error_Handler>
  }
}
 800179c:	bf00      	nop
 800179e:	3750      	adds	r7, #80	; 0x50
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	e7fe      	b.n	80017ac <Error_Handler+0x8>
	...

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_MspInit+0x4c>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <HAL_MspInit+0x4c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6613      	str	r3, [r2, #96]	; 0x60
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_MspInit+0x4c>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_MspInit+0x4c>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_MspInit+0x4c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	6593      	str	r3, [r2, #88]	; 0x58
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_MspInit+0x4c>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	210f      	movs	r1, #15
 80017ea:	f06f 0001 	mvn.w	r0, #1
 80017ee:	f000 feb8 	bl	8002562 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001830:	f000 fd9e 	bl	8002370 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001834:	f008 fb62 	bl	8009efc <xTaskGetSchedulerState>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d001      	beq.n	8001842 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800183e:	f009 fa4b 	bl	800acd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM1_CC_IRQHandler+0x10>)
 800184e:	f002 fd41 	bl	80042d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200001b8 	.word	0x200001b8

0800185c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <TIM2_IRQHandler+0x10>)
 8001862:	f002 fd37 	bl	80042d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000204 	.word	0x20000204

08001870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <TIM3_IRQHandler+0x10>)
 8001876:	f002 fd2d 	bl	80042d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000250 	.word	0x20000250

08001884 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <TIM4_IRQHandler+0x10>)
 800188a:	f002 fd23 	bl	80042d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000029c 	.word	0x2000029c

08001898 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <USART1_IRQHandler+0x10>)
 800189e:	f004 fa6b 	bl	8005d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200003c4 	.word	0x200003c4

080018ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <TIM6_DAC_IRQHandler+0x10>)
 80018b2:	f002 fd0f 	bl	80042d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200002e8 	.word	0x200002e8

080018c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <_sbrk+0x5c>)
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <_sbrk+0x60>)
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <_sbrk+0x64>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <_sbrk+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f0:	f009 fc6c 	bl	800b1cc <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	220c      	movs	r2, #12
 80018f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e009      	b.n	8001914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <_sbrk+0x64>)
 8001910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20020000 	.word	0x20020000
 8001920:	00000400 	.word	0x00000400
 8001924:	200001b4 	.word	0x200001b4
 8001928:	20002678 	.word	0x20002678

0800192c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <SystemInit+0x20>)
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <SystemInit+0x20>)
 8001938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800193c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <MX_TIM1_Init+0xe4>)
 800197e:	4a2e      	ldr	r2, [pc, #184]	; (8001a38 <MX_TIM1_Init+0xe8>)
 8001980:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <MX_TIM1_Init+0xe4>)
 8001984:	2231      	movs	r2, #49	; 0x31
 8001986:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <MX_TIM1_Init+0xe4>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <MX_TIM1_Init+0xe4>)
 8001990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001994:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <MX_TIM1_Init+0xe4>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <MX_TIM1_Init+0xe4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <MX_TIM1_Init+0xe4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019a8:	4822      	ldr	r0, [pc, #136]	; (8001a34 <MX_TIM1_Init+0xe4>)
 80019aa:	f002 f8a7 	bl	8003afc <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80019b4:	f7ff fef6 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	4619      	mov	r1, r3
 80019c4:	481b      	ldr	r0, [pc, #108]	; (8001a34 <MX_TIM1_Init+0xe4>)
 80019c6:	f002 ffb5 	bl	8004934 <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80019d0:	f7ff fee8 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80019d4:	4817      	ldr	r0, [pc, #92]	; (8001a34 <MX_TIM1_Init+0xe4>)
 80019d6:	f002 fad5 	bl	8003f84 <HAL_TIM_IC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80019e0:	f7ff fee0 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	480f      	ldr	r0, [pc, #60]	; (8001a34 <MX_TIM1_Init+0xe4>)
 80019f8:	f003 fed2 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001a02:	f7ff fecf 	bl	80017a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_TIM1_Init+0xe4>)
 8001a1e:	f002 fdd8 	bl	80045d2 <HAL_TIM_IC_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001a28:	f7ff febc 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3730      	adds	r7, #48	; 0x30
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200001b8 	.word	0x200001b8
 8001a38:	40012c00 	.word	0x40012c00

08001a3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125-1;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a64:	227c      	movs	r2, #124	; 0x7c
 8001a66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a70:	f240 128f 	movw	r2, #399	; 0x18f
 8001a74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a84:	f002 f83a 	bl	8003afc <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a8e:	f7ff fe89 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001aa0:	f002 ff48 	bl	8004934 <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001aaa:	f7ff fe7b 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001abc:	f003 fe70 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f7ff fe6d 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000204 	.word	0x20000204

08001ad8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08e      	sub	sp, #56	; 0x38
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af8:	463b      	mov	r3, r7
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <MX_TIM3_Init+0x100>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b12:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001b16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b20:	2263      	movs	r2, #99	; 0x63
 8001b22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b30:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b32:	f001 ffe3 	bl	8003afc <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b3c:	f7ff fe32 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4821      	ldr	r0, [pc, #132]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b4e:	f002 fef1 	bl	8004934 <HAL_TIM_ConfigClockSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b58:	f7ff fe24 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b5c:	481d      	ldr	r0, [pc, #116]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b5e:	f002 f89d 	bl	8003c9c <HAL_TIM_PWM_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b68:	f7ff fe1c 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4816      	ldr	r0, [pc, #88]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001b7c:	f003 fe10 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b86:	f7ff fe0d 	bl	80017a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8a:	2360      	movs	r3, #96	; 0x60
 8001b8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001ba2:	f002 fdb3 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bac:	f7ff fdfa 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001bb8:	f002 fda8 	bl	800470c <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001bc2:	f7ff fdef 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM3_Init+0xfc>)
 8001bc8:	f000 f9a6 	bl	8001f18 <HAL_TIM_MspPostInit>

}
 8001bcc:	bf00      	nop
 8001bce:	3738      	adds	r7, #56	; 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000250 	.word	0x20000250
 8001bd8:	40000400 	.word	0x40000400

08001bdc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001bfc:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <MX_TIM4_Init+0xbc>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c02:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c10:	22c7      	movs	r2, #199	; 0xc7
 8001c12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c20:	481c      	ldr	r0, [pc, #112]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c22:	f002 f9af 	bl	8003f84 <HAL_TIM_IC_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001c2c:	f7ff fdba 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4815      	ldr	r0, [pc, #84]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c40:	f003 fdae 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001c4a:	f7ff fdab 	bl	80017a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c52:	2301      	movs	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	4619      	mov	r1, r3
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c66:	f002 fcb4 	bl	80045d2 <HAL_TIM_IC_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c70:	f7ff fd98 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2204      	movs	r2, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <MX_TIM4_Init+0xb8>)
 8001c7c:	f002 fca9 	bl	80045d2 <HAL_TIM_IC_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001c86:	f7ff fd8d 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000029c 	.word	0x2000029c
 8001c98:	40000800 	.word	0x40000800

08001c9c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_TIM6_Init+0x64>)
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <MX_TIM6_Init+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50000-1;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_TIM6_Init+0x64>)
 8001cb4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001cb8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_TIM6_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_TIM6_Init+0x64>)
 8001cc2:	22f9      	movs	r2, #249	; 0xf9
 8001cc4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_TIM6_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_TIM6_Init+0x64>)
 8001cce:	f001 ff15 	bl	8003afc <HAL_TIM_Base_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001cd8:	f7ff fd64 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_TIM6_Init+0x64>)
 8001cea:	f003 fd59 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001cf4:	f7ff fd56 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200002e8 	.word	0x200002e8
 8001d04:	40001000 	.word	0x40001000

08001d08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a42      	ldr	r2, [pc, #264]	; (8001e30 <HAL_TIM_Base_MspInit+0x128>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d130      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d2a:	4b42      	ldr	r3, [pc, #264]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	4a41      	ldr	r2, [pc, #260]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d34:	6613      	str	r3, [r2, #96]	; 0x60
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4830      	ldr	r0, [pc, #192]	; (8001e38 <HAL_TIM_Base_MspInit+0x130>)
 8001d76:	f000 fce9 	bl	800274c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	201b      	movs	r0, #27
 8001d80:	f000 fbef 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d84:	201b      	movs	r0, #27
 8001d86:	f000 fc06 	bl	8002596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d8a:	e04c      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d94:	d114      	bne.n	8001dc0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d96:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6593      	str	r3, [r2, #88]	; 0x58
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2105      	movs	r1, #5
 8001db2:	201c      	movs	r0, #28
 8001db4:	f000 fbd5 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db8:	201c      	movs	r0, #28
 8001dba:	f000 fbec 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 8001dbe:	e032      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_TIM_Base_MspInit+0x134>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d114      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2105      	movs	r1, #5
 8001de6:	201d      	movs	r0, #29
 8001de8:	f000 fbbb 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dec:	201d      	movs	r0, #29
 8001dee:	f000 fbd2 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 8001df2:	e018      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM6)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_TIM_Base_MspInit+0x138>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d113      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001e04:	f043 0310 	orr.w	r3, r3, #16
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_TIM_Base_MspInit+0x12c>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2105      	movs	r1, #5
 8001e1a:	2036      	movs	r0, #54	; 0x36
 8001e1c:	f000 fba1 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e20:	2036      	movs	r0, #54	; 0x36
 8001e22:	f000 fbb8 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3730      	adds	r7, #48	; 0x30
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40001000 	.word	0x40001000

08001e44 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <HAL_TIM_IC_MspInit+0xc8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d14d      	bne.n	8001f02 <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6593      	str	r3, [r2, #88]	; 0x58
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_TIM_IC_MspInit+0xcc>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 8001eae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ece:	f000 fc3d 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_D_Pin;
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4809      	ldr	r0, [pc, #36]	; (8001f14 <HAL_TIM_IC_MspInit+0xd0>)
 8001eee:	f000 fc2d 	bl	800274c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	201e      	movs	r0, #30
 8001ef8:	f000 fb33 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001efc:	201e      	movs	r0, #30
 8001efe:	f000 fb4a 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	48000400 	.word	0x48000400

08001f18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_TIM_MspPostInit+0x64>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d11b      	bne.n	8001f72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8001f52:	2330      	movs	r3, #48	; 0x30
 8001f54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <HAL_TIM_MspPostInit+0x6c>)
 8001f6e:	f000 fbed 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48000400 	.word	0x48000400

08001f88 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001f8e:	4a22      	ldr	r2, [pc, #136]	; (8002018 <MX_LPUART1_UART_Init+0x90>)
 8001f90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001f94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001fca:	4812      	ldr	r0, [pc, #72]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fcc:	f003 fcc4 	bl	8005958 <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fd6:	f7ff fbe5 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fda:	2100      	movs	r1, #0
 8001fdc:	480d      	ldr	r0, [pc, #52]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001fde:	f005 fd3a 	bl	8007a56 <HAL_UARTEx_SetTxFifoThreshold>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001fe8:	f7ff fbdc 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fec:	2100      	movs	r1, #0
 8001fee:	4809      	ldr	r0, [pc, #36]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8001ff0:	f005 fd6f 	bl	8007ad2 <HAL_UARTEx_SetRxFifoThreshold>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001ffa:	f7ff fbd3 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_LPUART1_UART_Init+0x8c>)
 8002000:	f005 fcf0 	bl	80079e4 <HAL_UARTEx_DisableFifoMode>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800200a:	f7ff fbcb 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000334 	.word	0x20000334
 8002018:	40008000 	.word	0x40008000

0800201c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002022:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <MX_USART1_UART_Init+0x94>)
 8002024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002028:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800202c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <MX_USART1_UART_Init+0x90>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <MX_USART1_UART_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_USART1_UART_Init+0x90>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002064:	4811      	ldr	r0, [pc, #68]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002066:	f003 fc77 	bl	8005958 <HAL_UART_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002070:	f7ff fb98 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002074:	2100      	movs	r1, #0
 8002076:	480d      	ldr	r0, [pc, #52]	; (80020ac <MX_USART1_UART_Init+0x90>)
 8002078:	f005 fced 	bl	8007a56 <HAL_UARTEx_SetTxFifoThreshold>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002082:	f7ff fb8f 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002086:	2100      	movs	r1, #0
 8002088:	4808      	ldr	r0, [pc, #32]	; (80020ac <MX_USART1_UART_Init+0x90>)
 800208a:	f005 fd22 	bl	8007ad2 <HAL_UARTEx_SetRxFifoThreshold>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002094:	f7ff fb86 	bl	80017a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002098:	4804      	ldr	r0, [pc, #16]	; (80020ac <MX_USART1_UART_Init+0x90>)
 800209a:	f005 fca3 	bl	80079e4 <HAL_UARTEx_DisableFifoMode>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020a4:	f7ff fb7e 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200003c4 	.word	0x200003c4
 80020b0:	40013800 	.word	0x40013800

080020b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b0a2      	sub	sp, #136	; 0x88
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	2254      	movs	r2, #84	; 0x54
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f009 f8b3 	bl	800b240 <memset>
  if(uartHandle->Instance==LPUART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a62      	ldr	r2, [pc, #392]	; (8002268 <HAL_UART_MspInit+0x1b4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d157      	bne.n	8002194 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020e4:	2320      	movs	r3, #32
 80020e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ec:	f107 0320 	add.w	r3, r7, #32
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fab5 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020fc:	f7ff fb52 	bl	80017a4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002100:	4b5a      	ldr	r3, [pc, #360]	; (800226c <HAL_UART_MspInit+0x1b8>)
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	4a59      	ldr	r2, [pc, #356]	; (800226c <HAL_UART_MspInit+0x1b8>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800210c:	4b57      	ldr	r3, [pc, #348]	; (800226c <HAL_UART_MspInit+0x1b8>)
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002118:	4b54      	ldr	r3, [pc, #336]	; (800226c <HAL_UART_MspInit+0x1b8>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	4a53      	ldr	r2, [pc, #332]	; (800226c <HAL_UART_MspInit+0x1b8>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_UART_MspInit+0x1b8>)
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_UART_MspInit+0x1b8>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	4a4d      	ldr	r2, [pc, #308]	; (800226c <HAL_UART_MspInit+0x1b8>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213c:	4b4b      	ldr	r3, [pc, #300]	; (800226c <HAL_UART_MspInit+0x1b8>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002148:	2301      	movs	r3, #1
 800214a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800215a:	2308      	movs	r3, #8
 800215c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002160:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002164:	4619      	mov	r1, r3
 8002166:	4842      	ldr	r0, [pc, #264]	; (8002270 <HAL_UART_MspInit+0x1bc>)
 8002168:	f000 faf0 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800216c:	2304      	movs	r3, #4
 800216e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800217e:	230c      	movs	r3, #12
 8002180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f000 fadd 	bl	800274c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002192:	e064      	b.n	800225e <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a36      	ldr	r2, [pc, #216]	; (8002274 <HAL_UART_MspInit+0x1c0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d15f      	bne.n	800225e <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800219e:	2301      	movs	r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 fa58 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_UART_MspInit+0x106>
      Error_Handler();
 80021b6:	f7ff faf5 	bl	80017a4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021be:	4a2b      	ldr	r2, [pc, #172]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c4:	6613      	str	r3, [r2, #96]	; 0x60
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_UART_MspInit+0x1b8>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 8002202:	2310      	movs	r3, #16
 8002204:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002214:	2307      	movs	r3, #7
 8002216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 800221a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800221e:	4619      	mov	r1, r3
 8002220:	4813      	ldr	r0, [pc, #76]	; (8002270 <HAL_UART_MspInit+0x1bc>)
 8002222:	f000 fa93 	bl	800274c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_RX_Pin;
 8002226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800223a:	2307      	movs	r3, #7
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002244:	4619      	mov	r1, r3
 8002246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224a:	f000 fa7f 	bl	800274c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2105      	movs	r1, #5
 8002252:	2025      	movs	r0, #37	; 0x25
 8002254:	f000 f985 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002258:	2025      	movs	r0, #37	; 0x25
 800225a:	f000 f99c 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3788      	adds	r7, #136	; 0x88
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40008000 	.word	0x40008000
 800226c:	40021000 	.word	0x40021000
 8002270:	48000800 	.word	0x48000800
 8002274:	40013800 	.word	0x40013800

08002278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800227a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800227e:	490e      	ldr	r1, [pc, #56]	; (80022b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <LoopForever+0xe>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002294:	4c0b      	ldr	r4, [pc, #44]	; (80022c4 <LoopForever+0x16>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022a2:	f7ff fb43 	bl	800192c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f008 ff97 	bl	800b1d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022aa:	f7ff fa11 	bl	80016d0 <main>

080022ae <LoopForever>:

LoopForever:
    b LoopForever
 80022ae:	e7fe      	b.n	80022ae <LoopForever>
  ldr   r0, =_estack
 80022b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80022bc:	0800be3c 	.word	0x0800be3c
  ldr r2, =_sbss
 80022c0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80022c4:	20002678 	.word	0x20002678

080022c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC1_2_IRQHandler>

080022ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f000 f939 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022da:	200f      	movs	r0, #15
 80022dc:	f000 f80e 	bl	80022fc <HAL_InitTick>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	e001      	b.n	80022f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ec:	f7ff fa60 	bl	80017b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022f0:	79fb      	ldrb	r3, [r7, #7]

}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_InitTick+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d022      	beq.n	8002356 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_InitTick+0x6c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_InitTick+0x68>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800231c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f944 	bl	80025b2 <HAL_SYSTICK_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10f      	bne.n	8002350 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	d809      	bhi.n	800234a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002336:	2200      	movs	r2, #0
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
 800233e:	f000 f910 	bl	8002562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_InitTick+0x70>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e007      	b.n	800235a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e004      	b.n	800235a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e001      	b.n	800235a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000018 	.word	0x20000018
 8002368:	20000010 	.word	0x20000010
 800236c:	20000014 	.word	0x20000014

08002370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_IncTick+0x1c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_IncTick+0x20>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4413      	add	r3, r2
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_IncTick+0x1c>)
 8002380:	6013      	str	r3, [r2, #0]
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	20000454 	.word	0x20000454
 8002390:	20000018 	.word	0x20000018

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000454 	.word	0x20000454

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff8e 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff29 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff40 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff90 	bl	80024a0 <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5f 	bl	800244c <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff33 	bl	8002410 <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa4 	bl	8002508 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d005      	beq.n	80025ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e037      	b.n	800265e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800263a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00c      	beq.n	800265e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002652:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800265c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d00d      	beq.n	80026b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2204      	movs	r2, #4
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	e047      	b.n	8002740 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 020e 	bic.w	r2, r2, #14
 80026be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002714:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800271e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
    }
  }
  return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800275a:	e15a      	b.n	8002a12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 814c 	beq.w	8002a0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d005      	beq.n	800278c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002788:	2b02      	cmp	r3, #2
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c2:	2201      	movs	r2, #1
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d017      	beq.n	800282a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d123      	bne.n	800287e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	6939      	ldr	r1, [r7, #16]
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80a6 	beq.w	8002a0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c0:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <HAL_GPIO_Init+0x2e4>)
 80028c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c4:	4a5a      	ldr	r2, [pc, #360]	; (8002a30 <HAL_GPIO_Init+0x2e4>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6613      	str	r3, [r2, #96]	; 0x60
 80028cc:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <HAL_GPIO_Init+0x2e4>)
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d8:	4a56      	ldr	r2, [pc, #344]	; (8002a34 <HAL_GPIO_Init+0x2e8>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	220f      	movs	r2, #15
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002902:	d01f      	beq.n	8002944 <HAL_GPIO_Init+0x1f8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a4c      	ldr	r2, [pc, #304]	; (8002a38 <HAL_GPIO_Init+0x2ec>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d019      	beq.n	8002940 <HAL_GPIO_Init+0x1f4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a4b      	ldr	r2, [pc, #300]	; (8002a3c <HAL_GPIO_Init+0x2f0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d013      	beq.n	800293c <HAL_GPIO_Init+0x1f0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a4a      	ldr	r2, [pc, #296]	; (8002a40 <HAL_GPIO_Init+0x2f4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00d      	beq.n	8002938 <HAL_GPIO_Init+0x1ec>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a49      	ldr	r2, [pc, #292]	; (8002a44 <HAL_GPIO_Init+0x2f8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <HAL_GPIO_Init+0x1e8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a48      	ldr	r2, [pc, #288]	; (8002a48 <HAL_GPIO_Init+0x2fc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_GPIO_Init+0x1e4>
 800292c:	2305      	movs	r3, #5
 800292e:	e00a      	b.n	8002946 <HAL_GPIO_Init+0x1fa>
 8002930:	2306      	movs	r3, #6
 8002932:	e008      	b.n	8002946 <HAL_GPIO_Init+0x1fa>
 8002934:	2304      	movs	r3, #4
 8002936:	e006      	b.n	8002946 <HAL_GPIO_Init+0x1fa>
 8002938:	2303      	movs	r3, #3
 800293a:	e004      	b.n	8002946 <HAL_GPIO_Init+0x1fa>
 800293c:	2302      	movs	r3, #2
 800293e:	e002      	b.n	8002946 <HAL_GPIO_Init+0x1fa>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_GPIO_Init+0x1fa>
 8002944:	2300      	movs	r3, #0
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	f002 0203 	and.w	r2, r2, #3
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	4093      	lsls	r3, r2
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002956:	4937      	ldr	r1, [pc, #220]	; (8002a34 <HAL_GPIO_Init+0x2e8>)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002964:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_GPIO_Init+0x300>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002988:	4a30      	ldr	r2, [pc, #192]	; (8002a4c <HAL_GPIO_Init+0x300>)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800298e:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <HAL_GPIO_Init+0x300>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029b2:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_GPIO_Init+0x300>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a06:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_GPIO_Init+0x300>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f ae9d 	bne.w	800275c <HAL_GPIO_Init+0x10>
  }
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40010000 	.word	0x40010000
 8002a38:	48000400 	.word	0x48000400
 8002a3c:	48000800 	.word	0x48000800
 8002a40:	48000c00 	.word	0x48000c00
 8002a44:	48001000 	.word	0x48001000
 8002a48:	48001400 	.word	0x48001400
 8002a4c:	40010400 	.word	0x40010400

08002a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e001      	b.n	8002a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d141      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002abe:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d131      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002acc:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad2:	4a46      	ldr	r2, [pc, #280]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002adc:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ae4:	4a41      	ldr	r2, [pc, #260]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aec:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2232      	movs	r2, #50	; 0x32
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	4a3f      	ldr	r2, [pc, #252]	; (8002bf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	0c9b      	lsrs	r3, r3, #18
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b02:	e002      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b16:	d102      	bne.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f2      	bne.n	8002b04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b1e:	4b33      	ldr	r3, [pc, #204]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d158      	bne.n	8002bde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e057      	b.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b30:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b36:	4a2d      	ldr	r2, [pc, #180]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b40:	e04d      	b.n	8002bde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b48:	d141      	bne.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b56:	d131      	bne.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5e:	4a23      	ldr	r2, [pc, #140]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b70:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2232      	movs	r2, #50	; 0x32
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	0c9b      	lsrs	r3, r3, #18
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8e:	e002      	b.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d102      	bne.n	8002baa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f2      	bne.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d112      	bne.n	8002bde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e011      	b.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bcc:	e007      	b.n	8002bde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	20000010 	.word	0x20000010
 8002bf4:	431bde83 	.word	0x431bde83

08002bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e306      	b.n	8003218 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d075      	beq.n	8002d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c16:	4b97      	ldr	r3, [pc, #604]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c20:	4b94      	ldr	r3, [pc, #592]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d102      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3e>
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_OscConfig+0x44>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	4b8d      	ldr	r3, [pc, #564]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d05b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x108>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d157      	bne.n	8002d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e2e1      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x74>
 8002c5e:	4b85      	ldr	r3, [pc, #532]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a84      	ldr	r2, [pc, #528]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x98>
 8002c76:	4b7f      	ldr	r3, [pc, #508]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7e      	ldr	r2, [pc, #504]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b7c      	ldr	r3, [pc, #496]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7b      	ldr	r2, [pc, #492]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xb0>
 8002c90:	4b78      	ldr	r3, [pc, #480]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a77      	ldr	r2, [pc, #476]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b75      	ldr	r3, [pc, #468]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a74      	ldr	r2, [pc, #464]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fb70 	bl	8002394 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff fb6c 	bl	8002394 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e2a6      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cca:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xc0>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7ff fb5c 	bl	8002394 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7ff fb58 	bl	8002394 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e292      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf2:	4b60      	ldr	r3, [pc, #384]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xe8>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d18:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x136>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d002      	beq.n	8002d34 <HAL_RCC_OscConfig+0x13c>
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d11f      	bne.n	8002d74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d34:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_OscConfig+0x154>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e265      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	4946      	ldr	r1, [pc, #280]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d60:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <HAL_RCC_OscConfig+0x280>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fac9 	bl	80022fc <HAL_InitTick>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d043      	beq.n	8002df8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e251      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d023      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7c:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a3c      	ldr	r2, [pc, #240]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7ff fb04 	bl	8002394 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7ff fb00 	bl	8002394 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e23a      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	061b      	lsls	r3, r3, #24
 8002dbc:	492d      	ldr	r1, [pc, #180]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
 8002dc2:	e01a      	b.n	8002dfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fae0 	bl	8002394 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7ff fadc 	bl	8002394 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e216      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dea:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1e0>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d041      	beq.n	8002e8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7ff fab9 	bl	8002394 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7ff fab5 	bl	8002394 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1ef      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e38:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0ef      	beq.n	8002e26 <HAL_RCC_OscConfig+0x22e>
 8002e46:	e020      	b.n	8002e8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7ff fa9c 	bl	8002394 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e5e:	e00d      	b.n	8002e7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e60:	f7ff fa98 	bl	8002394 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d906      	bls.n	8002e7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1d2      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e7c:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1ea      	bne.n	8002e60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80a6 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e9c:	4b84      	ldr	r3, [pc, #528]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_OscConfig+0x2b4>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x2b6>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00d      	beq.n	8002ece <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	4b7f      	ldr	r3, [pc, #508]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	4a7e      	ldr	r2, [pc, #504]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ebe:	4b7c      	ldr	r3, [pc, #496]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ece:	4b79      	ldr	r3, [pc, #484]	; (80030b4 <HAL_RCC_OscConfig+0x4bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d118      	bne.n	8002f0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x4bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a75      	ldr	r2, [pc, #468]	; (80030b4 <HAL_RCC_OscConfig+0x4bc>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee6:	f7ff fa55 	bl	8002394 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7ff fa51 	bl	8002394 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e18b      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f00:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x4bc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <HAL_RCC_OscConfig+0x32e>
 8002f14:	4b66      	ldr	r3, [pc, #408]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f24:	e024      	b.n	8002f70 <HAL_RCC_OscConfig+0x378>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d110      	bne.n	8002f50 <HAL_RCC_OscConfig+0x358>
 8002f2e:	4b60      	ldr	r3, [pc, #384]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	4a5e      	ldr	r2, [pc, #376]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f3e:	4b5c      	ldr	r3, [pc, #368]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	4a5a      	ldr	r2, [pc, #360]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4e:	e00f      	b.n	8002f70 <HAL_RCC_OscConfig+0x378>
 8002f50:	4b57      	ldr	r3, [pc, #348]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	4a56      	ldr	r2, [pc, #344]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f68:	f023 0304 	bic.w	r3, r3, #4
 8002f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d016      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7ff fa0c 	bl	8002394 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7ff fa08 	bl	8002394 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e140      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f96:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ed      	beq.n	8002f80 <HAL_RCC_OscConfig+0x388>
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7ff f9f5 	bl	8002394 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7ff f9f1 	bl	8002394 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e129      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc4:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ed      	bne.n	8002fae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d03c      	beq.n	800306a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01c      	beq.n	8003032 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7ff f9c4 	bl	8002394 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003010:	f7ff f9c0 	bl	8002394 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0fa      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003022:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8003024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ef      	beq.n	8003010 <HAL_RCC_OscConfig+0x418>
 8003030:	e01b      	b.n	800306a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003032:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8003034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7ff f9a7 	bl	8002394 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800304a:	f7ff f9a3 	bl	8002394 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0dd      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 800305e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ef      	bne.n	800304a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80d1 	beq.w	8003216 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b0c      	cmp	r3, #12
 800307e:	f000 808b 	beq.w	8003198 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d15e      	bne.n	8003148 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <HAL_RCC_OscConfig+0x4b8>)
 8003090:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7ff f97d 	bl	8002394 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309c:	e00c      	b.n	80030b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309e:	f7ff f979 	bl	8002394 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d905      	bls.n	80030b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0b3      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ec      	bne.n	800309e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c4:	4b56      	ldr	r3, [pc, #344]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	4b56      	ldr	r3, [pc, #344]	; (8003224 <HAL_RCC_OscConfig+0x62c>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6a11      	ldr	r1, [r2, #32]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d4:	3a01      	subs	r2, #1
 80030d6:	0112      	lsls	r2, r2, #4
 80030d8:	4311      	orrs	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80030de:	0212      	lsls	r2, r2, #8
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030e6:	0852      	lsrs	r2, r2, #1
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0552      	lsls	r2, r2, #21
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f2:	0852      	lsrs	r2, r2, #1
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0652      	lsls	r2, r2, #25
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030fe:	06d2      	lsls	r2, r2, #27
 8003100:	430a      	orrs	r2, r1
 8003102:	4947      	ldr	r1, [pc, #284]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 8003104:	4313      	orrs	r3, r2
 8003106:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003108:	4b45      	ldr	r3, [pc, #276]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a44      	ldr	r2, [pc, #272]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 800310e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003114:	4b42      	ldr	r3, [pc, #264]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a41      	ldr	r2, [pc, #260]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7ff f938 	bl	8002394 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7ff f934 	bl	8002394 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e06e      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x530>
 8003146:	e066      	b.n	8003216 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003148:	4b35      	ldr	r3, [pc, #212]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a34      	ldr	r2, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 800314e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003152:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a31      	ldr	r2, [pc, #196]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 8003166:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7ff f910 	bl	8002394 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7ff f90c 	bl	8002394 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e046      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x580>
 8003196:	e03e      	b.n	8003216 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e039      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <HAL_RCC_OscConfig+0x628>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d12c      	bne.n	8003212 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	3b01      	subs	r3, #1
 80031c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d123      	bne.n	8003212 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d11b      	bne.n	8003212 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d113      	bne.n	8003212 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	3b01      	subs	r3, #1
 80031f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	3b01      	subs	r3, #1
 800320c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	019f800c 	.word	0x019f800c

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e11e      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b91      	ldr	r3, [pc, #580]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d910      	bls.n	8003270 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b8e      	ldr	r3, [pc, #568]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 020f 	bic.w	r2, r3, #15
 8003256:	498c      	ldr	r1, [pc, #560]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b8a      	ldr	r3, [pc, #552]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e106      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d073      	beq.n	8003364 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d129      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003284:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0f4      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003294:	f000 f99e 	bl	80035d4 <RCC_GetSysClockFreqFromPLLSource>
 8003298:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4a7c      	ldr	r2, [pc, #496]	; (8003490 <HAL_RCC_ClockConfig+0x268>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d93f      	bls.n	8003322 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032a2:	4b7a      	ldr	r3, [pc, #488]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d033      	beq.n	8003322 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12f      	bne.n	8003322 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ca:	4a70      	ldr	r2, [pc, #448]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80032cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e024      	b.n	8003322 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0c6      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f0:	4b66      	ldr	r3, [pc, #408]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0be      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003300:	f000 f8ce 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8003304:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4a61      	ldr	r2, [pc, #388]	; (8003490 <HAL_RCC_ClockConfig+0x268>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d909      	bls.n	8003322 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800330e:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003316:	4a5d      	ldr	r2, [pc, #372]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b5a      	ldr	r3, [pc, #360]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4957      	ldr	r1, [pc, #348]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7ff f82e 	bl	8002394 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7ff f82a 	bl	8002394 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e095      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b4e      	ldr	r3, [pc, #312]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d023      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a42      	ldr	r2, [pc, #264]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003382:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003386:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003394:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800339c:	4a3b      	ldr	r2, [pc, #236]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 800339e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b39      	ldr	r3, [pc, #228]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4936      	ldr	r1, [pc, #216]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
 80033b6:	e008      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d105      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4a32      	ldr	r2, [pc, #200]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 80033c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ca:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d21d      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 020f 	bic.w	r2, r3, #15
 80033e0:	4929      	ldr	r1, [pc, #164]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033e8:	f7fe ffd4 	bl	8002394 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f0:	f7fe ffd0 	bl	8002394 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e03b      	b.n	800347e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCC_ClockConfig+0x260>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d1ed      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003420:	4b1a      	ldr	r3, [pc, #104]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4917      	ldr	r1, [pc, #92]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	490f      	ldr	r1, [pc, #60]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003452:	f000 f825 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8003456:	4602      	mov	r2, r0
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_RCC_ClockConfig+0x264>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	490c      	ldr	r1, [pc, #48]	; (8003494 <HAL_RCC_ClockConfig+0x26c>)
 8003464:	5ccb      	ldrb	r3, [r1, r3]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <HAL_RCC_ClockConfig+0x270>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_RCC_ClockConfig+0x274>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe ff40 	bl	80022fc <HAL_InitTick>
 800347c:	4603      	mov	r3, r0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	04c4b400 	.word	0x04c4b400
 8003494:	0800bd58 	.word	0x0800bd58
 8003498:	20000010 	.word	0x20000010
 800349c:	20000014 	.word	0x20000014

080034a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034a6:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034b2:	4b2a      	ldr	r3, [pc, #168]	; (800355c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	e047      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	e03e      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d136      	bne.n	8003544 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3301      	adds	r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034f4:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4a16      	ldr	r2, [pc, #88]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034fe:	68d2      	ldr	r2, [r2, #12]
 8003500:	0a12      	lsrs	r2, r2, #8
 8003502:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	617b      	str	r3, [r7, #20]
      break;
 800350c:	e00c      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800350e:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	4a10      	ldr	r2, [pc, #64]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	0a12      	lsrs	r2, r2, #8
 800351c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]
      break;
 8003526:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0e5b      	lsrs	r3, r3, #25
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e001      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003548:	693b      	ldr	r3, [r7, #16]
}
 800354a:	4618      	mov	r0, r3
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	00f42400 	.word	0x00f42400
 8003560:	007a1200 	.word	0x007a1200

08003564 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_RCC_GetHCLKFreq+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000010 	.word	0x20000010

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003580:	f7ff fff0 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4904      	ldr	r1, [pc, #16]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	0800bd68 	.word	0x0800bd68

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035ac:	f7ff ffda 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0adb      	lsrs	r3, r3, #11
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	0800bd68 	.word	0x0800bd68

080035d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d10c      	bne.n	8003612 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035f8:	4a17      	ldr	r2, [pc, #92]	; (8003658 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	4a14      	ldr	r2, [pc, #80]	; (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003602:	68d2      	ldr	r2, [r2, #12]
 8003604:	0a12      	lsrs	r2, r2, #8
 8003606:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	617b      	str	r3, [r7, #20]
    break;
 8003610:	e00c      	b.n	800362c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	fbb2 f3f3 	udiv	r3, r2, r3
 800361a:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	0a12      	lsrs	r2, r2, #8
 8003620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]
    break;
 800362a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	0e5b      	lsrs	r3, r3, #25
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003646:	687b      	ldr	r3, [r7, #4]
}
 8003648:	4618      	mov	r0, r3
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40021000 	.word	0x40021000
 8003658:	007a1200 	.word	0x007a1200
 800365c:	00f42400 	.word	0x00f42400

08003660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003668:	2300      	movs	r3, #0
 800366a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800366c:	2300      	movs	r3, #0
 800366e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8098 	beq.w	80037ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b40      	ldr	r3, [pc, #256]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6593      	str	r3, [r2, #88]	; 0x58
 800369a:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036aa:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a39      	ldr	r2, [pc, #228]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b6:	f7fe fe6d 	bl	8002394 <HAL_GetTick>
 80036ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036bc:	e009      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7fe fe69 	bl	8002394 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d902      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	74fb      	strb	r3, [r7, #19]
        break;
 80036d0:	e005      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d2:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ef      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d159      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01e      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d019      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fe fe29 	bl	8002394 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003744:	e00b      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fe fe25 	bl	8002394 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d902      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	74fb      	strb	r3, [r7, #19]
            break;
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ec      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003788:	e008      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	74bb      	strb	r3, [r7, #18]
 800378e:	e005      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800379c:	7c7b      	ldrb	r3, [r7, #17]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a2:	4ba7      	ldr	r3, [pc, #668]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4aa6      	ldr	r2, [pc, #664]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ba:	4ba1      	ldr	r3, [pc, #644]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f023 0203 	bic.w	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	499d      	ldr	r1, [pc, #628]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037dc:	4b98      	ldr	r3, [pc, #608]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 020c 	bic.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4995      	ldr	r1, [pc, #596]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037fe:	4b90      	ldr	r3, [pc, #576]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	498c      	ldr	r1, [pc, #560]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003820:	4b87      	ldr	r3, [pc, #540]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	4984      	ldr	r1, [pc, #528]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003842:	4b7f      	ldr	r3, [pc, #508]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	497b      	ldr	r1, [pc, #492]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003864:	4b76      	ldr	r3, [pc, #472]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	4973      	ldr	r1, [pc, #460]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003886:	4b6e      	ldr	r3, [pc, #440]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	496a      	ldr	r1, [pc, #424]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a8:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4962      	ldr	r1, [pc, #392]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ca:	4b5d      	ldr	r3, [pc, #372]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	4959      	ldr	r1, [pc, #356]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ec:	4b54      	ldr	r3, [pc, #336]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	4951      	ldr	r1, [pc, #324]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800390e:	4b4c      	ldr	r3, [pc, #304]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	4948      	ldr	r1, [pc, #288]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003930:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4940      	ldr	r1, [pc, #256]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394e:	d105      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003950:	4b3b      	ldr	r3, [pc, #236]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a3a      	ldr	r2, [pc, #232]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003968:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	4932      	ldr	r1, [pc, #200]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a2c      	ldr	r2, [pc, #176]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003992:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039a0:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	4924      	ldr	r1, [pc, #144]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c0:	4b1f      	ldr	r3, [pc, #124]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	4916      	ldr	r1, [pc, #88]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a10      	ldr	r2, [pc, #64]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d019      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4908      	ldr	r1, [pc, #32]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
 8003a3c:	e002      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d015      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	4926      	ldr	r1, [pc, #152]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a96:	4918      	ldr	r1, [pc, #96]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	490a      	ldr	r1, [pc, #40]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000

08003afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e049      	b.n	8003ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe f8f0 	bl	8001d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f001 f872 	bl	8004c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d001      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e054      	b.n	8003c6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <HAL_TIM_Base_Start_IT+0xd0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d022      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d01d      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d018      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d013      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00e      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_TIM_Base_Start_IT+0xe0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <HAL_TIM_Base_Start_IT+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x80>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <HAL_TIM_Base_Start_IT+0xe8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d115      	bne.n	8003c58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_TIM_Base_Start_IT+0xec>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d015      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0xbe>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d011      	beq.n	8003c6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c56:	e008      	b.n	8003c6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e000      	b.n	8003c6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40013400 	.word	0x40013400
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40015000 	.word	0x40015000
 8003c98:	00010007 	.word	0x00010007

08003c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e049      	b.n	8003d42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f841 	bl	8003d4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 ffa2 	bl	8004c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_TIM_PWM_Start+0x24>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e03c      	b.n	8003dfe <HAL_TIM_PWM_Start+0x9e>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d109      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x3e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e02f      	b.n	8003dfe <HAL_TIM_PWM_Start+0x9e>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d109      	bne.n	8003db8 <HAL_TIM_PWM_Start+0x58>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e022      	b.n	8003dfe <HAL_TIM_PWM_Start+0x9e>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d109      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0x72>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	bf14      	ite	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e015      	b.n	8003dfe <HAL_TIM_PWM_Start+0x9e>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d109      	bne.n	8003dec <HAL_TIM_PWM_Start+0x8c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	bf14      	ite	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	2300      	moveq	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	e008      	b.n	8003dfe <HAL_TIM_PWM_Start+0x9e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0a6      	b.n	8003f54 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_PWM_Start+0xb6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e14:	e023      	b.n	8003e5e <HAL_TIM_PWM_Start+0xfe>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Start+0xc6>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e24:	e01b      	b.n	8003e5e <HAL_TIM_PWM_Start+0xfe>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0xd6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e34:	e013      	b.n	8003e5e <HAL_TIM_PWM_Start+0xfe>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0xe6>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e44:	e00b      	b.n	8003e5e <HAL_TIM_PWM_Start+0xfe>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start+0xf6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e54:	e003      	b.n	8003e5e <HAL_TIM_PWM_Start+0xfe>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2201      	movs	r2, #1
 8003e64:	6839      	ldr	r1, [r7, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fc74 	bl	8005754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a3a      	ldr	r2, [pc, #232]	; (8003f5c <HAL_TIM_PWM_Start+0x1fc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <HAL_TIM_PWM_Start+0x148>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a39      	ldr	r2, [pc, #228]	; (8003f60 <HAL_TIM_PWM_Start+0x200>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_TIM_PWM_Start+0x148>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a37      	ldr	r2, [pc, #220]	; (8003f64 <HAL_TIM_PWM_Start+0x204>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_TIM_PWM_Start+0x148>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a36      	ldr	r2, [pc, #216]	; (8003f68 <HAL_TIM_PWM_Start+0x208>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_TIM_PWM_Start+0x148>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a34      	ldr	r2, [pc, #208]	; (8003f6c <HAL_TIM_PWM_Start+0x20c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_TIM_PWM_Start+0x148>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a33      	ldr	r2, [pc, #204]	; (8003f70 <HAL_TIM_PWM_Start+0x210>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <HAL_TIM_PWM_Start+0x14c>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_TIM_PWM_Start+0x14e>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <HAL_TIM_PWM_Start+0x1fc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d022      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x1b2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d01d      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x1b2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <HAL_TIM_PWM_Start+0x214>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d018      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x1b2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <HAL_TIM_PWM_Start+0x218>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x1b2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <HAL_TIM_PWM_Start+0x21c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00e      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x1b2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_TIM_PWM_Start+0x200>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x1b2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_TIM_PWM_Start+0x204>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x1b2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_TIM_PWM_Start+0x210>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d115      	bne.n	8003f3e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_TIM_PWM_Start+0x220>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d015      	beq.n	8003f50 <HAL_TIM_PWM_Start+0x1f0>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2a:	d011      	beq.n	8003f50 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3c:	e008      	b.n	8003f50 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e000      	b.n	8003f52 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40013400 	.word	0x40013400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800
 8003f70:	40015000 	.word	0x40015000
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	00010007 	.word	0x00010007

08003f84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e049      	b.n	800402a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd ff4a 	bl	8001e44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fe2e 	bl	8004c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <HAL_TIM_IC_Start_IT+0x1e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e023      	b.n	800409a <HAL_TIM_IC_Start_IT+0x66>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d104      	bne.n	8004062 <HAL_TIM_IC_Start_IT+0x2e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800405e:	b2db      	uxtb	r3, r3
 8004060:	e01b      	b.n	800409a <HAL_TIM_IC_Start_IT+0x66>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d104      	bne.n	8004072 <HAL_TIM_IC_Start_IT+0x3e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e013      	b.n	800409a <HAL_TIM_IC_Start_IT+0x66>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d104      	bne.n	8004082 <HAL_TIM_IC_Start_IT+0x4e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e00b      	b.n	800409a <HAL_TIM_IC_Start_IT+0x66>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d104      	bne.n	8004092 <HAL_TIM_IC_Start_IT+0x5e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800408e:	b2db      	uxtb	r3, r3
 8004090:	e003      	b.n	800409a <HAL_TIM_IC_Start_IT+0x66>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004098:	b2db      	uxtb	r3, r3
 800409a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <HAL_TIM_IC_Start_IT+0x78>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e013      	b.n	80040d4 <HAL_TIM_IC_Start_IT+0xa0>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d104      	bne.n	80040bc <HAL_TIM_IC_Start_IT+0x88>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e00b      	b.n	80040d4 <HAL_TIM_IC_Start_IT+0xa0>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d104      	bne.n	80040cc <HAL_TIM_IC_Start_IT+0x98>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e003      	b.n	80040d4 <HAL_TIM_IC_Start_IT+0xa0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80040d6:	7bbb      	ldrb	r3, [r7, #14]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80040dc:	7b7b      	ldrb	r3, [r7, #13]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0e2      	b.n	80042ac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_IC_Start_IT+0xc2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f4:	e023      	b.n	800413e <HAL_TIM_IC_Start_IT+0x10a>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_IC_Start_IT+0xd2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	e01b      	b.n	800413e <HAL_TIM_IC_Start_IT+0x10a>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d104      	bne.n	8004116 <HAL_TIM_IC_Start_IT+0xe2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004114:	e013      	b.n	800413e <HAL_TIM_IC_Start_IT+0x10a>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	d104      	bne.n	8004126 <HAL_TIM_IC_Start_IT+0xf2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004124:	e00b      	b.n	800413e <HAL_TIM_IC_Start_IT+0x10a>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b10      	cmp	r3, #16
 800412a:	d104      	bne.n	8004136 <HAL_TIM_IC_Start_IT+0x102>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004134:	e003      	b.n	800413e <HAL_TIM_IC_Start_IT+0x10a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <HAL_TIM_IC_Start_IT+0x11a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414c:	e013      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x142>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b04      	cmp	r3, #4
 8004152:	d104      	bne.n	800415e <HAL_TIM_IC_Start_IT+0x12a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800415c:	e00b      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x142>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d104      	bne.n	800416e <HAL_TIM_IC_Start_IT+0x13a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800416c:	e003      	b.n	8004176 <HAL_TIM_IC_Start_IT+0x142>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d841      	bhi.n	8004200 <HAL_TIM_IC_Start_IT+0x1cc>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_TIM_IC_Start_IT+0x150>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	080041b9 	.word	0x080041b9
 8004188:	08004201 	.word	0x08004201
 800418c:	08004201 	.word	0x08004201
 8004190:	08004201 	.word	0x08004201
 8004194:	080041cb 	.word	0x080041cb
 8004198:	08004201 	.word	0x08004201
 800419c:	08004201 	.word	0x08004201
 80041a0:	08004201 	.word	0x08004201
 80041a4:	080041dd 	.word	0x080041dd
 80041a8:	08004201 	.word	0x08004201
 80041ac:	08004201 	.word	0x08004201
 80041b0:	08004201 	.word	0x08004201
 80041b4:	080041ef 	.word	0x080041ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0202 	orr.w	r2, r2, #2
 80041c6:	60da      	str	r2, [r3, #12]
      break;
 80041c8:	e01d      	b.n	8004206 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0204 	orr.w	r2, r2, #4
 80041d8:	60da      	str	r2, [r3, #12]
      break;
 80041da:	e014      	b.n	8004206 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0208 	orr.w	r2, r2, #8
 80041ea:	60da      	str	r2, [r3, #12]
      break;
 80041ec:	e00b      	b.n	8004206 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0210 	orr.w	r2, r2, #16
 80041fc:	60da      	str	r2, [r3, #12]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      break;
 8004204:	bf00      	nop
  }

  if (status == HAL_OK)
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d14e      	bne.n	80042aa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fa9d 	bl	8005754 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a25      	ldr	r2, [pc, #148]	; (80042b4 <HAL_TIM_IC_Start_IT+0x280>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d022      	beq.n	800426a <HAL_TIM_IC_Start_IT+0x236>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422c:	d01d      	beq.n	800426a <HAL_TIM_IC_Start_IT+0x236>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <HAL_TIM_IC_Start_IT+0x284>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d018      	beq.n	800426a <HAL_TIM_IC_Start_IT+0x236>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <HAL_TIM_IC_Start_IT+0x288>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_TIM_IC_Start_IT+0x236>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_TIM_IC_Start_IT+0x28c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00e      	beq.n	800426a <HAL_TIM_IC_Start_IT+0x236>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <HAL_TIM_IC_Start_IT+0x290>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d009      	beq.n	800426a <HAL_TIM_IC_Start_IT+0x236>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_TIM_IC_Start_IT+0x294>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_TIM_IC_Start_IT+0x236>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_TIM_IC_Start_IT+0x298>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d115      	bne.n	8004296 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_TIM_IC_Start_IT+0x29c>)
 8004272:	4013      	ands	r3, r2
 8004274:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b06      	cmp	r3, #6
 800427a:	d015      	beq.n	80042a8 <HAL_TIM_IC_Start_IT+0x274>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004282:	d011      	beq.n	80042a8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004294:	e008      	b.n	80042a8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e000      	b.n	80042aa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800
 80042c0:	40000c00 	.word	0x40000c00
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40015000 	.word	0x40015000
 80042d0:	00010007 	.word	0x00010007

080042d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0202 	mvn.w	r2, #2
 8004300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fd f802 	bl	8001320 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fc62 	bl	8004be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fc69 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b04      	cmp	r3, #4
 800433c:	d122      	bne.n	8004384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b04      	cmp	r3, #4
 800434a:	d11b      	bne.n	8004384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0204 	mvn.w	r2, #4
 8004354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc ffd8 	bl	8001320 <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fc38 	bl	8004be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fc3f 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b08      	cmp	r3, #8
 8004390:	d122      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b08      	cmp	r3, #8
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0208 	mvn.w	r2, #8
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2204      	movs	r2, #4
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc ffae 	bl	8001320 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fc0e 	bl	8004be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fc15 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d122      	bne.n	800442c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d11b      	bne.n	800442c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0210 	mvn.w	r2, #16
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2208      	movs	r2, #8
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc ff84 	bl	8001320 <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fbe4 	bl	8004be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fbeb 	bl	8004bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b01      	cmp	r3, #1
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0201 	mvn.w	r2, #1
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd f832 	bl	80014bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b80      	cmp	r3, #128	; 0x80
 8004464:	d10e      	bne.n	8004484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004470:	2b80      	cmp	r3, #128	; 0x80
 8004472:	d107      	bne.n	8004484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f001 fa2e 	bl	80058e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	d10e      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d107      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 fa21 	bl	80058f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d10e      	bne.n	80044de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d107      	bne.n	80044de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fb99 	bl	8004c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d10e      	bne.n	800450a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d107      	bne.n	800450a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0220 	mvn.w	r2, #32
 8004502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f001 f9e1 	bl	80058cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004518:	d10f      	bne.n	800453a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004528:	d107      	bne.n	800453a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f001 f9e7 	bl	8005908 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004548:	d10f      	bne.n	800456a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004558:	d107      	bne.n	800456a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 f9d9 	bl	800591c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004578:	d10f      	bne.n	800459a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004588:	d107      	bne.n	800459a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f001 f9cb 	bl	8005930 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045a8:	d10f      	bne.n	80045ca <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045b8:	d107      	bne.n	80045ca <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80045c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 f9bd 	bl	8005944 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b086      	sub	sp, #24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e088      	b.n	8004702 <HAL_TIM_IC_ConfigChannel+0x130>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11b      	bne.n	8004636 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f000 fedb 	bl	80053c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 020c 	bic.w	r2, r2, #12
 8004620:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6999      	ldr	r1, [r3, #24]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	619a      	str	r2, [r3, #24]
 8004634:	e060      	b.n	80046f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d11c      	bne.n	8004676 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f000 ff5f 	bl	800550e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800465e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6999      	ldr	r1, [r3, #24]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	021a      	lsls	r2, r3, #8
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	619a      	str	r2, [r3, #24]
 8004674:	e040      	b.n	80046f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f000 ffac 	bl	80055e8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 020c 	bic.w	r2, r2, #12
 800469e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69d9      	ldr	r1, [r3, #28]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	61da      	str	r2, [r3, #28]
 80046b2:	e021      	b.n	80046f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d11c      	bne.n	80046f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f000 ffc9 	bl	8005660 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69d9      	ldr	r1, [r3, #28]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	021a      	lsls	r2, r3, #8
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e001      	b.n	80046f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004700:	7dfb      	ldrb	r3, [r7, #23]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004726:	2302      	movs	r3, #2
 8004728:	e0ff      	b.n	800492a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b14      	cmp	r3, #20
 8004736:	f200 80f0 	bhi.w	800491a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004795 	.word	0x08004795
 8004744:	0800491b 	.word	0x0800491b
 8004748:	0800491b 	.word	0x0800491b
 800474c:	0800491b 	.word	0x0800491b
 8004750:	080047d5 	.word	0x080047d5
 8004754:	0800491b 	.word	0x0800491b
 8004758:	0800491b 	.word	0x0800491b
 800475c:	0800491b 	.word	0x0800491b
 8004760:	08004817 	.word	0x08004817
 8004764:	0800491b 	.word	0x0800491b
 8004768:	0800491b 	.word	0x0800491b
 800476c:	0800491b 	.word	0x0800491b
 8004770:	08004857 	.word	0x08004857
 8004774:	0800491b 	.word	0x0800491b
 8004778:	0800491b 	.word	0x0800491b
 800477c:	0800491b 	.word	0x0800491b
 8004780:	08004899 	.word	0x08004899
 8004784:	0800491b 	.word	0x0800491b
 8004788:	0800491b 	.word	0x0800491b
 800478c:	0800491b 	.word	0x0800491b
 8004790:	080048d9 	.word	0x080048d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 faea 	bl	8004d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0204 	bic.w	r2, r2, #4
 80047be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6999      	ldr	r1, [r3, #24]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	619a      	str	r2, [r3, #24]
      break;
 80047d2:	e0a5      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fb64 	bl	8004ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6999      	ldr	r1, [r3, #24]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	021a      	lsls	r2, r3, #8
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	619a      	str	r2, [r3, #24]
      break;
 8004814:	e084      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fbd7 	bl	8004fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0208 	orr.w	r2, r2, #8
 8004830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0204 	bic.w	r2, r2, #4
 8004840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	61da      	str	r2, [r3, #28]
      break;
 8004854:	e064      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fc49 	bl	80050f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69d9      	ldr	r1, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	021a      	lsls	r2, r3, #8
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	61da      	str	r2, [r3, #28]
      break;
 8004896:	e043      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fcbc 	bl	800521c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0208 	orr.w	r2, r2, #8
 80048b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0204 	bic.w	r2, r2, #4
 80048c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80048d6:	e023      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fd06 	bl	80052f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004902:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	021a      	lsls	r2, r3, #8
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004918:	e002      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	75fb      	strb	r3, [r7, #23]
      break;
 800491e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop

08004934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_TIM_ConfigClockSource+0x1c>
 800494c:	2302      	movs	r3, #2
 800494e:	e0f6      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x20a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800496e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800497a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a6f      	ldr	r2, [pc, #444]	; (8004b48 <HAL_TIM_ConfigClockSource+0x214>)
 800498a:	4293      	cmp	r3, r2
 800498c:	f000 80c1 	beq.w	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 8004990:	4a6d      	ldr	r2, [pc, #436]	; (8004b48 <HAL_TIM_ConfigClockSource+0x214>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f200 80c6 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004998:	4a6c      	ldr	r2, [pc, #432]	; (8004b4c <HAL_TIM_ConfigClockSource+0x218>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f000 80b9 	beq.w	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 80049a0:	4a6a      	ldr	r2, [pc, #424]	; (8004b4c <HAL_TIM_ConfigClockSource+0x218>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f200 80be 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a8:	4a69      	ldr	r2, [pc, #420]	; (8004b50 <HAL_TIM_ConfigClockSource+0x21c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f000 80b1 	beq.w	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 80049b0:	4a67      	ldr	r2, [pc, #412]	; (8004b50 <HAL_TIM_ConfigClockSource+0x21c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f200 80b6 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b8:	4a66      	ldr	r2, [pc, #408]	; (8004b54 <HAL_TIM_ConfigClockSource+0x220>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f000 80a9 	beq.w	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 80049c0:	4a64      	ldr	r2, [pc, #400]	; (8004b54 <HAL_TIM_ConfigClockSource+0x220>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f200 80ae 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c8:	4a63      	ldr	r2, [pc, #396]	; (8004b58 <HAL_TIM_ConfigClockSource+0x224>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f000 80a1 	beq.w	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 80049d0:	4a61      	ldr	r2, [pc, #388]	; (8004b58 <HAL_TIM_ConfigClockSource+0x224>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f200 80a6 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d8:	4a60      	ldr	r2, [pc, #384]	; (8004b5c <HAL_TIM_ConfigClockSource+0x228>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	f000 8099 	beq.w	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 80049e0:	4a5e      	ldr	r2, [pc, #376]	; (8004b5c <HAL_TIM_ConfigClockSource+0x228>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	f200 809e 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80049ec:	f000 8091 	beq.w	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 80049f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80049f4:	f200 8096 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 80049f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049fc:	f000 8089 	beq.w	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 8004a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a04:	f200 808e 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0c:	d03e      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0x158>
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	f200 8087 	bhi.w	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1a:	f000 8086 	beq.w	8004b2a <HAL_TIM_ConfigClockSource+0x1f6>
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a22:	d87f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a24:	2b70      	cmp	r3, #112	; 0x70
 8004a26:	d01a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x12a>
 8004a28:	2b70      	cmp	r3, #112	; 0x70
 8004a2a:	d87b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a2c:	2b60      	cmp	r3, #96	; 0x60
 8004a2e:	d050      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x19e>
 8004a30:	2b60      	cmp	r3, #96	; 0x60
 8004a32:	d877      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a34:	2b50      	cmp	r3, #80	; 0x50
 8004a36:	d03c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x17e>
 8004a38:	2b50      	cmp	r3, #80	; 0x50
 8004a3a:	d873      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d058      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x1be>
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d86f      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d064      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d86b      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d060      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d867      	bhi.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d05a      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x1de>
 8004a5c:	e062      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6899      	ldr	r1, [r3, #8]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f000 fe51 	bl	8005714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	609a      	str	r2, [r3, #8]
      break;
 8004a8a:	e04f      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f000 fe3a 	bl	8005714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aae:	609a      	str	r2, [r3, #8]
      break;
 8004ab0:	e03c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 fcf6 	bl	80054b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2150      	movs	r1, #80	; 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fe05 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e02c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 fd52 	bl	8005588 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2160      	movs	r1, #96	; 0x60
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fdf5 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 8004af0:	e01c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f000 fcd6 	bl	80054b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2140      	movs	r1, #64	; 0x40
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fde5 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 8004b10:	e00c      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 fddc 	bl	80056da <TIM_ITRx_SetConfig>
      break;
 8004b22:	e003      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	00100070 	.word	0x00100070
 8004b4c:	00100060 	.word	0x00100060
 8004b50:	00100050 	.word	0x00100050
 8004b54:	00100040 	.word	0x00100040
 8004b58:	00100030 	.word	0x00100030
 8004b5c:	00100020 	.word	0x00100020

08004b60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b0c      	cmp	r3, #12
 8004b72:	d831      	bhi.n	8004bd8 <HAL_TIM_ReadCapturedValue+0x78>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004bb1 	.word	0x08004bb1
 8004b80:	08004bd9 	.word	0x08004bd9
 8004b84:	08004bd9 	.word	0x08004bd9
 8004b88:	08004bd9 	.word	0x08004bd9
 8004b8c:	08004bbb 	.word	0x08004bbb
 8004b90:	08004bd9 	.word	0x08004bd9
 8004b94:	08004bd9 	.word	0x08004bd9
 8004b98:	08004bd9 	.word	0x08004bd9
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	08004bd9 	.word	0x08004bd9
 8004ba4:	08004bd9 	.word	0x08004bd9
 8004ba8:	08004bd9 	.word	0x08004bd9
 8004bac:	08004bcf 	.word	0x08004bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	60fb      	str	r3, [r7, #12]

      break;
 8004bb8:	e00f      	b.n	8004bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	60fb      	str	r3, [r7, #12]

      break;
 8004bc2:	e00a      	b.n	8004bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	60fb      	str	r3, [r7, #12]

      break;
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	60fb      	str	r3, [r7, #12]

      break;
 8004bd6:	e000      	b.n	8004bda <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004bd8:	bf00      	nop
  }

  return tmpreg;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a46      	ldr	r2, [pc, #280]	; (8004d50 <TIM_Base_SetConfig+0x12c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d017      	beq.n	8004c6c <TIM_Base_SetConfig+0x48>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c42:	d013      	beq.n	8004c6c <TIM_Base_SetConfig+0x48>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a43      	ldr	r2, [pc, #268]	; (8004d54 <TIM_Base_SetConfig+0x130>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00f      	beq.n	8004c6c <TIM_Base_SetConfig+0x48>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a42      	ldr	r2, [pc, #264]	; (8004d58 <TIM_Base_SetConfig+0x134>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <TIM_Base_SetConfig+0x48>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a41      	ldr	r2, [pc, #260]	; (8004d5c <TIM_Base_SetConfig+0x138>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_Base_SetConfig+0x48>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a40      	ldr	r2, [pc, #256]	; (8004d60 <TIM_Base_SetConfig+0x13c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_Base_SetConfig+0x48>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a3f      	ldr	r2, [pc, #252]	; (8004d64 <TIM_Base_SetConfig+0x140>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d108      	bne.n	8004c7e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a33      	ldr	r2, [pc, #204]	; (8004d50 <TIM_Base_SetConfig+0x12c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d023      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8c:	d01f      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <TIM_Base_SetConfig+0x130>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01b      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <TIM_Base_SetConfig+0x134>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d017      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <TIM_Base_SetConfig+0x138>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a2d      	ldr	r2, [pc, #180]	; (8004d60 <TIM_Base_SetConfig+0x13c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <TIM_Base_SetConfig+0x144>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a2c      	ldr	r2, [pc, #176]	; (8004d6c <TIM_Base_SetConfig+0x148>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <TIM_Base_SetConfig+0x14c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_Base_SetConfig+0xaa>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a26      	ldr	r2, [pc, #152]	; (8004d64 <TIM_Base_SetConfig+0x140>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <TIM_Base_SetConfig+0x12c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <TIM_Base_SetConfig+0x110>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <TIM_Base_SetConfig+0x13c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_Base_SetConfig+0x110>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a14      	ldr	r2, [pc, #80]	; (8004d68 <TIM_Base_SetConfig+0x144>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0x110>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <TIM_Base_SetConfig+0x148>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0x110>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <TIM_Base_SetConfig+0x14c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x110>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a0d      	ldr	r2, [pc, #52]	; (8004d64 <TIM_Base_SetConfig+0x140>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d103      	bne.n	8004d3c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	615a      	str	r2, [r3, #20]
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40013400 	.word	0x40013400
 8004d64:	40015000 	.word	0x40015000
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800

08004d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f023 0201 	bic.w	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 0302 	bic.w	r3, r3, #2
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a30      	ldr	r2, [pc, #192]	; (8004e90 <TIM_OC1_SetConfig+0x11c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_OC1_SetConfig+0x88>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a2f      	ldr	r2, [pc, #188]	; (8004e94 <TIM_OC1_SetConfig+0x120>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_OC1_SetConfig+0x88>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a2e      	ldr	r2, [pc, #184]	; (8004e98 <TIM_OC1_SetConfig+0x124>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_OC1_SetConfig+0x88>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a2d      	ldr	r2, [pc, #180]	; (8004e9c <TIM_OC1_SetConfig+0x128>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_OC1_SetConfig+0x88>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a2c      	ldr	r2, [pc, #176]	; (8004ea0 <TIM_OC1_SetConfig+0x12c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_OC1_SetConfig+0x88>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2b      	ldr	r2, [pc, #172]	; (8004ea4 <TIM_OC1_SetConfig+0x130>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d10c      	bne.n	8004e16 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0308 	bic.w	r3, r3, #8
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1d      	ldr	r2, [pc, #116]	; (8004e90 <TIM_OC1_SetConfig+0x11c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <TIM_OC1_SetConfig+0xd2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <TIM_OC1_SetConfig+0x120>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <TIM_OC1_SetConfig+0xd2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <TIM_OC1_SetConfig+0x124>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_OC1_SetConfig+0xd2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1a      	ldr	r2, [pc, #104]	; (8004e9c <TIM_OC1_SetConfig+0x128>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_OC1_SetConfig+0xd2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <TIM_OC1_SetConfig+0x12c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC1_SetConfig+0xd2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <TIM_OC1_SetConfig+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d111      	bne.n	8004e6a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40012c00 	.word	0x40012c00
 8004e94:	40013400 	.word	0x40013400
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800
 8004ea4:	40015000 	.word	0x40015000

08004ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 0210 	bic.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0320 	bic.w	r3, r3, #32
 8004ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a2c      	ldr	r2, [pc, #176]	; (8004fb8 <TIM_OC2_SetConfig+0x110>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_OC2_SetConfig+0x74>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a2b      	ldr	r2, [pc, #172]	; (8004fbc <TIM_OC2_SetConfig+0x114>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_OC2_SetConfig+0x74>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <TIM_OC2_SetConfig+0x118>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10d      	bne.n	8004f38 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <TIM_OC2_SetConfig+0x110>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d013      	beq.n	8004f68 <TIM_OC2_SetConfig+0xc0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <TIM_OC2_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00f      	beq.n	8004f68 <TIM_OC2_SetConfig+0xc0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <TIM_OC2_SetConfig+0x11c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <TIM_OC2_SetConfig+0xc0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <TIM_OC2_SetConfig+0x120>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d007      	beq.n	8004f68 <TIM_OC2_SetConfig+0xc0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <TIM_OC2_SetConfig+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC2_SetConfig+0xc0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <TIM_OC2_SetConfig+0x118>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d113      	bne.n	8004f90 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40013400 	.word	0x40013400
 8004fc0:	40015000 	.word	0x40015000
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40014400 	.word	0x40014400
 8004fcc:	40014800 	.word	0x40014800

08004fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800501c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2b      	ldr	r2, [pc, #172]	; (80050dc <TIM_OC3_SetConfig+0x10c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <TIM_OC3_SetConfig+0x72>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2a      	ldr	r2, [pc, #168]	; (80050e0 <TIM_OC3_SetConfig+0x110>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_OC3_SetConfig+0x72>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a29      	ldr	r2, [pc, #164]	; (80050e4 <TIM_OC3_SetConfig+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d10d      	bne.n	800505e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <TIM_OC3_SetConfig+0x10c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d013      	beq.n	800508e <TIM_OC3_SetConfig+0xbe>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1d      	ldr	r2, [pc, #116]	; (80050e0 <TIM_OC3_SetConfig+0x110>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00f      	beq.n	800508e <TIM_OC3_SetConfig+0xbe>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <TIM_OC3_SetConfig+0x118>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00b      	beq.n	800508e <TIM_OC3_SetConfig+0xbe>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <TIM_OC3_SetConfig+0x11c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <TIM_OC3_SetConfig+0xbe>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <TIM_OC3_SetConfig+0x120>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_OC3_SetConfig+0xbe>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <TIM_OC3_SetConfig+0x114>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d113      	bne.n	80050b6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	621a      	str	r2, [r3, #32]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40013400 	.word	0x40013400
 80050e4:	40015000 	.word	0x40015000
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800

080050f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	031b      	lsls	r3, r3, #12
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <TIM_OC4_SetConfig+0x110>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_OC4_SetConfig+0x74>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a2b      	ldr	r2, [pc, #172]	; (8005208 <TIM_OC4_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_OC4_SetConfig+0x74>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a2a      	ldr	r2, [pc, #168]	; (800520c <TIM_OC4_SetConfig+0x118>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10d      	bne.n	8005184 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800516e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	031b      	lsls	r3, r3, #12
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005182:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <TIM_OC4_SetConfig+0x110>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <TIM_OC4_SetConfig+0xc0>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <TIM_OC4_SetConfig+0x114>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_OC4_SetConfig+0xc0>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <TIM_OC4_SetConfig+0x11c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_OC4_SetConfig+0xc0>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <TIM_OC4_SetConfig+0x120>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_OC4_SetConfig+0xc0>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <TIM_OC4_SetConfig+0x124>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_OC4_SetConfig+0xc0>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a17      	ldr	r2, [pc, #92]	; (800520c <TIM_OC4_SetConfig+0x118>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d113      	bne.n	80051dc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	019b      	lsls	r3, r3, #6
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	019b      	lsls	r3, r3, #6
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40013400 	.word	0x40013400
 800520c:	40015000 	.word	0x40015000
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800

0800521c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a19      	ldr	r2, [pc, #100]	; (80052d8 <TIM_OC5_SetConfig+0xbc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <TIM_OC5_SetConfig+0x82>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a18      	ldr	r2, [pc, #96]	; (80052dc <TIM_OC5_SetConfig+0xc0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00f      	beq.n	800529e <TIM_OC5_SetConfig+0x82>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a17      	ldr	r2, [pc, #92]	; (80052e0 <TIM_OC5_SetConfig+0xc4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00b      	beq.n	800529e <TIM_OC5_SetConfig+0x82>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <TIM_OC5_SetConfig+0xc8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <TIM_OC5_SetConfig+0x82>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <TIM_OC5_SetConfig+0xcc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_OC5_SetConfig+0x82>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <TIM_OC5_SetConfig+0xd0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d109      	bne.n	80052b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	621a      	str	r2, [r3, #32]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800
 80052ec:	40015000 	.word	0x40015000

080052f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	051b      	lsls	r3, r3, #20
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <TIM_OC6_SetConfig+0xc0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <TIM_OC6_SetConfig+0x84>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <TIM_OC6_SetConfig+0xc4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00f      	beq.n	8005374 <TIM_OC6_SetConfig+0x84>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <TIM_OC6_SetConfig+0xc8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_OC6_SetConfig+0x84>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <TIM_OC6_SetConfig+0xcc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_OC6_SetConfig+0x84>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <TIM_OC6_SetConfig+0xd0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC6_SetConfig+0x84>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <TIM_OC6_SetConfig+0xd4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d109      	bne.n	8005388 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800
 80053c4:	40015000 	.word	0x40015000

080053c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <TIM_TI1_SetConfig+0xcc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01b      	beq.n	800542e <TIM_TI1_SetConfig+0x66>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d017      	beq.n	800542e <TIM_TI1_SetConfig+0x66>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a25      	ldr	r2, [pc, #148]	; (8005498 <TIM_TI1_SetConfig+0xd0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <TIM_TI1_SetConfig+0x66>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4a24      	ldr	r2, [pc, #144]	; (800549c <TIM_TI1_SetConfig+0xd4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00f      	beq.n	800542e <TIM_TI1_SetConfig+0x66>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a23      	ldr	r2, [pc, #140]	; (80054a0 <TIM_TI1_SetConfig+0xd8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <TIM_TI1_SetConfig+0x66>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <TIM_TI1_SetConfig+0xdc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <TIM_TI1_SetConfig+0x66>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <TIM_TI1_SetConfig+0xe0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_TI1_SetConfig+0x66>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a20      	ldr	r2, [pc, #128]	; (80054ac <TIM_TI1_SetConfig+0xe4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d101      	bne.n	8005432 <TIM_TI1_SetConfig+0x6a>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <TIM_TI1_SetConfig+0x6c>
 8005432:	2300      	movs	r3, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e003      	b.n	8005452 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	b2db      	uxtb	r3, r3
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f023 030a 	bic.w	r3, r3, #10
 800546c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 030a 	and.w	r3, r3, #10
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40015000 	.word	0x40015000

080054b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 030a 	bic.w	r3, r3, #10
 80054ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800550e:	b480      	push	{r7}
 8005510:	b087      	sub	sp, #28
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f023 0210 	bic.w	r2, r3, #16
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800554c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	031b      	lsls	r3, r3, #12
 8005552:	b29b      	uxth	r3, r3
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005560:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	621a      	str	r2, [r3, #32]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f023 0210 	bic.w	r2, r3, #16
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	031b      	lsls	r3, r3, #12
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	621a      	str	r2, [r3, #32]
}
 80055dc:	bf00      	nop
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 0303 	bic.w	r3, r3, #3
 8005614:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005624:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	b2db      	uxtb	r3, r3
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005638:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	621a      	str	r2, [r3, #32]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800569e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	031b      	lsls	r3, r3, #12
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	031b      	lsls	r3, r3, #12
 80056b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f043 0307 	orr.w	r3, r3, #7
 8005700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	021a      	lsls	r2, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	431a      	orrs	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	609a      	str	r2, [r3, #8]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2201      	movs	r2, #1
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	43db      	mvns	r3, r3
 8005776:	401a      	ands	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1a      	ldr	r2, [r3, #32]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	fa01 f303 	lsl.w	r3, r1, r3
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e074      	b.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a34      	ldr	r2, [pc, #208]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d009      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a33      	ldr	r2, [pc, #204]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a31      	ldr	r2, [pc, #196]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d108      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a21      	ldr	r2, [pc, #132]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d022      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d01d      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d018      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00e      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d004      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d10c      	bne.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	4313      	orrs	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40012c00 	.word	0x40012c00
 80058b4:	40013400 	.word	0x40013400
 80058b8:	40015000 	.word	0x40015000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40014000 	.word	0x40014000

080058cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e042      	b.n	80059f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fc fb99 	bl	80020b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2224      	movs	r2, #36	; 0x24
 8005986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fd24 	bl	80063e8 <UART_SetConfig>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e022      	b.n	80059f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 f814 	bl	80069e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 f89b 	bl	8006b24 <UART_CheckIdleState>
 80059ee:	4603      	mov	r3, r0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	; 0x28
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	f040 8083 	bne.w	8005b1a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_UART_Transmit+0x28>
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e07b      	b.n	8005b1c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Transmit+0x3a>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e074      	b.n	8005b1c <HAL_UART_Transmit+0x124>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2221      	movs	r2, #33	; 0x21
 8005a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a4a:	f7fc fca3 	bl	8002394 <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	d108      	bne.n	8005a7c <HAL_UART_Transmit+0x84>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	e003      	b.n	8005a84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005a8c:	e02c      	b.n	8005ae8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2200      	movs	r2, #0
 8005a96:	2180      	movs	r1, #128	; 0x80
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f001 f88e 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e039      	b.n	8005b1c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005abc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e007      	b.n	8005ad6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1cc      	bne.n	8005a8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2200      	movs	r2, #0
 8005afc:	2140      	movs	r1, #64	; 0x40
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f001 f85b 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e006      	b.n	8005b1c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e000      	b.n	8005b1c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	4613      	mov	r3, r2
 8005b32:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	f040 80c0 	bne.w	8005cc0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_UART_Receive+0x28>
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0b8      	b.n	8005cc2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_UART_Receive+0x3a>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e0b1      	b.n	8005cc2 <HAL_UART_Receive+0x19e>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2222      	movs	r2, #34	; 0x22
 8005b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b7c:	f7fc fc0a 	bl	8002394 <HAL_GetTick>
 8005b80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	88fa      	ldrh	r2, [r7, #6]
 8005b8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9a:	d10e      	bne.n	8005bba <HAL_UART_Receive+0x96>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <HAL_UART_Receive+0x8c>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005baa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bae:	e02d      	b.n	8005c0c <HAL_UART_Receive+0xe8>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	22ff      	movs	r2, #255	; 0xff
 8005bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bb8:	e028      	b.n	8005c0c <HAL_UART_Receive+0xe8>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10d      	bne.n	8005bde <HAL_UART_Receive+0xba>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <HAL_UART_Receive+0xb0>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	22ff      	movs	r2, #255	; 0xff
 8005bce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bd2:	e01b      	b.n	8005c0c <HAL_UART_Receive+0xe8>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	227f      	movs	r2, #127	; 0x7f
 8005bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bdc:	e016      	b.n	8005c0c <HAL_UART_Receive+0xe8>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be6:	d10d      	bne.n	8005c04 <HAL_UART_Receive+0xe0>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <HAL_UART_Receive+0xd6>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	227f      	movs	r2, #127	; 0x7f
 8005bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bf8:	e008      	b.n	8005c0c <HAL_UART_Receive+0xe8>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	223f      	movs	r2, #63	; 0x3f
 8005bfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c02:	e003      	b.n	8005c0c <HAL_UART_Receive+0xe8>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c12:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1c:	d108      	bne.n	8005c30 <HAL_UART_Receive+0x10c>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e003      	b.n	8005c38 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c40:	e032      	b.n	8005ca8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2120      	movs	r1, #32
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 ffb4 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e032      	b.n	8005cc2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10c      	bne.n	8005c7c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	8a7b      	ldrh	r3, [r7, #18]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	3302      	adds	r3, #2
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	e00c      	b.n	8005c96 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	8a7b      	ldrh	r3, [r7, #18]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	4013      	ands	r3, r2
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	3301      	adds	r3, #1
 8005c94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1c6      	bne.n	8005c42 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d142      	bne.n	8005d6a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_UART_Receive_IT+0x24>
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e03b      	b.n	8005d6c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_UART_Receive_IT+0x36>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e034      	b.n	8005d6c <HAL_UART_Receive_IT+0xa0>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <HAL_UART_Receive_IT+0xa8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01f      	beq.n	8005d5a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d018      	beq.n	8005d5a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	613b      	str	r3, [r7, #16]
   return(result);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	623b      	str	r3, [r7, #32]
 8005d48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	69f9      	ldr	r1, [r7, #28]
 8005d4c:	6a3a      	ldr	r2, [r7, #32]
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e6      	bne.n	8005d28 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fff3 	bl	8006d4c <UART_Start_Receive_IT>
 8005d66:	4603      	mov	r3, r0
 8005d68:	e000      	b.n	8005d6c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3728      	adds	r7, #40	; 0x28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40008000 	.word	0x40008000

08005d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b0ba      	sub	sp, #232	; 0xe8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005da6:	4013      	ands	r3, r2
 8005da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11b      	bne.n	8005dec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d015      	beq.n	8005dec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 82d6 	beq.w	800638e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
      }
      return;
 8005dea:	e2d0      	b.n	800638e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 811f 	beq.w	8006034 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005df6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dfa:	4b8b      	ldr	r3, [pc, #556]	; (8006028 <HAL_UART_IRQHandler+0x2b0>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e06:	4b89      	ldr	r3, [pc, #548]	; (800602c <HAL_UART_IRQHandler+0x2b4>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8112 	beq.w	8006034 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d011      	beq.n	8005e40 <HAL_UART_IRQHandler+0xc8>
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e36:	f043 0201 	orr.w	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d011      	beq.n	8005e70 <HAL_UART_IRQHandler+0xf8>
 8005e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e66:	f043 0204 	orr.w	r2, r3, #4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d011      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x128>
 8005e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ebc:	4b5a      	ldr	r3, [pc, #360]	; (8006028 <HAL_UART_IRQHandler+0x2b0>)
 8005ebe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00b      	beq.n	8005edc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed2:	f043 0208 	orr.w	r2, r3, #8
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d012      	beq.n	8005f0e <HAL_UART_IRQHandler+0x196>
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f04:	f043 0220 	orr.w	r2, r3, #32
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 823c 	beq.w	8006392 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d013      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d105      	bne.n	8005f3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d005      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04f      	beq.n	8006012 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f814 	bl	8006fa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d141      	bne.n	800600a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1d9      	bne.n	8005f86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fde:	4a14      	ldr	r2, [pc, #80]	; (8006030 <HAL_UART_IRQHandler+0x2b8>)
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fc fb48 	bl	800267c <HAL_DMA_Abort_IT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d017      	beq.n	8006022 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00f      	b.n	8006022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f9da 	bl	80063bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00b      	b.n	8006022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9d6 	bl	80063bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e007      	b.n	8006022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f9d2 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006020:	e1b7      	b.n	8006392 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006022:	bf00      	nop
    return;
 8006024:	e1b5      	b.n	8006392 <HAL_UART_IRQHandler+0x61a>
 8006026:	bf00      	nop
 8006028:	10000001 	.word	0x10000001
 800602c:	04000120 	.word	0x04000120
 8006030:	0800706d 	.word	0x0800706d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006038:	2b01      	cmp	r3, #1
 800603a:	f040 814a 	bne.w	80062d2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 8143 	beq.w	80062d2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 813c 	beq.w	80062d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2210      	movs	r2, #16
 8006060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	f040 80b5 	bne.w	80061dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800607e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8187 	beq.w	8006396 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800608e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006092:	429a      	cmp	r2, r3
 8006094:	f080 817f 	bcs.w	8006396 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800609e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f040 8086 	bne.w	80061c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1da      	bne.n	80060b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800610e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800612a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e1      	bne.n	80060fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3308      	adds	r3, #8
 8006140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800614a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800614c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800615e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800616c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e3      	bne.n	800613a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800618e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006190:	f023 0310 	bic.w	r3, r3, #16
 8006194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	461a      	mov	r2, r3
 800619e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80061a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e4      	bne.n	8006180 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fc fa05 	bl	80025ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8fb 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061da:	e0dc      	b.n	8006396 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80ce 	beq.w	800639a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80061fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80c9 	beq.w	800639a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800621c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800622a:	647b      	str	r3, [r7, #68]	; 0x44
 800622c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e4      	bne.n	8006208 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	623b      	str	r3, [r7, #32]
   return(result);
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006266:	633a      	str	r2, [r7, #48]	; 0x30
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e1      	bne.n	800623e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	60fb      	str	r3, [r7, #12]
   return(result);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0310 	bic.w	r3, r3, #16
 80062a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	69b9      	ldr	r1, [r7, #24]
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	617b      	str	r3, [r7, #20]
   return(result);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e4      	bne.n	800628e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f880 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062d0:	e063      	b.n	800639a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00e      	beq.n	80062fc <HAL_UART_IRQHandler+0x584>
 80062de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d008      	beq.n	80062fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fb57 	bl	80079a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062fa:	e051      	b.n	80063a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006304:	2b00      	cmp	r3, #0
 8006306:	d014      	beq.n	8006332 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006324:	2b00      	cmp	r3, #0
 8006326:	d03a      	beq.n	800639e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
    }
    return;
 8006330:	e035      	b.n	800639e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_UART_IRQHandler+0x5da>
 800633e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fea4 	bl	8007098 <UART_EndTransmit_IT>
    return;
 8006350:	e026      	b.n	80063a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <HAL_UART_IRQHandler+0x5fa>
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006362:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f001 fb30 	bl	80079d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006370:	e016      	b.n	80063a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d010      	beq.n	80063a0 <HAL_UART_IRQHandler+0x628>
 800637e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006382:	2b00      	cmp	r3, #0
 8006384:	da0c      	bge.n	80063a0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 fb18 	bl	80079bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800638c:	e008      	b.n	80063a0 <HAL_UART_IRQHandler+0x628>
      return;
 800638e:	bf00      	nop
 8006390:	e006      	b.n	80063a0 <HAL_UART_IRQHandler+0x628>
    return;
 8006392:	bf00      	nop
 8006394:	e004      	b.n	80063a0 <HAL_UART_IRQHandler+0x628>
      return;
 8006396:	bf00      	nop
 8006398:	e002      	b.n	80063a0 <HAL_UART_IRQHandler+0x628>
      return;
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <HAL_UART_IRQHandler+0x628>
    return;
 800639e:	bf00      	nop
  }
}
 80063a0:	37e8      	adds	r7, #232	; 0xe8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop

080063a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063ec:	b08c      	sub	sp, #48	; 0x30
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	431a      	orrs	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	4313      	orrs	r3, r2
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4baa      	ldr	r3, [pc, #680]	; (80066c0 <UART_SetConfig+0x2d8>)
 8006418:	4013      	ands	r3, r2
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006420:	430b      	orrs	r3, r1
 8006422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a9f      	ldr	r2, [pc, #636]	; (80066c4 <UART_SetConfig+0x2dc>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006450:	4313      	orrs	r3, r2
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800645e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006468:	430b      	orrs	r3, r1
 800646a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	f023 010f 	bic.w	r1, r3, #15
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a90      	ldr	r2, [pc, #576]	; (80066c8 <UART_SetConfig+0x2e0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d125      	bne.n	80064d8 <UART_SetConfig+0xf0>
 800648c:	4b8f      	ldr	r3, [pc, #572]	; (80066cc <UART_SetConfig+0x2e4>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b03      	cmp	r3, #3
 8006498:	d81a      	bhi.n	80064d0 <UART_SetConfig+0xe8>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <UART_SetConfig+0xb8>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064c1 	.word	0x080064c1
 80064a8:	080064b9 	.word	0x080064b9
 80064ac:	080064c9 	.word	0x080064c9
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b6:	e116      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80064b8:	2302      	movs	r3, #2
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064be:	e112      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80064c0:	2304      	movs	r3, #4
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c6:	e10e      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80064c8:	2308      	movs	r3, #8
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ce:	e10a      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80064d0:	2310      	movs	r3, #16
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d6:	e106      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a7c      	ldr	r2, [pc, #496]	; (80066d0 <UART_SetConfig+0x2e8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d138      	bne.n	8006554 <UART_SetConfig+0x16c>
 80064e2:	4b7a      	ldr	r3, [pc, #488]	; (80066cc <UART_SetConfig+0x2e4>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f003 030c 	and.w	r3, r3, #12
 80064ec:	2b0c      	cmp	r3, #12
 80064ee:	d82d      	bhi.n	800654c <UART_SetConfig+0x164>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <UART_SetConfig+0x110>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	0800652d 	.word	0x0800652d
 80064fc:	0800654d 	.word	0x0800654d
 8006500:	0800654d 	.word	0x0800654d
 8006504:	0800654d 	.word	0x0800654d
 8006508:	0800653d 	.word	0x0800653d
 800650c:	0800654d 	.word	0x0800654d
 8006510:	0800654d 	.word	0x0800654d
 8006514:	0800654d 	.word	0x0800654d
 8006518:	08006535 	.word	0x08006535
 800651c:	0800654d 	.word	0x0800654d
 8006520:	0800654d 	.word	0x0800654d
 8006524:	0800654d 	.word	0x0800654d
 8006528:	08006545 	.word	0x08006545
 800652c:	2300      	movs	r3, #0
 800652e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006532:	e0d8      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006534:	2302      	movs	r3, #2
 8006536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653a:	e0d4      	b.n	80066e6 <UART_SetConfig+0x2fe>
 800653c:	2304      	movs	r3, #4
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006542:	e0d0      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006544:	2308      	movs	r3, #8
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800654a:	e0cc      	b.n	80066e6 <UART_SetConfig+0x2fe>
 800654c:	2310      	movs	r3, #16
 800654e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006552:	e0c8      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a5e      	ldr	r2, [pc, #376]	; (80066d4 <UART_SetConfig+0x2ec>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d125      	bne.n	80065aa <UART_SetConfig+0x1c2>
 800655e:	4b5b      	ldr	r3, [pc, #364]	; (80066cc <UART_SetConfig+0x2e4>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006568:	2b30      	cmp	r3, #48	; 0x30
 800656a:	d016      	beq.n	800659a <UART_SetConfig+0x1b2>
 800656c:	2b30      	cmp	r3, #48	; 0x30
 800656e:	d818      	bhi.n	80065a2 <UART_SetConfig+0x1ba>
 8006570:	2b20      	cmp	r3, #32
 8006572:	d00a      	beq.n	800658a <UART_SetConfig+0x1a2>
 8006574:	2b20      	cmp	r3, #32
 8006576:	d814      	bhi.n	80065a2 <UART_SetConfig+0x1ba>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <UART_SetConfig+0x19a>
 800657c:	2b10      	cmp	r3, #16
 800657e:	d008      	beq.n	8006592 <UART_SetConfig+0x1aa>
 8006580:	e00f      	b.n	80065a2 <UART_SetConfig+0x1ba>
 8006582:	2300      	movs	r3, #0
 8006584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006588:	e0ad      	b.n	80066e6 <UART_SetConfig+0x2fe>
 800658a:	2302      	movs	r3, #2
 800658c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006590:	e0a9      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006592:	2304      	movs	r3, #4
 8006594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006598:	e0a5      	b.n	80066e6 <UART_SetConfig+0x2fe>
 800659a:	2308      	movs	r3, #8
 800659c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a0:	e0a1      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80065a2:	2310      	movs	r3, #16
 80065a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a8:	e09d      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a4a      	ldr	r2, [pc, #296]	; (80066d8 <UART_SetConfig+0x2f0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d125      	bne.n	8006600 <UART_SetConfig+0x218>
 80065b4:	4b45      	ldr	r3, [pc, #276]	; (80066cc <UART_SetConfig+0x2e4>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065be:	2bc0      	cmp	r3, #192	; 0xc0
 80065c0:	d016      	beq.n	80065f0 <UART_SetConfig+0x208>
 80065c2:	2bc0      	cmp	r3, #192	; 0xc0
 80065c4:	d818      	bhi.n	80065f8 <UART_SetConfig+0x210>
 80065c6:	2b80      	cmp	r3, #128	; 0x80
 80065c8:	d00a      	beq.n	80065e0 <UART_SetConfig+0x1f8>
 80065ca:	2b80      	cmp	r3, #128	; 0x80
 80065cc:	d814      	bhi.n	80065f8 <UART_SetConfig+0x210>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <UART_SetConfig+0x1f0>
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d008      	beq.n	80065e8 <UART_SetConfig+0x200>
 80065d6:	e00f      	b.n	80065f8 <UART_SetConfig+0x210>
 80065d8:	2300      	movs	r3, #0
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065de:	e082      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80065e0:	2302      	movs	r3, #2
 80065e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065e6:	e07e      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80065e8:	2304      	movs	r3, #4
 80065ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ee:	e07a      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80065f0:	2308      	movs	r3, #8
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065f6:	e076      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80065f8:	2310      	movs	r3, #16
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065fe:	e072      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a35      	ldr	r2, [pc, #212]	; (80066dc <UART_SetConfig+0x2f4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d12a      	bne.n	8006660 <UART_SetConfig+0x278>
 800660a:	4b30      	ldr	r3, [pc, #192]	; (80066cc <UART_SetConfig+0x2e4>)
 800660c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006618:	d01a      	beq.n	8006650 <UART_SetConfig+0x268>
 800661a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800661e:	d81b      	bhi.n	8006658 <UART_SetConfig+0x270>
 8006620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006624:	d00c      	beq.n	8006640 <UART_SetConfig+0x258>
 8006626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662a:	d815      	bhi.n	8006658 <UART_SetConfig+0x270>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <UART_SetConfig+0x250>
 8006630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006634:	d008      	beq.n	8006648 <UART_SetConfig+0x260>
 8006636:	e00f      	b.n	8006658 <UART_SetConfig+0x270>
 8006638:	2300      	movs	r3, #0
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663e:	e052      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006646:	e04e      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800664e:	e04a      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006656:	e046      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800665e:	e042      	b.n	80066e6 <UART_SetConfig+0x2fe>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a17      	ldr	r2, [pc, #92]	; (80066c4 <UART_SetConfig+0x2dc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d13a      	bne.n	80066e0 <UART_SetConfig+0x2f8>
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <UART_SetConfig+0x2e4>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006670:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006678:	d01a      	beq.n	80066b0 <UART_SetConfig+0x2c8>
 800667a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800667e:	d81b      	bhi.n	80066b8 <UART_SetConfig+0x2d0>
 8006680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006684:	d00c      	beq.n	80066a0 <UART_SetConfig+0x2b8>
 8006686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800668a:	d815      	bhi.n	80066b8 <UART_SetConfig+0x2d0>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <UART_SetConfig+0x2b0>
 8006690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006694:	d008      	beq.n	80066a8 <UART_SetConfig+0x2c0>
 8006696:	e00f      	b.n	80066b8 <UART_SetConfig+0x2d0>
 8006698:	2300      	movs	r3, #0
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669e:	e022      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80066a0:	2302      	movs	r3, #2
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a6:	e01e      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80066a8:	2304      	movs	r3, #4
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ae:	e01a      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80066b0:	2308      	movs	r3, #8
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b6:	e016      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80066b8:	2310      	movs	r3, #16
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066be:	e012      	b.n	80066e6 <UART_SetConfig+0x2fe>
 80066c0:	cfff69f3 	.word	0xcfff69f3
 80066c4:	40008000 	.word	0x40008000
 80066c8:	40013800 	.word	0x40013800
 80066cc:	40021000 	.word	0x40021000
 80066d0:	40004400 	.word	0x40004400
 80066d4:	40004800 	.word	0x40004800
 80066d8:	40004c00 	.word	0x40004c00
 80066dc:	40005000 	.word	0x40005000
 80066e0:	2310      	movs	r3, #16
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4aae      	ldr	r2, [pc, #696]	; (80069a4 <UART_SetConfig+0x5bc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	f040 8097 	bne.w	8006820 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d823      	bhi.n	8006742 <UART_SetConfig+0x35a>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <UART_SetConfig+0x318>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006725 	.word	0x08006725
 8006704:	08006743 	.word	0x08006743
 8006708:	0800672d 	.word	0x0800672d
 800670c:	08006743 	.word	0x08006743
 8006710:	08006733 	.word	0x08006733
 8006714:	08006743 	.word	0x08006743
 8006718:	08006743 	.word	0x08006743
 800671c:	08006743 	.word	0x08006743
 8006720:	0800673b 	.word	0x0800673b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006724:	f7fc ff2a 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8006728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800672a:	e010      	b.n	800674e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800672c:	4b9e      	ldr	r3, [pc, #632]	; (80069a8 <UART_SetConfig+0x5c0>)
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006730:	e00d      	b.n	800674e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006732:	f7fc feb5 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8006736:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006738:	e009      	b.n	800674e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006740:	e005      	b.n	800674e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800674c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8130 	beq.w	80069b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	4a94      	ldr	r2, [pc, #592]	; (80069ac <UART_SetConfig+0x5c4>)
 800675c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006760:	461a      	mov	r2, r3
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	fbb3 f3f2 	udiv	r3, r3, r2
 8006768:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	4413      	add	r3, r2
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	429a      	cmp	r2, r3
 8006778:	d305      	bcc.n	8006786 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	429a      	cmp	r2, r3
 8006784:	d903      	bls.n	800678e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800678c:	e113      	b.n	80069b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	2200      	movs	r2, #0
 8006792:	60bb      	str	r3, [r7, #8]
 8006794:	60fa      	str	r2, [r7, #12]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	4a84      	ldr	r2, [pc, #528]	; (80069ac <UART_SetConfig+0x5c4>)
 800679c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2200      	movs	r2, #0
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067b0:	f7fa f9a4 	bl	8000afc <__aeabi_uldivmod>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4610      	mov	r0, r2
 80067ba:	4619      	mov	r1, r3
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	020b      	lsls	r3, r1, #8
 80067c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067ca:	0202      	lsls	r2, r0, #8
 80067cc:	6979      	ldr	r1, [r7, #20]
 80067ce:	6849      	ldr	r1, [r1, #4]
 80067d0:	0849      	lsrs	r1, r1, #1
 80067d2:	2000      	movs	r0, #0
 80067d4:	460c      	mov	r4, r1
 80067d6:	4605      	mov	r5, r0
 80067d8:	eb12 0804 	adds.w	r8, r2, r4
 80067dc:	eb43 0905 	adc.w	r9, r3, r5
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	469a      	mov	sl, r3
 80067e8:	4693      	mov	fp, r2
 80067ea:	4652      	mov	r2, sl
 80067ec:	465b      	mov	r3, fp
 80067ee:	4640      	mov	r0, r8
 80067f0:	4649      	mov	r1, r9
 80067f2:	f7fa f983 	bl	8000afc <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4613      	mov	r3, r2
 80067fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006804:	d308      	bcc.n	8006818 <UART_SetConfig+0x430>
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800680c:	d204      	bcs.n	8006818 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	e0ce      	b.n	80069b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800681e:	e0ca      	b.n	80069b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006828:	d166      	bne.n	80068f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800682a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800682e:	2b08      	cmp	r3, #8
 8006830:	d827      	bhi.n	8006882 <UART_SetConfig+0x49a>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <UART_SetConfig+0x450>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	0800685d 	.word	0x0800685d
 800683c:	08006865 	.word	0x08006865
 8006840:	0800686d 	.word	0x0800686d
 8006844:	08006883 	.word	0x08006883
 8006848:	08006873 	.word	0x08006873
 800684c:	08006883 	.word	0x08006883
 8006850:	08006883 	.word	0x08006883
 8006854:	08006883 	.word	0x08006883
 8006858:	0800687b 	.word	0x0800687b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800685c:	f7fc fe8e 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8006860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006862:	e014      	b.n	800688e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006864:	f7fc fea0 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8006868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800686a:	e010      	b.n	800688e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800686c:	4b4e      	ldr	r3, [pc, #312]	; (80069a8 <UART_SetConfig+0x5c0>)
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006870:	e00d      	b.n	800688e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006872:	f7fc fe15 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8006876:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006878:	e009      	b.n	800688e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006880:	e005      	b.n	800688e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800688c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8090 	beq.w	80069b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	4a44      	ldr	r2, [pc, #272]	; (80069ac <UART_SetConfig+0x5c4>)
 800689c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80068a8:	005a      	lsls	r2, r3, #1
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	441a      	add	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d916      	bls.n	80068f0 <UART_SetConfig+0x508>
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c8:	d212      	bcs.n	80068f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f023 030f 	bic.w	r3, r3, #15
 80068d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	b29a      	uxth	r2, r3
 80068e0:	8bfb      	ldrh	r3, [r7, #30]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	8bfa      	ldrh	r2, [r7, #30]
 80068ec:	60da      	str	r2, [r3, #12]
 80068ee:	e062      	b.n	80069b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068f6:	e05e      	b.n	80069b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d828      	bhi.n	8006952 <UART_SetConfig+0x56a>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <UART_SetConfig+0x520>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006935 	.word	0x08006935
 8006910:	0800693d 	.word	0x0800693d
 8006914:	08006953 	.word	0x08006953
 8006918:	08006943 	.word	0x08006943
 800691c:	08006953 	.word	0x08006953
 8006920:	08006953 	.word	0x08006953
 8006924:	08006953 	.word	0x08006953
 8006928:	0800694b 	.word	0x0800694b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800692c:	f7fc fe26 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8006930:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006932:	e014      	b.n	800695e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006934:	f7fc fe38 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8006938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800693a:	e010      	b.n	800695e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800693c:	4b1a      	ldr	r3, [pc, #104]	; (80069a8 <UART_SetConfig+0x5c0>)
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006940:	e00d      	b.n	800695e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006942:	f7fc fdad 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8006946:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006948:	e009      	b.n	800695e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006950:	e005      	b.n	800695e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800695c:	bf00      	nop
    }

    if (pclk != 0U)
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	2b00      	cmp	r3, #0
 8006962:	d028      	beq.n	80069b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	4a10      	ldr	r2, [pc, #64]	; (80069ac <UART_SetConfig+0x5c4>)
 800696a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800696e:	461a      	mov	r2, r3
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	fbb3 f2f2 	udiv	r2, r3, r2
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	441a      	add	r2, r3
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2b0f      	cmp	r3, #15
 800698c:	d910      	bls.n	80069b0 <UART_SetConfig+0x5c8>
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006994:	d20c      	bcs.n	80069b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	b29a      	uxth	r2, r3
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60da      	str	r2, [r3, #12]
 80069a0:	e009      	b.n	80069b6 <UART_SetConfig+0x5ce>
 80069a2:	bf00      	nop
 80069a4:	40008000 	.word	0x40008000
 80069a8:	00f42400 	.word	0x00f42400
 80069ac:	0800bd70 	.word	0x0800bd70
      }
      else
      {
        ret = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2200      	movs	r2, #0
 80069ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2200      	movs	r2, #0
 80069d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3730      	adds	r7, #48	; 0x30
 80069da:	46bd      	mov	sp, r7
 80069dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080069e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01a      	beq.n	8006af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ade:	d10a      	bne.n	8006af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
  }
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b34:	f7fb fc2e 	bl	8002394 <HAL_GetTick>
 8006b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d10e      	bne.n	8006b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f82f 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e025      	b.n	8006bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d10e      	bne.n	8006b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f819 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e00f      	b.n	8006bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b09c      	sub	sp, #112	; 0x70
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bca:	e0a9      	b.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	f000 80a5 	beq.w	8006d20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd6:	f7fb fbdd 	bl	8002394 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <UART_WaitOnFlagUntilTimeout+0x32>
 8006be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d140      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c00:	667b      	str	r3, [r7, #100]	; 0x64
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c0c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e6      	bne.n	8006bec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3308      	adds	r3, #8
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	663b      	str	r3, [r7, #96]	; 0x60
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e069      	b.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d051      	beq.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8a:	d149      	bne.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e6      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ce8:	623a      	str	r2, [r7, #32]
 8006cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	69f9      	ldr	r1, [r7, #28]
 8006cee:	6a3a      	ldr	r2, [r7, #32]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e010      	b.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69da      	ldr	r2, [r3, #28]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	bf0c      	ite	eq
 8006d30:	2301      	moveq	r3, #1
 8006d32:	2300      	movne	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	f43f af46 	beq.w	8006bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3770      	adds	r7, #112	; 0x70
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b0a3      	sub	sp, #140	; 0x8c
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	88fa      	ldrh	r2, [r7, #6]
 8006d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7e:	d10e      	bne.n	8006d9e <UART_Start_Receive_IT+0x52>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <UART_Start_Receive_IT+0x48>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d92:	e02d      	b.n	8006df0 <UART_Start_Receive_IT+0xa4>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	22ff      	movs	r2, #255	; 0xff
 8006d98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d9c:	e028      	b.n	8006df0 <UART_Start_Receive_IT+0xa4>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10d      	bne.n	8006dc2 <UART_Start_Receive_IT+0x76>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <UART_Start_Receive_IT+0x6c>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	22ff      	movs	r2, #255	; 0xff
 8006db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006db6:	e01b      	b.n	8006df0 <UART_Start_Receive_IT+0xa4>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	227f      	movs	r2, #127	; 0x7f
 8006dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dc0:	e016      	b.n	8006df0 <UART_Start_Receive_IT+0xa4>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dca:	d10d      	bne.n	8006de8 <UART_Start_Receive_IT+0x9c>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <UART_Start_Receive_IT+0x92>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	227f      	movs	r2, #127	; 0x7f
 8006dd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ddc:	e008      	b.n	8006df0 <UART_Start_Receive_IT+0xa4>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	223f      	movs	r2, #63	; 0x3f
 8006de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006de6:	e003      	b.n	8006df0 <UART_Start_Receive_IT+0xa4>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2222      	movs	r2, #34	; 0x22
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e24:	673a      	str	r2, [r7, #112]	; 0x70
 8006e26:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006e2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e3      	bne.n	8006e00 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e40:	d153      	bne.n	8006eea <UART_Start_Receive_IT+0x19e>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d34d      	bcc.n	8006eea <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e56:	d107      	bne.n	8006e68 <UART_Start_Receive_IT+0x11c>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a4b      	ldr	r2, [pc, #300]	; (8006f90 <UART_Start_Receive_IT+0x244>)
 8006e64:	671a      	str	r2, [r3, #112]	; 0x70
 8006e66:	e002      	b.n	8006e6e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4a4a      	ldr	r2, [pc, #296]	; (8006f94 <UART_Start_Receive_IT+0x248>)
 8006e6c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01a      	beq.n	8006eb4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e4      	bne.n	8006e7e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ed4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ed6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e5      	bne.n	8006eb4 <UART_Start_Receive_IT+0x168>
 8006ee8:	e04a      	b.n	8006f80 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef2:	d107      	bne.n	8006f04 <UART_Start_Receive_IT+0x1b8>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a26      	ldr	r2, [pc, #152]	; (8006f98 <UART_Start_Receive_IT+0x24c>)
 8006f00:	671a      	str	r2, [r3, #112]	; 0x70
 8006f02:	e002      	b.n	8006f0a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a25      	ldr	r2, [pc, #148]	; (8006f9c <UART_Start_Receive_IT+0x250>)
 8006f08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d019      	beq.n	8006f4e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f2e:	677b      	str	r3, [r7, #116]	; 0x74
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e6      	bne.n	8006f1a <UART_Start_Receive_IT+0x1ce>
 8006f4c:	e018      	b.n	8006f80 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f043 0320 	orr.w	r3, r3, #32
 8006f62:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	69f9      	ldr	r1, [r7, #28]
 8006f72:	6a3a      	ldr	r2, [r7, #32]
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	378c      	adds	r7, #140	; 0x8c
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	080076a9 	.word	0x080076a9
 8006f94:	080073b1 	.word	0x080073b1
 8006f98:	0800724f 	.word	0x0800724f
 8006f9c:	080070ef 	.word	0x080070ef

08006fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b095      	sub	sp, #84	; 0x54
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e6      	bne.n	8006fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3308      	adds	r3, #8
 8006fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e3      	bne.n	8006fda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007016:	2b01      	cmp	r3, #1
 8007018:	d118      	bne.n	800704c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	60bb      	str	r3, [r7, #8]
   return(result);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f023 0310 	bic.w	r3, r3, #16
 800702e:	647b      	str	r3, [r7, #68]	; 0x44
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6979      	ldr	r1, [r7, #20]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	613b      	str	r3, [r7, #16]
   return(result);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e6      	bne.n	800701a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007060:	bf00      	nop
 8007062:	3754      	adds	r7, #84	; 0x54
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff f996 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007090:	bf00      	nop
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6979      	ldr	r1, [r7, #20]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	613b      	str	r3, [r7, #16]
   return(result);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff f961 	bl	80063a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e6:	bf00      	nop
 80070e8:	3720      	adds	r7, #32
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b096      	sub	sp, #88	; 0x58
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007106:	2b22      	cmp	r3, #34	; 0x22
 8007108:	f040 8095 	bne.w	8007236 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007116:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800711a:	b2d9      	uxtb	r1, r3
 800711c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007120:	b2da      	uxtb	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007126:	400a      	ands	r2, r1
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d178      	bne.n	8007246 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007168:	653b      	str	r3, [r7, #80]	; 0x50
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007172:	647b      	str	r3, [r7, #68]	; 0x44
 8007174:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	623b      	str	r3, [r7, #32]
   return(result);
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3308      	adds	r3, #8
 80071a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071a6:	633a      	str	r2, [r7, #48]	; 0x30
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e5      	bne.n	8007186 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d12e      	bne.n	800722e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0310 	bic.w	r3, r3, #16
 80071ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	69b9      	ldr	r1, [r7, #24]
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	617b      	str	r3, [r7, #20]
   return(result);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e6      	bne.n	80071d6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f003 0310 	and.w	r3, r3, #16
 8007212:	2b10      	cmp	r3, #16
 8007214:	d103      	bne.n	800721e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2210      	movs	r2, #16
 800721c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff f8d2 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800722c:	e00b      	b.n	8007246 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fa f974 	bl	800151c <HAL_UART_RxCpltCallback>
}
 8007234:	e007      	b.n	8007246 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0208 	orr.w	r2, r2, #8
 8007244:	619a      	str	r2, [r3, #24]
}
 8007246:	bf00      	nop
 8007248:	3758      	adds	r7, #88	; 0x58
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b096      	sub	sp, #88	; 0x58
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800725c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007266:	2b22      	cmp	r3, #34	; 0x22
 8007268:	f040 8095 	bne.w	8007396 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800727c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007280:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007284:	4013      	ands	r3, r2
 8007286:	b29a      	uxth	r2, r3
 8007288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800728a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	1c9a      	adds	r2, r3, #2
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d178      	bne.n	80073a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d2:	643b      	str	r3, [r7, #64]	; 0x40
 80072d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e6      	bne.n	80072b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f023 0301 	bic.w	r3, r3, #1
 80072fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800730c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e5      	bne.n	80072e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d12e      	bne.n	800738e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	60bb      	str	r3, [r7, #8]
   return(result);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f023 0310 	bic.w	r3, r3, #16
 800734a:	647b      	str	r3, [r7, #68]	; 0x44
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007354:	61bb      	str	r3, [r7, #24]
 8007356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	613b      	str	r3, [r7, #16]
   return(result);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e6      	bne.n	8007336 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f003 0310 	and.w	r3, r3, #16
 8007372:	2b10      	cmp	r3, #16
 8007374:	d103      	bne.n	800737e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2210      	movs	r2, #16
 800737c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff f822 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800738c:	e00b      	b.n	80073a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fa f8c4 	bl	800151c <HAL_UART_RxCpltCallback>
}
 8007394:	e007      	b.n	80073a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0208 	orr.w	r2, r2, #8
 80073a4:	619a      	str	r2, [r3, #24]
}
 80073a6:	bf00      	nop
 80073a8:	3758      	adds	r7, #88	; 0x58
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b0a6      	sub	sp, #152	; 0x98
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e6:	2b22      	cmp	r3, #34	; 0x22
 80073e8:	f040 814f 	bne.w	800768a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073f6:	e0f6      	b.n	80075e6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007402:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007406:	b2d9      	uxtb	r1, r3
 8007408:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800740c:	b2da      	uxtb	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007412:	400a      	ands	r2, r1
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800743e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d053      	beq.n	80074f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800744a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2201      	movs	r2, #1
 8007468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007470:	f043 0201 	orr.w	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800747a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d011      	beq.n	80074aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2202      	movs	r2, #2
 8007498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a0:	f043 0204 	orr.w	r2, r3, #4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d011      	beq.n	80074da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80074b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00b      	beq.n	80074da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2204      	movs	r2, #4
 80074c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d0:	f043 0202 	orr.w	r2, r3, #2
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fe ff69 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d173      	bne.n	80075e6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800750c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800750e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007520:	66bb      	str	r3, [r7, #104]	; 0x68
 8007522:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007526:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800752e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e4      	bne.n	80074fe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007558:	657a      	str	r2, [r7, #84]	; 0x54
 800755a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800755e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e3      	bne.n	8007534 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800757e:	2b01      	cmp	r3, #1
 8007580:	d12e      	bne.n	80075e0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	f023 0310 	bic.w	r3, r3, #16
 800759c:	67bb      	str	r3, [r7, #120]	; 0x78
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a6:	643b      	str	r3, [r7, #64]	; 0x40
 80075a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e6      	bne.n	8007588 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d103      	bne.n	80075d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2210      	movs	r2, #16
 80075ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fe fef9 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
 80075de:	e002      	b.n	80075e6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7f9 ff9b 	bl	800151c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d006      	beq.n	80075fc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80075ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f47f aefe 	bne.w	80073f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007606:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800760a:	2b00      	cmp	r3, #0
 800760c:	d045      	beq.n	800769a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007614:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007618:	429a      	cmp	r2, r3
 800761a:	d23e      	bcs.n	800769a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3308      	adds	r3, #8
 8007622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	61fb      	str	r3, [r7, #28]
   return(result);
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007632:	673b      	str	r3, [r7, #112]	; 0x70
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800763c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a14      	ldr	r2, [pc, #80]	; (80076a4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007654:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	60bb      	str	r3, [r7, #8]
   return(result);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f043 0320 	orr.w	r3, r3, #32
 800766a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6979      	ldr	r1, [r7, #20]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	613b      	str	r3, [r7, #16]
   return(result);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007688:	e007      	b.n	800769a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0208 	orr.w	r2, r2, #8
 8007698:	619a      	str	r2, [r3, #24]
}
 800769a:	bf00      	nop
 800769c:	3798      	adds	r7, #152	; 0x98
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	080070ef 	.word	0x080070ef

080076a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b0a8      	sub	sp, #160	; 0xa0
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076de:	2b22      	cmp	r3, #34	; 0x22
 80076e0:	f040 8153 	bne.w	800798a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076ee:	e0fa      	b.n	80078e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007702:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007706:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800770a:	4013      	ands	r3, r2
 800770c:	b29a      	uxth	r2, r3
 800770e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007712:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800773a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	2b00      	cmp	r3, #0
 8007744:	d053      	beq.n	80077ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d011      	beq.n	8007776 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800776c:	f043 0201 	orr.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007776:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d011      	beq.n	80077a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2202      	movs	r2, #2
 8007794:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800779c:	f043 0204 	orr.w	r2, r3, #4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d011      	beq.n	80077d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80077b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2204      	movs	r2, #4
 80077c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077cc:	f043 0202 	orr.w	r2, r3, #2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d006      	beq.n	80077ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7fe fdeb 	bl	80063bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d175      	bne.n	80078e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800780a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800780e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800781c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800781e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800782a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e4      	bne.n	80077fa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007846:	f023 0301 	bic.w	r3, r3, #1
 800784a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007858:	65ba      	str	r2, [r7, #88]	; 0x58
 800785a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800785e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e1      	bne.n	8007830 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d12e      	bne.n	80078e0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007898:	f023 0310 	bic.w	r3, r3, #16
 800789c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80078a6:	647b      	str	r3, [r7, #68]	; 0x44
 80078a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e6      	bne.n	8007888 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d103      	bne.n	80078d0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2210      	movs	r2, #16
 80078ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7fe fd79 	bl	80063d0 <HAL_UARTEx_RxEventCallback>
 80078de:	e002      	b.n	80078e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7f9 fe1b 	bl	800151c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d006      	beq.n	80078fc <UART_RxISR_16BIT_FIFOEN+0x254>
 80078ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f47f aefa 	bne.w	80076f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007902:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007906:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800790a:	2b00      	cmp	r3, #0
 800790c:	d045      	beq.n	800799a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007914:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007918:	429a      	cmp	r2, r3
 800791a:	d23e      	bcs.n	800799a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	623b      	str	r3, [r7, #32]
   return(result);
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007932:	677b      	str	r3, [r7, #116]	; 0x74
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800793c:	633a      	str	r2, [r7, #48]	; 0x30
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e5      	bne.n	800791c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a14      	ldr	r2, [pc, #80]	; (80079a4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007954:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	60fb      	str	r3, [r7, #12]
   return(result);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f043 0320 	orr.w	r3, r3, #32
 800796a:	673b      	str	r3, [r7, #112]	; 0x70
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	69b9      	ldr	r1, [r7, #24]
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	617b      	str	r3, [r7, #20]
   return(result);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e6      	bne.n	8007956 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007988:	e007      	b.n	800799a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699a      	ldr	r2, [r3, #24]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0208 	orr.w	r2, r2, #8
 8007998:	619a      	str	r2, [r3, #24]
}
 800799a:	bf00      	nop
 800799c:	37a0      	adds	r7, #160	; 0xa0
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	0800724f 	.word	0x0800724f

080079a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_UARTEx_DisableFifoMode+0x16>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e027      	b.n	8007a4a <HAL_UARTEx_DisableFifoMode+0x66>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2224      	movs	r2, #36	; 0x24
 8007a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e02d      	b.n	8007aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2224      	movs	r2, #36	; 0x24
 8007a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f850 	bl	8007b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e02d      	b.n	8007b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2224      	movs	r2, #36	; 0x24
 8007af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f812 	bl	8007b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d108      	bne.n	8007b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b70:	e031      	b.n	8007bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b72:	2308      	movs	r3, #8
 8007b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b76:	2308      	movs	r3, #8
 8007b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	0e5b      	lsrs	r3, r3, #25
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	0f5b      	lsrs	r3, r3, #29
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	7b3a      	ldrb	r2, [r7, #12]
 8007b9e:	4911      	ldr	r1, [pc, #68]	; (8007be4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ba0:	5c8a      	ldrb	r2, [r1, r2]
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ba6:	7b3a      	ldrb	r2, [r7, #12]
 8007ba8:	490f      	ldr	r1, [pc, #60]	; (8007be8 <UARTEx_SetNbDataToProcess+0x98>)
 8007baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	7b7a      	ldrb	r2, [r7, #13]
 8007bbc:	4909      	ldr	r1, [pc, #36]	; (8007be4 <UARTEx_SetNbDataToProcess+0x94>)
 8007bbe:	5c8a      	ldrb	r2, [r1, r2]
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bc4:	7b7a      	ldrb	r2, [r7, #13]
 8007bc6:	4908      	ldr	r1, [pc, #32]	; (8007be8 <UARTEx_SetNbDataToProcess+0x98>)
 8007bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	0800bd88 	.word	0x0800bd88
 8007be8:	0800bd90 	.word	0x0800bd90

08007bec <__NVIC_SetPriority>:
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	db0a      	blt.n	8007c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	490c      	ldr	r1, [pc, #48]	; (8007c38 <__NVIC_SetPriority+0x4c>)
 8007c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0a:	0112      	lsls	r2, r2, #4
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	440b      	add	r3, r1
 8007c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c14:	e00a      	b.n	8007c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	4908      	ldr	r1, [pc, #32]	; (8007c3c <__NVIC_SetPriority+0x50>)
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	3b04      	subs	r3, #4
 8007c24:	0112      	lsls	r2, r2, #4
 8007c26:	b2d2      	uxtb	r2, r2
 8007c28:	440b      	add	r3, r1
 8007c2a:	761a      	strb	r2, [r3, #24]
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	e000e100 	.word	0xe000e100
 8007c3c:	e000ed00 	.word	0xe000ed00

08007c40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c44:	2100      	movs	r1, #0
 8007c46:	f06f 0004 	mvn.w	r0, #4
 8007c4a:	f7ff ffcf 	bl	8007bec <__NVIC_SetPriority>
#endif
}
 8007c4e:	bf00      	nop
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c5a:	f3ef 8305 	mrs	r3, IPSR
 8007c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c66:	f06f 0305 	mvn.w	r3, #5
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	e00c      	b.n	8007c88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <osKernelInitialize+0x44>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c76:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <osKernelInitialize+0x44>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	607b      	str	r3, [r7, #4]
 8007c80:	e002      	b.n	8007c88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c88:	687b      	ldr	r3, [r7, #4]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20000458 	.word	0x20000458

08007c9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca2:	f3ef 8305 	mrs	r3, IPSR
 8007ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007cae:	f06f 0305 	mvn.w	r3, #5
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	e010      	b.n	8007cd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <osKernelStart+0x48>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d109      	bne.n	8007cd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cbe:	f7ff ffbf 	bl	8007c40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cc2:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <osKernelStart+0x48>)
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007cc8:	f001 fcbc 	bl	8009644 <vTaskStartScheduler>
      stat = osOK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	e002      	b.n	8007cd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cd8:	687b      	ldr	r3, [r7, #4]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000458 	.word	0x20000458

08007ce8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af04      	add	r7, sp, #16
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cf8:	f3ef 8305 	mrs	r3, IPSR
 8007cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8007cfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d17e      	bne.n	8007e02 <osThreadNew+0x11a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d07b      	beq.n	8007e02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d0a:	2380      	movs	r3, #128	; 0x80
 8007d0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d0e:	2318      	movs	r3, #24
 8007d10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d045      	beq.n	8007dae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <osThreadNew+0x48>
        name = attr->name;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <osThreadNew+0x6e>
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	2b38      	cmp	r3, #56	; 0x38
 8007d48:	d805      	bhi.n	8007d56 <osThreadNew+0x6e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <osThreadNew+0x72>
        return (NULL);
 8007d56:	2300      	movs	r3, #0
 8007d58:	e054      	b.n	8007e04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	089b      	lsrs	r3, r3, #2
 8007d68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00e      	beq.n	8007d90 <osThreadNew+0xa8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	2bbb      	cmp	r3, #187	; 0xbb
 8007d78:	d90a      	bls.n	8007d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d006      	beq.n	8007d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <osThreadNew+0xa8>
        mem = 1;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	e010      	b.n	8007db2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10c      	bne.n	8007db2 <osThreadNew+0xca>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d108      	bne.n	8007db2 <osThreadNew+0xca>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <osThreadNew+0xca>
          mem = 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61bb      	str	r3, [r7, #24]
 8007dac:	e001      	b.n	8007db2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d110      	bne.n	8007dda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dc0:	9202      	str	r2, [sp, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f001 fa4c 	bl	800926c <xTaskCreateStatic>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	e013      	b.n	8007e02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d110      	bne.n	8007e02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f107 0310 	add.w	r3, r7, #16
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f001 fa97 	bl	8009326 <xTaskCreate>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d001      	beq.n	8007e02 <osThreadNew+0x11a>
            hTask = NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e02:	693b      	ldr	r3, [r7, #16]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3728      	adds	r7, #40	; 0x28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e14:	f3ef 8305 	mrs	r3, IPSR
 8007e18:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <osDelay+0x1c>
    stat = osErrorISR;
 8007e20:	f06f 0305 	mvn.w	r3, #5
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	e007      	b.n	8007e38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fbd2 	bl	80095dc <vTaskDelay>
    }
  }

  return (stat);
 8007e38:	68fb      	ldr	r3, [r7, #12]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b08a      	sub	sp, #40	; 0x28
 8007e46:	af02      	add	r7, sp, #8
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e52:	f3ef 8305 	mrs	r3, IPSR
 8007e56:	613b      	str	r3, [r7, #16]
  return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d175      	bne.n	8007f4a <osSemaphoreNew+0x108>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d072      	beq.n	8007f4a <osSemaphoreNew+0x108>
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d86e      	bhi.n	8007f4a <osSemaphoreNew+0x108>
    mem = -1;
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d015      	beq.n	8007ea4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d006      	beq.n	8007e8e <osSemaphoreNew+0x4c>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	2b4f      	cmp	r3, #79	; 0x4f
 8007e86:	d902      	bls.n	8007e8e <osSemaphoreNew+0x4c>
        mem = 1;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	e00c      	b.n	8007ea8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d108      	bne.n	8007ea8 <osSemaphoreNew+0x66>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <osSemaphoreNew+0x66>
          mem = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	e001      	b.n	8007ea8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d04c      	beq.n	8007f4a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d128      	bne.n	8007f08 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10a      	bne.n	8007ed2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	2203      	movs	r2, #3
 8007ec2:	9200      	str	r2, [sp, #0]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f000 fa29 	bl	8008320 <xQueueGenericCreateStatic>
 8007ece:	61f8      	str	r0, [r7, #28]
 8007ed0:	e005      	b.n	8007ede <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f000 fa9a 	bl	8008410 <xQueueGenericCreate>
 8007edc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d022      	beq.n	8007f2a <osSemaphoreNew+0xe8>
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01f      	beq.n	8007f2a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007eea:	2300      	movs	r3, #0
 8007eec:	2200      	movs	r2, #0
 8007eee:	2100      	movs	r1, #0
 8007ef0:	69f8      	ldr	r0, [r7, #28]
 8007ef2:	f000 fb55 	bl	80085a0 <xQueueGenericSend>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d016      	beq.n	8007f2a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007efc:	69f8      	ldr	r0, [r7, #28]
 8007efe:	f000 ffe1 	bl	8008ec4 <vQueueDelete>
            hSemaphore = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]
 8007f06:	e010      	b.n	8007f2a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d108      	bne.n	8007f20 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	461a      	mov	r2, r3
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fad7 	bl	80084ca <xQueueCreateCountingSemaphoreStatic>
 8007f1c:	61f8      	str	r0, [r7, #28]
 8007f1e:	e004      	b.n	8007f2a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 fb08 	bl	8008538 <xQueueCreateCountingSemaphore>
 8007f28:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00c      	beq.n	8007f4a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <osSemaphoreNew+0xfc>
          name = attr->name;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e001      	b.n	8007f42 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007f42:	6979      	ldr	r1, [r7, #20]
 8007f44:	69f8      	ldr	r0, [r7, #28]
 8007f46:	f001 f909 	bl	800915c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007f4a:	69fb      	ldr	r3, [r7, #28]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3720      	adds	r7, #32
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007f6c:	f06f 0303 	mvn.w	r3, #3
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	e039      	b.n	8007fe8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f74:	f3ef 8305 	mrs	r3, IPSR
 8007f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d022      	beq.n	8007fc6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007f86:	f06f 0303 	mvn.w	r3, #3
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e02c      	b.n	8007fe8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007f92:	f107 0308 	add.w	r3, r7, #8
 8007f96:	461a      	mov	r2, r3
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6938      	ldr	r0, [r7, #16]
 8007f9c:	f000 ff12 	bl	8008dc4 <xQueueReceiveFromISR>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d003      	beq.n	8007fae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007fa6:	f06f 0302 	mvn.w	r3, #2
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	e01c      	b.n	8007fe8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d019      	beq.n	8007fe8 <osSemaphoreAcquire+0x94>
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <osSemaphoreAcquire+0xa0>)
 8007fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	e010      	b.n	8007fe8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6938      	ldr	r0, [r7, #16]
 8007fca:	f000 fdef 	bl	8008bac <xQueueSemaphoreTake>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d009      	beq.n	8007fe8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007fda:	f06f 0301 	mvn.w	r3, #1
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	e002      	b.n	8007fe8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007fe2:	f06f 0302 	mvn.w	r3, #2
 8007fe6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007fe8:	697b      	ldr	r3, [r7, #20]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800800e:	f06f 0303 	mvn.w	r3, #3
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	e02c      	b.n	8008070 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008016:	f3ef 8305 	mrs	r3, IPSR
 800801a:	60fb      	str	r3, [r7, #12]
  return(result);
 800801c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01a      	beq.n	8008058 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008022:	2300      	movs	r3, #0
 8008024:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008026:	f107 0308 	add.w	r3, r7, #8
 800802a:	4619      	mov	r1, r3
 800802c:	6938      	ldr	r0, [r7, #16]
 800802e:	f000 fc50 	bl	80088d2 <xQueueGiveFromISR>
 8008032:	4603      	mov	r3, r0
 8008034:	2b01      	cmp	r3, #1
 8008036:	d003      	beq.n	8008040 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008038:	f06f 0302 	mvn.w	r3, #2
 800803c:	617b      	str	r3, [r7, #20]
 800803e:	e017      	b.n	8008070 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d014      	beq.n	8008070 <osSemaphoreRelease+0x78>
 8008046:	4b0d      	ldr	r3, [pc, #52]	; (800807c <osSemaphoreRelease+0x84>)
 8008048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	e00b      	b.n	8008070 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008058:	2300      	movs	r3, #0
 800805a:	2200      	movs	r2, #0
 800805c:	2100      	movs	r1, #0
 800805e:	6938      	ldr	r0, [r7, #16]
 8008060:	f000 fa9e 	bl	80085a0 <xQueueGenericSend>
 8008064:	4603      	mov	r3, r0
 8008066:	2b01      	cmp	r3, #1
 8008068:	d002      	beq.n	8008070 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800806a:	f06f 0302 	mvn.w	r3, #2
 800806e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008070:	697b      	ldr	r3, [r7, #20]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	e000ed04 	.word	0xe000ed04

08008080 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a07      	ldr	r2, [pc, #28]	; (80080ac <vApplicationGetIdleTaskMemory+0x2c>)
 8008090:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4a06      	ldr	r2, [pc, #24]	; (80080b0 <vApplicationGetIdleTaskMemory+0x30>)
 8008096:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2280      	movs	r2, #128	; 0x80
 800809c:	601a      	str	r2, [r3, #0]
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	2000045c 	.word	0x2000045c
 80080b0:	20000518 	.word	0x20000518

080080b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a07      	ldr	r2, [pc, #28]	; (80080e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80080c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4a06      	ldr	r2, [pc, #24]	; (80080e4 <vApplicationGetTimerTaskMemory+0x30>)
 80080ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080d2:	601a      	str	r2, [r3, #0]
}
 80080d4:	bf00      	nop
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	20000718 	.word	0x20000718
 80080e4:	200007d4 	.word	0x200007d4

080080e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f103 0208 	add.w	r2, r3, #8
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f103 0208 	add.w	r2, r3, #8
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f103 0208 	add.w	r2, r3, #8
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d103      	bne.n	80081aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	e00c      	b.n	80081c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3308      	adds	r3, #8
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	e002      	b.n	80081b8 <vListInsert+0x2e>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d2f6      	bcs.n	80081b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	601a      	str	r2, [r3, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6892      	ldr	r2, [r2, #8]
 8008212:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6852      	ldr	r2, [r2, #4]
 800821c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d103      	bne.n	8008230 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800827a:	f002 fc9b 	bl	800abb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800828a:	fb01 f303 	mul.w	r3, r1, r3
 800828e:	441a      	add	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082aa:	3b01      	subs	r3, #1
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	22ff      	movs	r2, #255	; 0xff
 80082be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	22ff      	movs	r2, #255	; 0xff
 80082c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d114      	bne.n	80082fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01a      	beq.n	800830e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3310      	adds	r3, #16
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 fc4b 	bl	8009b78 <xTaskRemoveFromEventList>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d012      	beq.n	800830e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082e8:	4b0c      	ldr	r3, [pc, #48]	; (800831c <xQueueGenericReset+0xcc>)
 80082ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	e009      	b.n	800830e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3310      	adds	r3, #16
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff fef2 	bl	80080e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3324      	adds	r3, #36	; 0x24
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff feed 	bl	80080e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800830e:	f002 fc81 	bl	800ac14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008312:	2301      	movs	r3, #1
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	e000ed04 	.word	0xe000ed04

08008320 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08e      	sub	sp, #56	; 0x38
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <xQueueGenericCreateStatic+0x52>
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <xQueueGenericCreateStatic+0x56>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <xQueueGenericCreateStatic+0x58>
 8008376:	2300      	movs	r3, #0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	623b      	str	r3, [r7, #32]
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <xQueueGenericCreateStatic+0x7e>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <xQueueGenericCreateStatic+0x82>
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <xQueueGenericCreateStatic+0x84>
 80083a2:	2300      	movs	r3, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	61fb      	str	r3, [r7, #28]
}
 80083ba:	bf00      	nop
 80083bc:	e7fe      	b.n	80083bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083be:	2350      	movs	r3, #80	; 0x50
 80083c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b50      	cmp	r3, #80	; 0x50
 80083c6:	d00a      	beq.n	80083de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	61bb      	str	r3, [r7, #24]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00d      	beq.n	8008406 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	4613      	mov	r3, r2
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f83f 	bl	8008484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008408:	4618      	mov	r0, r3
 800840a:	3730      	adds	r7, #48	; 0x30
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08a      	sub	sp, #40	; 0x28
 8008414:	af02      	add	r7, sp, #8
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4613      	mov	r3, r2
 800841c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	613b      	str	r3, [r7, #16]
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	fb02 f303 	mul.w	r3, r2, r3
 8008442:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	3350      	adds	r3, #80	; 0x50
 8008448:	4618      	mov	r0, r3
 800844a:	f002 fcd5 	bl	800adf8 <pvPortMalloc>
 800844e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d011      	beq.n	800847a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	3350      	adds	r3, #80	; 0x50
 800845e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008468:	79fa      	ldrb	r2, [r7, #7]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4613      	mov	r3, r2
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f805 	bl	8008484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800847a:	69bb      	ldr	r3, [r7, #24]
	}
 800847c:	4618      	mov	r0, r3
 800847e:	3720      	adds	r7, #32
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	e002      	b.n	80084a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084b2:	2101      	movs	r1, #1
 80084b4:	69b8      	ldr	r0, [r7, #24]
 80084b6:	f7ff fecb 	bl	8008250 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	78fa      	ldrb	r2, [r7, #3]
 80084be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b08a      	sub	sp, #40	; 0x28
 80084ce:	af02      	add	r7, sp, #8
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61bb      	str	r3, [r7, #24]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d90a      	bls.n	8008510 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	617b      	str	r3, [r7, #20]
}
 800850c:	bf00      	nop
 800850e:	e7fe      	b.n	800850e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008510:	2302      	movs	r3, #2
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	2100      	movs	r1, #0
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff ff00 	bl	8008320 <xQueueGenericCreateStatic>
 8008520:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800852e:	69fb      	ldr	r3, [r7, #28]
	}
 8008530:	4618      	mov	r0, r3
 8008532:	3720      	adds	r7, #32
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	613b      	str	r3, [r7, #16]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	429a      	cmp	r2, r3
 8008564:	d90a      	bls.n	800857c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	60fb      	str	r3, [r7, #12]
}
 8008578:	bf00      	nop
 800857a:	e7fe      	b.n	800857a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800857c:	2202      	movs	r2, #2
 800857e:	2100      	movs	r1, #0
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7ff ff45 	bl	8008410 <xQueueGenericCreate>
 8008586:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008594:	697b      	ldr	r3, [r7, #20]
	}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08e      	sub	sp, #56	; 0x38
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085ae:	2300      	movs	r3, #0
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <xQueueGenericSend+0x32>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d103      	bne.n	80085e0 <xQueueGenericSend+0x40>
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <xQueueGenericSend+0x44>
 80085e0:	2301      	movs	r3, #1
 80085e2:	e000      	b.n	80085e6 <xQueueGenericSend+0x46>
 80085e4:	2300      	movs	r3, #0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10a      	bne.n	8008600 <xQueueGenericSend+0x60>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d103      	bne.n	800860e <xQueueGenericSend+0x6e>
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <xQueueGenericSend+0x72>
 800860e:	2301      	movs	r3, #1
 8008610:	e000      	b.n	8008614 <xQueueGenericSend+0x74>
 8008612:	2300      	movs	r3, #0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <xQueueGenericSend+0x8e>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	623b      	str	r3, [r7, #32]
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800862e:	f001 fc65 	bl	8009efc <xTaskGetSchedulerState>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <xQueueGenericSend+0x9e>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <xQueueGenericSend+0xa2>
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <xQueueGenericSend+0xa4>
 8008642:	2300      	movs	r3, #0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <xQueueGenericSend+0xbe>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	61fb      	str	r3, [r7, #28]
}
 800865a:	bf00      	nop
 800865c:	e7fe      	b.n	800865c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800865e:	f002 faa9 	bl	800abb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	429a      	cmp	r2, r3
 800866c:	d302      	bcc.n	8008674 <xQueueGenericSend+0xd4>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d129      	bne.n	80086c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800867a:	f000 fc5e 	bl	8008f3a <prvCopyDataToQueue>
 800867e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	2b00      	cmp	r3, #0
 8008686:	d010      	beq.n	80086aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	3324      	adds	r3, #36	; 0x24
 800868c:	4618      	mov	r0, r3
 800868e:	f001 fa73 	bl	8009b78 <xTaskRemoveFromEventList>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d013      	beq.n	80086c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008698:	4b3f      	ldr	r3, [pc, #252]	; (8008798 <xQueueGenericSend+0x1f8>)
 800869a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	e00a      	b.n	80086c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086b0:	4b39      	ldr	r3, [pc, #228]	; (8008798 <xQueueGenericSend+0x1f8>)
 80086b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086c0:	f002 faa8 	bl	800ac14 <vPortExitCritical>
				return pdPASS;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e063      	b.n	8008790 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d103      	bne.n	80086d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086ce:	f002 faa1 	bl	800ac14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e05c      	b.n	8008790 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d106      	bne.n	80086ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086dc:	f107 0314 	add.w	r3, r7, #20
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 faad 	bl	8009c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086e6:	2301      	movs	r3, #1
 80086e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086ea:	f002 fa93 	bl	800ac14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086ee:	f001 f819 	bl	8009724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086f2:	f002 fa5f 	bl	800abb4 <vPortEnterCritical>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086fc:	b25b      	sxtb	r3, r3
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008702:	d103      	bne.n	800870c <xQueueGenericSend+0x16c>
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008712:	b25b      	sxtb	r3, r3
 8008714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008718:	d103      	bne.n	8008722 <xQueueGenericSend+0x182>
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008722:	f002 fa77 	bl	800ac14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008726:	1d3a      	adds	r2, r7, #4
 8008728:	f107 0314 	add.w	r3, r7, #20
 800872c:	4611      	mov	r1, r2
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fa9c 	bl	8009c6c <xTaskCheckForTimeOut>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d124      	bne.n	8008784 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800873a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800873c:	f000 fcf5 	bl	800912a <prvIsQueueFull>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d018      	beq.n	8008778 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	3310      	adds	r3, #16
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	4611      	mov	r1, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f001 f9c2 	bl	8009ad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008756:	f000 fc80 	bl	800905a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800875a:	f000 fff1 	bl	8009740 <xTaskResumeAll>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	f47f af7c 	bne.w	800865e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008766:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <xQueueGenericSend+0x1f8>)
 8008768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	e772      	b.n	800865e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800877a:	f000 fc6e 	bl	800905a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800877e:	f000 ffdf 	bl	8009740 <xTaskResumeAll>
 8008782:	e76c      	b.n	800865e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008786:	f000 fc68 	bl	800905a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800878a:	f000 ffd9 	bl	8009740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800878e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008790:	4618      	mov	r0, r3
 8008792:	3738      	adds	r7, #56	; 0x38
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	e000ed04 	.word	0xe000ed04

0800879c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b090      	sub	sp, #64	; 0x40
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80087ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d103      	bne.n	80087d8 <xQueueGenericSendFromISR+0x3c>
 80087d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <xQueueGenericSendFromISR+0x40>
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <xQueueGenericSendFromISR+0x42>
 80087dc:	2300      	movs	r3, #0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d103      	bne.n	8008806 <xQueueGenericSendFromISR+0x6a>
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <xQueueGenericSendFromISR+0x6e>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <xQueueGenericSendFromISR+0x70>
 800880a:	2300      	movs	r3, #0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	623b      	str	r3, [r7, #32]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008826:	f002 faa7 	bl	800ad78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800882a:	f3ef 8211 	mrs	r2, BASEPRI
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	61fa      	str	r2, [r7, #28]
 8008840:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008842:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884e:	429a      	cmp	r2, r3
 8008850:	d302      	bcc.n	8008858 <xQueueGenericSendFromISR+0xbc>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d12f      	bne.n	80088b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800885e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800886e:	f000 fb64 	bl	8008f3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008872:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887a:	d112      	bne.n	80088a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b00      	cmp	r3, #0
 8008882:	d016      	beq.n	80088b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	3324      	adds	r3, #36	; 0x24
 8008888:	4618      	mov	r0, r3
 800888a:	f001 f975 	bl	8009b78 <xTaskRemoveFromEventList>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00e      	beq.n	80088b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00b      	beq.n	80088b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e007      	b.n	80088b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088a6:	3301      	adds	r3, #1
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	b25a      	sxtb	r2, r3
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088b2:	2301      	movs	r3, #1
 80088b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80088b6:	e001      	b.n	80088bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3740      	adds	r7, #64	; 0x40
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b08e      	sub	sp, #56	; 0x38
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	623b      	str	r3, [r7, #32]
}
 80088f8:	bf00      	nop
 80088fa:	e7fe      	b.n	80088fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00a      	beq.n	800891a <xQueueGiveFromISR+0x48>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	61fb      	str	r3, [r7, #28]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d103      	bne.n	800892a <xQueueGiveFromISR+0x58>
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <xQueueGiveFromISR+0x5c>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <xQueueGiveFromISR+0x5e>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10a      	bne.n	800894a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	61bb      	str	r3, [r7, #24]
}
 8008946:	bf00      	nop
 8008948:	e7fe      	b.n	8008948 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800894a:	f002 fa15 	bl	800ad78 <vPortValidateInterruptPriority>
	__asm volatile
 800894e:	f3ef 8211 	mrs	r2, BASEPRI
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	617a      	str	r2, [r7, #20]
 8008964:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008966:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008976:	429a      	cmp	r2, r3
 8008978:	d22b      	bcs.n	80089d2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800898c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d112      	bne.n	80089bc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b00      	cmp	r3, #0
 800899c:	d016      	beq.n	80089cc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	3324      	adds	r3, #36	; 0x24
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 f8e8 	bl	8009b78 <xTaskRemoveFromEventList>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00e      	beq.n	80089cc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e007      	b.n	80089cc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089c0:	3301      	adds	r3, #1
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	b25a      	sxtb	r2, r3
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089cc:	2301      	movs	r3, #1
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
 80089d0:	e001      	b.n	80089d6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f383 8811 	msr	BASEPRI, r3
}
 80089e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3738      	adds	r7, #56	; 0x38
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08c      	sub	sp, #48	; 0x30
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089f8:	2300      	movs	r3, #0
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <xQueueReceive+0x30>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	623b      	str	r3, [r7, #32]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d103      	bne.n	8008a2a <xQueueReceive+0x3e>
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <xQueueReceive+0x42>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e000      	b.n	8008a30 <xQueueReceive+0x44>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <xQueueReceive+0x5e>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	61fb      	str	r3, [r7, #28]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a4a:	f001 fa57 	bl	8009efc <xTaskGetSchedulerState>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <xQueueReceive+0x6e>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <xQueueReceive+0x72>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e000      	b.n	8008a60 <xQueueReceive+0x74>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <xQueueReceive+0x8e>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	61bb      	str	r3, [r7, #24]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a7a:	f002 f89b 	bl	800abb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01f      	beq.n	8008aca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a8e:	f000 fabe 	bl	800900e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	1e5a      	subs	r2, r3, #1
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00f      	beq.n	8008ac2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	3310      	adds	r3, #16
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 f866 	bl	8009b78 <xTaskRemoveFromEventList>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d007      	beq.n	8008ac2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ab2:	4b3d      	ldr	r3, [pc, #244]	; (8008ba8 <xQueueReceive+0x1bc>)
 8008ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ac2:	f002 f8a7 	bl	800ac14 <vPortExitCritical>
				return pdPASS;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e069      	b.n	8008b9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d103      	bne.n	8008ad8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ad0:	f002 f8a0 	bl	800ac14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e062      	b.n	8008b9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ade:	f107 0310 	add.w	r3, r7, #16
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f001 f8ac 	bl	8009c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008aec:	f002 f892 	bl	800ac14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008af0:	f000 fe18 	bl	8009724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008af4:	f002 f85e 	bl	800abb4 <vPortEnterCritical>
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008afe:	b25b      	sxtb	r3, r3
 8008b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b04:	d103      	bne.n	8008b0e <xQueueReceive+0x122>
 8008b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b14:	b25b      	sxtb	r3, r3
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d103      	bne.n	8008b24 <xQueueReceive+0x138>
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b24:	f002 f876 	bl	800ac14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b28:	1d3a      	adds	r2, r7, #4
 8008b2a:	f107 0310 	add.w	r3, r7, #16
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f001 f89b 	bl	8009c6c <xTaskCheckForTimeOut>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d123      	bne.n	8008b84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b3e:	f000 fade 	bl	80090fe <prvIsQueueEmpty>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d017      	beq.n	8008b78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	3324      	adds	r3, #36	; 0x24
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 ffc1 	bl	8009ad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b58:	f000 fa7f 	bl	800905a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b5c:	f000 fdf0 	bl	8009740 <xTaskResumeAll>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d189      	bne.n	8008a7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b66:	4b10      	ldr	r3, [pc, #64]	; (8008ba8 <xQueueReceive+0x1bc>)
 8008b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	e780      	b.n	8008a7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b7a:	f000 fa6e 	bl	800905a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b7e:	f000 fddf 	bl	8009740 <xTaskResumeAll>
 8008b82:	e77a      	b.n	8008a7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b86:	f000 fa68 	bl	800905a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b8a:	f000 fdd9 	bl	8009740 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b90:	f000 fab5 	bl	80090fe <prvIsQueueEmpty>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f43f af6f 	beq.w	8008a7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3730      	adds	r7, #48	; 0x30
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08e      	sub	sp, #56	; 0x38
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	623b      	str	r3, [r7, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	e7fe      	b.n	8008bdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00a      	beq.n	8008bfc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	61fb      	str	r3, [r7, #28]
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bfc:	f001 f97e 	bl	8009efc <xTaskGetSchedulerState>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d102      	bne.n	8008c0c <xQueueSemaphoreTake+0x60>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <xQueueSemaphoreTake+0x64>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <xQueueSemaphoreTake+0x66>
 8008c10:	2300      	movs	r3, #0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	61bb      	str	r3, [r7, #24]
}
 8008c28:	bf00      	nop
 8008c2a:	e7fe      	b.n	8008c2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c2c:	f001 ffc2 	bl	800abb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d024      	beq.n	8008c86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	1e5a      	subs	r2, r3, #1
 8008c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c4c:	f001 facc 	bl	800a1e8 <pvTaskIncrementMutexHeldCount>
 8008c50:	4602      	mov	r2, r0
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00f      	beq.n	8008c7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	3310      	adds	r3, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 ff88 	bl	8009b78 <xTaskRemoveFromEventList>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d007      	beq.n	8008c7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c6e:	4b54      	ldr	r3, [pc, #336]	; (8008dc0 <xQueueSemaphoreTake+0x214>)
 8008c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c7e:	f001 ffc9 	bl	800ac14 <vPortExitCritical>
				return pdPASS;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e097      	b.n	8008db6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d111      	bne.n	8008cb0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00a      	beq.n	8008ca8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	617b      	str	r3, [r7, #20]
}
 8008ca4:	bf00      	nop
 8008ca6:	e7fe      	b.n	8008ca6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008ca8:	f001 ffb4 	bl	800ac14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cac:	2300      	movs	r3, #0
 8008cae:	e082      	b.n	8008db6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cb6:	f107 030c 	add.w	r3, r7, #12
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 ffc0 	bl	8009c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cc4:	f001 ffa6 	bl	800ac14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cc8:	f000 fd2c 	bl	8009724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ccc:	f001 ff72 	bl	800abb4 <vPortEnterCritical>
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cd6:	b25b      	sxtb	r3, r3
 8008cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cdc:	d103      	bne.n	8008ce6 <xQueueSemaphoreTake+0x13a>
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cec:	b25b      	sxtb	r3, r3
 8008cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf2:	d103      	bne.n	8008cfc <xQueueSemaphoreTake+0x150>
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cfc:	f001 ff8a 	bl	800ac14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d00:	463a      	mov	r2, r7
 8008d02:	f107 030c 	add.w	r3, r7, #12
 8008d06:	4611      	mov	r1, r2
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 ffaf 	bl	8009c6c <xTaskCheckForTimeOut>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d132      	bne.n	8008d7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d16:	f000 f9f2 	bl	80090fe <prvIsQueueEmpty>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d026      	beq.n	8008d6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008d28:	f001 ff44 	bl	800abb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f001 f901 	bl	8009f38 <xTaskPriorityInherit>
 8008d36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008d38:	f001 ff6c 	bl	800ac14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	3324      	adds	r3, #36	; 0x24
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fec7 	bl	8009ad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d4c:	f000 f985 	bl	800905a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d50:	f000 fcf6 	bl	8009740 <xTaskResumeAll>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f47f af68 	bne.w	8008c2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008d5c:	4b18      	ldr	r3, [pc, #96]	; (8008dc0 <xQueueSemaphoreTake+0x214>)
 8008d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	e75e      	b.n	8008c2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d70:	f000 f973 	bl	800905a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d74:	f000 fce4 	bl	8009740 <xTaskResumeAll>
 8008d78:	e758      	b.n	8008c2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d7c:	f000 f96d 	bl	800905a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d80:	f000 fcde 	bl	8009740 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d86:	f000 f9ba 	bl	80090fe <prvIsQueueEmpty>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f43f af4d 	beq.w	8008c2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00d      	beq.n	8008db4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008d98:	f001 ff0c 	bl	800abb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d9e:	f000 f8b4 	bl	8008f0a <prvGetDisinheritPriorityAfterTimeout>
 8008da2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f001 f99a 	bl	800a0e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008db0:	f001 ff30 	bl	800ac14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3738      	adds	r7, #56	; 0x38
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08e      	sub	sp, #56	; 0x38
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10a      	bne.n	8008df0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	623b      	str	r3, [r7, #32]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <xQueueReceiveFromISR+0x3a>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <xQueueReceiveFromISR+0x3e>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <xQueueReceiveFromISR+0x40>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	61fb      	str	r3, [r7, #28]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e1e:	f001 ffab 	bl	800ad78 <vPortValidateInterruptPriority>
	__asm volatile
 8008e22:	f3ef 8211 	mrs	r2, BASEPRI
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	61ba      	str	r2, [r7, #24]
 8008e38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008e3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d02f      	beq.n	8008eaa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e58:	f000 f8d9 	bl	800900e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	1e5a      	subs	r2, r3, #1
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d112      	bne.n	8008e94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d016      	beq.n	8008ea4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e78:	3310      	adds	r3, #16
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 fe7c 	bl	8009b78 <xTaskRemoveFromEventList>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00e      	beq.n	8008ea4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	e007      	b.n	8008ea4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e98:	3301      	adds	r3, #1
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	b25a      	sxtb	r2, r3
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea8:	e001      	b.n	8008eae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	637b      	str	r3, [r7, #52]	; 0x34
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f383 8811 	msr	BASEPRI, r3
}
 8008eb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3738      	adds	r7, #56	; 0x38
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10a      	bne.n	8008eec <vQueueDelete+0x28>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	60bb      	str	r3, [r7, #8]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 f95f 	bl	80091b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f002 f847 	bl	800af90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b085      	sub	sp, #20
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d006      	beq.n	8008f28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	e001      	b.n	8008f2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
	}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b086      	sub	sp, #24
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10d      	bne.n	8008f74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d14d      	bne.n	8008ffc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f001 f84f 	bl	800a008 <xTaskPriorityDisinherit>
 8008f6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	609a      	str	r2, [r3, #8]
 8008f72:	e043      	b.n	8008ffc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d119      	bne.n	8008fae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6858      	ldr	r0, [r3, #4]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	461a      	mov	r2, r3
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	f002 f94d 	bl	800b224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	441a      	add	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d32b      	bcc.n	8008ffc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	605a      	str	r2, [r3, #4]
 8008fac:	e026      	b.n	8008ffc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68d8      	ldr	r0, [r3, #12]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	f002 f933 	bl	800b224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	425b      	negs	r3, r3
 8008fc8:	441a      	add	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d207      	bcs.n	8008fea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	425b      	negs	r3, r3
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d105      	bne.n	8008ffc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009004:	697b      	ldr	r3, [r7, #20]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d018      	beq.n	8009052 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68da      	ldr	r2, [r3, #12]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009028:	441a      	add	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	429a      	cmp	r2, r3
 8009038:	d303      	bcc.n	8009042 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68d9      	ldr	r1, [r3, #12]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	461a      	mov	r2, r3
 800904c:	6838      	ldr	r0, [r7, #0]
 800904e:	f002 f8e9 	bl	800b224 <memcpy>
	}
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009062:	f001 fda7 	bl	800abb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800906c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800906e:	e011      	b.n	8009094 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	d012      	beq.n	800909e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3324      	adds	r3, #36	; 0x24
 800907c:	4618      	mov	r0, r3
 800907e:	f000 fd7b 	bl	8009b78 <xTaskRemoveFromEventList>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009088:	f000 fe52 	bl	8009d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	3b01      	subs	r3, #1
 8009090:	b2db      	uxtb	r3, r3
 8009092:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	dce9      	bgt.n	8009070 <prvUnlockQueue+0x16>
 800909c:	e000      	b.n	80090a0 <prvUnlockQueue+0x46>
					break;
 800909e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	22ff      	movs	r2, #255	; 0xff
 80090a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090a8:	f001 fdb4 	bl	800ac14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090ac:	f001 fd82 	bl	800abb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090b8:	e011      	b.n	80090de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d012      	beq.n	80090e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	3310      	adds	r3, #16
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fd56 	bl	8009b78 <xTaskRemoveFromEventList>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090d2:	f000 fe2d 	bl	8009d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
 80090d8:	3b01      	subs	r3, #1
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dce9      	bgt.n	80090ba <prvUnlockQueue+0x60>
 80090e6:	e000      	b.n	80090ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	22ff      	movs	r2, #255	; 0xff
 80090ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090f2:	f001 fd8f 	bl	800ac14 <vPortExitCritical>
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009106:	f001 fd55 	bl	800abb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009112:	2301      	movs	r3, #1
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e001      	b.n	800911c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800911c:	f001 fd7a 	bl	800ac14 <vPortExitCritical>

	return xReturn;
 8009120:	68fb      	ldr	r3, [r7, #12]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009132:	f001 fd3f 	bl	800abb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	429a      	cmp	r2, r3
 8009140:	d102      	bne.n	8009148 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009142:	2301      	movs	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	e001      	b.n	800914c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800914c:	f001 fd62 	bl	800ac14 <vPortExitCritical>

	return xReturn;
 8009150:	68fb      	ldr	r3, [r7, #12]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009166:	2300      	movs	r3, #0
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	e014      	b.n	8009196 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800916c:	4a0f      	ldr	r2, [pc, #60]	; (80091ac <vQueueAddToRegistry+0x50>)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10b      	bne.n	8009190 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009178:	490c      	ldr	r1, [pc, #48]	; (80091ac <vQueueAddToRegistry+0x50>)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009182:	4a0a      	ldr	r2, [pc, #40]	; (80091ac <vQueueAddToRegistry+0x50>)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	4413      	add	r3, r2
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800918e:	e006      	b.n	800919e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b07      	cmp	r3, #7
 800919a:	d9e7      	bls.n	800916c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800919c:	bf00      	nop
 800919e:	bf00      	nop
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	20000bd4 	.word	0x20000bd4

080091b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e016      	b.n	80091ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80091be:	4a10      	ldr	r2, [pc, #64]	; (8009200 <vQueueUnregisterQueue+0x50>)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	4413      	add	r3, r2
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d10b      	bne.n	80091e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80091ce:	4a0c      	ldr	r2, [pc, #48]	; (8009200 <vQueueUnregisterQueue+0x50>)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2100      	movs	r1, #0
 80091d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80091d8:	4a09      	ldr	r2, [pc, #36]	; (8009200 <vQueueUnregisterQueue+0x50>)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	4413      	add	r3, r2
 80091e0:	2200      	movs	r2, #0
 80091e2:	605a      	str	r2, [r3, #4]
				break;
 80091e4:	e006      	b.n	80091f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3301      	adds	r3, #1
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b07      	cmp	r3, #7
 80091f0:	d9e5      	bls.n	80091be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20000bd4 	.word	0x20000bd4

08009204 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009214:	f001 fcce 	bl	800abb4 <vPortEnterCritical>
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800921e:	b25b      	sxtb	r3, r3
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d103      	bne.n	800922e <vQueueWaitForMessageRestricted+0x2a>
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009234:	b25b      	sxtb	r3, r3
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d103      	bne.n	8009244 <vQueueWaitForMessageRestricted+0x40>
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009244:	f001 fce6 	bl	800ac14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924c:	2b00      	cmp	r3, #0
 800924e:	d106      	bne.n	800925e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	3324      	adds	r3, #36	; 0x24
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fc61 	bl	8009b20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800925e:	6978      	ldr	r0, [r7, #20]
 8009260:	f7ff fefb 	bl	800905a <prvUnlockQueue>
	}
 8009264:	bf00      	nop
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08e      	sub	sp, #56	; 0x38
 8009270:	af04      	add	r7, sp, #16
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800927a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	623b      	str	r3, [r7, #32]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	61fb      	str	r3, [r7, #28]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092b2:	23bc      	movs	r3, #188	; 0xbc
 80092b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	2bbc      	cmp	r3, #188	; 0xbc
 80092ba:	d00a      	beq.n	80092d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	61bb      	str	r3, [r7, #24]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d01e      	beq.n	8009318 <xTaskCreateStatic+0xac>
 80092da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01b      	beq.n	8009318 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	2202      	movs	r2, #2
 80092ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092f2:	2300      	movs	r3, #0
 80092f4:	9303      	str	r3, [sp, #12]
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	9302      	str	r3, [sp, #8]
 80092fa:	f107 0314 	add.w	r3, r7, #20
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 f850 	bl	80093b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009312:	f000 f8f3 	bl	80094fc <prvAddNewTaskToReadyList>
 8009316:	e001      	b.n	800931c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800931c:	697b      	ldr	r3, [r7, #20]
	}
 800931e:	4618      	mov	r0, r3
 8009320:	3728      	adds	r7, #40	; 0x28
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009326:	b580      	push	{r7, lr}
 8009328:	b08c      	sub	sp, #48	; 0x30
 800932a:	af04      	add	r7, sp, #16
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	60b9      	str	r1, [r7, #8]
 8009330:	603b      	str	r3, [r7, #0]
 8009332:	4613      	mov	r3, r2
 8009334:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009336:	88fb      	ldrh	r3, [r7, #6]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4618      	mov	r0, r3
 800933c:	f001 fd5c 	bl	800adf8 <pvPortMalloc>
 8009340:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00e      	beq.n	8009366 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009348:	20bc      	movs	r0, #188	; 0xbc
 800934a:	f001 fd55 	bl	800adf8 <pvPortMalloc>
 800934e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	631a      	str	r2, [r3, #48]	; 0x30
 800935c:	e005      	b.n	800936a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800935e:	6978      	ldr	r0, [r7, #20]
 8009360:	f001 fe16 	bl	800af90 <vPortFree>
 8009364:	e001      	b.n	800936a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009366:	2300      	movs	r3, #0
 8009368:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d017      	beq.n	80093a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009378:	88fa      	ldrh	r2, [r7, #6]
 800937a:	2300      	movs	r3, #0
 800937c:	9303      	str	r3, [sp, #12]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	9302      	str	r3, [sp, #8]
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68b9      	ldr	r1, [r7, #8]
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 f80e 	bl	80093b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009394:	69f8      	ldr	r0, [r7, #28]
 8009396:	f000 f8b1 	bl	80094fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800939a:	2301      	movs	r3, #1
 800939c:	61bb      	str	r3, [r7, #24]
 800939e:	e002      	b.n	80093a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093a0:	f04f 33ff 	mov.w	r3, #4294967295
 80093a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093a6:	69bb      	ldr	r3, [r7, #24]
	}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3720      	adds	r7, #32
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	461a      	mov	r2, r3
 80093c8:	21a5      	movs	r1, #165	; 0xa5
 80093ca:	f001 ff39 	bl	800b240 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093d8:	3b01      	subs	r3, #1
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	f023 0307 	bic.w	r3, r3, #7
 80093e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	f003 0307 	and.w	r3, r3, #7
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00a      	beq.n	8009408 <prvInitialiseNewTask+0x58>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	617b      	str	r3, [r7, #20]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01f      	beq.n	800944e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800940e:	2300      	movs	r3, #0
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	e012      	b.n	800943a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4413      	add	r3, r2
 800941a:	7819      	ldrb	r1, [r3, #0]
 800941c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	4413      	add	r3, r2
 8009422:	3334      	adds	r3, #52	; 0x34
 8009424:	460a      	mov	r2, r1
 8009426:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d006      	beq.n	8009442 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	3301      	adds	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	2b0f      	cmp	r3, #15
 800943e:	d9e9      	bls.n	8009414 <prvInitialiseNewTask+0x64>
 8009440:	e000      	b.n	8009444 <prvInitialiseNewTask+0x94>
			{
				break;
 8009442:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800944c:	e003      	b.n	8009456 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	2b37      	cmp	r3, #55	; 0x37
 800945a:	d901      	bls.n	8009460 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800945c:	2337      	movs	r3, #55	; 0x37
 800945e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009464:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800946a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	2200      	movs	r2, #0
 8009470:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	3304      	adds	r3, #4
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe fe56 	bl	8008128 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	3318      	adds	r3, #24
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fe51 	bl	8008128 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800948a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800949a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800949c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949e:	2200      	movs	r2, #0
 80094a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	3354      	adds	r3, #84	; 0x54
 80094b0:	2260      	movs	r2, #96	; 0x60
 80094b2:	2100      	movs	r1, #0
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 fec3 	bl	800b240 <memset>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	4a0c      	ldr	r2, [pc, #48]	; (80094f0 <prvInitialiseNewTask+0x140>)
 80094be:	659a      	str	r2, [r3, #88]	; 0x58
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	4a0c      	ldr	r2, [pc, #48]	; (80094f4 <prvInitialiseNewTask+0x144>)
 80094c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	4a0b      	ldr	r2, [pc, #44]	; (80094f8 <prvInitialiseNewTask+0x148>)
 80094ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	68f9      	ldr	r1, [r7, #12]
 80094d0:	69b8      	ldr	r0, [r7, #24]
 80094d2:	f001 fa3f 	bl	800a954 <pxPortInitialiseStack>
 80094d6:	4602      	mov	r2, r0
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e8:	bf00      	nop
 80094ea:	3720      	adds	r7, #32
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	0800bdb8 	.word	0x0800bdb8
 80094f4:	0800bdd8 	.word	0x0800bdd8
 80094f8:	0800bd98 	.word	0x0800bd98

080094fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009504:	f001 fb56 	bl	800abb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009508:	4b2d      	ldr	r3, [pc, #180]	; (80095c0 <prvAddNewTaskToReadyList+0xc4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	4a2c      	ldr	r2, [pc, #176]	; (80095c0 <prvAddNewTaskToReadyList+0xc4>)
 8009510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009512:	4b2c      	ldr	r3, [pc, #176]	; (80095c4 <prvAddNewTaskToReadyList+0xc8>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800951a:	4a2a      	ldr	r2, [pc, #168]	; (80095c4 <prvAddNewTaskToReadyList+0xc8>)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009520:	4b27      	ldr	r3, [pc, #156]	; (80095c0 <prvAddNewTaskToReadyList+0xc4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d110      	bne.n	800954a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009528:	f000 fc26 	bl	8009d78 <prvInitialiseTaskLists>
 800952c:	e00d      	b.n	800954a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800952e:	4b26      	ldr	r3, [pc, #152]	; (80095c8 <prvAddNewTaskToReadyList+0xcc>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d109      	bne.n	800954a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009536:	4b23      	ldr	r3, [pc, #140]	; (80095c4 <prvAddNewTaskToReadyList+0xc8>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	429a      	cmp	r2, r3
 8009542:	d802      	bhi.n	800954a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009544:	4a1f      	ldr	r2, [pc, #124]	; (80095c4 <prvAddNewTaskToReadyList+0xc8>)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800954a:	4b20      	ldr	r3, [pc, #128]	; (80095cc <prvAddNewTaskToReadyList+0xd0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3301      	adds	r3, #1
 8009550:	4a1e      	ldr	r2, [pc, #120]	; (80095cc <prvAddNewTaskToReadyList+0xd0>)
 8009552:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009554:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <prvAddNewTaskToReadyList+0xd0>)
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009560:	4b1b      	ldr	r3, [pc, #108]	; (80095d0 <prvAddNewTaskToReadyList+0xd4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	429a      	cmp	r2, r3
 8009566:	d903      	bls.n	8009570 <prvAddNewTaskToReadyList+0x74>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	4a18      	ldr	r2, [pc, #96]	; (80095d0 <prvAddNewTaskToReadyList+0xd4>)
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4a15      	ldr	r2, [pc, #84]	; (80095d4 <prvAddNewTaskToReadyList+0xd8>)
 800957e:	441a      	add	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3304      	adds	r3, #4
 8009584:	4619      	mov	r1, r3
 8009586:	4610      	mov	r0, r2
 8009588:	f7fe fddb 	bl	8008142 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800958c:	f001 fb42 	bl	800ac14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009590:	4b0d      	ldr	r3, [pc, #52]	; (80095c8 <prvAddNewTaskToReadyList+0xcc>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00e      	beq.n	80095b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <prvAddNewTaskToReadyList+0xc8>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d207      	bcs.n	80095b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095a6:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <prvAddNewTaskToReadyList+0xdc>)
 80095a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	200010e8 	.word	0x200010e8
 80095c4:	20000c14 	.word	0x20000c14
 80095c8:	200010f4 	.word	0x200010f4
 80095cc:	20001104 	.word	0x20001104
 80095d0:	200010f0 	.word	0x200010f0
 80095d4:	20000c18 	.word	0x20000c18
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d017      	beq.n	800961e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <vTaskDelay+0x60>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <vTaskDelay+0x30>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	60bb      	str	r3, [r7, #8]
}
 8009608:	bf00      	nop
 800960a:	e7fe      	b.n	800960a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800960c:	f000 f88a 	bl	8009724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009610:	2100      	movs	r1, #0
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fdfc 	bl	800a210 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009618:	f000 f892 	bl	8009740 <xTaskResumeAll>
 800961c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d107      	bne.n	8009634 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009624:	4b06      	ldr	r3, [pc, #24]	; (8009640 <vTaskDelay+0x64>)
 8009626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20001110 	.word	0x20001110
 8009640:	e000ed04 	.word	0xe000ed04

08009644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08a      	sub	sp, #40	; 0x28
 8009648:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800964a:	2300      	movs	r3, #0
 800964c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009652:	463a      	mov	r2, r7
 8009654:	1d39      	adds	r1, r7, #4
 8009656:	f107 0308 	add.w	r3, r7, #8
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fd10 	bl	8008080 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	9202      	str	r2, [sp, #8]
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	2300      	movs	r3, #0
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	2300      	movs	r3, #0
 8009670:	460a      	mov	r2, r1
 8009672:	4924      	ldr	r1, [pc, #144]	; (8009704 <vTaskStartScheduler+0xc0>)
 8009674:	4824      	ldr	r0, [pc, #144]	; (8009708 <vTaskStartScheduler+0xc4>)
 8009676:	f7ff fdf9 	bl	800926c <xTaskCreateStatic>
 800967a:	4603      	mov	r3, r0
 800967c:	4a23      	ldr	r2, [pc, #140]	; (800970c <vTaskStartScheduler+0xc8>)
 800967e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009680:	4b22      	ldr	r3, [pc, #136]	; (800970c <vTaskStartScheduler+0xc8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009688:	2301      	movs	r3, #1
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	e001      	b.n	8009692 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d102      	bne.n	800969e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009698:	f000 fe0e 	bl	800a2b8 <xTimerCreateTimerTask>
 800969c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d11b      	bne.n	80096dc <vTaskStartScheduler+0x98>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	613b      	str	r3, [r7, #16]
}
 80096b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096b8:	4b15      	ldr	r3, [pc, #84]	; (8009710 <vTaskStartScheduler+0xcc>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3354      	adds	r3, #84	; 0x54
 80096be:	4a15      	ldr	r2, [pc, #84]	; (8009714 <vTaskStartScheduler+0xd0>)
 80096c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096c2:	4b15      	ldr	r3, [pc, #84]	; (8009718 <vTaskStartScheduler+0xd4>)
 80096c4:	f04f 32ff 	mov.w	r2, #4294967295
 80096c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096ca:	4b14      	ldr	r3, [pc, #80]	; (800971c <vTaskStartScheduler+0xd8>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096d0:	4b13      	ldr	r3, [pc, #76]	; (8009720 <vTaskStartScheduler+0xdc>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096d6:	f001 f9cb 	bl	800aa70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096da:	e00e      	b.n	80096fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	d10a      	bne.n	80096fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	60fb      	str	r3, [r7, #12]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <vTaskStartScheduler+0xb4>
}
 80096fa:	bf00      	nop
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	0800bc6c 	.word	0x0800bc6c
 8009708:	08009d49 	.word	0x08009d49
 800970c:	2000110c 	.word	0x2000110c
 8009710:	20000c14 	.word	0x20000c14
 8009714:	20000020 	.word	0x20000020
 8009718:	20001108 	.word	0x20001108
 800971c:	200010f4 	.word	0x200010f4
 8009720:	200010ec 	.word	0x200010ec

08009724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009728:	4b04      	ldr	r3, [pc, #16]	; (800973c <vTaskSuspendAll+0x18>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3301      	adds	r3, #1
 800972e:	4a03      	ldr	r2, [pc, #12]	; (800973c <vTaskSuspendAll+0x18>)
 8009730:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009732:	bf00      	nop
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20001110 	.word	0x20001110

08009740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800974a:	2300      	movs	r3, #0
 800974c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800974e:	4b42      	ldr	r3, [pc, #264]	; (8009858 <xTaskResumeAll+0x118>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10a      	bne.n	800976c <xTaskResumeAll+0x2c>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	603b      	str	r3, [r7, #0]
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800976c:	f001 fa22 	bl	800abb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009770:	4b39      	ldr	r3, [pc, #228]	; (8009858 <xTaskResumeAll+0x118>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3b01      	subs	r3, #1
 8009776:	4a38      	ldr	r2, [pc, #224]	; (8009858 <xTaskResumeAll+0x118>)
 8009778:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800977a:	4b37      	ldr	r3, [pc, #220]	; (8009858 <xTaskResumeAll+0x118>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d162      	bne.n	8009848 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009782:	4b36      	ldr	r3, [pc, #216]	; (800985c <xTaskResumeAll+0x11c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d05e      	beq.n	8009848 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800978a:	e02f      	b.n	80097ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800978c:	4b34      	ldr	r3, [pc, #208]	; (8009860 <xTaskResumeAll+0x120>)
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3318      	adds	r3, #24
 8009798:	4618      	mov	r0, r3
 800979a:	f7fe fd2f 	bl	80081fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe fd2a 	bl	80081fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ac:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <xTaskResumeAll+0x124>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <xTaskResumeAll+0x7c>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b8:	4a2a      	ldr	r2, [pc, #168]	; (8009864 <xTaskResumeAll+0x124>)
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4a27      	ldr	r2, [pc, #156]	; (8009868 <xTaskResumeAll+0x128>)
 80097ca:	441a      	add	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f7fe fcb5 	bl	8008142 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097dc:	4b23      	ldr	r3, [pc, #140]	; (800986c <xTaskResumeAll+0x12c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80097e6:	4b22      	ldr	r3, [pc, #136]	; (8009870 <xTaskResumeAll+0x130>)
 80097e8:	2201      	movs	r2, #1
 80097ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097ec:	4b1c      	ldr	r3, [pc, #112]	; (8009860 <xTaskResumeAll+0x120>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1cb      	bne.n	800978c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097fa:	f000 fb5f 	bl	8009ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097fe:	4b1d      	ldr	r3, [pc, #116]	; (8009874 <xTaskResumeAll+0x134>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d010      	beq.n	800982c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800980a:	f000 f847 	bl	800989c <xTaskIncrementTick>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009814:	4b16      	ldr	r3, [pc, #88]	; (8009870 <xTaskResumeAll+0x130>)
 8009816:	2201      	movs	r2, #1
 8009818:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3b01      	subs	r3, #1
 800981e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f1      	bne.n	800980a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009826:	4b13      	ldr	r3, [pc, #76]	; (8009874 <xTaskResumeAll+0x134>)
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800982c:	4b10      	ldr	r3, [pc, #64]	; (8009870 <xTaskResumeAll+0x130>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d009      	beq.n	8009848 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009834:	2301      	movs	r3, #1
 8009836:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009838:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <xTaskResumeAll+0x138>)
 800983a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009848:	f001 f9e4 	bl	800ac14 <vPortExitCritical>

	return xAlreadyYielded;
 800984c:	68bb      	ldr	r3, [r7, #8]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20001110 	.word	0x20001110
 800985c:	200010e8 	.word	0x200010e8
 8009860:	200010a8 	.word	0x200010a8
 8009864:	200010f0 	.word	0x200010f0
 8009868:	20000c18 	.word	0x20000c18
 800986c:	20000c14 	.word	0x20000c14
 8009870:	200010fc 	.word	0x200010fc
 8009874:	200010f8 	.word	0x200010f8
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <xTaskGetTickCount+0x1c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009888:	687b      	ldr	r3, [r7, #4]
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	200010ec 	.word	0x200010ec

0800989c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098a6:	4b4f      	ldr	r3, [pc, #316]	; (80099e4 <xTaskIncrementTick+0x148>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f040 808f 	bne.w	80099ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098b0:	4b4d      	ldr	r3, [pc, #308]	; (80099e8 <xTaskIncrementTick+0x14c>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3301      	adds	r3, #1
 80098b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098b8:	4a4b      	ldr	r2, [pc, #300]	; (80099e8 <xTaskIncrementTick+0x14c>)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d120      	bne.n	8009906 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80098c4:	4b49      	ldr	r3, [pc, #292]	; (80099ec <xTaskIncrementTick+0x150>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	603b      	str	r3, [r7, #0]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xTaskIncrementTick+0x46>
 80098e4:	4b41      	ldr	r3, [pc, #260]	; (80099ec <xTaskIncrementTick+0x150>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	4b41      	ldr	r3, [pc, #260]	; (80099f0 <xTaskIncrementTick+0x154>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a3f      	ldr	r2, [pc, #252]	; (80099ec <xTaskIncrementTick+0x150>)
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	4a3f      	ldr	r2, [pc, #252]	; (80099f0 <xTaskIncrementTick+0x154>)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	4b3e      	ldr	r3, [pc, #248]	; (80099f4 <xTaskIncrementTick+0x158>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3301      	adds	r3, #1
 80098fe:	4a3d      	ldr	r2, [pc, #244]	; (80099f4 <xTaskIncrementTick+0x158>)
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	f000 fadb 	bl	8009ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009906:	4b3c      	ldr	r3, [pc, #240]	; (80099f8 <xTaskIncrementTick+0x15c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	429a      	cmp	r2, r3
 800990e:	d349      	bcc.n	80099a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009910:	4b36      	ldr	r3, [pc, #216]	; (80099ec <xTaskIncrementTick+0x150>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d104      	bne.n	8009924 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800991a:	4b37      	ldr	r3, [pc, #220]	; (80099f8 <xTaskIncrementTick+0x15c>)
 800991c:	f04f 32ff 	mov.w	r2, #4294967295
 8009920:	601a      	str	r2, [r3, #0]
					break;
 8009922:	e03f      	b.n	80099a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009924:	4b31      	ldr	r3, [pc, #196]	; (80099ec <xTaskIncrementTick+0x150>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	d203      	bcs.n	8009944 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800993c:	4a2e      	ldr	r2, [pc, #184]	; (80099f8 <xTaskIncrementTick+0x15c>)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009942:	e02f      	b.n	80099a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	3304      	adds	r3, #4
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe fc57 	bl	80081fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	3318      	adds	r3, #24
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fc4e 	bl	80081fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009964:	4b25      	ldr	r3, [pc, #148]	; (80099fc <xTaskIncrementTick+0x160>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d903      	bls.n	8009974 <xTaskIncrementTick+0xd8>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	4a22      	ldr	r2, [pc, #136]	; (80099fc <xTaskIncrementTick+0x160>)
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009978:	4613      	mov	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4a1f      	ldr	r2, [pc, #124]	; (8009a00 <xTaskIncrementTick+0x164>)
 8009982:	441a      	add	r2, r3
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7fe fbd9 	bl	8008142 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009994:	4b1b      	ldr	r3, [pc, #108]	; (8009a04 <xTaskIncrementTick+0x168>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999a:	429a      	cmp	r2, r3
 800999c:	d3b8      	bcc.n	8009910 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800999e:	2301      	movs	r3, #1
 80099a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099a2:	e7b5      	b.n	8009910 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099a4:	4b17      	ldr	r3, [pc, #92]	; (8009a04 <xTaskIncrementTick+0x168>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099aa:	4915      	ldr	r1, [pc, #84]	; (8009a00 <xTaskIncrementTick+0x164>)
 80099ac:	4613      	mov	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d901      	bls.n	80099c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80099bc:	2301      	movs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099c0:	4b11      	ldr	r3, [pc, #68]	; (8009a08 <xTaskIncrementTick+0x16c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d007      	beq.n	80099d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e004      	b.n	80099d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099ce:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <xTaskIncrementTick+0x170>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3301      	adds	r3, #1
 80099d4:	4a0d      	ldr	r2, [pc, #52]	; (8009a0c <xTaskIncrementTick+0x170>)
 80099d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099d8:	697b      	ldr	r3, [r7, #20]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20001110 	.word	0x20001110
 80099e8:	200010ec 	.word	0x200010ec
 80099ec:	200010a0 	.word	0x200010a0
 80099f0:	200010a4 	.word	0x200010a4
 80099f4:	20001100 	.word	0x20001100
 80099f8:	20001108 	.word	0x20001108
 80099fc:	200010f0 	.word	0x200010f0
 8009a00:	20000c18 	.word	0x20000c18
 8009a04:	20000c14 	.word	0x20000c14
 8009a08:	200010fc 	.word	0x200010fc
 8009a0c:	200010f8 	.word	0x200010f8

08009a10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a16:	4b2a      	ldr	r3, [pc, #168]	; (8009ac0 <vTaskSwitchContext+0xb0>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a1e:	4b29      	ldr	r3, [pc, #164]	; (8009ac4 <vTaskSwitchContext+0xb4>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a24:	e046      	b.n	8009ab4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009a26:	4b27      	ldr	r3, [pc, #156]	; (8009ac4 <vTaskSwitchContext+0xb4>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2c:	4b26      	ldr	r3, [pc, #152]	; (8009ac8 <vTaskSwitchContext+0xb8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	e010      	b.n	8009a56 <vTaskSwitchContext+0x46>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <vTaskSwitchContext+0x40>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	607b      	str	r3, [r7, #4]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <vTaskSwitchContext+0x3e>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	491d      	ldr	r1, [pc, #116]	; (8009acc <vTaskSwitchContext+0xbc>)
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	440b      	add	r3, r1
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0e4      	beq.n	8009a34 <vTaskSwitchContext+0x24>
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4a15      	ldr	r2, [pc, #84]	; (8009acc <vTaskSwitchContext+0xbc>)
 8009a76:	4413      	add	r3, r2
 8009a78:	60bb      	str	r3, [r7, #8]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	605a      	str	r2, [r3, #4]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d104      	bne.n	8009a9a <vTaskSwitchContext+0x8a>
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	605a      	str	r2, [r3, #4]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	4a0b      	ldr	r2, [pc, #44]	; (8009ad0 <vTaskSwitchContext+0xc0>)
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	4a08      	ldr	r2, [pc, #32]	; (8009ac8 <vTaskSwitchContext+0xb8>)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009aaa:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <vTaskSwitchContext+0xc0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3354      	adds	r3, #84	; 0x54
 8009ab0:	4a08      	ldr	r2, [pc, #32]	; (8009ad4 <vTaskSwitchContext+0xc4>)
 8009ab2:	6013      	str	r3, [r2, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	20001110 	.word	0x20001110
 8009ac4:	200010fc 	.word	0x200010fc
 8009ac8:	200010f0 	.word	0x200010f0
 8009acc:	20000c18 	.word	0x20000c18
 8009ad0:	20000c14 	.word	0x20000c14
 8009ad4:	20000020 	.word	0x20000020

08009ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	60fb      	str	r3, [r7, #12]
}
 8009afa:	bf00      	nop
 8009afc:	e7fe      	b.n	8009afc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009afe:	4b07      	ldr	r3, [pc, #28]	; (8009b1c <vTaskPlaceOnEventList+0x44>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3318      	adds	r3, #24
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7fe fb3f 	bl	800818a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	6838      	ldr	r0, [r7, #0]
 8009b10:	f000 fb7e 	bl	800a210 <prvAddCurrentTaskToDelayedList>
}
 8009b14:	bf00      	nop
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	20000c14 	.word	0x20000c14

08009b20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10a      	bne.n	8009b48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	617b      	str	r3, [r7, #20]
}
 8009b44:	bf00      	nop
 8009b46:	e7fe      	b.n	8009b46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b48:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3318      	adds	r3, #24
 8009b4e:	4619      	mov	r1, r3
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f7fe faf6 	bl	8008142 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	f000 fb53 	bl	800a210 <prvAddCurrentTaskToDelayedList>
	}
 8009b6a:	bf00      	nop
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000c14 	.word	0x20000c14

08009b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	60fb      	str	r3, [r7, #12]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	3318      	adds	r3, #24
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe fb27 	bl	80081fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bae:	4b1e      	ldr	r3, [pc, #120]	; (8009c28 <xTaskRemoveFromEventList+0xb0>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d11d      	bne.n	8009bf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fb1e 	bl	80081fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc4:	4b19      	ldr	r3, [pc, #100]	; (8009c2c <xTaskRemoveFromEventList+0xb4>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d903      	bls.n	8009bd4 <xTaskRemoveFromEventList+0x5c>
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	4a16      	ldr	r2, [pc, #88]	; (8009c2c <xTaskRemoveFromEventList+0xb4>)
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4a13      	ldr	r2, [pc, #76]	; (8009c30 <xTaskRemoveFromEventList+0xb8>)
 8009be2:	441a      	add	r2, r3
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4619      	mov	r1, r3
 8009bea:	4610      	mov	r0, r2
 8009bec:	f7fe faa9 	bl	8008142 <vListInsertEnd>
 8009bf0:	e005      	b.n	8009bfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	3318      	adds	r3, #24
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	480e      	ldr	r0, [pc, #56]	; (8009c34 <xTaskRemoveFromEventList+0xbc>)
 8009bfa:	f7fe faa2 	bl	8008142 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c02:	4b0d      	ldr	r3, [pc, #52]	; (8009c38 <xTaskRemoveFromEventList+0xc0>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d905      	bls.n	8009c18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c10:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <xTaskRemoveFromEventList+0xc4>)
 8009c12:	2201      	movs	r2, #1
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	e001      	b.n	8009c1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c1c:	697b      	ldr	r3, [r7, #20]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20001110 	.word	0x20001110
 8009c2c:	200010f0 	.word	0x200010f0
 8009c30:	20000c18 	.word	0x20000c18
 8009c34:	200010a8 	.word	0x200010a8
 8009c38:	20000c14 	.word	0x20000c14
 8009c3c:	200010fc 	.word	0x200010fc

08009c40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c48:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <vTaskInternalSetTimeOutState+0x24>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c50:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <vTaskInternalSetTimeOutState+0x28>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	605a      	str	r2, [r3, #4]
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	20001100 	.word	0x20001100
 8009c68:	200010ec 	.word	0x200010ec

08009c6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	613b      	str	r3, [r7, #16]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	60fb      	str	r3, [r7, #12]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009cae:	f000 ff81 	bl	800abb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cb2:	4b1d      	ldr	r3, [pc, #116]	; (8009d28 <xTaskCheckForTimeOut+0xbc>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d102      	bne.n	8009cd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	61fb      	str	r3, [r7, #28]
 8009cd0:	e023      	b.n	8009d1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <xTaskCheckForTimeOut+0xc0>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d007      	beq.n	8009cee <xTaskCheckForTimeOut+0x82>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d302      	bcc.n	8009cee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	61fb      	str	r3, [r7, #28]
 8009cec:	e015      	b.n	8009d1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d20b      	bcs.n	8009d10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff ff9b 	bl	8009c40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61fb      	str	r3, [r7, #28]
 8009d0e:	e004      	b.n	8009d1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d16:	2301      	movs	r3, #1
 8009d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d1a:	f000 ff7b 	bl	800ac14 <vPortExitCritical>

	return xReturn;
 8009d1e:	69fb      	ldr	r3, [r7, #28]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3720      	adds	r7, #32
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	200010ec 	.word	0x200010ec
 8009d2c:	20001100 	.word	0x20001100

08009d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d30:	b480      	push	{r7}
 8009d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d34:	4b03      	ldr	r3, [pc, #12]	; (8009d44 <vTaskMissedYield+0x14>)
 8009d36:	2201      	movs	r2, #1
 8009d38:	601a      	str	r2, [r3, #0]
}
 8009d3a:	bf00      	nop
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	200010fc 	.word	0x200010fc

08009d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d50:	f000 f852 	bl	8009df8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d54:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <prvIdleTask+0x28>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d9f9      	bls.n	8009d50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d5c:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <prvIdleTask+0x2c>)
 8009d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d6c:	e7f0      	b.n	8009d50 <prvIdleTask+0x8>
 8009d6e:	bf00      	nop
 8009d70:	20000c18 	.word	0x20000c18
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d7e:	2300      	movs	r3, #0
 8009d80:	607b      	str	r3, [r7, #4]
 8009d82:	e00c      	b.n	8009d9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4a12      	ldr	r2, [pc, #72]	; (8009dd8 <prvInitialiseTaskLists+0x60>)
 8009d90:	4413      	add	r3, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe f9a8 	bl	80080e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	607b      	str	r3, [r7, #4]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b37      	cmp	r3, #55	; 0x37
 8009da2:	d9ef      	bls.n	8009d84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009da4:	480d      	ldr	r0, [pc, #52]	; (8009ddc <prvInitialiseTaskLists+0x64>)
 8009da6:	f7fe f99f 	bl	80080e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009daa:	480d      	ldr	r0, [pc, #52]	; (8009de0 <prvInitialiseTaskLists+0x68>)
 8009dac:	f7fe f99c 	bl	80080e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009db0:	480c      	ldr	r0, [pc, #48]	; (8009de4 <prvInitialiseTaskLists+0x6c>)
 8009db2:	f7fe f999 	bl	80080e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009db6:	480c      	ldr	r0, [pc, #48]	; (8009de8 <prvInitialiseTaskLists+0x70>)
 8009db8:	f7fe f996 	bl	80080e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009dbc:	480b      	ldr	r0, [pc, #44]	; (8009dec <prvInitialiseTaskLists+0x74>)
 8009dbe:	f7fe f993 	bl	80080e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009dc2:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <prvInitialiseTaskLists+0x78>)
 8009dc4:	4a05      	ldr	r2, [pc, #20]	; (8009ddc <prvInitialiseTaskLists+0x64>)
 8009dc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dc8:	4b0a      	ldr	r3, [pc, #40]	; (8009df4 <prvInitialiseTaskLists+0x7c>)
 8009dca:	4a05      	ldr	r2, [pc, #20]	; (8009de0 <prvInitialiseTaskLists+0x68>)
 8009dcc:	601a      	str	r2, [r3, #0]
}
 8009dce:	bf00      	nop
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20000c18 	.word	0x20000c18
 8009ddc:	20001078 	.word	0x20001078
 8009de0:	2000108c 	.word	0x2000108c
 8009de4:	200010a8 	.word	0x200010a8
 8009de8:	200010bc 	.word	0x200010bc
 8009dec:	200010d4 	.word	0x200010d4
 8009df0:	200010a0 	.word	0x200010a0
 8009df4:	200010a4 	.word	0x200010a4

08009df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dfe:	e019      	b.n	8009e34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e00:	f000 fed8 	bl	800abb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e04:	4b10      	ldr	r3, [pc, #64]	; (8009e48 <prvCheckTasksWaitingTermination+0x50>)
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3304      	adds	r3, #4
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe f9f3 	bl	80081fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e16:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <prvCheckTasksWaitingTermination+0x54>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	4a0b      	ldr	r2, [pc, #44]	; (8009e4c <prvCheckTasksWaitingTermination+0x54>)
 8009e1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e20:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <prvCheckTasksWaitingTermination+0x58>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3b01      	subs	r3, #1
 8009e26:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <prvCheckTasksWaitingTermination+0x58>)
 8009e28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e2a:	f000 fef3 	bl	800ac14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f810 	bl	8009e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e34:	4b06      	ldr	r3, [pc, #24]	; (8009e50 <prvCheckTasksWaitingTermination+0x58>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e1      	bne.n	8009e00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	200010bc 	.word	0x200010bc
 8009e4c:	200010e8 	.word	0x200010e8
 8009e50:	200010d0 	.word	0x200010d0

08009e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3354      	adds	r3, #84	; 0x54
 8009e60:	4618      	mov	r0, r3
 8009e62:	f001 fa97 	bl	800b394 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d108      	bne.n	8009e82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 f88b 	bl	800af90 <vPortFree>
				vPortFree( pxTCB );
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 f888 	bl	800af90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e80:	e018      	b.n	8009eb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d103      	bne.n	8009e94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 f87f 	bl	800af90 <vPortFree>
	}
 8009e92:	e00f      	b.n	8009eb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d00a      	beq.n	8009eb4 <prvDeleteTCB+0x60>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	60fb      	str	r3, [r7, #12]
}
 8009eb0:	bf00      	nop
 8009eb2:	e7fe      	b.n	8009eb2 <prvDeleteTCB+0x5e>
	}
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <prvResetNextTaskUnblockTime+0x38>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d104      	bne.n	8009ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ecc:	4b0a      	ldr	r3, [pc, #40]	; (8009ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ece:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ed4:	e008      	b.n	8009ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed6:	4b07      	ldr	r3, [pc, #28]	; (8009ef4 <prvResetNextTaskUnblockTime+0x38>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	4a04      	ldr	r2, [pc, #16]	; (8009ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ee6:	6013      	str	r3, [r2, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	200010a0 	.word	0x200010a0
 8009ef8:	20001108 	.word	0x20001108

08009efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f02:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <xTaskGetSchedulerState+0x34>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d102      	bne.n	8009f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	607b      	str	r3, [r7, #4]
 8009f0e:	e008      	b.n	8009f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f10:	4b08      	ldr	r3, [pc, #32]	; (8009f34 <xTaskGetSchedulerState+0x38>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f18:	2302      	movs	r3, #2
 8009f1a:	607b      	str	r3, [r7, #4]
 8009f1c:	e001      	b.n	8009f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f22:	687b      	ldr	r3, [r7, #4]
	}
 8009f24:	4618      	mov	r0, r3
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	200010f4 	.word	0x200010f4
 8009f34:	20001110 	.word	0x20001110

08009f38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d051      	beq.n	8009ff2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f52:	4b2a      	ldr	r3, [pc, #168]	; (8009ffc <xTaskPriorityInherit+0xc4>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d241      	bcs.n	8009fe0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	db06      	blt.n	8009f72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f64:	4b25      	ldr	r3, [pc, #148]	; (8009ffc <xTaskPriorityInherit+0xc4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	6959      	ldr	r1, [r3, #20]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4a1f      	ldr	r2, [pc, #124]	; (800a000 <xTaskPriorityInherit+0xc8>)
 8009f84:	4413      	add	r3, r2
 8009f86:	4299      	cmp	r1, r3
 8009f88:	d122      	bne.n	8009fd0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe f934 	bl	80081fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f94:	4b19      	ldr	r3, [pc, #100]	; (8009ffc <xTaskPriorityInherit+0xc4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	4b18      	ldr	r3, [pc, #96]	; (800a004 <xTaskPriorityInherit+0xcc>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d903      	bls.n	8009fb2 <xTaskPriorityInherit+0x7a>
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a15      	ldr	r2, [pc, #84]	; (800a004 <xTaskPriorityInherit+0xcc>)
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4a10      	ldr	r2, [pc, #64]	; (800a000 <xTaskPriorityInherit+0xc8>)
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f7fe f8ba 	bl	8008142 <vListInsertEnd>
 8009fce:	e004      	b.n	8009fda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <xTaskPriorityInherit+0xc4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	e008      	b.n	8009ff2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fe4:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <xTaskPriorityInherit+0xc4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d201      	bcs.n	8009ff2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
	}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20000c14 	.word	0x20000c14
 800a000:	20000c18 	.word	0x20000c18
 800a004:	200010f0 	.word	0x200010f0

0800a008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a014:	2300      	movs	r3, #0
 800a016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d056      	beq.n	800a0cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a01e:	4b2e      	ldr	r3, [pc, #184]	; (800a0d8 <xTaskPriorityDisinherit+0xd0>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	429a      	cmp	r2, r3
 800a026:	d00a      	beq.n	800a03e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	60fb      	str	r3, [r7, #12]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	60bb      	str	r3, [r7, #8]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a060:	1e5a      	subs	r2, r3, #1
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a06e:	429a      	cmp	r2, r3
 800a070:	d02c      	beq.n	800a0cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a076:	2b00      	cmp	r3, #0
 800a078:	d128      	bne.n	800a0cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe f8bc 	bl	80081fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a090:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09c:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <xTaskPriorityDisinherit+0xd4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d903      	bls.n	800a0ac <xTaskPriorityDisinherit+0xa4>
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a8:	4a0c      	ldr	r2, [pc, #48]	; (800a0dc <xTaskPriorityDisinherit+0xd4>)
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4a09      	ldr	r2, [pc, #36]	; (800a0e0 <xTaskPriorityDisinherit+0xd8>)
 800a0ba:	441a      	add	r2, r3
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f7fe f83d 	bl	8008142 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0cc:	697b      	ldr	r3, [r7, #20]
	}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20000c14 	.word	0x20000c14
 800a0dc:	200010f0 	.word	0x200010f0
 800a0e0:	20000c18 	.word	0x20000c18

0800a0e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d06a      	beq.n	800a1d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	60fb      	str	r3, [r7, #12]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d902      	bls.n	800a12a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	e002      	b.n	800a130 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a12e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	69fa      	ldr	r2, [r7, #28]
 800a136:	429a      	cmp	r2, r3
 800a138:	d04b      	beq.n	800a1d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	429a      	cmp	r2, r3
 800a142:	d146      	bne.n	800a1d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a144:	4b25      	ldr	r3, [pc, #148]	; (800a1dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d10a      	bne.n	800a164 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	60bb      	str	r3, [r7, #8]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	69fa      	ldr	r2, [r7, #28]
 800a16e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	2b00      	cmp	r3, #0
 800a176:	db04      	blt.n	800a182 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	6959      	ldr	r1, [r3, #20]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4a13      	ldr	r2, [pc, #76]	; (800a1e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a192:	4413      	add	r3, r2
 800a194:	4299      	cmp	r1, r3
 800a196:	d11c      	bne.n	800a1d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe f82d 	bl	80081fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d903      	bls.n	800a1b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4a07      	ldr	r2, [pc, #28]	; (800a1e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a1c4:	441a      	add	r2, r3
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	f7fd ffb8 	bl	8008142 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1d2:	bf00      	nop
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000c14 	.word	0x20000c14
 800a1e0:	20000c18 	.word	0x20000c18
 800a1e4:	200010f0 	.word	0x200010f0

0800a1e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a1ec:	4b07      	ldr	r3, [pc, #28]	; (800a20c <pvTaskIncrementMutexHeldCount+0x24>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d004      	beq.n	800a1fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a1f4:	4b05      	ldr	r3, [pc, #20]	; (800a20c <pvTaskIncrementMutexHeldCount+0x24>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a1fa:	3201      	adds	r2, #1
 800a1fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a1fe:	4b03      	ldr	r3, [pc, #12]	; (800a20c <pvTaskIncrementMutexHeldCount+0x24>)
 800a200:	681b      	ldr	r3, [r3, #0]
	}
 800a202:	4618      	mov	r0, r3
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000c14 	.word	0x20000c14

0800a210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a21a:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a220:	4b20      	ldr	r3, [pc, #128]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3304      	adds	r3, #4
 800a226:	4618      	mov	r0, r3
 800a228:	f7fd ffe8 	bl	80081fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a232:	d10a      	bne.n	800a24a <prvAddCurrentTaskToDelayedList+0x3a>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d007      	beq.n	800a24a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a23a:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4819      	ldr	r0, [pc, #100]	; (800a2a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a244:	f7fd ff7d 	bl	8008142 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a248:	e026      	b.n	800a298 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4413      	add	r3, r2
 800a250:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d209      	bcs.n	800a276 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a262:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	4b0f      	ldr	r3, [pc, #60]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4619      	mov	r1, r3
 800a26e:	4610      	mov	r0, r2
 800a270:	f7fd ff8b 	bl	800818a <vListInsert>
}
 800a274:	e010      	b.n	800a298 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3304      	adds	r3, #4
 800a280:	4619      	mov	r1, r3
 800a282:	4610      	mov	r0, r2
 800a284:	f7fd ff81 	bl	800818a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a288:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d202      	bcs.n	800a298 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a292:	4a08      	ldr	r2, [pc, #32]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	6013      	str	r3, [r2, #0]
}
 800a298:	bf00      	nop
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	200010ec 	.word	0x200010ec
 800a2a4:	20000c14 	.word	0x20000c14
 800a2a8:	200010d4 	.word	0x200010d4
 800a2ac:	200010a4 	.word	0x200010a4
 800a2b0:	200010a0 	.word	0x200010a0
 800a2b4:	20001108 	.word	0x20001108

0800a2b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08a      	sub	sp, #40	; 0x28
 800a2bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2c2:	f000 fb07 	bl	800a8d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2c6:	4b1c      	ldr	r3, [pc, #112]	; (800a338 <xTimerCreateTimerTask+0x80>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d021      	beq.n	800a312 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2d6:	1d3a      	adds	r2, r7, #4
 800a2d8:	f107 0108 	add.w	r1, r7, #8
 800a2dc:	f107 030c 	add.w	r3, r7, #12
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fd fee7 	bl	80080b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	9202      	str	r2, [sp, #8]
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	460a      	mov	r2, r1
 800a2f8:	4910      	ldr	r1, [pc, #64]	; (800a33c <xTimerCreateTimerTask+0x84>)
 800a2fa:	4811      	ldr	r0, [pc, #68]	; (800a340 <xTimerCreateTimerTask+0x88>)
 800a2fc:	f7fe ffb6 	bl	800926c <xTaskCreateStatic>
 800a300:	4603      	mov	r3, r0
 800a302:	4a10      	ldr	r2, [pc, #64]	; (800a344 <xTimerCreateTimerTask+0x8c>)
 800a304:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a306:	4b0f      	ldr	r3, [pc, #60]	; (800a344 <xTimerCreateTimerTask+0x8c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a30e:	2301      	movs	r3, #1
 800a310:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	613b      	str	r3, [r7, #16]
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a32e:	697b      	ldr	r3, [r7, #20]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20001144 	.word	0x20001144
 800a33c:	0800bc74 	.word	0x0800bc74
 800a340:	0800a47d 	.word	0x0800a47d
 800a344:	20001148 	.word	0x20001148

0800a348 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08a      	sub	sp, #40	; 0x28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a356:	2300      	movs	r3, #0
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	623b      	str	r3, [r7, #32]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a376:	4b1a      	ldr	r3, [pc, #104]	; (800a3e0 <xTimerGenericCommand+0x98>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d02a      	beq.n	800a3d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b05      	cmp	r3, #5
 800a38e:	dc18      	bgt.n	800a3c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a390:	f7ff fdb4 	bl	8009efc <xTaskGetSchedulerState>
 800a394:	4603      	mov	r3, r0
 800a396:	2b02      	cmp	r3, #2
 800a398:	d109      	bne.n	800a3ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a39a:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <xTimerGenericCommand+0x98>)
 800a39c:	6818      	ldr	r0, [r3, #0]
 800a39e:	f107 0110 	add.w	r1, r7, #16
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3a6:	f7fe f8fb 	bl	80085a0 <xQueueGenericSend>
 800a3aa:	6278      	str	r0, [r7, #36]	; 0x24
 800a3ac:	e012      	b.n	800a3d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <xTimerGenericCommand+0x98>)
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	f107 0110 	add.w	r1, r7, #16
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f7fe f8f1 	bl	80085a0 <xQueueGenericSend>
 800a3be:	6278      	str	r0, [r7, #36]	; 0x24
 800a3c0:	e008      	b.n	800a3d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3c2:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <xTimerGenericCommand+0x98>)
 800a3c4:	6818      	ldr	r0, [r3, #0]
 800a3c6:	f107 0110 	add.w	r1, r7, #16
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	f7fe f9e5 	bl	800879c <xQueueGenericSendFromISR>
 800a3d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3728      	adds	r7, #40	; 0x28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20001144 	.word	0x20001144

0800a3e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af02      	add	r7, sp, #8
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ee:	4b22      	ldr	r3, [pc, #136]	; (800a478 <prvProcessExpiredTimer+0x94>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fd fefd 	bl	80081fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d022      	beq.n	800a456 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	699a      	ldr	r2, [r3, #24]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	18d1      	adds	r1, r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	6978      	ldr	r0, [r7, #20]
 800a41e:	f000 f8d1 	bl	800a5c4 <prvInsertTimerInActiveList>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01f      	beq.n	800a468 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a428:	2300      	movs	r3, #0
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	2300      	movs	r3, #0
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	2100      	movs	r1, #0
 800a432:	6978      	ldr	r0, [r7, #20]
 800a434:	f7ff ff88 	bl	800a348 <xTimerGenericCommand>
 800a438:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d113      	bne.n	800a468 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	60fb      	str	r3, [r7, #12]
}
 800a452:	bf00      	nop
 800a454:	e7fe      	b.n	800a454 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a45c:	f023 0301 	bic.w	r3, r3, #1
 800a460:	b2da      	uxtb	r2, r3
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	6978      	ldr	r0, [r7, #20]
 800a46e:	4798      	blx	r3
}
 800a470:	bf00      	nop
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	2000113c 	.word	0x2000113c

0800a47c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a484:	f107 0308 	add.w	r3, r7, #8
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 f857 	bl	800a53c <prvGetNextExpireTime>
 800a48e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	4619      	mov	r1, r3
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 f803 	bl	800a4a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a49a:	f000 f8d5 	bl	800a648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a49e:	e7f1      	b.n	800a484 <prvTimerTask+0x8>

0800a4a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4aa:	f7ff f93b 	bl	8009724 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 f866 	bl	800a584 <prvSampleTimeNow>
 800a4b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d130      	bne.n	800a522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <prvProcessTimerOrBlockTask+0x3c>
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d806      	bhi.n	800a4dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4ce:	f7ff f937 	bl	8009740 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4d2:	68f9      	ldr	r1, [r7, #12]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7ff ff85 	bl	800a3e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4da:	e024      	b.n	800a526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d008      	beq.n	800a4f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4e2:	4b13      	ldr	r3, [pc, #76]	; (800a530 <prvProcessTimerOrBlockTask+0x90>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <prvProcessTimerOrBlockTask+0x50>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <prvProcessTimerOrBlockTask+0x52>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <prvProcessTimerOrBlockTask+0x94>)
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	4619      	mov	r1, r3
 800a502:	f7fe fe7f 	bl	8009204 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a506:	f7ff f91b 	bl	8009740 <xTaskResumeAll>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a510:	4b09      	ldr	r3, [pc, #36]	; (800a538 <prvProcessTimerOrBlockTask+0x98>)
 800a512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
}
 800a520:	e001      	b.n	800a526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a522:	f7ff f90d 	bl	8009740 <xTaskResumeAll>
}
 800a526:	bf00      	nop
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	20001140 	.word	0x20001140
 800a534:	20001144 	.word	0x20001144
 800a538:	e000ed04 	.word	0xe000ed04

0800a53c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a544:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <prvGetNextExpireTime+0x44>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <prvGetNextExpireTime+0x16>
 800a54e:	2201      	movs	r2, #1
 800a550:	e000      	b.n	800a554 <prvGetNextExpireTime+0x18>
 800a552:	2200      	movs	r2, #0
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d105      	bne.n	800a56c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <prvGetNextExpireTime+0x44>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	e001      	b.n	800a570 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a570:	68fb      	ldr	r3, [r7, #12]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	2000113c 	.word	0x2000113c

0800a584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a58c:	f7ff f976 	bl	800987c <xTaskGetTickCount>
 800a590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a592:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <prvSampleTimeNow+0x3c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d205      	bcs.n	800a5a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a59c:	f000 f936 	bl	800a80c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	e002      	b.n	800a5ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5ae:	4a04      	ldr	r2, [pc, #16]	; (800a5c0 <prvSampleTimeNow+0x3c>)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	2000114c 	.word	0x2000114c

0800a5c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d812      	bhi.n	800a610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d302      	bcc.n	800a5fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	e01b      	b.n	800a636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5fe:	4b10      	ldr	r3, [pc, #64]	; (800a640 <prvInsertTimerInActiveList+0x7c>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3304      	adds	r3, #4
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f7fd fdbe 	bl	800818a <vListInsert>
 800a60e:	e012      	b.n	800a636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d206      	bcs.n	800a626 <prvInsertTimerInActiveList+0x62>
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d302      	bcc.n	800a626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a620:	2301      	movs	r3, #1
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	e007      	b.n	800a636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a626:	4b07      	ldr	r3, [pc, #28]	; (800a644 <prvInsertTimerInActiveList+0x80>)
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3304      	adds	r3, #4
 800a62e:	4619      	mov	r1, r3
 800a630:	4610      	mov	r0, r2
 800a632:	f7fd fdaa 	bl	800818a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a636:	697b      	ldr	r3, [r7, #20]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3718      	adds	r7, #24
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	20001140 	.word	0x20001140
 800a644:	2000113c 	.word	0x2000113c

0800a648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08e      	sub	sp, #56	; 0x38
 800a64c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a64e:	e0ca      	b.n	800a7e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	da18      	bge.n	800a688 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a656:	1d3b      	adds	r3, r7, #4
 800a658:	3304      	adds	r3, #4
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	61fb      	str	r3, [r7, #28]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a67e:	6850      	ldr	r0, [r2, #4]
 800a680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a682:	6892      	ldr	r2, [r2, #8]
 800a684:	4611      	mov	r1, r2
 800a686:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f2c0 80aa 	blt.w	800a7e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a696:	695b      	ldr	r3, [r3, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	3304      	adds	r3, #4
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fd fdab 	bl	80081fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6a6:	463b      	mov	r3, r7
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff ff6b 	bl	800a584 <prvSampleTimeNow>
 800a6ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b09      	cmp	r3, #9
 800a6b4:	f200 8097 	bhi.w	800a7e6 <prvProcessReceivedCommands+0x19e>
 800a6b8:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <prvProcessReceivedCommands+0x78>)
 800a6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6be:	bf00      	nop
 800a6c0:	0800a6e9 	.word	0x0800a6e9
 800a6c4:	0800a6e9 	.word	0x0800a6e9
 800a6c8:	0800a6e9 	.word	0x0800a6e9
 800a6cc:	0800a75d 	.word	0x0800a75d
 800a6d0:	0800a771 	.word	0x0800a771
 800a6d4:	0800a7bb 	.word	0x0800a7bb
 800a6d8:	0800a6e9 	.word	0x0800a6e9
 800a6dc:	0800a6e9 	.word	0x0800a6e9
 800a6e0:	0800a75d 	.word	0x0800a75d
 800a6e4:	0800a771 	.word	0x0800a771
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6ee:	f043 0301 	orr.w	r3, r3, #1
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	18d1      	adds	r1, r2, r3
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a708:	f7ff ff5c 	bl	800a5c4 <prvInsertTimerInActiveList>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d069      	beq.n	800a7e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	6a1b      	ldr	r3, [r3, #32]
 800a716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a718:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d05e      	beq.n	800a7e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	441a      	add	r2, r3
 800a730:	2300      	movs	r3, #0
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	2300      	movs	r3, #0
 800a736:	2100      	movs	r1, #0
 800a738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a73a:	f7ff fe05 	bl	800a348 <xTimerGenericCommand>
 800a73e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d14f      	bne.n	800a7e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	61bb      	str	r3, [r7, #24]
}
 800a758:	bf00      	nop
 800a75a:	e7fe      	b.n	800a75a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a762:	f023 0301 	bic.w	r3, r3, #1
 800a766:	b2da      	uxtb	r2, r3
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a76e:	e03a      	b.n	800a7e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a776:	f043 0301 	orr.w	r3, r3, #1
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	617b      	str	r3, [r7, #20]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	699a      	ldr	r2, [r3, #24]
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	18d1      	adds	r1, r2, r3
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b4:	f7ff ff06 	bl	800a5c4 <prvInsertTimerInActiveList>
					break;
 800a7b8:	e015      	b.n	800a7e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c0:	f003 0302 	and.w	r3, r3, #2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d103      	bne.n	800a7d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ca:	f000 fbe1 	bl	800af90 <vPortFree>
 800a7ce:	e00a      	b.n	800a7e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d6:	f023 0301 	bic.w	r3, r3, #1
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7e2:	e000      	b.n	800a7e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a7e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7e6:	4b08      	ldr	r3, [pc, #32]	; (800a808 <prvProcessReceivedCommands+0x1c0>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	1d39      	adds	r1, r7, #4
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe f8fc 	bl	80089ec <xQueueReceive>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f47f af2a 	bne.w	800a650 <prvProcessReceivedCommands+0x8>
	}
}
 800a7fc:	bf00      	nop
 800a7fe:	bf00      	nop
 800a800:	3730      	adds	r7, #48	; 0x30
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20001144 	.word	0x20001144

0800a80c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a812:	e048      	b.n	800a8a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a814:	4b2d      	ldr	r3, [pc, #180]	; (800a8cc <prvSwitchTimerLists+0xc0>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a81e:	4b2b      	ldr	r3, [pc, #172]	; (800a8cc <prvSwitchTimerLists+0xc0>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fd fce5 	bl	80081fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b00      	cmp	r3, #0
 800a846:	d02e      	beq.n	800a8a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	4413      	add	r3, r2
 800a850:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	429a      	cmp	r2, r3
 800a858:	d90e      	bls.n	800a878 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a866:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <prvSwitchTimerLists+0xc0>)
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3304      	adds	r3, #4
 800a86e:	4619      	mov	r1, r3
 800a870:	4610      	mov	r0, r2
 800a872:	f7fd fc8a 	bl	800818a <vListInsert>
 800a876:	e016      	b.n	800a8a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a878:	2300      	movs	r3, #0
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	2300      	movs	r3, #0
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	2100      	movs	r1, #0
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f7ff fd60 	bl	800a348 <xTimerGenericCommand>
 800a888:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10a      	bne.n	800a8a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	603b      	str	r3, [r7, #0]
}
 800a8a2:	bf00      	nop
 800a8a4:	e7fe      	b.n	800a8a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8a6:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <prvSwitchTimerLists+0xc0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1b1      	bne.n	800a814 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8b0:	4b06      	ldr	r3, [pc, #24]	; (800a8cc <prvSwitchTimerLists+0xc0>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8b6:	4b06      	ldr	r3, [pc, #24]	; (800a8d0 <prvSwitchTimerLists+0xc4>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a04      	ldr	r2, [pc, #16]	; (800a8cc <prvSwitchTimerLists+0xc0>)
 800a8bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8be:	4a04      	ldr	r2, [pc, #16]	; (800a8d0 <prvSwitchTimerLists+0xc4>)
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	6013      	str	r3, [r2, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	2000113c 	.word	0x2000113c
 800a8d0:	20001140 	.word	0x20001140

0800a8d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8da:	f000 f96b 	bl	800abb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8de:	4b15      	ldr	r3, [pc, #84]	; (800a934 <prvCheckForValidListAndQueue+0x60>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d120      	bne.n	800a928 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8e6:	4814      	ldr	r0, [pc, #80]	; (800a938 <prvCheckForValidListAndQueue+0x64>)
 800a8e8:	f7fd fbfe 	bl	80080e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8ec:	4813      	ldr	r0, [pc, #76]	; (800a93c <prvCheckForValidListAndQueue+0x68>)
 800a8ee:	f7fd fbfb 	bl	80080e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8f2:	4b13      	ldr	r3, [pc, #76]	; (800a940 <prvCheckForValidListAndQueue+0x6c>)
 800a8f4:	4a10      	ldr	r2, [pc, #64]	; (800a938 <prvCheckForValidListAndQueue+0x64>)
 800a8f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8f8:	4b12      	ldr	r3, [pc, #72]	; (800a944 <prvCheckForValidListAndQueue+0x70>)
 800a8fa:	4a10      	ldr	r2, [pc, #64]	; (800a93c <prvCheckForValidListAndQueue+0x68>)
 800a8fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8fe:	2300      	movs	r3, #0
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	4b11      	ldr	r3, [pc, #68]	; (800a948 <prvCheckForValidListAndQueue+0x74>)
 800a904:	4a11      	ldr	r2, [pc, #68]	; (800a94c <prvCheckForValidListAndQueue+0x78>)
 800a906:	2110      	movs	r1, #16
 800a908:	200a      	movs	r0, #10
 800a90a:	f7fd fd09 	bl	8008320 <xQueueGenericCreateStatic>
 800a90e:	4603      	mov	r3, r0
 800a910:	4a08      	ldr	r2, [pc, #32]	; (800a934 <prvCheckForValidListAndQueue+0x60>)
 800a912:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <prvCheckForValidListAndQueue+0x60>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d005      	beq.n	800a928 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a91c:	4b05      	ldr	r3, [pc, #20]	; (800a934 <prvCheckForValidListAndQueue+0x60>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	490b      	ldr	r1, [pc, #44]	; (800a950 <prvCheckForValidListAndQueue+0x7c>)
 800a922:	4618      	mov	r0, r3
 800a924:	f7fe fc1a 	bl	800915c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a928:	f000 f974 	bl	800ac14 <vPortExitCritical>
}
 800a92c:	bf00      	nop
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20001144 	.word	0x20001144
 800a938:	20001114 	.word	0x20001114
 800a93c:	20001128 	.word	0x20001128
 800a940:	2000113c 	.word	0x2000113c
 800a944:	20001140 	.word	0x20001140
 800a948:	200011f0 	.word	0x200011f0
 800a94c:	20001150 	.word	0x20001150
 800a950:	0800bc7c 	.word	0x0800bc7c

0800a954 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3b04      	subs	r3, #4
 800a964:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a96c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3b04      	subs	r3, #4
 800a972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	f023 0201 	bic.w	r2, r3, #1
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3b04      	subs	r3, #4
 800a982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a984:	4a0c      	ldr	r2, [pc, #48]	; (800a9b8 <pxPortInitialiseStack+0x64>)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	3b14      	subs	r3, #20
 800a98e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3b04      	subs	r3, #4
 800a99a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f06f 0202 	mvn.w	r2, #2
 800a9a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3b20      	subs	r3, #32
 800a9a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	0800a9bd 	.word	0x0800a9bd

0800a9bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9c6:	4b12      	ldr	r3, [pc, #72]	; (800aa10 <prvTaskExitError+0x54>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ce:	d00a      	beq.n	800a9e6 <prvTaskExitError+0x2a>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	60fb      	str	r3, [r7, #12]
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <prvTaskExitError+0x28>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	60bb      	str	r3, [r7, #8]
}
 800a9f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9fa:	bf00      	nop
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0fc      	beq.n	800a9fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa02:	bf00      	nop
 800aa04:	bf00      	nop
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	2000001c 	.word	0x2000001c
	...

0800aa20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa20:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <pxCurrentTCBConst2>)
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	6808      	ldr	r0, [r1, #0]
 800aa26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	f380 8809 	msr	PSP, r0
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f04f 0000 	mov.w	r0, #0
 800aa36:	f380 8811 	msr	BASEPRI, r0
 800aa3a:	4770      	bx	lr
 800aa3c:	f3af 8000 	nop.w

0800aa40 <pxCurrentTCBConst2>:
 800aa40:	20000c14 	.word	0x20000c14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa48:	4808      	ldr	r0, [pc, #32]	; (800aa6c <prvPortStartFirstTask+0x24>)
 800aa4a:	6800      	ldr	r0, [r0, #0]
 800aa4c:	6800      	ldr	r0, [r0, #0]
 800aa4e:	f380 8808 	msr	MSP, r0
 800aa52:	f04f 0000 	mov.w	r0, #0
 800aa56:	f380 8814 	msr	CONTROL, r0
 800aa5a:	b662      	cpsie	i
 800aa5c:	b661      	cpsie	f
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	df00      	svc	0
 800aa68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa6a:	bf00      	nop
 800aa6c:	e000ed08 	.word	0xe000ed08

0800aa70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa76:	4b46      	ldr	r3, [pc, #280]	; (800ab90 <xPortStartScheduler+0x120>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a46      	ldr	r2, [pc, #280]	; (800ab94 <xPortStartScheduler+0x124>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10a      	bne.n	800aa96 <xPortStartScheduler+0x26>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	613b      	str	r3, [r7, #16]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa96:	4b3e      	ldr	r3, [pc, #248]	; (800ab90 <xPortStartScheduler+0x120>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a3f      	ldr	r2, [pc, #252]	; (800ab98 <xPortStartScheduler+0x128>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d10a      	bne.n	800aab6 <xPortStartScheduler+0x46>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60fb      	str	r3, [r7, #12]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aab6:	4b39      	ldr	r3, [pc, #228]	; (800ab9c <xPortStartScheduler+0x12c>)
 800aab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	22ff      	movs	r2, #255	; 0xff
 800aac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	4b31      	ldr	r3, [pc, #196]	; (800aba0 <xPortStartScheduler+0x130>)
 800aadc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aade:	4b31      	ldr	r3, [pc, #196]	; (800aba4 <xPortStartScheduler+0x134>)
 800aae0:	2207      	movs	r2, #7
 800aae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aae4:	e009      	b.n	800aafa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aae6:	4b2f      	ldr	r3, [pc, #188]	; (800aba4 <xPortStartScheduler+0x134>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	4a2d      	ldr	r2, [pc, #180]	; (800aba4 <xPortStartScheduler+0x134>)
 800aaee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aafa:	78fb      	ldrb	r3, [r7, #3]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab02:	2b80      	cmp	r3, #128	; 0x80
 800ab04:	d0ef      	beq.n	800aae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab06:	4b27      	ldr	r3, [pc, #156]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f1c3 0307 	rsb	r3, r3, #7
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d00a      	beq.n	800ab28 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	60bb      	str	r3, [r7, #8]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab28:	4b1e      	ldr	r3, [pc, #120]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	4a1d      	ldr	r2, [pc, #116]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab32:	4b1c      	ldr	r3, [pc, #112]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab3a:	4a1a      	ldr	r2, [pc, #104]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab46:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <xPortStartScheduler+0x138>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a17      	ldr	r2, [pc, #92]	; (800aba8 <xPortStartScheduler+0x138>)
 800ab4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <xPortStartScheduler+0x138>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a14      	ldr	r2, [pc, #80]	; (800aba8 <xPortStartScheduler+0x138>)
 800ab58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab5e:	f000 f8dd 	bl	800ad1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab62:	4b12      	ldr	r3, [pc, #72]	; (800abac <xPortStartScheduler+0x13c>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab68:	f000 f8fc 	bl	800ad64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab6c:	4b10      	ldr	r3, [pc, #64]	; (800abb0 <xPortStartScheduler+0x140>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a0f      	ldr	r2, [pc, #60]	; (800abb0 <xPortStartScheduler+0x140>)
 800ab72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab78:	f7ff ff66 	bl	800aa48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab7c:	f7fe ff48 	bl	8009a10 <vTaskSwitchContext>
	prvTaskExitError();
 800ab80:	f7ff ff1c 	bl	800a9bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	e000ed00 	.word	0xe000ed00
 800ab94:	410fc271 	.word	0x410fc271
 800ab98:	410fc270 	.word	0x410fc270
 800ab9c:	e000e400 	.word	0xe000e400
 800aba0:	20001240 	.word	0x20001240
 800aba4:	20001244 	.word	0x20001244
 800aba8:	e000ed20 	.word	0xe000ed20
 800abac:	2000001c 	.word	0x2000001c
 800abb0:	e000ef34 	.word	0xe000ef34

0800abb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	607b      	str	r3, [r7, #4]
}
 800abcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abce:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <vPortEnterCritical+0x58>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3301      	adds	r3, #1
 800abd4:	4a0d      	ldr	r2, [pc, #52]	; (800ac0c <vPortEnterCritical+0x58>)
 800abd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abd8:	4b0c      	ldr	r3, [pc, #48]	; (800ac0c <vPortEnterCritical+0x58>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d10f      	bne.n	800ac00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abe0:	4b0b      	ldr	r3, [pc, #44]	; (800ac10 <vPortEnterCritical+0x5c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <vPortEnterCritical+0x4c>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	603b      	str	r3, [r7, #0]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <vPortEnterCritical+0x4a>
	}
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	2000001c 	.word	0x2000001c
 800ac10:	e000ed04 	.word	0xe000ed04

0800ac14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac1a:	4b12      	ldr	r3, [pc, #72]	; (800ac64 <vPortExitCritical+0x50>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10a      	bne.n	800ac38 <vPortExitCritical+0x24>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	607b      	str	r3, [r7, #4]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <vPortExitCritical+0x50>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4a09      	ldr	r2, [pc, #36]	; (800ac64 <vPortExitCritical+0x50>)
 800ac40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac42:	4b08      	ldr	r3, [pc, #32]	; (800ac64 <vPortExitCritical+0x50>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d105      	bne.n	800ac56 <vPortExitCritical+0x42>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	f383 8811 	msr	BASEPRI, r3
}
 800ac54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	2000001c 	.word	0x2000001c
	...

0800ac70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac70:	f3ef 8009 	mrs	r0, PSP
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	4b15      	ldr	r3, [pc, #84]	; (800acd0 <pxCurrentTCBConst>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	f01e 0f10 	tst.w	lr, #16
 800ac80:	bf08      	it	eq
 800ac82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	6010      	str	r0, [r2, #0]
 800ac8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac94:	f380 8811 	msr	BASEPRI, r0
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f7fe feb6 	bl	8009a10 <vTaskSwitchContext>
 800aca4:	f04f 0000 	mov.w	r0, #0
 800aca8:	f380 8811 	msr	BASEPRI, r0
 800acac:	bc09      	pop	{r0, r3}
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	6808      	ldr	r0, [r1, #0]
 800acb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb6:	f01e 0f10 	tst.w	lr, #16
 800acba:	bf08      	it	eq
 800acbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acc0:	f380 8809 	msr	PSP, r0
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	f3af 8000 	nop.w

0800acd0 <pxCurrentTCBConst>:
 800acd0:	20000c14 	.word	0x20000c14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop

0800acd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	607b      	str	r3, [r7, #4]
}
 800acf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acf2:	f7fe fdd3 	bl	800989c <xTaskIncrementTick>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acfc:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <xPortSysTickHandler+0x40>)
 800acfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	2300      	movs	r3, #0
 800ad06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f383 8811 	msr	BASEPRI, r3
}
 800ad0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	e000ed04 	.word	0xe000ed04

0800ad1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad20:	4b0b      	ldr	r3, [pc, #44]	; (800ad50 <vPortSetupTimerInterrupt+0x34>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad26:	4b0b      	ldr	r3, [pc, #44]	; (800ad54 <vPortSetupTimerInterrupt+0x38>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad2c:	4b0a      	ldr	r3, [pc, #40]	; (800ad58 <vPortSetupTimerInterrupt+0x3c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a0a      	ldr	r2, [pc, #40]	; (800ad5c <vPortSetupTimerInterrupt+0x40>)
 800ad32:	fba2 2303 	umull	r2, r3, r2, r3
 800ad36:	099b      	lsrs	r3, r3, #6
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <vPortSetupTimerInterrupt+0x44>)
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad3e:	4b04      	ldr	r3, [pc, #16]	; (800ad50 <vPortSetupTimerInterrupt+0x34>)
 800ad40:	2207      	movs	r2, #7
 800ad42:	601a      	str	r2, [r3, #0]
}
 800ad44:	bf00      	nop
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	e000e010 	.word	0xe000e010
 800ad54:	e000e018 	.word	0xe000e018
 800ad58:	20000010 	.word	0x20000010
 800ad5c:	10624dd3 	.word	0x10624dd3
 800ad60:	e000e014 	.word	0xe000e014

0800ad64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad74 <vPortEnableVFP+0x10>
 800ad68:	6801      	ldr	r1, [r0, #0]
 800ad6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad6e:	6001      	str	r1, [r0, #0]
 800ad70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad72:	bf00      	nop
 800ad74:	e000ed88 	.word	0xe000ed88

0800ad78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad7e:	f3ef 8305 	mrs	r3, IPSR
 800ad82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b0f      	cmp	r3, #15
 800ad88:	d914      	bls.n	800adb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad8a:	4a17      	ldr	r2, [pc, #92]	; (800ade8 <vPortValidateInterruptPriority+0x70>)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad94:	4b15      	ldr	r3, [pc, #84]	; (800adec <vPortValidateInterruptPriority+0x74>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	7afa      	ldrb	r2, [r7, #11]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d20a      	bcs.n	800adb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	607b      	str	r3, [r7, #4]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adb4:	4b0e      	ldr	r3, [pc, #56]	; (800adf0 <vPortValidateInterruptPriority+0x78>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adbc:	4b0d      	ldr	r3, [pc, #52]	; (800adf4 <vPortValidateInterruptPriority+0x7c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d90a      	bls.n	800adda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	603b      	str	r3, [r7, #0]
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <vPortValidateInterruptPriority+0x60>
	}
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	e000e3f0 	.word	0xe000e3f0
 800adec:	20001240 	.word	0x20001240
 800adf0:	e000ed0c 	.word	0xe000ed0c
 800adf4:	20001244 	.word	0x20001244

0800adf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08a      	sub	sp, #40	; 0x28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae00:	2300      	movs	r3, #0
 800ae02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae04:	f7fe fc8e 	bl	8009724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae08:	4b5b      	ldr	r3, [pc, #364]	; (800af78 <pvPortMalloc+0x180>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae10:	f000 f920 	bl	800b054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae14:	4b59      	ldr	r3, [pc, #356]	; (800af7c <pvPortMalloc+0x184>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f040 8093 	bne.w	800af48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01d      	beq.n	800ae64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae28:	2208      	movs	r2, #8
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d014      	beq.n	800ae64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f023 0307 	bic.w	r3, r3, #7
 800ae40:	3308      	adds	r3, #8
 800ae42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <pvPortMalloc+0x6c>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	617b      	str	r3, [r7, #20]
}
 800ae60:	bf00      	nop
 800ae62:	e7fe      	b.n	800ae62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d06e      	beq.n	800af48 <pvPortMalloc+0x150>
 800ae6a:	4b45      	ldr	r3, [pc, #276]	; (800af80 <pvPortMalloc+0x188>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d869      	bhi.n	800af48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae74:	4b43      	ldr	r3, [pc, #268]	; (800af84 <pvPortMalloc+0x18c>)
 800ae76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae78:	4b42      	ldr	r3, [pc, #264]	; (800af84 <pvPortMalloc+0x18c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae7e:	e004      	b.n	800ae8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d903      	bls.n	800ae9c <pvPortMalloc+0xa4>
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f1      	bne.n	800ae80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae9c:	4b36      	ldr	r3, [pc, #216]	; (800af78 <pvPortMalloc+0x180>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d050      	beq.n	800af48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2208      	movs	r2, #8
 800aeac:	4413      	add	r3, r2
 800aeae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	2308      	movs	r3, #8
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d91f      	bls.n	800af08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4413      	add	r3, r2
 800aece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	f003 0307 	and.w	r3, r3, #7
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00a      	beq.n	800aef0 <pvPortMalloc+0xf8>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	613b      	str	r3, [r7, #16]
}
 800aeec:	bf00      	nop
 800aeee:	e7fe      	b.n	800aeee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	1ad2      	subs	r2, r2, r3
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af02:	69b8      	ldr	r0, [r7, #24]
 800af04:	f000 f908 	bl	800b118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af08:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <pvPortMalloc+0x188>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	4a1b      	ldr	r2, [pc, #108]	; (800af80 <pvPortMalloc+0x188>)
 800af14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af16:	4b1a      	ldr	r3, [pc, #104]	; (800af80 <pvPortMalloc+0x188>)
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	4b1b      	ldr	r3, [pc, #108]	; (800af88 <pvPortMalloc+0x190>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d203      	bcs.n	800af2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af22:	4b17      	ldr	r3, [pc, #92]	; (800af80 <pvPortMalloc+0x188>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a18      	ldr	r2, [pc, #96]	; (800af88 <pvPortMalloc+0x190>)
 800af28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	4b13      	ldr	r3, [pc, #76]	; (800af7c <pvPortMalloc+0x184>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	431a      	orrs	r2, r3
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3a:	2200      	movs	r2, #0
 800af3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <pvPortMalloc+0x194>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3301      	adds	r3, #1
 800af44:	4a11      	ldr	r2, [pc, #68]	; (800af8c <pvPortMalloc+0x194>)
 800af46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af48:	f7fe fbfa 	bl	8009740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	f003 0307 	and.w	r3, r3, #7
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00a      	beq.n	800af6c <pvPortMalloc+0x174>
	__asm volatile
 800af56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	60fb      	str	r3, [r7, #12]
}
 800af68:	bf00      	nop
 800af6a:	e7fe      	b.n	800af6a <pvPortMalloc+0x172>
	return pvReturn;
 800af6c:	69fb      	ldr	r3, [r7, #28]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3728      	adds	r7, #40	; 0x28
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20002650 	.word	0x20002650
 800af7c:	20002664 	.word	0x20002664
 800af80:	20002654 	.word	0x20002654
 800af84:	20002648 	.word	0x20002648
 800af88:	20002658 	.word	0x20002658
 800af8c:	2000265c 	.word	0x2000265c

0800af90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d04d      	beq.n	800b03e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afa2:	2308      	movs	r3, #8
 800afa4:	425b      	negs	r3, r3
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	4413      	add	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	685a      	ldr	r2, [r3, #4]
 800afb4:	4b24      	ldr	r3, [pc, #144]	; (800b048 <vPortFree+0xb8>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4013      	ands	r3, r2
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10a      	bne.n	800afd4 <vPortFree+0x44>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	60fb      	str	r3, [r7, #12]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00a      	beq.n	800aff2 <vPortFree+0x62>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	60bb      	str	r3, [r7, #8]
}
 800afee:	bf00      	nop
 800aff0:	e7fe      	b.n	800aff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	4b14      	ldr	r3, [pc, #80]	; (800b048 <vPortFree+0xb8>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4013      	ands	r3, r2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01e      	beq.n	800b03e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d11a      	bne.n	800b03e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	685a      	ldr	r2, [r3, #4]
 800b00c:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <vPortFree+0xb8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	43db      	mvns	r3, r3
 800b012:	401a      	ands	r2, r3
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b018:	f7fe fb84 	bl	8009724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <vPortFree+0xbc>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4413      	add	r3, r2
 800b026:	4a09      	ldr	r2, [pc, #36]	; (800b04c <vPortFree+0xbc>)
 800b028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b02a:	6938      	ldr	r0, [r7, #16]
 800b02c:	f000 f874 	bl	800b118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <vPortFree+0xc0>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3301      	adds	r3, #1
 800b036:	4a06      	ldr	r2, [pc, #24]	; (800b050 <vPortFree+0xc0>)
 800b038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b03a:	f7fe fb81 	bl	8009740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b03e:	bf00      	nop
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20002664 	.word	0x20002664
 800b04c:	20002654 	.word	0x20002654
 800b050:	20002660 	.word	0x20002660

0800b054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b05a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b060:	4b27      	ldr	r3, [pc, #156]	; (800b100 <prvHeapInit+0xac>)
 800b062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00c      	beq.n	800b088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3307      	adds	r3, #7
 800b072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0307 	bic.w	r3, r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <prvHeapInit+0xac>)
 800b084:	4413      	add	r3, r2
 800b086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b08c:	4a1d      	ldr	r2, [pc, #116]	; (800b104 <prvHeapInit+0xb0>)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b092:	4b1c      	ldr	r3, [pc, #112]	; (800b104 <prvHeapInit+0xb0>)
 800b094:	2200      	movs	r2, #0
 800b096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	4413      	add	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0a0:	2208      	movs	r2, #8
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0307 	bic.w	r3, r3, #7
 800b0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	4a15      	ldr	r2, [pc, #84]	; (800b108 <prvHeapInit+0xb4>)
 800b0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0b6:	4b14      	ldr	r3, [pc, #80]	; (800b108 <prvHeapInit+0xb4>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0be:	4b12      	ldr	r3, [pc, #72]	; (800b108 <prvHeapInit+0xb4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <prvHeapInit+0xb4>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	4a0a      	ldr	r2, [pc, #40]	; (800b10c <prvHeapInit+0xb8>)
 800b0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4a09      	ldr	r2, [pc, #36]	; (800b110 <prvHeapInit+0xbc>)
 800b0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <prvHeapInit+0xc0>)
 800b0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0f2:	601a      	str	r2, [r3, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	20001248 	.word	0x20001248
 800b104:	20002648 	.word	0x20002648
 800b108:	20002650 	.word	0x20002650
 800b10c:	20002658 	.word	0x20002658
 800b110:	20002654 	.word	0x20002654
 800b114:	20002664 	.word	0x20002664

0800b118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b120:	4b28      	ldr	r3, [pc, #160]	; (800b1c4 <prvInsertBlockIntoFreeList+0xac>)
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e002      	b.n	800b12c <prvInsertBlockIntoFreeList+0x14>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	429a      	cmp	r2, r3
 800b134:	d8f7      	bhi.n	800b126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	4413      	add	r3, r2
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d108      	bne.n	800b15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	441a      	add	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	441a      	add	r2, r3
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d118      	bne.n	800b1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	429a      	cmp	r2, r3
 800b178:	d00d      	beq.n	800b196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	441a      	add	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	e008      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	e003      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d002      	beq.n	800b1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b6:	bf00      	nop
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	20002648 	.word	0x20002648
 800b1c8:	20002650 	.word	0x20002650

0800b1cc <__errno>:
 800b1cc:	4b01      	ldr	r3, [pc, #4]	; (800b1d4 <__errno+0x8>)
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20000020 	.word	0x20000020

0800b1d8 <__libc_init_array>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	4d0d      	ldr	r5, [pc, #52]	; (800b210 <__libc_init_array+0x38>)
 800b1dc:	4c0d      	ldr	r4, [pc, #52]	; (800b214 <__libc_init_array+0x3c>)
 800b1de:	1b64      	subs	r4, r4, r5
 800b1e0:	10a4      	asrs	r4, r4, #2
 800b1e2:	2600      	movs	r6, #0
 800b1e4:	42a6      	cmp	r6, r4
 800b1e6:	d109      	bne.n	800b1fc <__libc_init_array+0x24>
 800b1e8:	4d0b      	ldr	r5, [pc, #44]	; (800b218 <__libc_init_array+0x40>)
 800b1ea:	4c0c      	ldr	r4, [pc, #48]	; (800b21c <__libc_init_array+0x44>)
 800b1ec:	f000 fcf8 	bl	800bbe0 <_init>
 800b1f0:	1b64      	subs	r4, r4, r5
 800b1f2:	10a4      	asrs	r4, r4, #2
 800b1f4:	2600      	movs	r6, #0
 800b1f6:	42a6      	cmp	r6, r4
 800b1f8:	d105      	bne.n	800b206 <__libc_init_array+0x2e>
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b200:	4798      	blx	r3
 800b202:	3601      	adds	r6, #1
 800b204:	e7ee      	b.n	800b1e4 <__libc_init_array+0xc>
 800b206:	f855 3b04 	ldr.w	r3, [r5], #4
 800b20a:	4798      	blx	r3
 800b20c:	3601      	adds	r6, #1
 800b20e:	e7f2      	b.n	800b1f6 <__libc_init_array+0x1e>
 800b210:	0800be34 	.word	0x0800be34
 800b214:	0800be34 	.word	0x0800be34
 800b218:	0800be34 	.word	0x0800be34
 800b21c:	0800be38 	.word	0x0800be38

0800b220 <__retarget_lock_acquire_recursive>:
 800b220:	4770      	bx	lr

0800b222 <__retarget_lock_release_recursive>:
 800b222:	4770      	bx	lr

0800b224 <memcpy>:
 800b224:	440a      	add	r2, r1
 800b226:	4291      	cmp	r1, r2
 800b228:	f100 33ff 	add.w	r3, r0, #4294967295
 800b22c:	d100      	bne.n	800b230 <memcpy+0xc>
 800b22e:	4770      	bx	lr
 800b230:	b510      	push	{r4, lr}
 800b232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b23a:	4291      	cmp	r1, r2
 800b23c:	d1f9      	bne.n	800b232 <memcpy+0xe>
 800b23e:	bd10      	pop	{r4, pc}

0800b240 <memset>:
 800b240:	4402      	add	r2, r0
 800b242:	4603      	mov	r3, r0
 800b244:	4293      	cmp	r3, r2
 800b246:	d100      	bne.n	800b24a <memset+0xa>
 800b248:	4770      	bx	lr
 800b24a:	f803 1b01 	strb.w	r1, [r3], #1
 800b24e:	e7f9      	b.n	800b244 <memset+0x4>

0800b250 <sbrk_aligned>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	4e0e      	ldr	r6, [pc, #56]	; (800b28c <sbrk_aligned+0x3c>)
 800b254:	460c      	mov	r4, r1
 800b256:	6831      	ldr	r1, [r6, #0]
 800b258:	4605      	mov	r5, r0
 800b25a:	b911      	cbnz	r1, 800b262 <sbrk_aligned+0x12>
 800b25c:	f000 f8f6 	bl	800b44c <_sbrk_r>
 800b260:	6030      	str	r0, [r6, #0]
 800b262:	4621      	mov	r1, r4
 800b264:	4628      	mov	r0, r5
 800b266:	f000 f8f1 	bl	800b44c <_sbrk_r>
 800b26a:	1c43      	adds	r3, r0, #1
 800b26c:	d00a      	beq.n	800b284 <sbrk_aligned+0x34>
 800b26e:	1cc4      	adds	r4, r0, #3
 800b270:	f024 0403 	bic.w	r4, r4, #3
 800b274:	42a0      	cmp	r0, r4
 800b276:	d007      	beq.n	800b288 <sbrk_aligned+0x38>
 800b278:	1a21      	subs	r1, r4, r0
 800b27a:	4628      	mov	r0, r5
 800b27c:	f000 f8e6 	bl	800b44c <_sbrk_r>
 800b280:	3001      	adds	r0, #1
 800b282:	d101      	bne.n	800b288 <sbrk_aligned+0x38>
 800b284:	f04f 34ff 	mov.w	r4, #4294967295
 800b288:	4620      	mov	r0, r4
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	20002670 	.word	0x20002670

0800b290 <_malloc_r>:
 800b290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b294:	1ccd      	adds	r5, r1, #3
 800b296:	f025 0503 	bic.w	r5, r5, #3
 800b29a:	3508      	adds	r5, #8
 800b29c:	2d0c      	cmp	r5, #12
 800b29e:	bf38      	it	cc
 800b2a0:	250c      	movcc	r5, #12
 800b2a2:	2d00      	cmp	r5, #0
 800b2a4:	4607      	mov	r7, r0
 800b2a6:	db01      	blt.n	800b2ac <_malloc_r+0x1c>
 800b2a8:	42a9      	cmp	r1, r5
 800b2aa:	d905      	bls.n	800b2b8 <_malloc_r+0x28>
 800b2ac:	230c      	movs	r3, #12
 800b2ae:	603b      	str	r3, [r7, #0]
 800b2b0:	2600      	movs	r6, #0
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b8:	4e2e      	ldr	r6, [pc, #184]	; (800b374 <_malloc_r+0xe4>)
 800b2ba:	f000 f8f7 	bl	800b4ac <__malloc_lock>
 800b2be:	6833      	ldr	r3, [r6, #0]
 800b2c0:	461c      	mov	r4, r3
 800b2c2:	bb34      	cbnz	r4, 800b312 <_malloc_r+0x82>
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	f7ff ffc2 	bl	800b250 <sbrk_aligned>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	d14d      	bne.n	800b36e <_malloc_r+0xde>
 800b2d2:	6834      	ldr	r4, [r6, #0]
 800b2d4:	4626      	mov	r6, r4
 800b2d6:	2e00      	cmp	r6, #0
 800b2d8:	d140      	bne.n	800b35c <_malloc_r+0xcc>
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	4631      	mov	r1, r6
 800b2de:	4638      	mov	r0, r7
 800b2e0:	eb04 0803 	add.w	r8, r4, r3
 800b2e4:	f000 f8b2 	bl	800b44c <_sbrk_r>
 800b2e8:	4580      	cmp	r8, r0
 800b2ea:	d13a      	bne.n	800b362 <_malloc_r+0xd2>
 800b2ec:	6821      	ldr	r1, [r4, #0]
 800b2ee:	3503      	adds	r5, #3
 800b2f0:	1a6d      	subs	r5, r5, r1
 800b2f2:	f025 0503 	bic.w	r5, r5, #3
 800b2f6:	3508      	adds	r5, #8
 800b2f8:	2d0c      	cmp	r5, #12
 800b2fa:	bf38      	it	cc
 800b2fc:	250c      	movcc	r5, #12
 800b2fe:	4629      	mov	r1, r5
 800b300:	4638      	mov	r0, r7
 800b302:	f7ff ffa5 	bl	800b250 <sbrk_aligned>
 800b306:	3001      	adds	r0, #1
 800b308:	d02b      	beq.n	800b362 <_malloc_r+0xd2>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	442b      	add	r3, r5
 800b30e:	6023      	str	r3, [r4, #0]
 800b310:	e00e      	b.n	800b330 <_malloc_r+0xa0>
 800b312:	6822      	ldr	r2, [r4, #0]
 800b314:	1b52      	subs	r2, r2, r5
 800b316:	d41e      	bmi.n	800b356 <_malloc_r+0xc6>
 800b318:	2a0b      	cmp	r2, #11
 800b31a:	d916      	bls.n	800b34a <_malloc_r+0xba>
 800b31c:	1961      	adds	r1, r4, r5
 800b31e:	42a3      	cmp	r3, r4
 800b320:	6025      	str	r5, [r4, #0]
 800b322:	bf18      	it	ne
 800b324:	6059      	strne	r1, [r3, #4]
 800b326:	6863      	ldr	r3, [r4, #4]
 800b328:	bf08      	it	eq
 800b32a:	6031      	streq	r1, [r6, #0]
 800b32c:	5162      	str	r2, [r4, r5]
 800b32e:	604b      	str	r3, [r1, #4]
 800b330:	4638      	mov	r0, r7
 800b332:	f104 060b 	add.w	r6, r4, #11
 800b336:	f000 f8bf 	bl	800b4b8 <__malloc_unlock>
 800b33a:	f026 0607 	bic.w	r6, r6, #7
 800b33e:	1d23      	adds	r3, r4, #4
 800b340:	1af2      	subs	r2, r6, r3
 800b342:	d0b6      	beq.n	800b2b2 <_malloc_r+0x22>
 800b344:	1b9b      	subs	r3, r3, r6
 800b346:	50a3      	str	r3, [r4, r2]
 800b348:	e7b3      	b.n	800b2b2 <_malloc_r+0x22>
 800b34a:	6862      	ldr	r2, [r4, #4]
 800b34c:	42a3      	cmp	r3, r4
 800b34e:	bf0c      	ite	eq
 800b350:	6032      	streq	r2, [r6, #0]
 800b352:	605a      	strne	r2, [r3, #4]
 800b354:	e7ec      	b.n	800b330 <_malloc_r+0xa0>
 800b356:	4623      	mov	r3, r4
 800b358:	6864      	ldr	r4, [r4, #4]
 800b35a:	e7b2      	b.n	800b2c2 <_malloc_r+0x32>
 800b35c:	4634      	mov	r4, r6
 800b35e:	6876      	ldr	r6, [r6, #4]
 800b360:	e7b9      	b.n	800b2d6 <_malloc_r+0x46>
 800b362:	230c      	movs	r3, #12
 800b364:	603b      	str	r3, [r7, #0]
 800b366:	4638      	mov	r0, r7
 800b368:	f000 f8a6 	bl	800b4b8 <__malloc_unlock>
 800b36c:	e7a1      	b.n	800b2b2 <_malloc_r+0x22>
 800b36e:	6025      	str	r5, [r4, #0]
 800b370:	e7de      	b.n	800b330 <_malloc_r+0xa0>
 800b372:	bf00      	nop
 800b374:	2000266c 	.word	0x2000266c

0800b378 <cleanup_glue>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	460c      	mov	r4, r1
 800b37c:	6809      	ldr	r1, [r1, #0]
 800b37e:	4605      	mov	r5, r0
 800b380:	b109      	cbz	r1, 800b386 <cleanup_glue+0xe>
 800b382:	f7ff fff9 	bl	800b378 <cleanup_glue>
 800b386:	4621      	mov	r1, r4
 800b388:	4628      	mov	r0, r5
 800b38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b38e:	f000 b899 	b.w	800b4c4 <_free_r>
	...

0800b394 <_reclaim_reent>:
 800b394:	4b2c      	ldr	r3, [pc, #176]	; (800b448 <_reclaim_reent+0xb4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4283      	cmp	r3, r0
 800b39a:	b570      	push	{r4, r5, r6, lr}
 800b39c:	4604      	mov	r4, r0
 800b39e:	d051      	beq.n	800b444 <_reclaim_reent+0xb0>
 800b3a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b3a2:	b143      	cbz	r3, 800b3b6 <_reclaim_reent+0x22>
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d14a      	bne.n	800b440 <_reclaim_reent+0xac>
 800b3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3ac:	6819      	ldr	r1, [r3, #0]
 800b3ae:	b111      	cbz	r1, 800b3b6 <_reclaim_reent+0x22>
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 f887 	bl	800b4c4 <_free_r>
 800b3b6:	6961      	ldr	r1, [r4, #20]
 800b3b8:	b111      	cbz	r1, 800b3c0 <_reclaim_reent+0x2c>
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 f882 	bl	800b4c4 <_free_r>
 800b3c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b3c2:	b111      	cbz	r1, 800b3ca <_reclaim_reent+0x36>
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f000 f87d 	bl	800b4c4 <_free_r>
 800b3ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b3cc:	b111      	cbz	r1, 800b3d4 <_reclaim_reent+0x40>
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 f878 	bl	800b4c4 <_free_r>
 800b3d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b3d6:	b111      	cbz	r1, 800b3de <_reclaim_reent+0x4a>
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 f873 	bl	800b4c4 <_free_r>
 800b3de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b3e0:	b111      	cbz	r1, 800b3e8 <_reclaim_reent+0x54>
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 f86e 	bl	800b4c4 <_free_r>
 800b3e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b3ea:	b111      	cbz	r1, 800b3f2 <_reclaim_reent+0x5e>
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f000 f869 	bl	800b4c4 <_free_r>
 800b3f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b3f4:	b111      	cbz	r1, 800b3fc <_reclaim_reent+0x68>
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f000 f864 	bl	800b4c4 <_free_r>
 800b3fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3fe:	b111      	cbz	r1, 800b406 <_reclaim_reent+0x72>
 800b400:	4620      	mov	r0, r4
 800b402:	f000 f85f 	bl	800b4c4 <_free_r>
 800b406:	69a3      	ldr	r3, [r4, #24]
 800b408:	b1e3      	cbz	r3, 800b444 <_reclaim_reent+0xb0>
 800b40a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b40c:	4620      	mov	r0, r4
 800b40e:	4798      	blx	r3
 800b410:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b412:	b1b9      	cbz	r1, 800b444 <_reclaim_reent+0xb0>
 800b414:	4620      	mov	r0, r4
 800b416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b41a:	f7ff bfad 	b.w	800b378 <cleanup_glue>
 800b41e:	5949      	ldr	r1, [r1, r5]
 800b420:	b941      	cbnz	r1, 800b434 <_reclaim_reent+0xa0>
 800b422:	3504      	adds	r5, #4
 800b424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b426:	2d80      	cmp	r5, #128	; 0x80
 800b428:	68d9      	ldr	r1, [r3, #12]
 800b42a:	d1f8      	bne.n	800b41e <_reclaim_reent+0x8a>
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 f849 	bl	800b4c4 <_free_r>
 800b432:	e7ba      	b.n	800b3aa <_reclaim_reent+0x16>
 800b434:	680e      	ldr	r6, [r1, #0]
 800b436:	4620      	mov	r0, r4
 800b438:	f000 f844 	bl	800b4c4 <_free_r>
 800b43c:	4631      	mov	r1, r6
 800b43e:	e7ef      	b.n	800b420 <_reclaim_reent+0x8c>
 800b440:	2500      	movs	r5, #0
 800b442:	e7ef      	b.n	800b424 <_reclaim_reent+0x90>
 800b444:	bd70      	pop	{r4, r5, r6, pc}
 800b446:	bf00      	nop
 800b448:	20000020 	.word	0x20000020

0800b44c <_sbrk_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4d06      	ldr	r5, [pc, #24]	; (800b468 <_sbrk_r+0x1c>)
 800b450:	2300      	movs	r3, #0
 800b452:	4604      	mov	r4, r0
 800b454:	4608      	mov	r0, r1
 800b456:	602b      	str	r3, [r5, #0]
 800b458:	f7f6 fa32 	bl	80018c0 <_sbrk>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d102      	bne.n	800b466 <_sbrk_r+0x1a>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	b103      	cbz	r3, 800b466 <_sbrk_r+0x1a>
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	bd38      	pop	{r3, r4, r5, pc}
 800b468:	20002674 	.word	0x20002674

0800b46c <siprintf>:
 800b46c:	b40e      	push	{r1, r2, r3}
 800b46e:	b500      	push	{lr}
 800b470:	b09c      	sub	sp, #112	; 0x70
 800b472:	ab1d      	add	r3, sp, #116	; 0x74
 800b474:	9002      	str	r0, [sp, #8]
 800b476:	9006      	str	r0, [sp, #24]
 800b478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b47c:	4809      	ldr	r0, [pc, #36]	; (800b4a4 <siprintf+0x38>)
 800b47e:	9107      	str	r1, [sp, #28]
 800b480:	9104      	str	r1, [sp, #16]
 800b482:	4909      	ldr	r1, [pc, #36]	; (800b4a8 <siprintf+0x3c>)
 800b484:	f853 2b04 	ldr.w	r2, [r3], #4
 800b488:	9105      	str	r1, [sp, #20]
 800b48a:	6800      	ldr	r0, [r0, #0]
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	a902      	add	r1, sp, #8
 800b490:	f000 f8c0 	bl	800b614 <_svfiprintf_r>
 800b494:	9b02      	ldr	r3, [sp, #8]
 800b496:	2200      	movs	r2, #0
 800b498:	701a      	strb	r2, [r3, #0]
 800b49a:	b01c      	add	sp, #112	; 0x70
 800b49c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4a0:	b003      	add	sp, #12
 800b4a2:	4770      	bx	lr
 800b4a4:	20000020 	.word	0x20000020
 800b4a8:	ffff0208 	.word	0xffff0208

0800b4ac <__malloc_lock>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	; (800b4b4 <__malloc_lock+0x8>)
 800b4ae:	f7ff beb7 	b.w	800b220 <__retarget_lock_acquire_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	20002668 	.word	0x20002668

0800b4b8 <__malloc_unlock>:
 800b4b8:	4801      	ldr	r0, [pc, #4]	; (800b4c0 <__malloc_unlock+0x8>)
 800b4ba:	f7ff beb2 	b.w	800b222 <__retarget_lock_release_recursive>
 800b4be:	bf00      	nop
 800b4c0:	20002668 	.word	0x20002668

0800b4c4 <_free_r>:
 800b4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	d044      	beq.n	800b554 <_free_r+0x90>
 800b4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ce:	9001      	str	r0, [sp, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4d6:	bfb8      	it	lt
 800b4d8:	18e4      	addlt	r4, r4, r3
 800b4da:	f7ff ffe7 	bl	800b4ac <__malloc_lock>
 800b4de:	4a1e      	ldr	r2, [pc, #120]	; (800b558 <_free_r+0x94>)
 800b4e0:	9801      	ldr	r0, [sp, #4]
 800b4e2:	6813      	ldr	r3, [r2, #0]
 800b4e4:	b933      	cbnz	r3, 800b4f4 <_free_r+0x30>
 800b4e6:	6063      	str	r3, [r4, #4]
 800b4e8:	6014      	str	r4, [r2, #0]
 800b4ea:	b003      	add	sp, #12
 800b4ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4f0:	f7ff bfe2 	b.w	800b4b8 <__malloc_unlock>
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	d908      	bls.n	800b50a <_free_r+0x46>
 800b4f8:	6825      	ldr	r5, [r4, #0]
 800b4fa:	1961      	adds	r1, r4, r5
 800b4fc:	428b      	cmp	r3, r1
 800b4fe:	bf01      	itttt	eq
 800b500:	6819      	ldreq	r1, [r3, #0]
 800b502:	685b      	ldreq	r3, [r3, #4]
 800b504:	1949      	addeq	r1, r1, r5
 800b506:	6021      	streq	r1, [r4, #0]
 800b508:	e7ed      	b.n	800b4e6 <_free_r+0x22>
 800b50a:	461a      	mov	r2, r3
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	b10b      	cbz	r3, 800b514 <_free_r+0x50>
 800b510:	42a3      	cmp	r3, r4
 800b512:	d9fa      	bls.n	800b50a <_free_r+0x46>
 800b514:	6811      	ldr	r1, [r2, #0]
 800b516:	1855      	adds	r5, r2, r1
 800b518:	42a5      	cmp	r5, r4
 800b51a:	d10b      	bne.n	800b534 <_free_r+0x70>
 800b51c:	6824      	ldr	r4, [r4, #0]
 800b51e:	4421      	add	r1, r4
 800b520:	1854      	adds	r4, r2, r1
 800b522:	42a3      	cmp	r3, r4
 800b524:	6011      	str	r1, [r2, #0]
 800b526:	d1e0      	bne.n	800b4ea <_free_r+0x26>
 800b528:	681c      	ldr	r4, [r3, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	6053      	str	r3, [r2, #4]
 800b52e:	4421      	add	r1, r4
 800b530:	6011      	str	r1, [r2, #0]
 800b532:	e7da      	b.n	800b4ea <_free_r+0x26>
 800b534:	d902      	bls.n	800b53c <_free_r+0x78>
 800b536:	230c      	movs	r3, #12
 800b538:	6003      	str	r3, [r0, #0]
 800b53a:	e7d6      	b.n	800b4ea <_free_r+0x26>
 800b53c:	6825      	ldr	r5, [r4, #0]
 800b53e:	1961      	adds	r1, r4, r5
 800b540:	428b      	cmp	r3, r1
 800b542:	bf04      	itt	eq
 800b544:	6819      	ldreq	r1, [r3, #0]
 800b546:	685b      	ldreq	r3, [r3, #4]
 800b548:	6063      	str	r3, [r4, #4]
 800b54a:	bf04      	itt	eq
 800b54c:	1949      	addeq	r1, r1, r5
 800b54e:	6021      	streq	r1, [r4, #0]
 800b550:	6054      	str	r4, [r2, #4]
 800b552:	e7ca      	b.n	800b4ea <_free_r+0x26>
 800b554:	b003      	add	sp, #12
 800b556:	bd30      	pop	{r4, r5, pc}
 800b558:	2000266c 	.word	0x2000266c

0800b55c <__ssputs_r>:
 800b55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b560:	688e      	ldr	r6, [r1, #8]
 800b562:	429e      	cmp	r6, r3
 800b564:	4682      	mov	sl, r0
 800b566:	460c      	mov	r4, r1
 800b568:	4690      	mov	r8, r2
 800b56a:	461f      	mov	r7, r3
 800b56c:	d838      	bhi.n	800b5e0 <__ssputs_r+0x84>
 800b56e:	898a      	ldrh	r2, [r1, #12]
 800b570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b574:	d032      	beq.n	800b5dc <__ssputs_r+0x80>
 800b576:	6825      	ldr	r5, [r4, #0]
 800b578:	6909      	ldr	r1, [r1, #16]
 800b57a:	eba5 0901 	sub.w	r9, r5, r1
 800b57e:	6965      	ldr	r5, [r4, #20]
 800b580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b588:	3301      	adds	r3, #1
 800b58a:	444b      	add	r3, r9
 800b58c:	106d      	asrs	r5, r5, #1
 800b58e:	429d      	cmp	r5, r3
 800b590:	bf38      	it	cc
 800b592:	461d      	movcc	r5, r3
 800b594:	0553      	lsls	r3, r2, #21
 800b596:	d531      	bpl.n	800b5fc <__ssputs_r+0xa0>
 800b598:	4629      	mov	r1, r5
 800b59a:	f7ff fe79 	bl	800b290 <_malloc_r>
 800b59e:	4606      	mov	r6, r0
 800b5a0:	b950      	cbnz	r0, 800b5b8 <__ssputs_r+0x5c>
 800b5a2:	230c      	movs	r3, #12
 800b5a4:	f8ca 3000 	str.w	r3, [sl]
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ae:	81a3      	strh	r3, [r4, #12]
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b8:	6921      	ldr	r1, [r4, #16]
 800b5ba:	464a      	mov	r2, r9
 800b5bc:	f7ff fe32 	bl	800b224 <memcpy>
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	6126      	str	r6, [r4, #16]
 800b5ce:	6165      	str	r5, [r4, #20]
 800b5d0:	444e      	add	r6, r9
 800b5d2:	eba5 0509 	sub.w	r5, r5, r9
 800b5d6:	6026      	str	r6, [r4, #0]
 800b5d8:	60a5      	str	r5, [r4, #8]
 800b5da:	463e      	mov	r6, r7
 800b5dc:	42be      	cmp	r6, r7
 800b5de:	d900      	bls.n	800b5e2 <__ssputs_r+0x86>
 800b5e0:	463e      	mov	r6, r7
 800b5e2:	6820      	ldr	r0, [r4, #0]
 800b5e4:	4632      	mov	r2, r6
 800b5e6:	4641      	mov	r1, r8
 800b5e8:	f000 faa8 	bl	800bb3c <memmove>
 800b5ec:	68a3      	ldr	r3, [r4, #8]
 800b5ee:	1b9b      	subs	r3, r3, r6
 800b5f0:	60a3      	str	r3, [r4, #8]
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	4433      	add	r3, r6
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	e7db      	b.n	800b5b4 <__ssputs_r+0x58>
 800b5fc:	462a      	mov	r2, r5
 800b5fe:	f000 fab7 	bl	800bb70 <_realloc_r>
 800b602:	4606      	mov	r6, r0
 800b604:	2800      	cmp	r0, #0
 800b606:	d1e1      	bne.n	800b5cc <__ssputs_r+0x70>
 800b608:	6921      	ldr	r1, [r4, #16]
 800b60a:	4650      	mov	r0, sl
 800b60c:	f7ff ff5a 	bl	800b4c4 <_free_r>
 800b610:	e7c7      	b.n	800b5a2 <__ssputs_r+0x46>
	...

0800b614 <_svfiprintf_r>:
 800b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b618:	4698      	mov	r8, r3
 800b61a:	898b      	ldrh	r3, [r1, #12]
 800b61c:	061b      	lsls	r3, r3, #24
 800b61e:	b09d      	sub	sp, #116	; 0x74
 800b620:	4607      	mov	r7, r0
 800b622:	460d      	mov	r5, r1
 800b624:	4614      	mov	r4, r2
 800b626:	d50e      	bpl.n	800b646 <_svfiprintf_r+0x32>
 800b628:	690b      	ldr	r3, [r1, #16]
 800b62a:	b963      	cbnz	r3, 800b646 <_svfiprintf_r+0x32>
 800b62c:	2140      	movs	r1, #64	; 0x40
 800b62e:	f7ff fe2f 	bl	800b290 <_malloc_r>
 800b632:	6028      	str	r0, [r5, #0]
 800b634:	6128      	str	r0, [r5, #16]
 800b636:	b920      	cbnz	r0, 800b642 <_svfiprintf_r+0x2e>
 800b638:	230c      	movs	r3, #12
 800b63a:	603b      	str	r3, [r7, #0]
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	e0d1      	b.n	800b7e6 <_svfiprintf_r+0x1d2>
 800b642:	2340      	movs	r3, #64	; 0x40
 800b644:	616b      	str	r3, [r5, #20]
 800b646:	2300      	movs	r3, #0
 800b648:	9309      	str	r3, [sp, #36]	; 0x24
 800b64a:	2320      	movs	r3, #32
 800b64c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b650:	f8cd 800c 	str.w	r8, [sp, #12]
 800b654:	2330      	movs	r3, #48	; 0x30
 800b656:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b800 <_svfiprintf_r+0x1ec>
 800b65a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b65e:	f04f 0901 	mov.w	r9, #1
 800b662:	4623      	mov	r3, r4
 800b664:	469a      	mov	sl, r3
 800b666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b66a:	b10a      	cbz	r2, 800b670 <_svfiprintf_r+0x5c>
 800b66c:	2a25      	cmp	r2, #37	; 0x25
 800b66e:	d1f9      	bne.n	800b664 <_svfiprintf_r+0x50>
 800b670:	ebba 0b04 	subs.w	fp, sl, r4
 800b674:	d00b      	beq.n	800b68e <_svfiprintf_r+0x7a>
 800b676:	465b      	mov	r3, fp
 800b678:	4622      	mov	r2, r4
 800b67a:	4629      	mov	r1, r5
 800b67c:	4638      	mov	r0, r7
 800b67e:	f7ff ff6d 	bl	800b55c <__ssputs_r>
 800b682:	3001      	adds	r0, #1
 800b684:	f000 80aa 	beq.w	800b7dc <_svfiprintf_r+0x1c8>
 800b688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b68a:	445a      	add	r2, fp
 800b68c:	9209      	str	r2, [sp, #36]	; 0x24
 800b68e:	f89a 3000 	ldrb.w	r3, [sl]
 800b692:	2b00      	cmp	r3, #0
 800b694:	f000 80a2 	beq.w	800b7dc <_svfiprintf_r+0x1c8>
 800b698:	2300      	movs	r3, #0
 800b69a:	f04f 32ff 	mov.w	r2, #4294967295
 800b69e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6a2:	f10a 0a01 	add.w	sl, sl, #1
 800b6a6:	9304      	str	r3, [sp, #16]
 800b6a8:	9307      	str	r3, [sp, #28]
 800b6aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b6b0:	4654      	mov	r4, sl
 800b6b2:	2205      	movs	r2, #5
 800b6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b8:	4851      	ldr	r0, [pc, #324]	; (800b800 <_svfiprintf_r+0x1ec>)
 800b6ba:	f7f4 fdb1 	bl	8000220 <memchr>
 800b6be:	9a04      	ldr	r2, [sp, #16]
 800b6c0:	b9d8      	cbnz	r0, 800b6fa <_svfiprintf_r+0xe6>
 800b6c2:	06d0      	lsls	r0, r2, #27
 800b6c4:	bf44      	itt	mi
 800b6c6:	2320      	movmi	r3, #32
 800b6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6cc:	0711      	lsls	r1, r2, #28
 800b6ce:	bf44      	itt	mi
 800b6d0:	232b      	movmi	r3, #43	; 0x2b
 800b6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6da:	2b2a      	cmp	r3, #42	; 0x2a
 800b6dc:	d015      	beq.n	800b70a <_svfiprintf_r+0xf6>
 800b6de:	9a07      	ldr	r2, [sp, #28]
 800b6e0:	4654      	mov	r4, sl
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	f04f 0c0a 	mov.w	ip, #10
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6ee:	3b30      	subs	r3, #48	; 0x30
 800b6f0:	2b09      	cmp	r3, #9
 800b6f2:	d94e      	bls.n	800b792 <_svfiprintf_r+0x17e>
 800b6f4:	b1b0      	cbz	r0, 800b724 <_svfiprintf_r+0x110>
 800b6f6:	9207      	str	r2, [sp, #28]
 800b6f8:	e014      	b.n	800b724 <_svfiprintf_r+0x110>
 800b6fa:	eba0 0308 	sub.w	r3, r0, r8
 800b6fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b702:	4313      	orrs	r3, r2
 800b704:	9304      	str	r3, [sp, #16]
 800b706:	46a2      	mov	sl, r4
 800b708:	e7d2      	b.n	800b6b0 <_svfiprintf_r+0x9c>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	1d19      	adds	r1, r3, #4
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	9103      	str	r1, [sp, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	bfbb      	ittet	lt
 800b716:	425b      	neglt	r3, r3
 800b718:	f042 0202 	orrlt.w	r2, r2, #2
 800b71c:	9307      	strge	r3, [sp, #28]
 800b71e:	9307      	strlt	r3, [sp, #28]
 800b720:	bfb8      	it	lt
 800b722:	9204      	strlt	r2, [sp, #16]
 800b724:	7823      	ldrb	r3, [r4, #0]
 800b726:	2b2e      	cmp	r3, #46	; 0x2e
 800b728:	d10c      	bne.n	800b744 <_svfiprintf_r+0x130>
 800b72a:	7863      	ldrb	r3, [r4, #1]
 800b72c:	2b2a      	cmp	r3, #42	; 0x2a
 800b72e:	d135      	bne.n	800b79c <_svfiprintf_r+0x188>
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	1d1a      	adds	r2, r3, #4
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	9203      	str	r2, [sp, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	bfb8      	it	lt
 800b73c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b740:	3402      	adds	r4, #2
 800b742:	9305      	str	r3, [sp, #20]
 800b744:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b810 <_svfiprintf_r+0x1fc>
 800b748:	7821      	ldrb	r1, [r4, #0]
 800b74a:	2203      	movs	r2, #3
 800b74c:	4650      	mov	r0, sl
 800b74e:	f7f4 fd67 	bl	8000220 <memchr>
 800b752:	b140      	cbz	r0, 800b766 <_svfiprintf_r+0x152>
 800b754:	2340      	movs	r3, #64	; 0x40
 800b756:	eba0 000a 	sub.w	r0, r0, sl
 800b75a:	fa03 f000 	lsl.w	r0, r3, r0
 800b75e:	9b04      	ldr	r3, [sp, #16]
 800b760:	4303      	orrs	r3, r0
 800b762:	3401      	adds	r4, #1
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76a:	4826      	ldr	r0, [pc, #152]	; (800b804 <_svfiprintf_r+0x1f0>)
 800b76c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b770:	2206      	movs	r2, #6
 800b772:	f7f4 fd55 	bl	8000220 <memchr>
 800b776:	2800      	cmp	r0, #0
 800b778:	d038      	beq.n	800b7ec <_svfiprintf_r+0x1d8>
 800b77a:	4b23      	ldr	r3, [pc, #140]	; (800b808 <_svfiprintf_r+0x1f4>)
 800b77c:	bb1b      	cbnz	r3, 800b7c6 <_svfiprintf_r+0x1b2>
 800b77e:	9b03      	ldr	r3, [sp, #12]
 800b780:	3307      	adds	r3, #7
 800b782:	f023 0307 	bic.w	r3, r3, #7
 800b786:	3308      	adds	r3, #8
 800b788:	9303      	str	r3, [sp, #12]
 800b78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78c:	4433      	add	r3, r6
 800b78e:	9309      	str	r3, [sp, #36]	; 0x24
 800b790:	e767      	b.n	800b662 <_svfiprintf_r+0x4e>
 800b792:	fb0c 3202 	mla	r2, ip, r2, r3
 800b796:	460c      	mov	r4, r1
 800b798:	2001      	movs	r0, #1
 800b79a:	e7a5      	b.n	800b6e8 <_svfiprintf_r+0xd4>
 800b79c:	2300      	movs	r3, #0
 800b79e:	3401      	adds	r4, #1
 800b7a0:	9305      	str	r3, [sp, #20]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	f04f 0c0a 	mov.w	ip, #10
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ae:	3a30      	subs	r2, #48	; 0x30
 800b7b0:	2a09      	cmp	r2, #9
 800b7b2:	d903      	bls.n	800b7bc <_svfiprintf_r+0x1a8>
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d0c5      	beq.n	800b744 <_svfiprintf_r+0x130>
 800b7b8:	9105      	str	r1, [sp, #20]
 800b7ba:	e7c3      	b.n	800b744 <_svfiprintf_r+0x130>
 800b7bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e7f0      	b.n	800b7a8 <_svfiprintf_r+0x194>
 800b7c6:	ab03      	add	r3, sp, #12
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	462a      	mov	r2, r5
 800b7cc:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <_svfiprintf_r+0x1f8>)
 800b7ce:	a904      	add	r1, sp, #16
 800b7d0:	4638      	mov	r0, r7
 800b7d2:	f3af 8000 	nop.w
 800b7d6:	1c42      	adds	r2, r0, #1
 800b7d8:	4606      	mov	r6, r0
 800b7da:	d1d6      	bne.n	800b78a <_svfiprintf_r+0x176>
 800b7dc:	89ab      	ldrh	r3, [r5, #12]
 800b7de:	065b      	lsls	r3, r3, #25
 800b7e0:	f53f af2c 	bmi.w	800b63c <_svfiprintf_r+0x28>
 800b7e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7e6:	b01d      	add	sp, #116	; 0x74
 800b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	ab03      	add	r3, sp, #12
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	462a      	mov	r2, r5
 800b7f2:	4b06      	ldr	r3, [pc, #24]	; (800b80c <_svfiprintf_r+0x1f8>)
 800b7f4:	a904      	add	r1, sp, #16
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	f000 f87a 	bl	800b8f0 <_printf_i>
 800b7fc:	e7eb      	b.n	800b7d6 <_svfiprintf_r+0x1c2>
 800b7fe:	bf00      	nop
 800b800:	0800bdf8 	.word	0x0800bdf8
 800b804:	0800be02 	.word	0x0800be02
 800b808:	00000000 	.word	0x00000000
 800b80c:	0800b55d 	.word	0x0800b55d
 800b810:	0800bdfe 	.word	0x0800bdfe

0800b814 <_printf_common>:
 800b814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b818:	4616      	mov	r6, r2
 800b81a:	4699      	mov	r9, r3
 800b81c:	688a      	ldr	r2, [r1, #8]
 800b81e:	690b      	ldr	r3, [r1, #16]
 800b820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b824:	4293      	cmp	r3, r2
 800b826:	bfb8      	it	lt
 800b828:	4613      	movlt	r3, r2
 800b82a:	6033      	str	r3, [r6, #0]
 800b82c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b830:	4607      	mov	r7, r0
 800b832:	460c      	mov	r4, r1
 800b834:	b10a      	cbz	r2, 800b83a <_printf_common+0x26>
 800b836:	3301      	adds	r3, #1
 800b838:	6033      	str	r3, [r6, #0]
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	0699      	lsls	r1, r3, #26
 800b83e:	bf42      	ittt	mi
 800b840:	6833      	ldrmi	r3, [r6, #0]
 800b842:	3302      	addmi	r3, #2
 800b844:	6033      	strmi	r3, [r6, #0]
 800b846:	6825      	ldr	r5, [r4, #0]
 800b848:	f015 0506 	ands.w	r5, r5, #6
 800b84c:	d106      	bne.n	800b85c <_printf_common+0x48>
 800b84e:	f104 0a19 	add.w	sl, r4, #25
 800b852:	68e3      	ldr	r3, [r4, #12]
 800b854:	6832      	ldr	r2, [r6, #0]
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	42ab      	cmp	r3, r5
 800b85a:	dc26      	bgt.n	800b8aa <_printf_common+0x96>
 800b85c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b860:	1e13      	subs	r3, r2, #0
 800b862:	6822      	ldr	r2, [r4, #0]
 800b864:	bf18      	it	ne
 800b866:	2301      	movne	r3, #1
 800b868:	0692      	lsls	r2, r2, #26
 800b86a:	d42b      	bmi.n	800b8c4 <_printf_common+0xb0>
 800b86c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b870:	4649      	mov	r1, r9
 800b872:	4638      	mov	r0, r7
 800b874:	47c0      	blx	r8
 800b876:	3001      	adds	r0, #1
 800b878:	d01e      	beq.n	800b8b8 <_printf_common+0xa4>
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	68e5      	ldr	r5, [r4, #12]
 800b87e:	6832      	ldr	r2, [r6, #0]
 800b880:	f003 0306 	and.w	r3, r3, #6
 800b884:	2b04      	cmp	r3, #4
 800b886:	bf08      	it	eq
 800b888:	1aad      	subeq	r5, r5, r2
 800b88a:	68a3      	ldr	r3, [r4, #8]
 800b88c:	6922      	ldr	r2, [r4, #16]
 800b88e:	bf0c      	ite	eq
 800b890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b894:	2500      	movne	r5, #0
 800b896:	4293      	cmp	r3, r2
 800b898:	bfc4      	itt	gt
 800b89a:	1a9b      	subgt	r3, r3, r2
 800b89c:	18ed      	addgt	r5, r5, r3
 800b89e:	2600      	movs	r6, #0
 800b8a0:	341a      	adds	r4, #26
 800b8a2:	42b5      	cmp	r5, r6
 800b8a4:	d11a      	bne.n	800b8dc <_printf_common+0xc8>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e008      	b.n	800b8bc <_printf_common+0xa8>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	4652      	mov	r2, sl
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	47c0      	blx	r8
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	d103      	bne.n	800b8c0 <_printf_common+0xac>
 800b8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c0:	3501      	adds	r5, #1
 800b8c2:	e7c6      	b.n	800b852 <_printf_common+0x3e>
 800b8c4:	18e1      	adds	r1, r4, r3
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	2030      	movs	r0, #48	; 0x30
 800b8ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8ce:	4422      	add	r2, r4
 800b8d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8d8:	3302      	adds	r3, #2
 800b8da:	e7c7      	b.n	800b86c <_printf_common+0x58>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	4622      	mov	r2, r4
 800b8e0:	4649      	mov	r1, r9
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	47c0      	blx	r8
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	d0e6      	beq.n	800b8b8 <_printf_common+0xa4>
 800b8ea:	3601      	adds	r6, #1
 800b8ec:	e7d9      	b.n	800b8a2 <_printf_common+0x8e>
	...

0800b8f0 <_printf_i>:
 800b8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f4:	7e0f      	ldrb	r7, [r1, #24]
 800b8f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8f8:	2f78      	cmp	r7, #120	; 0x78
 800b8fa:	4691      	mov	r9, r2
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	469a      	mov	sl, r3
 800b902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b906:	d807      	bhi.n	800b918 <_printf_i+0x28>
 800b908:	2f62      	cmp	r7, #98	; 0x62
 800b90a:	d80a      	bhi.n	800b922 <_printf_i+0x32>
 800b90c:	2f00      	cmp	r7, #0
 800b90e:	f000 80d8 	beq.w	800bac2 <_printf_i+0x1d2>
 800b912:	2f58      	cmp	r7, #88	; 0x58
 800b914:	f000 80a3 	beq.w	800ba5e <_printf_i+0x16e>
 800b918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b91c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b920:	e03a      	b.n	800b998 <_printf_i+0xa8>
 800b922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b926:	2b15      	cmp	r3, #21
 800b928:	d8f6      	bhi.n	800b918 <_printf_i+0x28>
 800b92a:	a101      	add	r1, pc, #4	; (adr r1, 800b930 <_printf_i+0x40>)
 800b92c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b930:	0800b989 	.word	0x0800b989
 800b934:	0800b99d 	.word	0x0800b99d
 800b938:	0800b919 	.word	0x0800b919
 800b93c:	0800b919 	.word	0x0800b919
 800b940:	0800b919 	.word	0x0800b919
 800b944:	0800b919 	.word	0x0800b919
 800b948:	0800b99d 	.word	0x0800b99d
 800b94c:	0800b919 	.word	0x0800b919
 800b950:	0800b919 	.word	0x0800b919
 800b954:	0800b919 	.word	0x0800b919
 800b958:	0800b919 	.word	0x0800b919
 800b95c:	0800baa9 	.word	0x0800baa9
 800b960:	0800b9cd 	.word	0x0800b9cd
 800b964:	0800ba8b 	.word	0x0800ba8b
 800b968:	0800b919 	.word	0x0800b919
 800b96c:	0800b919 	.word	0x0800b919
 800b970:	0800bacb 	.word	0x0800bacb
 800b974:	0800b919 	.word	0x0800b919
 800b978:	0800b9cd 	.word	0x0800b9cd
 800b97c:	0800b919 	.word	0x0800b919
 800b980:	0800b919 	.word	0x0800b919
 800b984:	0800ba93 	.word	0x0800ba93
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	1d1a      	adds	r2, r3, #4
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	602a      	str	r2, [r5, #0]
 800b990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b998:	2301      	movs	r3, #1
 800b99a:	e0a3      	b.n	800bae4 <_printf_i+0x1f4>
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	6829      	ldr	r1, [r5, #0]
 800b9a0:	0606      	lsls	r6, r0, #24
 800b9a2:	f101 0304 	add.w	r3, r1, #4
 800b9a6:	d50a      	bpl.n	800b9be <_printf_i+0xce>
 800b9a8:	680e      	ldr	r6, [r1, #0]
 800b9aa:	602b      	str	r3, [r5, #0]
 800b9ac:	2e00      	cmp	r6, #0
 800b9ae:	da03      	bge.n	800b9b8 <_printf_i+0xc8>
 800b9b0:	232d      	movs	r3, #45	; 0x2d
 800b9b2:	4276      	negs	r6, r6
 800b9b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9b8:	485e      	ldr	r0, [pc, #376]	; (800bb34 <_printf_i+0x244>)
 800b9ba:	230a      	movs	r3, #10
 800b9bc:	e019      	b.n	800b9f2 <_printf_i+0x102>
 800b9be:	680e      	ldr	r6, [r1, #0]
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9c6:	bf18      	it	ne
 800b9c8:	b236      	sxthne	r6, r6
 800b9ca:	e7ef      	b.n	800b9ac <_printf_i+0xbc>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	6820      	ldr	r0, [r4, #0]
 800b9d0:	1d19      	adds	r1, r3, #4
 800b9d2:	6029      	str	r1, [r5, #0]
 800b9d4:	0601      	lsls	r1, r0, #24
 800b9d6:	d501      	bpl.n	800b9dc <_printf_i+0xec>
 800b9d8:	681e      	ldr	r6, [r3, #0]
 800b9da:	e002      	b.n	800b9e2 <_printf_i+0xf2>
 800b9dc:	0646      	lsls	r6, r0, #25
 800b9de:	d5fb      	bpl.n	800b9d8 <_printf_i+0xe8>
 800b9e0:	881e      	ldrh	r6, [r3, #0]
 800b9e2:	4854      	ldr	r0, [pc, #336]	; (800bb34 <_printf_i+0x244>)
 800b9e4:	2f6f      	cmp	r7, #111	; 0x6f
 800b9e6:	bf0c      	ite	eq
 800b9e8:	2308      	moveq	r3, #8
 800b9ea:	230a      	movne	r3, #10
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9f2:	6865      	ldr	r5, [r4, #4]
 800b9f4:	60a5      	str	r5, [r4, #8]
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	bfa2      	ittt	ge
 800b9fa:	6821      	ldrge	r1, [r4, #0]
 800b9fc:	f021 0104 	bicge.w	r1, r1, #4
 800ba00:	6021      	strge	r1, [r4, #0]
 800ba02:	b90e      	cbnz	r6, 800ba08 <_printf_i+0x118>
 800ba04:	2d00      	cmp	r5, #0
 800ba06:	d04d      	beq.n	800baa4 <_printf_i+0x1b4>
 800ba08:	4615      	mov	r5, r2
 800ba0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba0e:	fb03 6711 	mls	r7, r3, r1, r6
 800ba12:	5dc7      	ldrb	r7, [r0, r7]
 800ba14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba18:	4637      	mov	r7, r6
 800ba1a:	42bb      	cmp	r3, r7
 800ba1c:	460e      	mov	r6, r1
 800ba1e:	d9f4      	bls.n	800ba0a <_printf_i+0x11a>
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	d10b      	bne.n	800ba3c <_printf_i+0x14c>
 800ba24:	6823      	ldr	r3, [r4, #0]
 800ba26:	07de      	lsls	r6, r3, #31
 800ba28:	d508      	bpl.n	800ba3c <_printf_i+0x14c>
 800ba2a:	6923      	ldr	r3, [r4, #16]
 800ba2c:	6861      	ldr	r1, [r4, #4]
 800ba2e:	4299      	cmp	r1, r3
 800ba30:	bfde      	ittt	le
 800ba32:	2330      	movle	r3, #48	; 0x30
 800ba34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba3c:	1b52      	subs	r2, r2, r5
 800ba3e:	6122      	str	r2, [r4, #16]
 800ba40:	f8cd a000 	str.w	sl, [sp]
 800ba44:	464b      	mov	r3, r9
 800ba46:	aa03      	add	r2, sp, #12
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	f7ff fee2 	bl	800b814 <_printf_common>
 800ba50:	3001      	adds	r0, #1
 800ba52:	d14c      	bne.n	800baee <_printf_i+0x1fe>
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295
 800ba58:	b004      	add	sp, #16
 800ba5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba5e:	4835      	ldr	r0, [pc, #212]	; (800bb34 <_printf_i+0x244>)
 800ba60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba64:	6829      	ldr	r1, [r5, #0]
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba6c:	6029      	str	r1, [r5, #0]
 800ba6e:	061d      	lsls	r5, r3, #24
 800ba70:	d514      	bpl.n	800ba9c <_printf_i+0x1ac>
 800ba72:	07df      	lsls	r7, r3, #31
 800ba74:	bf44      	itt	mi
 800ba76:	f043 0320 	orrmi.w	r3, r3, #32
 800ba7a:	6023      	strmi	r3, [r4, #0]
 800ba7c:	b91e      	cbnz	r6, 800ba86 <_printf_i+0x196>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	f023 0320 	bic.w	r3, r3, #32
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	2310      	movs	r3, #16
 800ba88:	e7b0      	b.n	800b9ec <_printf_i+0xfc>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	f043 0320 	orr.w	r3, r3, #32
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	2378      	movs	r3, #120	; 0x78
 800ba94:	4828      	ldr	r0, [pc, #160]	; (800bb38 <_printf_i+0x248>)
 800ba96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba9a:	e7e3      	b.n	800ba64 <_printf_i+0x174>
 800ba9c:	0659      	lsls	r1, r3, #25
 800ba9e:	bf48      	it	mi
 800baa0:	b2b6      	uxthmi	r6, r6
 800baa2:	e7e6      	b.n	800ba72 <_printf_i+0x182>
 800baa4:	4615      	mov	r5, r2
 800baa6:	e7bb      	b.n	800ba20 <_printf_i+0x130>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	6826      	ldr	r6, [r4, #0]
 800baac:	6961      	ldr	r1, [r4, #20]
 800baae:	1d18      	adds	r0, r3, #4
 800bab0:	6028      	str	r0, [r5, #0]
 800bab2:	0635      	lsls	r5, r6, #24
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	d501      	bpl.n	800babc <_printf_i+0x1cc>
 800bab8:	6019      	str	r1, [r3, #0]
 800baba:	e002      	b.n	800bac2 <_printf_i+0x1d2>
 800babc:	0670      	lsls	r0, r6, #25
 800babe:	d5fb      	bpl.n	800bab8 <_printf_i+0x1c8>
 800bac0:	8019      	strh	r1, [r3, #0]
 800bac2:	2300      	movs	r3, #0
 800bac4:	6123      	str	r3, [r4, #16]
 800bac6:	4615      	mov	r5, r2
 800bac8:	e7ba      	b.n	800ba40 <_printf_i+0x150>
 800baca:	682b      	ldr	r3, [r5, #0]
 800bacc:	1d1a      	adds	r2, r3, #4
 800bace:	602a      	str	r2, [r5, #0]
 800bad0:	681d      	ldr	r5, [r3, #0]
 800bad2:	6862      	ldr	r2, [r4, #4]
 800bad4:	2100      	movs	r1, #0
 800bad6:	4628      	mov	r0, r5
 800bad8:	f7f4 fba2 	bl	8000220 <memchr>
 800badc:	b108      	cbz	r0, 800bae2 <_printf_i+0x1f2>
 800bade:	1b40      	subs	r0, r0, r5
 800bae0:	6060      	str	r0, [r4, #4]
 800bae2:	6863      	ldr	r3, [r4, #4]
 800bae4:	6123      	str	r3, [r4, #16]
 800bae6:	2300      	movs	r3, #0
 800bae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baec:	e7a8      	b.n	800ba40 <_printf_i+0x150>
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	462a      	mov	r2, r5
 800baf2:	4649      	mov	r1, r9
 800baf4:	4640      	mov	r0, r8
 800baf6:	47d0      	blx	sl
 800baf8:	3001      	adds	r0, #1
 800bafa:	d0ab      	beq.n	800ba54 <_printf_i+0x164>
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	079b      	lsls	r3, r3, #30
 800bb00:	d413      	bmi.n	800bb2a <_printf_i+0x23a>
 800bb02:	68e0      	ldr	r0, [r4, #12]
 800bb04:	9b03      	ldr	r3, [sp, #12]
 800bb06:	4298      	cmp	r0, r3
 800bb08:	bfb8      	it	lt
 800bb0a:	4618      	movlt	r0, r3
 800bb0c:	e7a4      	b.n	800ba58 <_printf_i+0x168>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	4632      	mov	r2, r6
 800bb12:	4649      	mov	r1, r9
 800bb14:	4640      	mov	r0, r8
 800bb16:	47d0      	blx	sl
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d09b      	beq.n	800ba54 <_printf_i+0x164>
 800bb1c:	3501      	adds	r5, #1
 800bb1e:	68e3      	ldr	r3, [r4, #12]
 800bb20:	9903      	ldr	r1, [sp, #12]
 800bb22:	1a5b      	subs	r3, r3, r1
 800bb24:	42ab      	cmp	r3, r5
 800bb26:	dcf2      	bgt.n	800bb0e <_printf_i+0x21e>
 800bb28:	e7eb      	b.n	800bb02 <_printf_i+0x212>
 800bb2a:	2500      	movs	r5, #0
 800bb2c:	f104 0619 	add.w	r6, r4, #25
 800bb30:	e7f5      	b.n	800bb1e <_printf_i+0x22e>
 800bb32:	bf00      	nop
 800bb34:	0800be09 	.word	0x0800be09
 800bb38:	0800be1a 	.word	0x0800be1a

0800bb3c <memmove>:
 800bb3c:	4288      	cmp	r0, r1
 800bb3e:	b510      	push	{r4, lr}
 800bb40:	eb01 0402 	add.w	r4, r1, r2
 800bb44:	d902      	bls.n	800bb4c <memmove+0x10>
 800bb46:	4284      	cmp	r4, r0
 800bb48:	4623      	mov	r3, r4
 800bb4a:	d807      	bhi.n	800bb5c <memmove+0x20>
 800bb4c:	1e43      	subs	r3, r0, #1
 800bb4e:	42a1      	cmp	r1, r4
 800bb50:	d008      	beq.n	800bb64 <memmove+0x28>
 800bb52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb5a:	e7f8      	b.n	800bb4e <memmove+0x12>
 800bb5c:	4402      	add	r2, r0
 800bb5e:	4601      	mov	r1, r0
 800bb60:	428a      	cmp	r2, r1
 800bb62:	d100      	bne.n	800bb66 <memmove+0x2a>
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb6e:	e7f7      	b.n	800bb60 <memmove+0x24>

0800bb70 <_realloc_r>:
 800bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb74:	4680      	mov	r8, r0
 800bb76:	4614      	mov	r4, r2
 800bb78:	460e      	mov	r6, r1
 800bb7a:	b921      	cbnz	r1, 800bb86 <_realloc_r+0x16>
 800bb7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb80:	4611      	mov	r1, r2
 800bb82:	f7ff bb85 	b.w	800b290 <_malloc_r>
 800bb86:	b92a      	cbnz	r2, 800bb94 <_realloc_r+0x24>
 800bb88:	f7ff fc9c 	bl	800b4c4 <_free_r>
 800bb8c:	4625      	mov	r5, r4
 800bb8e:	4628      	mov	r0, r5
 800bb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb94:	f000 f81b 	bl	800bbce <_malloc_usable_size_r>
 800bb98:	4284      	cmp	r4, r0
 800bb9a:	4607      	mov	r7, r0
 800bb9c:	d802      	bhi.n	800bba4 <_realloc_r+0x34>
 800bb9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bba2:	d812      	bhi.n	800bbca <_realloc_r+0x5a>
 800bba4:	4621      	mov	r1, r4
 800bba6:	4640      	mov	r0, r8
 800bba8:	f7ff fb72 	bl	800b290 <_malloc_r>
 800bbac:	4605      	mov	r5, r0
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d0ed      	beq.n	800bb8e <_realloc_r+0x1e>
 800bbb2:	42bc      	cmp	r4, r7
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	bf28      	it	cs
 800bbba:	463a      	movcs	r2, r7
 800bbbc:	f7ff fb32 	bl	800b224 <memcpy>
 800bbc0:	4631      	mov	r1, r6
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	f7ff fc7e 	bl	800b4c4 <_free_r>
 800bbc8:	e7e1      	b.n	800bb8e <_realloc_r+0x1e>
 800bbca:	4635      	mov	r5, r6
 800bbcc:	e7df      	b.n	800bb8e <_realloc_r+0x1e>

0800bbce <_malloc_usable_size_r>:
 800bbce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbd2:	1f18      	subs	r0, r3, #4
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bfbc      	itt	lt
 800bbd8:	580b      	ldrlt	r3, [r1, r0]
 800bbda:	18c0      	addlt	r0, r0, r3
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <_init>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	bf00      	nop
 800bbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe6:	bc08      	pop	{r3}
 800bbe8:	469e      	mov	lr, r3
 800bbea:	4770      	bx	lr

0800bbec <_fini>:
 800bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbee:	bf00      	nop
 800bbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf2:	bc08      	pop	{r3}
 800bbf4:	469e      	mov	lr, r3
 800bbf6:	4770      	bx	lr
