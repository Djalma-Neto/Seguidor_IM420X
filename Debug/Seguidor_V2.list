
Seguidor_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a178  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a59c  0800a59c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a59c  0800a59c  0001a59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a4  0800a5a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a4  0800a5a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a8  0800a5a8  0001a5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a5ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002544  20000074  0800a620  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025b8  0800a620  000225b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021016  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb0  00000000  00000000  000410ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00045070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  000469a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296c5  00000000  00000000  00048158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d38b  00000000  00000000  0007181d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001070bf  00000000  00000000  0008eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f08  00000000  00000000  00195cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a340 	.word	0x0800a340

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800a340 	.word	0x0800a340

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 80005c8:	4a1c      	ldr	r2, [pc, #112]	; (800063c <MX_FREERTOS_Init+0x78>)
 80005ca:	2101      	movs	r1, #1
 80005cc:	2001      	movs	r0, #1
 80005ce:	f005 ffe8 	bl	80065a2 <osSemaphoreNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <MX_FREERTOS_Init+0x7c>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 80005d8:	4a1a      	ldr	r2, [pc, #104]	; (8000644 <MX_FREERTOS_Init+0x80>)
 80005da:	2101      	movs	r1, #1
 80005dc:	2001      	movs	r0, #1
 80005de:	f005 ffe0 	bl	80065a2 <osSemaphoreNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a18      	ldr	r2, [pc, #96]	; (8000648 <MX_FREERTOS_Init+0x84>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 80005e8:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_FREERTOS_Init+0x88>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <MX_FREERTOS_Init+0x8c>)
 80005ee:	f005 ff2b 	bl	8006448 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_FREERTOS_Init+0x90>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <MX_FREERTOS_Init+0x94>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <MX_FREERTOS_Init+0x98>)
 80005fe:	f005 ff23 	bl	8006448 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <MX_FREERTOS_Init+0x9c>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000608:	4a16      	ldr	r2, [pc, #88]	; (8000664 <MX_FREERTOS_Init+0xa0>)
 800060a:	2100      	movs	r1, #0
 800060c:	4816      	ldr	r0, [pc, #88]	; (8000668 <MX_FREERTOS_Init+0xa4>)
 800060e:	f005 ff1b 	bl	8006448 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a15      	ldr	r2, [pc, #84]	; (800066c <MX_FREERTOS_Init+0xa8>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000618:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MX_FREERTOS_Init+0xac>)
 800061a:	2100      	movs	r1, #0
 800061c:	4815      	ldr	r0, [pc, #84]	; (8000674 <MX_FREERTOS_Init+0xb0>)
 800061e:	f005 ff13 	bl	8006448 <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <MX_FREERTOS_Init+0xb4>)
 8000626:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <MX_FREERTOS_Init+0xb8>)
 800062a:	2100      	movs	r1, #0
 800062c:	4814      	ldr	r0, [pc, #80]	; (8000680 <MX_FREERTOS_Init+0xbc>)
 800062e:	f005 ff0b 	bl	8006448 <osThreadNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_FREERTOS_Init+0xc0>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	0800a4a8 	.word	0x0800a4a8
 8000640:	20000130 	.word	0x20000130
 8000644:	0800a4b8 	.word	0x0800a4b8
 8000648:	20000134 	.word	0x20000134
 800064c:	0800a3f4 	.word	0x0800a3f4
 8000650:	08000689 	.word	0x08000689
 8000654:	2000011c 	.word	0x2000011c
 8000658:	0800a418 	.word	0x0800a418
 800065c:	080006a5 	.word	0x080006a5
 8000660:	20000120 	.word	0x20000120
 8000664:	0800a43c 	.word	0x0800a43c
 8000668:	08000701 	.word	0x08000701
 800066c:	20000124 	.word	0x20000124
 8000670:	0800a460 	.word	0x0800a460
 8000674:	08000915 	.word	0x08000915
 8000678:	20000128 	.word	0x20000128
 800067c:	0800a484 	.word	0x0800a484
 8000680:	080009d1 	.word	0x080009d1
 8000684:	2000012c 	.word	0x2000012c

08000688 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  /* Infinite loop */
	for(;;)
	{
		//__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
		htim2.Instance->CCR1 = 5;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <FunctionUltrassom+0x18>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2205      	movs	r2, #5
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(200);
 8000698:	20c8      	movs	r0, #200	; 0xc8
 800069a:	f005 ff67 	bl	800656c <osDelay>
		htim2.Instance->CCR1 = 5;
 800069e:	e7f7      	b.n	8000690 <FunctionUltrassom+0x8>
 80006a0:	20000188 	.word	0x20000188

080006a4 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  //sprintf(mostrar,"D: %d, V1: %d, V2: %d, DIF: %d \r \n ",(int)distancia,(int)valor1,(int)valor2,(int)diferenca);
	  //sprintf(cMostrar,"S2: %d, S3: %d, S4: %d \r \n ",(int)uiS2,(int)uiS3,(int)uiS4);
	  //sprintf(cMostrar,"Time: %d, value: %d \r \n ",uiTime1,uiFistPulseValue1);
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <FunctionComunica+0x44>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	21c8      	movs	r1, #200	; 0xc8
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fffe 	bl	80066b4 <osSemaphoreAcquire>
	  sprintf(cMostrar, "motor_E/s: %ld, motor_D/s: %ld \r \n",liPulsePerSecond1,liPulsePerSecond2);
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <FunctionComunica+0x48>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <FunctionComunica+0x4c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <FunctionComunica+0x50>)
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <FunctionComunica+0x54>)
 80006c4:	f009 fa82 	bl	8009bcc <siprintf>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	2264      	movs	r2, #100	; 0x64
 80006cc:	490a      	ldr	r1, [pc, #40]	; (80006f8 <FunctionComunica+0x54>)
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <FunctionComunica+0x58>)
 80006d0:	f004 fbf4 	bl	8004ebc <HAL_UART_Transmit>
	  osSemaphoreRelease(SemaphoreComunicaHandle);
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <FunctionComunica+0x44>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 f83d 	bl	8006758 <osSemaphoreRelease>
	  osDelay(100);
 80006de:	2064      	movs	r0, #100	; 0x64
 80006e0:	f005 ff44 	bl	800656c <osDelay>
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80006e4:	e7e2      	b.n	80006ac <FunctionComunica+0x8>
 80006e6:	bf00      	nop
 80006e8:	20000134 	.word	0x20000134
 80006ec:	200000a8 	.word	0x200000a8
 80006f0:	200000b0 	.word	0x200000b0
 80006f4:	0800a3b8 	.word	0x0800a3b8
 80006f8:	200000b8 	.word	0x200000b8
 80006fc:	20000304 	.word	0x20000304

08000700 <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8000708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f001 fc44 	bl	8001f9c <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8000718:	2120      	movs	r1, #32
 800071a:	4875      	ldr	r0, [pc, #468]	; (80008f0 <FunctionSeguidor+0x1f0>)
 800071c:	f001 fc3e 	bl	8001f9c <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8000724:	2140      	movs	r1, #64	; 0x40
 8000726:	4872      	ldr	r0, [pc, #456]	; (80008f0 <FunctionSeguidor+0x1f0>)
 8000728:	f001 fc38 	bl	8001f9c <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	737b      	strb	r3, [r7, #13]

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	486e      	ldr	r0, [pc, #440]	; (80008f0 <FunctionSeguidor+0x1f0>)
 8000736:	f001 fc31 	bl	8001f9c <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <FunctionSeguidor+0x1f4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	21c8      	movs	r1, #200	; 0xc8
 8000744:	4618      	mov	r0, r3
 8000746:	f005 ffb5 	bl	80066b4 <osSemaphoreAcquire>

    if(uiBTN){
 800074a:	7b3b      	ldrb	r3, [r7, #12]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d028      	beq.n	80007a2 <FunctionSeguidor+0xa2>
    	uiIN1 = 0;
 8000750:	4b69      	ldr	r3, [pc, #420]	; (80008f8 <FunctionSeguidor+0x1f8>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
    	uiIN2 = 0;
 8000756:	4b69      	ldr	r3, [pc, #420]	; (80008fc <FunctionSeguidor+0x1fc>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]

    	uiIN3 = 0;
 800075c:	4b68      	ldr	r3, [pc, #416]	; (8000900 <FunctionSeguidor+0x200>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
    	uiIN4 = 0;
 8000762:	4b68      	ldr	r3, [pc, #416]	; (8000904 <FunctionSeguidor+0x204>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
    	uiStart = uiStart?0:1;
 8000768:	4b67      	ldr	r3, [pc, #412]	; (8000908 <FunctionSeguidor+0x208>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	bf0c      	ite	eq
 8000770:	2301      	moveq	r3, #1
 8000772:	2300      	movne	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	4b63      	ldr	r3, [pc, #396]	; (8000908 <FunctionSeguidor+0x208>)
 800077a:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2104      	movs	r1, #4
 8000780:	4862      	ldr	r0, [pc, #392]	; (800090c <FunctionSeguidor+0x20c>)
 8000782:	f001 fc23 	bl	8001fcc <HAL_GPIO_WritePin>
		osDelay(500);
 8000786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078a:	f005 feef 	bl	800656c <osDelay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2104      	movs	r1, #4
 8000792:	485e      	ldr	r0, [pc, #376]	; (800090c <FunctionSeguidor+0x20c>)
 8000794:	f001 fc1a 	bl	8001fcc <HAL_GPIO_WritePin>
		osDelay(500);
 8000798:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079c:	f005 fee6 	bl	800656c <osDelay>
 80007a0:	e099      	b.n	80008d6 <FunctionSeguidor+0x1d6>
    }else if(uiS2 && !uiS3 && uiS4 && uiStart){
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d016      	beq.n	80007d6 <FunctionSeguidor+0xd6>
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d113      	bne.n	80007d6 <FunctionSeguidor+0xd6>
 80007ae:	7b7b      	ldrb	r3, [r7, #13]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d010      	beq.n	80007d6 <FunctionSeguidor+0xd6>
 80007b4:	4b54      	ldr	r3, [pc, #336]	; (8000908 <FunctionSeguidor+0x208>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00c      	beq.n	80007d6 <FunctionSeguidor+0xd6>
    	uiIN1 = 1;
 80007bc:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <FunctionSeguidor+0x1f8>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
    	uiIN2 = 0;
 80007c2:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <FunctionSeguidor+0x1fc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]

    	uiIN3 = 0;
 80007c8:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <FunctionSeguidor+0x200>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
    	uiIN4 = 1;
 80007ce:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <FunctionSeguidor+0x204>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e07f      	b.n	80008d6 <FunctionSeguidor+0x1d6>
    }else if(uiS2 && uiS3 && !uiS4 && uiStart){
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d016      	beq.n	800080a <FunctionSeguidor+0x10a>
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d013      	beq.n	800080a <FunctionSeguidor+0x10a>
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d110      	bne.n	800080a <FunctionSeguidor+0x10a>
 80007e8:	4b47      	ldr	r3, [pc, #284]	; (8000908 <FunctionSeguidor+0x208>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00c      	beq.n	800080a <FunctionSeguidor+0x10a>
    	uiIN1 = 1;
 80007f0:	4b41      	ldr	r3, [pc, #260]	; (80008f8 <FunctionSeguidor+0x1f8>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
    	uiIN2 = 0;
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <FunctionSeguidor+0x1fc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]

    	uiIN3 = 0;
 80007fc:	4b40      	ldr	r3, [pc, #256]	; (8000900 <FunctionSeguidor+0x200>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
    	uiIN4 = 0;
 8000802:	4b40      	ldr	r3, [pc, #256]	; (8000904 <FunctionSeguidor+0x204>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	e065      	b.n	80008d6 <FunctionSeguidor+0x1d6>
    }else if(!uiS2 && uiS3 && uiS4 && uiStart){
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d116      	bne.n	800083e <FunctionSeguidor+0x13e>
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d013      	beq.n	800083e <FunctionSeguidor+0x13e>
 8000816:	7b7b      	ldrb	r3, [r7, #13]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d010      	beq.n	800083e <FunctionSeguidor+0x13e>
 800081c:	4b3a      	ldr	r3, [pc, #232]	; (8000908 <FunctionSeguidor+0x208>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <FunctionSeguidor+0x13e>
    	uiIN1 = 0;
 8000824:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <FunctionSeguidor+0x1f8>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
    	uiIN2 = 0;
 800082a:	4b34      	ldr	r3, [pc, #208]	; (80008fc <FunctionSeguidor+0x1fc>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]

    	uiIN3 = 0;
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <FunctionSeguidor+0x200>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
    	uiIN4 = 1;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <FunctionSeguidor+0x204>)
 8000838:	2201      	movs	r2, #1
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	e04b      	b.n	80008d6 <FunctionSeguidor+0x1d6>
    }else if(((uiS2 && uiS3 && uiS4) || (uiS2 && !uiS3 && uiS4)) && uiStart){
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d005      	beq.n	8000850 <FunctionSeguidor+0x150>
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <FunctionSeguidor+0x150>
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d108      	bne.n	8000862 <FunctionSeguidor+0x162>
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d016      	beq.n	8000884 <FunctionSeguidor+0x184>
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d113      	bne.n	8000884 <FunctionSeguidor+0x184>
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d010      	beq.n	8000884 <FunctionSeguidor+0x184>
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <FunctionSeguidor+0x208>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00c      	beq.n	8000884 <FunctionSeguidor+0x184>
    	uiIN1 = 0;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <FunctionSeguidor+0x1f8>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
    	uiIN2 = 0;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <FunctionSeguidor+0x1fc>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]

    	uiIN3 = 0;
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <FunctionSeguidor+0x200>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
    	uiIN4 = 0;
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <FunctionSeguidor+0x204>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	e028      	b.n	80008d6 <FunctionSeguidor+0x1d6>

    } else if(!uiS2 && !uiS3 && !uiS4 && uiStart){
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d125      	bne.n	80008d6 <FunctionSeguidor+0x1d6>
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d122      	bne.n	80008d6 <FunctionSeguidor+0x1d6>
 8000890:	7b7b      	ldrb	r3, [r7, #13]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d11f      	bne.n	80008d6 <FunctionSeguidor+0x1d6>
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <FunctionSeguidor+0x208>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d01b      	beq.n	80008d6 <FunctionSeguidor+0x1d6>
    	uiIN1 = 0;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <FunctionSeguidor+0x1f8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
		uiIN2 = 0;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <FunctionSeguidor+0x1fc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]

		uiIN3 = 0;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <FunctionSeguidor+0x200>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
		uiIN4 = 0;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <FunctionSeguidor+0x204>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2104      	movs	r1, #4
 80008ba:	4814      	ldr	r0, [pc, #80]	; (800090c <FunctionSeguidor+0x20c>)
 80008bc:	f001 fb86 	bl	8001fcc <HAL_GPIO_WritePin>
    	osDelay(100);
 80008c0:	2064      	movs	r0, #100	; 0x64
 80008c2:	f005 fe53 	bl	800656c <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2104      	movs	r1, #4
 80008ca:	4810      	ldr	r0, [pc, #64]	; (800090c <FunctionSeguidor+0x20c>)
 80008cc:	f001 fb7e 	bl	8001fcc <HAL_GPIO_WritePin>
    	osDelay(100);
 80008d0:	2064      	movs	r0, #100	; 0x64
 80008d2:	f005 fe4b 	bl	800656c <osDelay>
    }
    uiVelocidadeRef = 80;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <FunctionSeguidor+0x210>)
 80008d8:	2250      	movs	r2, #80	; 0x50
 80008da:	701a      	strb	r2, [r3, #0]

    osSemaphoreRelease(SemaphoreMovimentaHandle);
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <FunctionSeguidor+0x1f4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 ff39 	bl	8006758 <osSemaphoreRelease>
    osDelay(200);
 80008e6:	20c8      	movs	r0, #200	; 0xc8
 80008e8:	f005 fe40 	bl	800656c <osDelay>
  {
 80008ec:	e70c      	b.n	8000708 <FunctionSeguidor+0x8>
 80008ee:	bf00      	nop
 80008f0:	48000800 	.word	0x48000800
 80008f4:	20000130 	.word	0x20000130
 80008f8:	20000090 	.word	0x20000090
 80008fc:	20000094 	.word	0x20000094
 8000900:	20000098 	.word	0x20000098
 8000904:	2000009c 	.word	0x2000009c
 8000908:	200000b4 	.word	0x200000b4
 800090c:	48000c00 	.word	0x48000c00
 8000910:	200000a0 	.word	0x200000a0

08000914 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800091c:	2100      	movs	r1, #0
 800091e:	4823      	ldr	r0, [pc, #140]	; (80009ac <FunctionAtivarMotores+0x98>)
 8000920:	f002 fcc4 	bl	80032ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000924:	2104      	movs	r1, #4
 8000926:	4821      	ldr	r0, [pc, #132]	; (80009ac <FunctionAtivarMotores+0x98>)
 8000928:	f002 fcc0 	bl	80032ac <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <FunctionAtivarMotores+0x9c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	21c8      	movs	r1, #200	; 0xc8
 8000932:	4618      	mov	r0, r3
 8000934:	f005 febe 	bl	80066b4 <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, uiIN1);
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <FunctionAtivarMotores+0xa0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	461a      	mov	r2, r3
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f001 fb40 	bl	8001fcc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, uiIN2);
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <FunctionAtivarMotores+0xa4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f001 fb36 	bl	8001fcc <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, uiIN3);
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <FunctionAtivarMotores+0xa8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	461a      	mov	r2, r3
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4815      	ldr	r0, [pc, #84]	; (80009c0 <FunctionAtivarMotores+0xac>)
 800096c:	f001 fb2e 	bl	8001fcc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, uiIN4);
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <FunctionAtivarMotores+0xb0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	2140      	movs	r1, #64	; 0x40
 800097a:	4813      	ldr	r0, [pc, #76]	; (80009c8 <FunctionAtivarMotores+0xb4>)
 800097c:	f001 fb26 	bl	8001fcc <HAL_GPIO_WritePin>
	  htim3.Instance->CCR1 = uiVelocidadeRef;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <FunctionAtivarMotores+0xb8>)
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <FunctionAtivarMotores+0x98>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = uiVelocidadeRef+30;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <FunctionAtivarMotores+0xb8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f103 021e 	add.w	r2, r3, #30
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <FunctionAtivarMotores+0x98>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

	  //htim3.Instance->CCR1 = 85;
	  //htim3.Instance->CCR2 = 85;
	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <FunctionAtivarMotores+0x9c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f005 fedb 	bl	8006758 <osSemaphoreRelease>
	  osDelay(200);
 80009a2:	20c8      	movs	r0, #200	; 0xc8
 80009a4:	f005 fde2 	bl	800656c <osDelay>
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80009a8:	e7c0      	b.n	800092c <FunctionAtivarMotores+0x18>
 80009aa:	bf00      	nop
 80009ac:	200001d4 	.word	0x200001d4
 80009b0:	20000130 	.word	0x20000130
 80009b4:	20000090 	.word	0x20000090
 80009b8:	20000094 	.word	0x20000094
 80009bc:	20000098 	.word	0x20000098
 80009c0:	48000800 	.word	0x48000800
 80009c4:	2000009c 	.word	0x2000009c
 80009c8:	48000400 	.word	0x48000400
 80009cc:	200000a0 	.word	0x200000a0

080009d0 <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <FunctionOdometria+0x28>)
 80009dc:	f002 fdd0 	bl	8003580 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80009e0:	2104      	movs	r1, #4
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <FunctionOdometria+0x2c>)
 80009e4:	f002 fdcc 	bl	8003580 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <FunctionOdometria+0x30>)
 80009ea:	f002 fb85 	bl	80030f8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 80009ee:	2064      	movs	r0, #100	; 0x64
 80009f0:	f005 fdbc 	bl	800656c <osDelay>
 80009f4:	e7fb      	b.n	80009ee <FunctionOdometria+0x1e>
 80009f6:	bf00      	nop
 80009f8:	20000220 	.word	0x20000220
 80009fc:	2000026c 	.word	0x2000026c
 8000a00:	200002b8 	.word	0x200002b8

08000a04 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){//encoder Esquerdo
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d105      	bne.n	8000a20 <HAL_TIM_IC_CaptureCallback+0x1c>
		liOldPulsePerSecond1++;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000a1c:	6013      	str	r3, [r2, #0]
	}else if(htim == &htim5){//encoder Direito
		liOldPulsePerSecond2++;
	}
}
 8000a1e:	e008      	b.n	8000a32 <HAL_TIM_IC_CaptureCallback+0x2e>
	}else if(htim == &htim5){//encoder Direito
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d104      	bne.n	8000a32 <HAL_TIM_IC_CaptureCallback+0x2e>
		liOldPulsePerSecond2++;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_TIM_IC_CaptureCallback+0x48>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_TIM_IC_CaptureCallback+0x48>)
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000220 	.word	0x20000220
 8000a44:	200000a4 	.word	0x200000a4
 8000a48:	2000026c 	.word	0x2000026c
 8000a4c:	200000ac 	.word	0x200000ac

08000a50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d10d      	bne.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0x2c>
		liPulsePerSecond1 = liOldPulsePerSecond1;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a66:	6013      	str	r3, [r2, #0]
		liPulsePerSecond2 = liOldPulsePerSecond2;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a6e:	6013      	str	r3, [r2, #0]
		liOldPulsePerSecond1 = 0;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
		liOldPulsePerSecond2 = 0;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	200002b8 	.word	0x200002b8
 8000a8c:	200000a4 	.word	0x200000a4
 8000a90:	200000a8 	.word	0x200000a8
 8000a94:	200000ac 	.word	0x200000ac
 8000a98:	200000b0 	.word	0x200000b0

08000a9c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b4f      	ldr	r3, [pc, #316]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a4e      	ldr	r2, [pc, #312]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b4c      	ldr	r3, [pc, #304]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b49      	ldr	r3, [pc, #292]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4b43      	ldr	r3, [pc, #268]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a42      	ldr	r2, [pc, #264]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a3c      	ldr	r2, [pc, #240]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x154>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f001 fa56 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	4833      	ldr	r0, [pc, #204]	; (8000bf4 <MX_GPIO_Init+0x158>)
 8000b26:	f001 fa51 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4832      	ldr	r0, [pc, #200]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000b30:	f001 fa4c 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	4830      	ldr	r0, [pc, #192]	; (8000bfc <MX_GPIO_Init+0x160>)
 8000b3a:	f001 fa47 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|CLP_Pin
 8000b3e:	f242 3360 	movw	r3, #9056	; 0x2360
 8000b42:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4828      	ldr	r0, [pc, #160]	; (8000bf4 <MX_GPIO_Init+0x158>)
 8000b54:	f001 f8a0 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin;
 8000b58:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f001 f890 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <MX_GPIO_Init+0x158>)
 8000b90:	f001 f882 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f001 f874 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000bc8:	f001 f866 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN4_Pin;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x160>)
 8000be4:	f001 f858 	bl	8001c98 <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000800 	.word	0x48000800
 8000bf8:	48000c00 	.word	0x48000c00
 8000bfc:	48000400 	.word	0x48000400

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fe07 	bl	8001816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f817 	bl	8000c3a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f7ff ff46 	bl	8000a9c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c10:	f000 f940 	bl	8000e94 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c14:	f000 f998 	bl	8000f48 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8000c18:	f000 fd2a 	bl	8001670 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000c1c:	f000 fa0a 	bl	8001034 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c20:	f000 fa8a 	bl	8001138 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000c24:	f000 fafa 	bl	800121c <MX_TIM5_Init>
  MX_TIM6_Init();
 8000c28:	f000 fb6a 	bl	8001300 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c2c:	f005 fbc2 	bl	80063b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c30:	f7ff fcc8 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c34:	f005 fbe2 	bl	80063fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <main+0x38>

08000c3a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b094      	sub	sp, #80	; 0x50
 8000c3e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	2238      	movs	r2, #56	; 0x38
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f008 fea9 	bl	80099a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c60:	f001 f9cc 	bl	8001ffc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6e:	2340      	movs	r3, #64	; 0x40
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c72:	2302      	movs	r3, #2
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c76:	2302      	movs	r3, #2
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000c7e:	2319      	movs	r3, #25
 8000c80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fa56 	bl	8002144 <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c9e:	f000 f819 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cae:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2103      	movs	r1, #3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fd59 	bl	8002774 <HAL_RCC_ClockConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cc8:	f000 f804 	bl	8000cd4 <Error_Handler>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3750      	adds	r7, #80	; 0x50
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_MspInit+0x4c>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fec6 	bl	8001aae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 fdac 	bl	80018bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d64:	f007 fc7a 	bl	800865c <xTaskGetSchedulerState>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d001      	beq.n	8000d72 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d6e:	f008 fb63 	bl	8009438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM1_CC_IRQHandler+0x10>)
 8000d7e:	f002 fd4f 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000013c 	.word	0x2000013c

08000d8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM2_IRQHandler+0x10>)
 8000d92:	f002 fd45 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000188 	.word	0x20000188

08000da0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TIM3_IRQHandler+0x10>)
 8000da6:	f002 fd3b 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001d4 	.word	0x200001d4

08000db4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <TIM4_IRQHandler+0x10>)
 8000dba:	f002 fd31 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000220 	.word	0x20000220

08000dc8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <TIM5_IRQHandler+0x10>)
 8000dce:	f002 fd27 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000026c 	.word	0x2000026c

08000ddc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM6_DAC_IRQHandler+0x10>)
 8000de2:	f002 fd1d 	bl	8003820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200002b8 	.word	0x200002b8

08000df0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <LPUART1_IRQHandler+0x10>)
 8000df6:	f004 f8f7 	bl	8004fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000304 	.word	0x20000304

08000e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <_sbrk+0x5c>)
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <_sbrk+0x60>)
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <_sbrk+0x64>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <_sbrk+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d207      	bcs.n	8000e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e34:	f008 fd7a 	bl	800992c <__errno>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e009      	b.n	8000e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <_sbrk+0x64>)
 8000e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20020000 	.word	0x20020000
 8000e64:	00000400 	.word	0x00000400
 8000e68:	20000138 	.word	0x20000138
 8000e6c:	200025b8 	.word	0x200025b8

08000e70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000eb4:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <MX_TIM1_Init+0xb0>)
 8000eb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 125-1;
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000eba:	227c      	movs	r2, #124	; 0x7c
 8000ebc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000ec6:	f240 128f 	movw	r2, #399	; 0x18f
 8000eca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000ee0:	f002 faf6 	bl	80034d0 <HAL_TIM_IC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000eea:	f7ff fef3 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	480f      	ldr	r0, [pc, #60]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000f02:	f003 feaf 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f0c:	f7ff fee2 	bl	8000cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_TIM1_Init+0xac>)
 8000f28:	f002 fdf9 	bl	8003b1e <HAL_TIM_IC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000f32:	f7ff fecf 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000013c 	.word	0x2000013c
 8000f44:	40012c00 	.word	0x40012c00

08000f48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	; 0x38
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125-1;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000f84:	227c      	movs	r2, #124	; 0x7c
 8000f86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000f90:	f240 128f 	movw	r2, #399	; 0x18f
 8000f94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fa2:	4823      	ldr	r0, [pc, #140]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000fa4:	f002 f850 	bl	8003048 <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000fae:	f7ff fe91 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481c      	ldr	r0, [pc, #112]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000fc0:	f002 ff5e 	bl	8003e80 <HAL_TIM_ConfigClockSource>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000fca:	f7ff fe83 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000fd0:	f002 f90a 	bl	80031e8 <HAL_TIM_PWM_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000fda:	f7ff fe7b 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <MX_TIM2_Init+0xe8>)
 8000fee:	f003 fe39 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ff8:	f7ff fe6c 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffc:	2360      	movs	r3, #96	; 0x60
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_TIM2_Init+0xe8>)
 8001014:	f002 fe20 	bl	8003c58 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800101e:	f7ff fe59 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <MX_TIM2_Init+0xe8>)
 8001024:	f000 fac8 	bl	80015b8 <HAL_TIM_MspPostInit>

}
 8001028:	bf00      	nop
 800102a:	3738      	adds	r7, #56	; 0x38
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000188 	.word	0x20000188

08001034 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_TIM3_Init+0xfc>)
 8001068:	4a32      	ldr	r2, [pc, #200]	; (8001134 <MX_TIM3_Init+0x100>)
 800106a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 125-1;
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_TIM3_Init+0xfc>)
 800106e:	227c      	movs	r2, #124	; 0x7c
 8001070:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <MX_TIM3_Init+0xfc>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <MX_TIM3_Init+0xfc>)
 800107a:	22c7      	movs	r2, #199	; 0xc7
 800107c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_TIM3_Init+0xfc>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <MX_TIM3_Init+0xfc>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800108a:	4829      	ldr	r0, [pc, #164]	; (8001130 <MX_TIM3_Init+0xfc>)
 800108c:	f001 ffdc 	bl	8003048 <HAL_TIM_Base_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001096:	f7ff fe1d 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4822      	ldr	r0, [pc, #136]	; (8001130 <MX_TIM3_Init+0xfc>)
 80010a8:	f002 feea 	bl	8003e80 <HAL_TIM_ConfigClockSource>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010b2:	f7ff fe0f 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010b6:	481e      	ldr	r0, [pc, #120]	; (8001130 <MX_TIM3_Init+0xfc>)
 80010b8:	f002 f896 	bl	80031e8 <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010c2:	f7ff fe07 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4816      	ldr	r0, [pc, #88]	; (8001130 <MX_TIM3_Init+0xfc>)
 80010d6:	f003 fdc5 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010e0:	f7ff fdf8 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e4:	2360      	movs	r3, #96	; 0x60
 80010e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_TIM3_Init+0xfc>)
 80010fc:	f002 fdac 	bl	8003c58 <HAL_TIM_PWM_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001106:	f7ff fde5 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	2204      	movs	r2, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <MX_TIM3_Init+0xfc>)
 8001112:	f002 fda1 	bl	8003c58 <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800111c:	f7ff fdda 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <MX_TIM3_Init+0xfc>)
 8001122:	f000 fa49 	bl	80015b8 <HAL_TIM_MspPostInit>

}
 8001126:	bf00      	nop
 8001128:	3738      	adds	r7, #56	; 0x38
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001d4 	.word	0x200001d4
 8001134:	40000400 	.word	0x40000400

08001138 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_TIM4_Init+0xdc>)
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <MX_TIM4_Init+0xe0>)
 8001168:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50-1;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_TIM4_Init+0xdc>)
 800116c:	2231      	movs	r2, #49	; 0x31
 800116e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <MX_TIM4_Init+0xdc>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_TIM4_Init+0xdc>)
 8001178:	f240 32e7 	movw	r2, #999	; 0x3e7
 800117c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <MX_TIM4_Init+0xdc>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_TIM4_Init+0xdc>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800118a:	4822      	ldr	r0, [pc, #136]	; (8001214 <MX_TIM4_Init+0xdc>)
 800118c:	f001 ff5c 	bl	8003048 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001196:	f7ff fd9d 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4619      	mov	r1, r3
 80011a6:	481b      	ldr	r0, [pc, #108]	; (8001214 <MX_TIM4_Init+0xdc>)
 80011a8:	f002 fe6a 	bl	8003e80 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011b2:	f7ff fd8f 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80011b6:	4817      	ldr	r0, [pc, #92]	; (8001214 <MX_TIM4_Init+0xdc>)
 80011b8:	f002 f98a 	bl	80034d0 <HAL_TIM_IC_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80011c2:	f7ff fd87 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	480f      	ldr	r0, [pc, #60]	; (8001214 <MX_TIM4_Init+0xdc>)
 80011d6:	f003 fd45 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80011e0:	f7ff fd78 	bl	8000cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_TIM4_Init+0xdc>)
 80011fc:	f002 fc8f 	bl	8003b1e <HAL_TIM_IC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001206:	f7ff fd65 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000220 	.word	0x20000220
 8001218:	40000800 	.word	0x40000800

0800121c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_TIM5_Init+0xdc>)
 800124a:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <MX_TIM5_Init+0xe0>)
 800124c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 500-1;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_TIM5_Init+0xdc>)
 8001250:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001254:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_TIM5_Init+0xdc>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_TIM5_Init+0xdc>)
 800125e:	2263      	movs	r2, #99	; 0x63
 8001260:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_TIM5_Init+0xdc>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <MX_TIM5_Init+0xdc>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800126e:	4822      	ldr	r0, [pc, #136]	; (80012f8 <MX_TIM5_Init+0xdc>)
 8001270:	f001 feea 	bl	8003048 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800127a:	f7ff fd2b 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	4619      	mov	r1, r3
 800128a:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_TIM5_Init+0xdc>)
 800128c:	f002 fdf8 	bl	8003e80 <HAL_TIM_ConfigClockSource>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001296:	f7ff fd1d 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800129a:	4817      	ldr	r0, [pc, #92]	; (80012f8 <MX_TIM5_Init+0xdc>)
 800129c:	f002 f918 	bl	80034d0 <HAL_TIM_IC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80012a6:	f7ff fd15 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <MX_TIM5_Init+0xdc>)
 80012ba:	f003 fcd3 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80012c4:	f7ff fd06 	bl	8000cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2204      	movs	r2, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM5_Init+0xdc>)
 80012e0:	f002 fc1d 	bl	8003b1e <HAL_TIM_IC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80012ea:	f7ff fcf3 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000026c 	.word	0x2000026c
 80012fc:	40000c00 	.word	0x40000c00

08001300 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_TIM6_Init+0x68>)
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <MX_TIM6_Init+0x6c>)
 8001314:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50000-1;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_TIM6_Init+0x68>)
 8001318:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800131c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_TIM6_Init+0x68>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_TIM6_Init+0x68>)
 8001326:	f240 32e7 	movw	r2, #999	; 0x3e7
 800132a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_TIM6_Init+0x68>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_TIM6_Init+0x68>)
 8001334:	f001 fe88 	bl	8003048 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800133e:	f7ff fcc9 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_TIM6_Init+0x68>)
 8001350:	f003 fc88 	bl	8004c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800135a:	f7ff fcbb 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200002b8 	.word	0x200002b8
 800136c:	40001000 	.word	0x40001000

08001370 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_TIM_IC_MspInit+0x8c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12f      	bne.n	80013f2 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_TIM_IC_MspInit+0x90>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <HAL_TIM_IC_MspInit+0x90>)
 8001398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800139c:	6613      	str	r3, [r2, #96]	; 0x60
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_TIM_IC_MspInit+0x90>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_TIM_IC_MspInit+0x90>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_TIM_IC_MspInit+0x90>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_TIM_IC_MspInit+0x90>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013d2:	2302      	movs	r3, #2
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <HAL_TIM_IC_MspInit+0x94>)
 80013de:	f000 fc5b 	bl	8001c98 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	201b      	movs	r0, #27
 80013e8:	f000 fb61 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013ec:	201b      	movs	r0, #27
 80013ee:	f000 fb78 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	40021000 	.word	0x40021000
 8001404:	48000800 	.word	0x48000800

08001408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d114      	bne.n	8001454 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	4a5c      	ldr	r2, [pc, #368]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6593      	str	r3, [r2, #88]	; 0x58
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	623b      	str	r3, [r7, #32]
 8001440:	6a3b      	ldr	r3, [r7, #32]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2105      	movs	r1, #5
 8001446:	201c      	movs	r0, #28
 8001448:	f000 fb31 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800144c:	201c      	movs	r0, #28
 800144e:	f000 fb48 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001452:	e0a1      	b.n	8001598 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_TIM_Base_MspInit+0x19c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d114      	bne.n	8001488 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6593      	str	r3, [r2, #88]	; 0x58
 800146a:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	201d      	movs	r0, #29
 800147c:	f000 fb17 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001480:	201d      	movs	r0, #29
 8001482:	f000 fb2e 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
}
 8001486:	e087      	b.n	8001598 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM4)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <HAL_TIM_Base_MspInit+0x1a0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d132      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a42      	ldr	r2, [pc, #264]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a3c      	ldr	r2, [pc, #240]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 80014c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80014d4:	230a      	movs	r3, #10
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e2:	f000 fbd9 	bl	8001c98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2105      	movs	r1, #5
 80014ea:	201e      	movs	r0, #30
 80014ec:	f000 fadf 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014f0:	201e      	movs	r0, #30
 80014f2:	f000 faf6 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
}
 80014f6:	e04f      	b.n	8001598 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM5)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <HAL_TIM_Base_MspInit+0x1a4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d131      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001502:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	4a26      	ldr	r2, [pc, #152]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	6593      	str	r3, [r2, #88]	; 0x58
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_D_Pin;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8001544:	2301      	movs	r3, #1
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	4818      	ldr	r0, [pc, #96]	; (80015b0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001550:	f000 fba2 	bl	8001c98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2105      	movs	r1, #5
 8001558:	2032      	movs	r0, #50	; 0x32
 800155a:	f000 faa8 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800155e:	2032      	movs	r0, #50	; 0x32
 8001560:	f000 fabf 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
}
 8001564:	e018      	b.n	8001598 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM6)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_TIM_Base_MspInit+0x1ac>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d113      	bne.n	8001598 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6593      	str	r3, [r2, #88]	; 0x58
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_TIM_Base_MspInit+0x198>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2105      	movs	r1, #5
 800158c:	2036      	movs	r0, #54	; 0x36
 800158e:	f000 fa8e 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001592:	2036      	movs	r0, #54	; 0x36
 8001594:	f000 faa5 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	; 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40000400 	.word	0x40000400
 80015a8:	40000800 	.word	0x40000800
 80015ac:	40000c00 	.word	0x40000c00
 80015b0:	48000800 	.word	0x48000800
 80015b4:	40001000 	.word	0x40001000

080015b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d8:	d11e      	bne.n	8001618 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_TIM_MspPostInit+0xac>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_TIM_MspPostInit+0xac>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <HAL_TIM_MspPostInit+0xac>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 80015f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f000 fb41 	bl	8001c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001616:	e020      	b.n	800165a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <HAL_TIM_MspPostInit+0xb0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11b      	bne.n	800165a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_TIM_MspPostInit+0xac>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_TIM_MspPostInit+0xac>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_TIM_MspPostInit+0xac>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 800163a:	2330      	movs	r3, #48	; 0x30
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800164a:	2302      	movs	r3, #2
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_TIM_MspPostInit+0xb4>)
 8001656:	f000 fb1f 	bl	8001c98 <HAL_GPIO_Init>
}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	40000400 	.word	0x40000400
 800166c:	48000400 	.word	0x48000400

08001670 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 8001676:	4a22      	ldr	r2, [pc, #136]	; (8001700 <MX_LPUART1_UART_Init+0x90>)
 8001678:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 800167c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001680:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 80016b4:	f003 fbb2 	bl	8004e1c <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016be:	f7ff fb09 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 80016c6:	f004 fd76 	bl	80061b6 <HAL_UARTEx_SetTxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016d0:	f7ff fb00 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d4:	2100      	movs	r1, #0
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 80016d8:	f004 fdab 	bl	8006232 <HAL_UARTEx_SetRxFifoThreshold>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016e2:	f7ff faf7 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_LPUART1_UART_Init+0x8c>)
 80016e8:	f004 fd2c 	bl	8006144 <HAL_UARTEx_DisableFifoMode>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016f2:	f7ff faef 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000304 	.word	0x20000304
 8001700:	40008000 	.word	0x40008000

08001704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b09e      	sub	sp, #120	; 0x78
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2254      	movs	r2, #84	; 0x54
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f008 f93b 	bl	80099a0 <memset>
  if(uartHandle->Instance==LPUART1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a23      	ldr	r2, [pc, #140]	; (80017bc <HAL_UART_MspInit+0xb8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d13e      	bne.n	80017b2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001734:	2320      	movs	r3, #32
 8001736:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4618      	mov	r0, r3
 8001742:	f001 fa33 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800174c:	f7ff fac2 	bl	8000cd4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_UART_MspInit+0xbc>)
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	4a1a      	ldr	r2, [pc, #104]	; (80017c0 <HAL_UART_MspInit+0xbc>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_UART_MspInit+0xbc>)
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_UART_MspInit+0xbc>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <HAL_UART_MspInit+0xbc>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_UART_MspInit+0xbc>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001780:	230c      	movs	r3, #12
 8001782:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001790:	230c      	movs	r3, #12
 8001792:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f000 fa7b 	bl	8001c98 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2105      	movs	r1, #5
 80017a6:	205b      	movs	r0, #91	; 0x5b
 80017a8:	f000 f981 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80017ac:	205b      	movs	r0, #91	; 0x5b
 80017ae:	f000 f998 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80017b2:	bf00      	nop
 80017b4:	3778      	adds	r7, #120	; 0x78
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40008000 	.word	0x40008000
 80017c0:	40021000 	.word	0x40021000

080017c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ca:	490e      	ldr	r1, [pc, #56]	; (8001804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <LoopForever+0xe>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e0:	4c0b      	ldr	r4, [pc, #44]	; (8001810 <LoopForever+0x16>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ee:	f7ff fb3f 	bl	8000e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f2:	f008 f8a1 	bl	8009938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f6:	f7ff fa03 	bl	8000c00 <main>

080017fa <LoopForever>:

LoopForever:
    b LoopForever
 80017fa:	e7fe      	b.n	80017fa <LoopForever>
  ldr   r0, =_estack
 80017fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001804:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001808:	0800a5ac 	.word	0x0800a5ac
  ldr r2, =_sbss
 800180c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001810:	200025b8 	.word	0x200025b8

08001814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC1_2_IRQHandler>

08001816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f939 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f80e 	bl	8001848 <HAL_InitTick>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	e001      	b.n	800183c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001838:	f7ff fa52 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800183c:	79fb      	ldrb	r3, [r7, #7]

}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_InitTick+0x68>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d022      	beq.n	80018a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_InitTick+0x6c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_InitTick+0x68>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001868:	fbb1 f3f3 	udiv	r3, r1, r3
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f944 	bl	8001afe <HAL_SYSTICK_Config>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10f      	bne.n	800189c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b0f      	cmp	r3, #15
 8001880:	d809      	bhi.n	8001896 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001882:	2200      	movs	r2, #0
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
 800188a:	f000 f910 	bl	8001aae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_InitTick+0x70>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e007      	b.n	80018a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e004      	b.n	80018a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e001      	b.n	80018a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x20>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <HAL_IncTick+0x1c>)
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	20000394 	.word	0x20000394
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000394 	.word	0x20000394

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff29 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff40 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff90 	bl	80019ec <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5f 	bl	8001998 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff33 	bl	800195c <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa4 	bl	8001a54 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d005      	beq.n	8001b3a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2204      	movs	r2, #4
 8001b32:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e037      	b.n	8001baa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 020e 	bic.w	r2, r2, #14
 8001b48:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b58:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0201 	bic.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f003 021f 	and.w	r2, r3, #31
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2101      	movs	r1, #1
 8001b78:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b86:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00c      	beq.n	8001baa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b9e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ba8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d00d      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2204      	movs	r2, #4
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e047      	b.n	8001c8c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 020e 	bic.w	r2, r2, #14
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00c      	beq.n	8001c6c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
    }
  }
  return status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ca6:	e15a      	b.n	8001f5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2101      	movs	r1, #1
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 814c 	beq.w	8001f58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d005      	beq.n	8001cd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d130      	bne.n	8001d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0e:	2201      	movs	r2, #1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 0201 	and.w	r2, r3, #1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d017      	beq.n	8001d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d123      	bne.n	8001dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	08da      	lsrs	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3208      	adds	r2, #8
 8001d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	6939      	ldr	r1, [r7, #16]
 8001dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0203 	and.w	r2, r3, #3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80a6 	beq.w	8001f58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0c:	4b5b      	ldr	r3, [pc, #364]	; (8001f7c <HAL_GPIO_Init+0x2e4>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	4a5a      	ldr	r2, [pc, #360]	; (8001f7c <HAL_GPIO_Init+0x2e4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6613      	str	r3, [r2, #96]	; 0x60
 8001e18:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <HAL_GPIO_Init+0x2e4>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e24:	4a56      	ldr	r2, [pc, #344]	; (8001f80 <HAL_GPIO_Init+0x2e8>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e4e:	d01f      	beq.n	8001e90 <HAL_GPIO_Init+0x1f8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <HAL_GPIO_Init+0x2ec>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d019      	beq.n	8001e8c <HAL_GPIO_Init+0x1f4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <HAL_GPIO_Init+0x2f0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <HAL_GPIO_Init+0x1f0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_GPIO_Init+0x2f4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00d      	beq.n	8001e84 <HAL_GPIO_Init+0x1ec>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a49      	ldr	r2, [pc, #292]	; (8001f90 <HAL_GPIO_Init+0x2f8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d007      	beq.n	8001e80 <HAL_GPIO_Init+0x1e8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_GPIO_Init+0x2fc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <HAL_GPIO_Init+0x1e4>
 8001e78:	2305      	movs	r3, #5
 8001e7a:	e00a      	b.n	8001e92 <HAL_GPIO_Init+0x1fa>
 8001e7c:	2306      	movs	r3, #6
 8001e7e:	e008      	b.n	8001e92 <HAL_GPIO_Init+0x1fa>
 8001e80:	2304      	movs	r3, #4
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_Init+0x1fa>
 8001e84:	2303      	movs	r3, #3
 8001e86:	e004      	b.n	8001e92 <HAL_GPIO_Init+0x1fa>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x1fa>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_Init+0x1fa>
 8001e90:	2300      	movs	r3, #0
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	f002 0203 	and.w	r2, r2, #3
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea2:	4937      	ldr	r1, [pc, #220]	; (8001f80 <HAL_GPIO_Init+0x2e8>)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb0:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ed4:	4a30      	ldr	r2, [pc, #192]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001efe:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f47f ae9d 	bne.w	8001ca8 <HAL_GPIO_Init+0x10>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	48001000 	.word	0x48001000
 8001f94:	48001400 	.word	0x48001400
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d141      	bne.n	800208e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800200a:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002016:	d131      	bne.n	800207c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201e:	4a46      	ldr	r2, [pc, #280]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002024:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002030:	4a41      	ldr	r2, [pc, #260]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002036:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002038:	4b40      	ldr	r3, [pc, #256]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2232      	movs	r2, #50	; 0x32
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	4a3f      	ldr	r2, [pc, #252]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9b      	lsrs	r3, r3, #18
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800204e:	e002      	b.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3b01      	subs	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d102      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f2      	bne.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002076:	d158      	bne.n	800212a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e057      	b.n	800212c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002082:	4a2d      	ldr	r2, [pc, #180]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800208c:	e04d      	b.n	800212a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002094:	d141      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d131      	bne.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020aa:	4a23      	ldr	r2, [pc, #140]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2232      	movs	r2, #50	; 0x32
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	3301      	adds	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020da:	e002      	b.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3b01      	subs	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ee:	d102      	bne.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f2      	bne.n	80020dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002102:	d112      	bne.n	800212a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e011      	b.n	800212c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002118:	e007      	b.n	800212a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002128:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40007000 	.word	0x40007000
 800213c:	20000000 	.word	0x20000000
 8002140:	431bde83 	.word	0x431bde83

08002144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e306      	b.n	8002764 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d075      	beq.n	800224e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002162:	4b97      	ldr	r3, [pc, #604]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216c:	4b94      	ldr	r3, [pc, #592]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b0c      	cmp	r3, #12
 800217a:	d102      	bne.n	8002182 <HAL_RCC_OscConfig+0x3e>
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d002      	beq.n	8002188 <HAL_RCC_OscConfig+0x44>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d10b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	4b8d      	ldr	r3, [pc, #564]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d05b      	beq.n	800224c <HAL_RCC_OscConfig+0x108>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d157      	bne.n	800224c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e2e1      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x74>
 80021aa:	4b85      	ldr	r3, [pc, #532]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a84      	ldr	r2, [pc, #528]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_RCC_OscConfig+0xb0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x98>
 80021c2:	4b7f      	ldr	r3, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7e      	ldr	r2, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xb0>
 80021dc:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a77      	ldr	r2, [pc, #476]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a74      	ldr	r2, [pc, #464]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff fb70 	bl	80018e0 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff fb6c 	bl	80018e0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e2a6      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002216:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xc0>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff fb5c 	bl	80018e0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7ff fb58 	bl	80018e0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e292      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223e:	4b60      	ldr	r3, [pc, #384]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0xe8>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d075      	beq.n	8002346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002264:	4b56      	ldr	r3, [pc, #344]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d102      	bne.n	800227a <HAL_RCC_OscConfig+0x136>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d002      	beq.n	8002280 <HAL_RCC_OscConfig+0x13c>
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11f      	bne.n	80022c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002280:	4b4f      	ldr	r3, [pc, #316]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_OscConfig+0x154>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e265      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	4946      	ldr	r1, [pc, #280]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022ac:	4b45      	ldr	r3, [pc, #276]	; (80023c4 <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fac9 	bl	8001848 <HAL_InitTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d043      	beq.n	8002344 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e251      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a3c      	ldr	r2, [pc, #240]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff fb04 	bl	80018e0 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff fb00 	bl	80018e0 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e23a      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ee:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	492d      	ldr	r1, [pc, #180]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
 800230e:	e01a      	b.n	8002346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff fae0 	bl	80018e0 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fadc 	bl	80018e0 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e216      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1e0>
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002344:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d041      	beq.n	80023d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01c      	beq.n	8002394 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800235c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002360:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7ff fab9 	bl	80018e0 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002372:	f7ff fab5 	bl	80018e0 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1ef      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0ef      	beq.n	8002372 <HAL_RCC_OscConfig+0x22e>
 8002392:	e020      	b.n	80023d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002394:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 8002396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_RCC_OscConfig+0x27c>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7ff fa9c 	bl	80018e0 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023aa:	e00d      	b.n	80023c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ac:	f7ff fa98 	bl	80018e0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d906      	bls.n	80023c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1d2      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c8:	4b8c      	ldr	r3, [pc, #560]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ea      	bne.n	80023ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80a6 	beq.w	8002530 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023e8:	4b84      	ldr	r3, [pc, #528]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_OscConfig+0x2b4>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x2b6>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b7f      	ldr	r3, [pc, #508]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	4a7e      	ldr	r2, [pc, #504]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6593      	str	r3, [r2, #88]	; 0x58
 800240a:	4b7c      	ldr	r3, [pc, #496]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241a:	4b79      	ldr	r3, [pc, #484]	; (8002600 <HAL_RCC_OscConfig+0x4bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <HAL_RCC_OscConfig+0x4bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a75      	ldr	r2, [pc, #468]	; (8002600 <HAL_RCC_OscConfig+0x4bc>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff fa55 	bl	80018e0 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff fa51 	bl	80018e0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e18b      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_RCC_OscConfig+0x4bc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_RCC_OscConfig+0x32e>
 8002460:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a65      	ldr	r2, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002470:	e024      	b.n	80024bc <HAL_RCC_OscConfig+0x378>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b05      	cmp	r3, #5
 8002478:	d110      	bne.n	800249c <HAL_RCC_OscConfig+0x358>
 800247a:	4b60      	ldr	r3, [pc, #384]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	4a5e      	ldr	r2, [pc, #376]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	4a5a      	ldr	r2, [pc, #360]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800249a:	e00f      	b.n	80024bc <HAL_RCC_OscConfig+0x378>
 800249c:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d016      	beq.n	80024f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7ff fa0c 	bl	80018e0 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7ff fa08 	bl	80018e0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e140      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ed      	beq.n	80024cc <HAL_RCC_OscConfig+0x388>
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7ff f9f5 	bl	80018e0 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7ff f9f1 	bl	80018e0 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e129      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002510:	4b3a      	ldr	r3, [pc, #232]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ed      	bne.n	80024fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800251e:	7ffb      	ldrb	r3, [r7, #31]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	4a34      	ldr	r2, [pc, #208]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d03c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01c      	beq.n	800257e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254a:	4a2c      	ldr	r2, [pc, #176]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7ff f9c4 	bl	80018e0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255c:	f7ff f9c0 	bl	80018e0 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0fa      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ef      	beq.n	800255c <HAL_RCC_OscConfig+0x418>
 800257c:	e01b      	b.n	80025b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7ff f9a7 	bl	80018e0 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002596:	f7ff f9a3 	bl	80018e0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0dd      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ef      	bne.n	8002596 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80d1 	beq.w	8002762 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	f000 808b 	beq.w	80026e4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d15e      	bne.n	8002694 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a08      	ldr	r2, [pc, #32]	; (80025fc <HAL_RCC_OscConfig+0x4b8>)
 80025dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff f97d 	bl	80018e0 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e8:	e00c      	b.n	8002604 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7ff f979 	bl	80018e0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d905      	bls.n	8002604 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0b3      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
 80025fc:	40021000 	.word	0x40021000
 8002600:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCC_OscConfig+0x628>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ec      	bne.n	80025ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002610:	4b56      	ldr	r3, [pc, #344]	; (800276c <HAL_RCC_OscConfig+0x628>)
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_RCC_OscConfig+0x62c>)
 8002616:	4013      	ands	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6a11      	ldr	r1, [r2, #32]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002620:	3a01      	subs	r2, #1
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	4311      	orrs	r1, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800262a:	0212      	lsls	r2, r2, #8
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002632:	0852      	lsrs	r2, r2, #1
 8002634:	3a01      	subs	r2, #1
 8002636:	0552      	lsls	r2, r2, #21
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800263e:	0852      	lsrs	r2, r2, #1
 8002640:	3a01      	subs	r2, #1
 8002642:	0652      	lsls	r2, r2, #25
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800264a:	06d2      	lsls	r2, r2, #27
 800264c:	430a      	orrs	r2, r1
 800264e:	4947      	ldr	r1, [pc, #284]	; (800276c <HAL_RCC_OscConfig+0x628>)
 8002650:	4313      	orrs	r3, r2
 8002652:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b45      	ldr	r3, [pc, #276]	; (800276c <HAL_RCC_OscConfig+0x628>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a44      	ldr	r2, [pc, #272]	; (800276c <HAL_RCC_OscConfig+0x628>)
 800265a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002660:	4b42      	ldr	r3, [pc, #264]	; (800276c <HAL_RCC_OscConfig+0x628>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a41      	ldr	r2, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x628>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7ff f938 	bl	80018e0 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff f934 	bl	80018e0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e06e      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002686:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCC_OscConfig+0x628>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x530>
 8002692:	e066      	b.n	8002762 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b35      	ldr	r3, [pc, #212]	; (800276c <HAL_RCC_OscConfig+0x628>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a34      	ldr	r2, [pc, #208]	; (800276c <HAL_RCC_OscConfig+0x628>)
 800269a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026a0:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_RCC_OscConfig+0x628>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_RCC_OscConfig+0x628>)
 80026a6:	f023 0303 	bic.w	r3, r3, #3
 80026aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_RCC_OscConfig+0x628>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a2e      	ldr	r2, [pc, #184]	; (800276c <HAL_RCC_OscConfig+0x628>)
 80026b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7ff f910 	bl	80018e0 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff f90c 	bl	80018e0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e046      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_RCC_OscConfig+0x628>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x580>
 80026e2:	e03e      	b.n	8002762 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e039      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_RCC_OscConfig+0x628>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0203 	and.w	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	429a      	cmp	r2, r3
 8002702:	d12c      	bne.n	800275e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	3b01      	subs	r3, #1
 8002710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d123      	bne.n	800275e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d11b      	bne.n	800275e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d113      	bne.n	800275e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3b01      	subs	r3, #1
 8002744:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d109      	bne.n	800275e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	3b01      	subs	r3, #1
 8002758:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	019f800c 	.word	0x019f800c

08002774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e11e      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b91      	ldr	r3, [pc, #580]	; (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d910      	bls.n	80027bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b8e      	ldr	r3, [pc, #568]	; (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 020f 	bic.w	r2, r3, #15
 80027a2:	498c      	ldr	r1, [pc, #560]	; (80029d4 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b8a      	ldr	r3, [pc, #552]	; (80029d4 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e106      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d073      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d129      	bne.n	8002824 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d0:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0f4      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027e0:	f000 f99e 	bl	8002b20 <RCC_GetSysClockFreqFromPLLSource>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4a7c      	ldr	r2, [pc, #496]	; (80029dc <HAL_RCC_ClockConfig+0x268>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d93f      	bls.n	800286e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027ee:	4b7a      	ldr	r3, [pc, #488]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002802:	2b00      	cmp	r3, #0
 8002804:	d033      	beq.n	800286e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d12f      	bne.n	800286e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800280e:	4b72      	ldr	r3, [pc, #456]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002816:	4a70      	ldr	r2, [pc, #448]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e024      	b.n	800286e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d107      	bne.n	800283c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282c:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0c6      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283c:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0be      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800284c:	f000 f8ce 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8002850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4a61      	ldr	r2, [pc, #388]	; (80029dc <HAL_RCC_ClockConfig+0x268>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d909      	bls.n	800286e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800285a:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002862:	4a5d      	ldr	r2, [pc, #372]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002868:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4957      	ldr	r1, [pc, #348]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7ff f82e 	bl	80018e0 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7ff f82a 	bl	80018e0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e095      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b4e      	ldr	r3, [pc, #312]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a42      	ldr	r2, [pc, #264]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028e0:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028e8:	4a3b      	ldr	r2, [pc, #236]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4936      	ldr	r1, [pc, #216]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
 8002902:	e008      	b.n	8002916 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b80      	cmp	r3, #128	; 0x80
 8002908:	d105      	bne.n	8002916 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800290a:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002914:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002916:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d21d      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 020f 	bic.w	r2, r3, #15
 800292c:	4929      	ldr	r1, [pc, #164]	; (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002934:	f7fe ffd4 	bl	80018e0 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe ffd0 	bl	80018e0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e03b      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d1ed      	bne.n	800293c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4917      	ldr	r1, [pc, #92]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490f      	ldr	r1, [pc, #60]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800299e:	f000 f825 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490c      	ldr	r1, [pc, #48]	; (80029e0 <HAL_RCC_ClockConfig+0x26c>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x270>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe ff40 	bl	8001848 <HAL_InitTick>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	04c4b400 	.word	0x04c4b400
 80029e0:	0800a4c8 	.word	0x0800a4c8
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029f2:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e047      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	e03e      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d136      	bne.n	8002a90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	3301      	adds	r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4a:	68d2      	ldr	r2, [r2, #12]
 8002a4c:	0a12      	lsrs	r2, r2, #8
 8002a4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	617b      	str	r3, [r7, #20]
      break;
 8002a58:	e00c      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	0a12      	lsrs	r2, r2, #8
 8002a68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
      break;
 8002a72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0e5b      	lsrs	r3, r3, #25
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e001      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a94:	693b      	ldr	r3, [r7, #16]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	007a1200 	.word	0x007a1200

08002ab0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	0800a4d8 	.word	0x0800a4d8

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002af8:	f7ff ffda 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0adb      	lsrs	r3, r3, #11
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4904      	ldr	r1, [pc, #16]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	0800a4d8 	.word	0x0800a4d8

08002b20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b26:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d10c      	bne.n	8002b5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4e:	68d2      	ldr	r2, [r2, #12]
 8002b50:	0a12      	lsrs	r2, r2, #8
 8002b52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	617b      	str	r3, [r7, #20]
    break;
 8002b5c:	e00c      	b.n	8002b78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	0a12      	lsrs	r2, r2, #8
 8002b6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    break;
 8002b76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0e5b      	lsrs	r3, r3, #25
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	007a1200 	.word	0x007a1200
 8002ba8:	00f42400 	.word	0x00f42400

08002bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb8:	2300      	movs	r3, #0
 8002bba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8098 	beq.w	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6593      	str	r3, [r2, #88]	; 0x58
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf6:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c02:	f7fe fe6d 	bl	80018e0 <HAL_GetTick>
 8002c06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c08:	e009      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7fe fe69 	bl	80018e0 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d902      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c1c:	e005      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c1e:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ef      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d159      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01e      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d019      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c4c:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c68:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fe29 	bl	80018e0 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c90:	e00b      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fe25 	bl	80018e0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d902      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ca8:	e006      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ec      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ccc:	4903      	ldr	r1, [pc, #12]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	74bb      	strb	r3, [r7, #18]
 8002cda:	e005      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce8:	7c7b      	ldrb	r3, [r7, #17]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4ba7      	ldr	r3, [pc, #668]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	4aa6      	ldr	r2, [pc, #664]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d06:	4ba1      	ldr	r3, [pc, #644]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f023 0203 	bic.w	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	499d      	ldr	r1, [pc, #628]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d28:	4b98      	ldr	r3, [pc, #608]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f023 020c 	bic.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4995      	ldr	r1, [pc, #596]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d4a:	4b90      	ldr	r3, [pc, #576]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	498c      	ldr	r1, [pc, #560]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d6c:	4b87      	ldr	r3, [pc, #540]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	4984      	ldr	r1, [pc, #528]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d8e:	4b7f      	ldr	r3, [pc, #508]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	497b      	ldr	r1, [pc, #492]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db0:	4b76      	ldr	r3, [pc, #472]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	4973      	ldr	r1, [pc, #460]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dd2:	4b6e      	ldr	r3, [pc, #440]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	496a      	ldr	r1, [pc, #424]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002df4:	4b65      	ldr	r3, [pc, #404]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4962      	ldr	r1, [pc, #392]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e16:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	4959      	ldr	r1, [pc, #356]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e38:	4b54      	ldr	r3, [pc, #336]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e3e:	f023 0203 	bic.w	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	4951      	ldr	r1, [pc, #324]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e5a:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	4948      	ldr	r1, [pc, #288]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e7c:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4940      	ldr	r1, [pc, #256]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a3a      	ldr	r2, [pc, #232]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	4932      	ldr	r1, [pc, #200]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ede:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4924      	ldr	r1, [pc, #144]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d015      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	4916      	ldr	r1, [pc, #88]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f42:	d105      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d019      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4908      	ldr	r1, [pc, #32]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f7a:	d109      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a02      	ldr	r2, [pc, #8]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f86:	60d3      	str	r3, [r2, #12]
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4926      	ldr	r1, [pc, #152]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe2:	4918      	ldr	r1, [pc, #96]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff2:	d105      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a12      	ldr	r2, [pc, #72]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800300e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003012:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	490a      	ldr	r1, [pc, #40]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800302a:	d105      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003036:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003038:	7cbb      	ldrb	r3, [r7, #18]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000

08003048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e049      	b.n	80030ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe f9ca 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f001 f82e 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d001      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e054      	b.n	80031ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a26      	ldr	r2, [pc, #152]	; (80031c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d022      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d01d      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d018      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_TIM_Base_Start_IT+0xe4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x80>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d115      	bne.n	80031a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_TIM_Base_Start_IT+0xec>)
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b06      	cmp	r3, #6
 8003188:	d015      	beq.n	80031b6 <HAL_TIM_Base_Start_IT+0xbe>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d011      	beq.n	80031b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a2:	e008      	b.n	80031b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e000      	b.n	80031b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800
 80031d4:	40000c00 	.word	0x40000c00
 80031d8:	40013400 	.word	0x40013400
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40015000 	.word	0x40015000
 80031e4:	00010007 	.word	0x00010007

080031e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e049      	b.n	800328e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f841 	bl	8003296 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 ff5e 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_TIM_PWM_Start+0x24>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e03c      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d109      	bne.n	80032ea <HAL_TIM_PWM_Start+0x3e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e02f      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d109      	bne.n	8003304 <HAL_TIM_PWM_Start+0x58>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e022      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d109      	bne.n	800331e <HAL_TIM_PWM_Start+0x72>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e015      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b10      	cmp	r3, #16
 8003322:	d109      	bne.n	8003338 <HAL_TIM_PWM_Start+0x8c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e008      	b.n	800334a <HAL_TIM_PWM_Start+0x9e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0a6      	b.n	80034a0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <HAL_TIM_PWM_Start+0xb6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003360:	e023      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d104      	bne.n	8003372 <HAL_TIM_PWM_Start+0xc6>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003370:	e01b      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d104      	bne.n	8003382 <HAL_TIM_PWM_Start+0xd6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003380:	e013      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d104      	bne.n	8003392 <HAL_TIM_PWM_Start+0xe6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003390:	e00b      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b10      	cmp	r3, #16
 8003396:	d104      	bne.n	80033a2 <HAL_TIM_PWM_Start+0xf6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	e003      	b.n	80033aa <HAL_TIM_PWM_Start+0xfe>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	6839      	ldr	r1, [r7, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 fc30 	bl	8004c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a3a      	ldr	r2, [pc, #232]	; (80034a8 <HAL_TIM_PWM_Start+0x1fc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d018      	beq.n	80033f4 <HAL_TIM_PWM_Start+0x148>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a39      	ldr	r2, [pc, #228]	; (80034ac <HAL_TIM_PWM_Start+0x200>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_TIM_PWM_Start+0x148>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a37      	ldr	r2, [pc, #220]	; (80034b0 <HAL_TIM_PWM_Start+0x204>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_TIM_PWM_Start+0x148>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <HAL_TIM_PWM_Start+0x208>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_TIM_PWM_Start+0x148>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a34      	ldr	r2, [pc, #208]	; (80034b8 <HAL_TIM_PWM_Start+0x20c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_TIM_PWM_Start+0x148>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a33      	ldr	r2, [pc, #204]	; (80034bc <HAL_TIM_PWM_Start+0x210>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_TIM_PWM_Start+0x14c>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_TIM_PWM_Start+0x14e>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <HAL_TIM_PWM_Start+0x1fc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d022      	beq.n	800345e <HAL_TIM_PWM_Start+0x1b2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d01d      	beq.n	800345e <HAL_TIM_PWM_Start+0x1b2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_TIM_PWM_Start+0x214>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d018      	beq.n	800345e <HAL_TIM_PWM_Start+0x1b2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <HAL_TIM_PWM_Start+0x218>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_TIM_PWM_Start+0x1b2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_TIM_PWM_Start+0x21c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_TIM_PWM_Start+0x1b2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_TIM_PWM_Start+0x200>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_TIM_PWM_Start+0x1b2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_TIM_PWM_Start+0x204>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_TIM_PWM_Start+0x1b2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_TIM_PWM_Start+0x210>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d115      	bne.n	800348a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_TIM_PWM_Start+0x220>)
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b06      	cmp	r3, #6
 800346e:	d015      	beq.n	800349c <HAL_TIM_PWM_Start+0x1f0>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003476:	d011      	beq.n	800349c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	e008      	b.n	800349c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e000      	b.n	800349e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40013400 	.word	0x40013400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40014400 	.word	0x40014400
 80034b8:	40014800 	.word	0x40014800
 80034bc:	40015000 	.word	0x40015000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	00010007 	.word	0x00010007

080034d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e049      	b.n	8003576 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd ff3a 	bl	8001370 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 fdea 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_TIM_IC_Start_IT+0x1e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800359a:	b2db      	uxtb	r3, r3
 800359c:	e023      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x66>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_IC_Start_IT+0x2e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e01b      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x66>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d104      	bne.n	80035be <HAL_TIM_IC_Start_IT+0x3e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e013      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x66>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_IC_Start_IT+0x4e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e00b      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x66>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d104      	bne.n	80035de <HAL_TIM_IC_Start_IT+0x5e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	e003      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x66>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <HAL_TIM_IC_Start_IT+0x78>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e013      	b.n	8003620 <HAL_TIM_IC_Start_IT+0xa0>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d104      	bne.n	8003608 <HAL_TIM_IC_Start_IT+0x88>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e00b      	b.n	8003620 <HAL_TIM_IC_Start_IT+0xa0>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b08      	cmp	r3, #8
 800360c:	d104      	bne.n	8003618 <HAL_TIM_IC_Start_IT+0x98>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e003      	b.n	8003620 <HAL_TIM_IC_Start_IT+0xa0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800361e:	b2db      	uxtb	r3, r3
 8003620:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003622:	7bbb      	ldrb	r3, [r7, #14]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d102      	bne.n	800362e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003628:	7b7b      	ldrb	r3, [r7, #13]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0e2      	b.n	80037f8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_TIM_IC_Start_IT+0xc2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003640:	e023      	b.n	800368a <HAL_TIM_IC_Start_IT+0x10a>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d104      	bne.n	8003652 <HAL_TIM_IC_Start_IT+0xd2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003650:	e01b      	b.n	800368a <HAL_TIM_IC_Start_IT+0x10a>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d104      	bne.n	8003662 <HAL_TIM_IC_Start_IT+0xe2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003660:	e013      	b.n	800368a <HAL_TIM_IC_Start_IT+0x10a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b0c      	cmp	r3, #12
 8003666:	d104      	bne.n	8003672 <HAL_TIM_IC_Start_IT+0xf2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003670:	e00b      	b.n	800368a <HAL_TIM_IC_Start_IT+0x10a>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b10      	cmp	r3, #16
 8003676:	d104      	bne.n	8003682 <HAL_TIM_IC_Start_IT+0x102>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003680:	e003      	b.n	800368a <HAL_TIM_IC_Start_IT+0x10a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <HAL_TIM_IC_Start_IT+0x11a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003698:	e013      	b.n	80036c2 <HAL_TIM_IC_Start_IT+0x142>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d104      	bne.n	80036aa <HAL_TIM_IC_Start_IT+0x12a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036a8:	e00b      	b.n	80036c2 <HAL_TIM_IC_Start_IT+0x142>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d104      	bne.n	80036ba <HAL_TIM_IC_Start_IT+0x13a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036b8:	e003      	b.n	80036c2 <HAL_TIM_IC_Start_IT+0x142>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	d841      	bhi.n	800374c <HAL_TIM_IC_Start_IT+0x1cc>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_TIM_IC_Start_IT+0x150>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	08003705 	.word	0x08003705
 80036d4:	0800374d 	.word	0x0800374d
 80036d8:	0800374d 	.word	0x0800374d
 80036dc:	0800374d 	.word	0x0800374d
 80036e0:	08003717 	.word	0x08003717
 80036e4:	0800374d 	.word	0x0800374d
 80036e8:	0800374d 	.word	0x0800374d
 80036ec:	0800374d 	.word	0x0800374d
 80036f0:	08003729 	.word	0x08003729
 80036f4:	0800374d 	.word	0x0800374d
 80036f8:	0800374d 	.word	0x0800374d
 80036fc:	0800374d 	.word	0x0800374d
 8003700:	0800373b 	.word	0x0800373b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0202 	orr.w	r2, r2, #2
 8003712:	60da      	str	r2, [r3, #12]
      break;
 8003714:	e01d      	b.n	8003752 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0204 	orr.w	r2, r2, #4
 8003724:	60da      	str	r2, [r3, #12]
      break;
 8003726:	e014      	b.n	8003752 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	60da      	str	r2, [r3, #12]
      break;
 8003738:	e00b      	b.n	8003752 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0210 	orr.w	r2, r2, #16
 8003748:	60da      	str	r2, [r3, #12]
      break;
 800374a:	e002      	b.n	8003752 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	bf00      	nop
  }

  if (status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d14e      	bne.n	80037f6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	6839      	ldr	r1, [r7, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f001 fa59 	bl	8004c18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_TIM_IC_Start_IT+0x280>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_TIM_IC_Start_IT+0x236>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d01d      	beq.n	80037b6 <HAL_TIM_IC_Start_IT+0x236>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a21      	ldr	r2, [pc, #132]	; (8003804 <HAL_TIM_IC_Start_IT+0x284>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_TIM_IC_Start_IT+0x236>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_TIM_IC_Start_IT+0x288>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_TIM_IC_Start_IT+0x236>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <HAL_TIM_IC_Start_IT+0x28c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_TIM_IC_Start_IT+0x236>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_TIM_IC_Start_IT+0x290>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_TIM_IC_Start_IT+0x236>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_TIM_IC_Start_IT+0x294>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_TIM_IC_Start_IT+0x236>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_TIM_IC_Start_IT+0x298>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d115      	bne.n	80037e2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_TIM_IC_Start_IT+0x29c>)
 80037be:	4013      	ands	r3, r2
 80037c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b06      	cmp	r3, #6
 80037c6:	d015      	beq.n	80037f4 <HAL_TIM_IC_Start_IT+0x274>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ce:	d011      	beq.n	80037f4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e0:	e008      	b.n	80037f4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e000      	b.n	80037f6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40013400 	.word	0x40013400
 8003814:	40014000 	.word	0x40014000
 8003818:	40015000 	.word	0x40015000
 800381c:	00010007 	.word	0x00010007

08003820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b02      	cmp	r3, #2
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0202 	mvn.w	r2, #2
 800384c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd f8ce 	bl	8000a04 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fc1e 	bl	80040ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fc25 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0204 	mvn.w	r2, #4
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd f8a4 	bl	8000a04 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fbf4 	bl	80040ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fbfb 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0208 	mvn.w	r2, #8
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd f87a 	bl	8000a04 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fbca 	bl	80040ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fbd1 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b10      	cmp	r3, #16
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0210 	mvn.w	r2, #16
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2208      	movs	r2, #8
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd f850 	bl	8000a04 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fba0 	bl	80040ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fba7 	bl	80040c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10e      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0201 	mvn.w	r2, #1
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd f856 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d107      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f001 f9ea 	bl	8004da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d10e      	bne.n	80039fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f001 f9dd 	bl	8004db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d10e      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d107      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fb55 	bl	80040d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d10e      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d107      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f06f 0220 	mvn.w	r2, #32
 8003a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f001 f99d 	bl	8004d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a64:	d10f      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f001 f9a3 	bl	8004dcc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a94:	d10f      	bne.n	8003ab6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aa4:	d107      	bne.n	8003ab6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f001 f995 	bl	8004de0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad4:	d107      	bne.n	8003ae6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f001 f987 	bl	8004df4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af4:	d10f      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b04:	d107      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f001 f979 	bl	8004e08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e088      	b.n	8003c4e <HAL_TIM_IC_ConfigChannel+0x130>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d11b      	bne.n	8003b82 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f000 fe97 	bl	800488c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 020c 	bic.w	r2, r2, #12
 8003b6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6999      	ldr	r1, [r3, #24]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
 8003b80:	e060      	b.n	8003c44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d11c      	bne.n	8003bc2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f000 ff1b 	bl	80049d2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003baa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6999      	ldr	r1, [r3, #24]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	619a      	str	r2, [r3, #24]
 8003bc0:	e040      	b.n	8003c44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f000 ff68 	bl	8004aac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 020c 	bic.w	r2, r2, #12
 8003bea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69d9      	ldr	r1, [r3, #28]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	e021      	b.n	8003c44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d11c      	bne.n	8003c40 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f000 ff85 	bl	8004b24 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69d9      	ldr	r1, [r3, #28]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	021a      	lsls	r2, r3, #8
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	61da      	str	r2, [r3, #28]
 8003c3e:	e001      	b.n	8003c44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e0ff      	b.n	8003e76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b14      	cmp	r3, #20
 8003c82:	f200 80f0 	bhi.w	8003e66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003ce1 	.word	0x08003ce1
 8003c90:	08003e67 	.word	0x08003e67
 8003c94:	08003e67 	.word	0x08003e67
 8003c98:	08003e67 	.word	0x08003e67
 8003c9c:	08003d21 	.word	0x08003d21
 8003ca0:	08003e67 	.word	0x08003e67
 8003ca4:	08003e67 	.word	0x08003e67
 8003ca8:	08003e67 	.word	0x08003e67
 8003cac:	08003d63 	.word	0x08003d63
 8003cb0:	08003e67 	.word	0x08003e67
 8003cb4:	08003e67 	.word	0x08003e67
 8003cb8:	08003e67 	.word	0x08003e67
 8003cbc:	08003da3 	.word	0x08003da3
 8003cc0:	08003e67 	.word	0x08003e67
 8003cc4:	08003e67 	.word	0x08003e67
 8003cc8:	08003e67 	.word	0x08003e67
 8003ccc:	08003de5 	.word	0x08003de5
 8003cd0:	08003e67 	.word	0x08003e67
 8003cd4:	08003e67 	.word	0x08003e67
 8003cd8:	08003e67 	.word	0x08003e67
 8003cdc:	08003e25 	.word	0x08003e25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 faa6 	bl	8004238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0208 	orr.w	r2, r2, #8
 8003cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0204 	bic.w	r2, r2, #4
 8003d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6999      	ldr	r1, [r3, #24]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	619a      	str	r2, [r3, #24]
      break;
 8003d1e:	e0a5      	b.n	8003e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fb20 	bl	800436c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	021a      	lsls	r2, r3, #8
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	619a      	str	r2, [r3, #24]
      break;
 8003d60:	e084      	b.n	8003e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fb93 	bl	8004494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0208 	orr.w	r2, r2, #8
 8003d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0204 	bic.w	r2, r2, #4
 8003d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69d9      	ldr	r1, [r3, #28]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	61da      	str	r2, [r3, #28]
      break;
 8003da0:	e064      	b.n	8003e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fc05 	bl	80045b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	021a      	lsls	r2, r3, #8
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	61da      	str	r2, [r3, #28]
      break;
 8003de2:	e043      	b.n	8003e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fc78 	bl	80046e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0208 	orr.w	r2, r2, #8
 8003dfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0204 	bic.w	r2, r2, #4
 8003e0e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e22:	e023      	b.n	8003e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fcc2 	bl	80047b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	021a      	lsls	r2, r3, #8
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e64:	e002      	b.n	8003e6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop

08003e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_TIM_ConfigClockSource+0x1c>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e0f6      	b.n	800408a <HAL_TIM_ConfigClockSource+0x20a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6f      	ldr	r2, [pc, #444]	; (8004094 <HAL_TIM_ConfigClockSource+0x214>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f000 80c1 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003edc:	4a6d      	ldr	r2, [pc, #436]	; (8004094 <HAL_TIM_ConfigClockSource+0x214>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	f200 80c6 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ee4:	4a6c      	ldr	r2, [pc, #432]	; (8004098 <HAL_TIM_ConfigClockSource+0x218>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	f000 80b9 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003eec:	4a6a      	ldr	r2, [pc, #424]	; (8004098 <HAL_TIM_ConfigClockSource+0x218>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f200 80be 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ef4:	4a69      	ldr	r2, [pc, #420]	; (800409c <HAL_TIM_ConfigClockSource+0x21c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	f000 80b1 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003efc:	4a67      	ldr	r2, [pc, #412]	; (800409c <HAL_TIM_ConfigClockSource+0x21c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f200 80b6 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f04:	4a66      	ldr	r2, [pc, #408]	; (80040a0 <HAL_TIM_ConfigClockSource+0x220>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f000 80a9 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003f0c:	4a64      	ldr	r2, [pc, #400]	; (80040a0 <HAL_TIM_ConfigClockSource+0x220>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	f200 80ae 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f14:	4a63      	ldr	r2, [pc, #396]	; (80040a4 <HAL_TIM_ConfigClockSource+0x224>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f000 80a1 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003f1c:	4a61      	ldr	r2, [pc, #388]	; (80040a4 <HAL_TIM_ConfigClockSource+0x224>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f200 80a6 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f24:	4a60      	ldr	r2, [pc, #384]	; (80040a8 <HAL_TIM_ConfigClockSource+0x228>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f000 8099 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003f2c:	4a5e      	ldr	r2, [pc, #376]	; (80040a8 <HAL_TIM_ConfigClockSource+0x228>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	f200 809e 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f38:	f000 8091 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003f3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f40:	f200 8096 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f48:	f000 8089 	beq.w	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f50:	f200 808e 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f58:	d03e      	beq.n	8003fd8 <HAL_TIM_ConfigClockSource+0x158>
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5e:	f200 8087 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	f000 8086 	beq.w	8004076 <HAL_TIM_ConfigClockSource+0x1f6>
 8003f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6e:	d87f      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d01a      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x12a>
 8003f74:	2b70      	cmp	r3, #112	; 0x70
 8003f76:	d87b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d050      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x19e>
 8003f7c:	2b60      	cmp	r3, #96	; 0x60
 8003f7e:	d877      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f80:	2b50      	cmp	r3, #80	; 0x50
 8003f82:	d03c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x17e>
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d873      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d058      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x1be>
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d86f      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d064      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d86b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d060      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d867      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05c      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d05a      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1de>
 8003fa8:	e062      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f000 fe0d 	bl	8004bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	609a      	str	r2, [r3, #8]
      break;
 8003fd6:	e04f      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6899      	ldr	r1, [r3, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f000 fdf6 	bl	8004bd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffa:	609a      	str	r2, [r3, #8]
      break;
 8003ffc:	e03c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 fcb2 	bl	8004974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2150      	movs	r1, #80	; 0x50
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fdc1 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 800401c:	e02c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f000 fd0e 	bl	8004a4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2160      	movs	r1, #96	; 0x60
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fdb1 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 800403c:	e01c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	461a      	mov	r2, r3
 800404c:	f000 fc92 	bl	8004974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fda1 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 800405c:	e00c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f000 fd98 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 800406e:	e003      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      break;
 8004074:	e000      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	00100070 	.word	0x00100070
 8004098:	00100060 	.word	0x00100060
 800409c:	00100050 	.word	0x00100050
 80040a0:	00100040 	.word	0x00100040
 80040a4:	00100030 	.word	0x00100030
 80040a8:	00100020 	.word	0x00100020

080040ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a46      	ldr	r2, [pc, #280]	; (8004214 <TIM_Base_SetConfig+0x12c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d017      	beq.n	8004130 <TIM_Base_SetConfig+0x48>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004106:	d013      	beq.n	8004130 <TIM_Base_SetConfig+0x48>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a43      	ldr	r2, [pc, #268]	; (8004218 <TIM_Base_SetConfig+0x130>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00f      	beq.n	8004130 <TIM_Base_SetConfig+0x48>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a42      	ldr	r2, [pc, #264]	; (800421c <TIM_Base_SetConfig+0x134>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_Base_SetConfig+0x48>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a41      	ldr	r2, [pc, #260]	; (8004220 <TIM_Base_SetConfig+0x138>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_Base_SetConfig+0x48>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a40      	ldr	r2, [pc, #256]	; (8004224 <TIM_Base_SetConfig+0x13c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0x48>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <TIM_Base_SetConfig+0x140>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d108      	bne.n	8004142 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a33      	ldr	r2, [pc, #204]	; (8004214 <TIM_Base_SetConfig+0x12c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d023      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d01f      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a30      	ldr	r2, [pc, #192]	; (8004218 <TIM_Base_SetConfig+0x130>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01b      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2f      	ldr	r2, [pc, #188]	; (800421c <TIM_Base_SetConfig+0x134>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d017      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2e      	ldr	r2, [pc, #184]	; (8004220 <TIM_Base_SetConfig+0x138>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2d      	ldr	r2, [pc, #180]	; (8004224 <TIM_Base_SetConfig+0x13c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00f      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2d      	ldr	r2, [pc, #180]	; (800422c <TIM_Base_SetConfig+0x144>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <TIM_Base_SetConfig+0x148>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2b      	ldr	r2, [pc, #172]	; (8004234 <TIM_Base_SetConfig+0x14c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_Base_SetConfig+0xaa>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a26      	ldr	r2, [pc, #152]	; (8004228 <TIM_Base_SetConfig+0x140>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d108      	bne.n	80041a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a12      	ldr	r2, [pc, #72]	; (8004214 <TIM_Base_SetConfig+0x12c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <TIM_Base_SetConfig+0x110>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a14      	ldr	r2, [pc, #80]	; (8004224 <TIM_Base_SetConfig+0x13c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00f      	beq.n	80041f8 <TIM_Base_SetConfig+0x110>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a14      	ldr	r2, [pc, #80]	; (800422c <TIM_Base_SetConfig+0x144>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0x110>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a13      	ldr	r2, [pc, #76]	; (8004230 <TIM_Base_SetConfig+0x148>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0x110>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a12      	ldr	r2, [pc, #72]	; (8004234 <TIM_Base_SetConfig+0x14c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0x110>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0d      	ldr	r2, [pc, #52]	; (8004228 <TIM_Base_SetConfig+0x140>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d103      	bne.n	8004200 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	615a      	str	r2, [r3, #20]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40015000 	.word	0x40015000
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800

08004238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f023 0201 	bic.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 0302 	bic.w	r3, r3, #2
 8004284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a30      	ldr	r2, [pc, #192]	; (8004354 <TIM_OC1_SetConfig+0x11c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <TIM_OC1_SetConfig+0x88>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a2f      	ldr	r2, [pc, #188]	; (8004358 <TIM_OC1_SetConfig+0x120>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00f      	beq.n	80042c0 <TIM_OC1_SetConfig+0x88>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a2e      	ldr	r2, [pc, #184]	; (800435c <TIM_OC1_SetConfig+0x124>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <TIM_OC1_SetConfig+0x88>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <TIM_OC1_SetConfig+0x128>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_OC1_SetConfig+0x88>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a2c      	ldr	r2, [pc, #176]	; (8004364 <TIM_OC1_SetConfig+0x12c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_OC1_SetConfig+0x88>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a2b      	ldr	r2, [pc, #172]	; (8004368 <TIM_OC1_SetConfig+0x130>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10c      	bne.n	80042da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0308 	bic.w	r3, r3, #8
 80042c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f023 0304 	bic.w	r3, r3, #4
 80042d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <TIM_OC1_SetConfig+0x11c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <TIM_OC1_SetConfig+0xd2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <TIM_OC1_SetConfig+0x120>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00f      	beq.n	800430a <TIM_OC1_SetConfig+0xd2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1b      	ldr	r2, [pc, #108]	; (800435c <TIM_OC1_SetConfig+0x124>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00b      	beq.n	800430a <TIM_OC1_SetConfig+0xd2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <TIM_OC1_SetConfig+0x128>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <TIM_OC1_SetConfig+0xd2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <TIM_OC1_SetConfig+0x12c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC1_SetConfig+0xd2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a18      	ldr	r2, [pc, #96]	; (8004368 <TIM_OC1_SetConfig+0x130>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d111      	bne.n	800432e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	621a      	str	r2, [r3, #32]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40013400 	.word	0x40013400
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800
 8004368:	40015000 	.word	0x40015000

0800436c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f023 0210 	bic.w	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0320 	bic.w	r3, r3, #32
 80043ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a2c      	ldr	r2, [pc, #176]	; (800447c <TIM_OC2_SetConfig+0x110>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_OC2_SetConfig+0x74>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <TIM_OC2_SetConfig+0x114>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC2_SetConfig+0x74>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <TIM_OC2_SetConfig+0x118>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10d      	bne.n	80043fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a1f      	ldr	r2, [pc, #124]	; (800447c <TIM_OC2_SetConfig+0x110>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <TIM_OC2_SetConfig+0xc0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <TIM_OC2_SetConfig+0x114>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00f      	beq.n	800442c <TIM_OC2_SetConfig+0xc0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <TIM_OC2_SetConfig+0x11c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_OC2_SetConfig+0xc0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1d      	ldr	r2, [pc, #116]	; (800448c <TIM_OC2_SetConfig+0x120>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_OC2_SetConfig+0xc0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <TIM_OC2_SetConfig+0x124>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_OC2_SetConfig+0xc0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a17      	ldr	r2, [pc, #92]	; (8004484 <TIM_OC2_SetConfig+0x118>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d113      	bne.n	8004454 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40013400 	.word	0x40013400
 8004484:	40015000 	.word	0x40015000
 8004488:	40014000 	.word	0x40014000
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800

08004494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2b      	ldr	r2, [pc, #172]	; (80045a0 <TIM_OC3_SetConfig+0x10c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d007      	beq.n	8004506 <TIM_OC3_SetConfig+0x72>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2a      	ldr	r2, [pc, #168]	; (80045a4 <TIM_OC3_SetConfig+0x110>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_OC3_SetConfig+0x72>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a29      	ldr	r2, [pc, #164]	; (80045a8 <TIM_OC3_SetConfig+0x114>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10d      	bne.n	8004522 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800450c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1e      	ldr	r2, [pc, #120]	; (80045a0 <TIM_OC3_SetConfig+0x10c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <TIM_OC3_SetConfig+0xbe>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <TIM_OC3_SetConfig+0x110>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00f      	beq.n	8004552 <TIM_OC3_SetConfig+0xbe>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <TIM_OC3_SetConfig+0x118>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_OC3_SetConfig+0xbe>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <TIM_OC3_SetConfig+0x11c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_OC3_SetConfig+0xbe>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1b      	ldr	r2, [pc, #108]	; (80045b4 <TIM_OC3_SetConfig+0x120>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC3_SetConfig+0xbe>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a16      	ldr	r2, [pc, #88]	; (80045a8 <TIM_OC3_SetConfig+0x114>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d113      	bne.n	800457a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40013400 	.word	0x40013400
 80045a8:	40015000 	.word	0x40015000
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40014400 	.word	0x40014400
 80045b4:	40014800 	.word	0x40014800

080045b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	031b      	lsls	r3, r3, #12
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <TIM_OC4_SetConfig+0x110>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_OC4_SetConfig+0x74>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <TIM_OC4_SetConfig+0x114>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_OC4_SetConfig+0x74>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <TIM_OC4_SetConfig+0x118>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10d      	bne.n	8004648 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	031b      	lsls	r3, r3, #12
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <TIM_OC4_SetConfig+0x110>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <TIM_OC4_SetConfig+0xc0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <TIM_OC4_SetConfig+0x114>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00f      	beq.n	8004678 <TIM_OC4_SetConfig+0xc0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a1e      	ldr	r2, [pc, #120]	; (80046d4 <TIM_OC4_SetConfig+0x11c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00b      	beq.n	8004678 <TIM_OC4_SetConfig+0xc0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <TIM_OC4_SetConfig+0x120>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d007      	beq.n	8004678 <TIM_OC4_SetConfig+0xc0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <TIM_OC4_SetConfig+0x124>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_OC4_SetConfig+0xc0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <TIM_OC4_SetConfig+0x118>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d113      	bne.n	80046a0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004686:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	019b      	lsls	r3, r3, #6
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40013400 	.word	0x40013400
 80046d0:	40015000 	.word	0x40015000
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800

080046e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004724:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <TIM_OC5_SetConfig+0xbc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <TIM_OC5_SetConfig+0x82>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <TIM_OC5_SetConfig+0xc0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00f      	beq.n	8004762 <TIM_OC5_SetConfig+0x82>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <TIM_OC5_SetConfig+0xc4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00b      	beq.n	8004762 <TIM_OC5_SetConfig+0x82>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <TIM_OC5_SetConfig+0xc8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <TIM_OC5_SetConfig+0x82>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a15      	ldr	r2, [pc, #84]	; (80047ac <TIM_OC5_SetConfig+0xcc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_OC5_SetConfig+0x82>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <TIM_OC5_SetConfig+0xd0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d109      	bne.n	8004776 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800
 80047b0:	40015000 	.word	0x40015000

080047b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	021b      	lsls	r3, r3, #8
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	051b      	lsls	r3, r3, #20
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <TIM_OC6_SetConfig+0xc0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <TIM_OC6_SetConfig+0x84>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a19      	ldr	r2, [pc, #100]	; (8004878 <TIM_OC6_SetConfig+0xc4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00f      	beq.n	8004838 <TIM_OC6_SetConfig+0x84>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <TIM_OC6_SetConfig+0xc8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_OC6_SetConfig+0x84>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a17      	ldr	r2, [pc, #92]	; (8004880 <TIM_OC6_SetConfig+0xcc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_OC6_SetConfig+0x84>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a16      	ldr	r2, [pc, #88]	; (8004884 <TIM_OC6_SetConfig+0xd0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_OC6_SetConfig+0x84>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <TIM_OC6_SetConfig+0xd4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d109      	bne.n	800484c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	029b      	lsls	r3, r3, #10
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40013400 	.word	0x40013400
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800
 8004888:	40015000 	.word	0x40015000

0800488c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4a28      	ldr	r2, [pc, #160]	; (8004958 <TIM_TI1_SetConfig+0xcc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01b      	beq.n	80048f2 <TIM_TI1_SetConfig+0x66>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c0:	d017      	beq.n	80048f2 <TIM_TI1_SetConfig+0x66>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a25      	ldr	r2, [pc, #148]	; (800495c <TIM_TI1_SetConfig+0xd0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <TIM_TI1_SetConfig+0x66>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a24      	ldr	r2, [pc, #144]	; (8004960 <TIM_TI1_SetConfig+0xd4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00f      	beq.n	80048f2 <TIM_TI1_SetConfig+0x66>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4a23      	ldr	r2, [pc, #140]	; (8004964 <TIM_TI1_SetConfig+0xd8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <TIM_TI1_SetConfig+0x66>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a22      	ldr	r2, [pc, #136]	; (8004968 <TIM_TI1_SetConfig+0xdc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <TIM_TI1_SetConfig+0x66>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a21      	ldr	r2, [pc, #132]	; (800496c <TIM_TI1_SetConfig+0xe0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <TIM_TI1_SetConfig+0x66>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <TIM_TI1_SetConfig+0xe4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <TIM_TI1_SetConfig+0x6a>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <TIM_TI1_SetConfig+0x6c>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e003      	b.n	8004916 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	b2db      	uxtb	r3, r3
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f023 030a 	bic.w	r3, r3, #10
 8004930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f003 030a 	and.w	r3, r3, #10
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40013400 	.word	0x40013400
 800496c:	40014000 	.word	0x40014000
 8004970:	40015000 	.word	0x40015000

08004974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f023 0201 	bic.w	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f023 030a 	bic.w	r3, r3, #10
 80049b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b087      	sub	sp, #28
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f023 0210 	bic.w	r2, r3, #16
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	031b      	lsls	r3, r3, #12
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	621a      	str	r2, [r3, #32]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f023 0210 	bic.w	r2, r3, #16
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	031b      	lsls	r3, r3, #12
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 0303 	bic.w	r3, r3, #3
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004afc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	031b      	lsls	r3, r3, #12
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	031b      	lsls	r3, r3, #12
 8004b7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f043 0307 	orr.w	r3, r3, #7
 8004bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	021a      	lsls	r2, r3, #8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	609a      	str	r2, [r3, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1a      	ldr	r2, [r3, #32]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a1a      	ldr	r2, [r3, #32]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e074      	b.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a34      	ldr	r2, [pc, #208]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d009      	beq.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a33      	ldr	r2, [pc, #204]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d004      	beq.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a31      	ldr	r2, [pc, #196]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d01d      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d10c      	bne.n	8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40015000 	.word	0x40015000
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40014000 	.word	0x40014000

08004d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e042      	b.n	8004eb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7fc fc5f 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2224      	movs	r2, #36	; 0x24
 8004e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fbfa 	bl	8005658 <UART_SetConfig>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e022      	b.n	8004eb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 feea 	bl	8005c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 ff71 	bl	8005d94 <UART_CheckIdleState>
 8004eb2:	4603      	mov	r3, r0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	f040 8083 	bne.w	8004fde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_UART_Transmit+0x28>
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e07b      	b.n	8004fe0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_UART_Transmit+0x3a>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e074      	b.n	8004fe0 <HAL_UART_Transmit+0x124>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2221      	movs	r2, #33	; 0x21
 8004f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f0e:	f7fc fce7 	bl	80018e0 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2c:	d108      	bne.n	8004f40 <HAL_UART_Transmit+0x84>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	e003      	b.n	8004f48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004f50:	e02c      	b.n	8004fac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 ff64 	bl	8005e2a <UART_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e039      	b.n	8004fe0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	3302      	adds	r3, #2
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e007      	b.n	8004f9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	3301      	adds	r3, #1
 8004f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1cc      	bne.n	8004f52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2140      	movs	r1, #64	; 0x40
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 ff31 	bl	8005e2a <UART_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e006      	b.n	8004fe0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
  }
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b0ba      	sub	sp, #232	; 0xe8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800500e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005012:	f640 030f 	movw	r3, #2063	; 0x80f
 8005016:	4013      	ands	r3, r2
 8005018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800501c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d11b      	bne.n	800505c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d015      	beq.n	800505c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800503c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d009      	beq.n	800505c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 82d6 	beq.w	80055fe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	4798      	blx	r3
      }
      return;
 800505a:	e2d0      	b.n	80055fe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800505c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 811f 	beq.w	80052a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005066:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800506a:	4b8b      	ldr	r3, [pc, #556]	; (8005298 <HAL_UART_IRQHandler+0x2b0>)
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005072:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005076:	4b89      	ldr	r3, [pc, #548]	; (800529c <HAL_UART_IRQHandler+0x2b4>)
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8112 	beq.w	80052a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d011      	beq.n	80050b0 <HAL_UART_IRQHandler+0xc8>
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2201      	movs	r2, #1
 800509e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d011      	beq.n	80050e0 <HAL_UART_IRQHandler+0xf8>
 80050bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2202      	movs	r2, #2
 80050ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d6:	f043 0204 	orr.w	r2, r3, #4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d011      	beq.n	8005110 <HAL_UART_IRQHandler+0x128>
 80050ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2204      	movs	r2, #4
 80050fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005106:	f043 0202 	orr.w	r2, r3, #2
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d017      	beq.n	800514c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800511c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005128:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800512c:	4b5a      	ldr	r3, [pc, #360]	; (8005298 <HAL_UART_IRQHandler+0x2b0>)
 800512e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00b      	beq.n	800514c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2208      	movs	r2, #8
 800513a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005142:	f043 0208 	orr.w	r2, r3, #8
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800514c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005154:	2b00      	cmp	r3, #0
 8005156:	d012      	beq.n	800517e <HAL_UART_IRQHandler+0x196>
 8005158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00c      	beq.n	800517e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800516c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005174:	f043 0220 	orr.w	r2, r3, #32
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 823c 	beq.w	8005602 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800518a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d013      	beq.n	80051be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d105      	bne.n	80051ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d005      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d04f      	beq.n	8005282 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fee9 	bl	8005fba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b40      	cmp	r3, #64	; 0x40
 80051f4:	d141      	bne.n	800527a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800520c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800522e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800523a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1d9      	bne.n	80051f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d013      	beq.n	8005272 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800524e:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <HAL_UART_IRQHandler+0x2b8>)
 8005250:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005256:	4618      	mov	r0, r3
 8005258:	f7fc fcb6 	bl	8001bc8 <HAL_DMA_Abort_IT>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d017      	beq.n	8005292 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800526c:	4610      	mov	r0, r2
 800526e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005270:	e00f      	b.n	8005292 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f9da 	bl	800562c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005278:	e00b      	b.n	8005292 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f9d6 	bl	800562c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	e007      	b.n	8005292 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9d2 	bl	800562c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005290:	e1b7      	b.n	8005602 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005292:	bf00      	nop
    return;
 8005294:	e1b5      	b.n	8005602 <HAL_UART_IRQHandler+0x61a>
 8005296:	bf00      	nop
 8005298:	10000001 	.word	0x10000001
 800529c:	04000120 	.word	0x04000120
 80052a0:	08006087 	.word	0x08006087

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f040 814a 	bne.w	8005542 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8143 	beq.w	8005542 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 813c 	beq.w	8005542 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2210      	movs	r2, #16
 80052d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	f040 80b5 	bne.w	800544c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8187 	beq.w	8005606 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005302:	429a      	cmp	r2, r3
 8005304:	f080 817f 	bcs.w	8005606 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800530e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 8086 	bne.w	8005430 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800533c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800534e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005352:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800535a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1da      	bne.n	8005324 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3308      	adds	r3, #8
 8005374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800537e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005392:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005396:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800539a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e1      	bne.n	800536e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e3      	bne.n	80053aa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005400:	f023 0310 	bic.w	r3, r3, #16
 8005404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005412:	65bb      	str	r3, [r7, #88]	; 0x58
 8005414:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005418:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e4      	bne.n	80053f0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800542a:	4618      	mov	r0, r3
 800542c:	f7fc fb73 	bl	8001b16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800543c:	b29b      	uxth	r3, r3
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	b29b      	uxth	r3, r3
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8fb 	bl	8005640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800544a:	e0dc      	b.n	8005606 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005458:	b29b      	uxth	r3, r3
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80ce 	beq.w	800560a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800546e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80c9 	beq.w	800560a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800548c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800549a:	647b      	str	r3, [r7, #68]	; 0x44
 800549c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e4      	bne.n	8005478 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	623b      	str	r3, [r7, #32]
   return(result);
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054d6:	633a      	str	r2, [r7, #48]	; 0x30
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e1      	bne.n	80054ae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	60fb      	str	r3, [r7, #12]
   return(result);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0310 	bic.w	r3, r3, #16
 8005512:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	69b9      	ldr	r1, [r7, #24]
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	617b      	str	r3, [r7, #20]
   return(result);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e4      	bne.n	80054fe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f880 	bl	8005640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005540:	e063      	b.n	800560a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00e      	beq.n	800556c <HAL_UART_IRQHandler+0x584>
 800554e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d008      	beq.n	800556c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005562:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fdcf 	bl	8006108 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800556a:	e051      	b.n	8005610 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b00      	cmp	r3, #0
 8005576:	d014      	beq.n	80055a2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005594:	2b00      	cmp	r3, #0
 8005596:	d03a      	beq.n	800560e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
    }
    return;
 80055a0:	e035      	b.n	800560e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <HAL_UART_IRQHandler+0x5da>
 80055ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fd79 	bl	80060b2 <UART_EndTransmit_IT>
    return;
 80055c0:	e026      	b.n	8005610 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_UART_IRQHandler+0x5fa>
 80055ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fda8 	bl	8006130 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055e0:	e016      	b.n	8005610 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_UART_IRQHandler+0x628>
 80055ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da0c      	bge.n	8005610 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fd90 	bl	800611c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055fc:	e008      	b.n	8005610 <HAL_UART_IRQHandler+0x628>
      return;
 80055fe:	bf00      	nop
 8005600:	e006      	b.n	8005610 <HAL_UART_IRQHandler+0x628>
    return;
 8005602:	bf00      	nop
 8005604:	e004      	b.n	8005610 <HAL_UART_IRQHandler+0x628>
      return;
 8005606:	bf00      	nop
 8005608:	e002      	b.n	8005610 <HAL_UART_IRQHandler+0x628>
      return;
 800560a:	bf00      	nop
 800560c:	e000      	b.n	8005610 <HAL_UART_IRQHandler+0x628>
    return;
 800560e:	bf00      	nop
  }
}
 8005610:	37e8      	adds	r7, #232	; 0xe8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop

08005618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800565c:	b08c      	sub	sp, #48	; 0x30
 800565e:	af00      	add	r7, sp, #0
 8005660:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	431a      	orrs	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	431a      	orrs	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	4313      	orrs	r3, r2
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4baa      	ldr	r3, [pc, #680]	; (8005930 <UART_SetConfig+0x2d8>)
 8005688:	4013      	ands	r3, r2
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005690:	430b      	orrs	r3, r1
 8005692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a9f      	ldr	r2, [pc, #636]	; (8005934 <UART_SetConfig+0x2dc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c0:	4313      	orrs	r3, r2
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80056ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d8:	430b      	orrs	r3, r1
 80056da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	f023 010f 	bic.w	r1, r3, #15
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a90      	ldr	r2, [pc, #576]	; (8005938 <UART_SetConfig+0x2e0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d125      	bne.n	8005748 <UART_SetConfig+0xf0>
 80056fc:	4b8f      	ldr	r3, [pc, #572]	; (800593c <UART_SetConfig+0x2e4>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b03      	cmp	r3, #3
 8005708:	d81a      	bhi.n	8005740 <UART_SetConfig+0xe8>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0xb8>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005721 	.word	0x08005721
 8005714:	08005731 	.word	0x08005731
 8005718:	08005729 	.word	0x08005729
 800571c:	08005739 	.word	0x08005739
 8005720:	2301      	movs	r3, #1
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005726:	e116      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005728:	2302      	movs	r3, #2
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572e:	e112      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005736:	e10e      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573e:	e10a      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005746:	e106      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a7c      	ldr	r2, [pc, #496]	; (8005940 <UART_SetConfig+0x2e8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d138      	bne.n	80057c4 <UART_SetConfig+0x16c>
 8005752:	4b7a      	ldr	r3, [pc, #488]	; (800593c <UART_SetConfig+0x2e4>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	f003 030c 	and.w	r3, r3, #12
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d82d      	bhi.n	80057bc <UART_SetConfig+0x164>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x110>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800579d 	.word	0x0800579d
 800576c:	080057bd 	.word	0x080057bd
 8005770:	080057bd 	.word	0x080057bd
 8005774:	080057bd 	.word	0x080057bd
 8005778:	080057ad 	.word	0x080057ad
 800577c:	080057bd 	.word	0x080057bd
 8005780:	080057bd 	.word	0x080057bd
 8005784:	080057bd 	.word	0x080057bd
 8005788:	080057a5 	.word	0x080057a5
 800578c:	080057bd 	.word	0x080057bd
 8005790:	080057bd 	.word	0x080057bd
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057b5 	.word	0x080057b5
 800579c:	2300      	movs	r3, #0
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a2:	e0d8      	b.n	8005956 <UART_SetConfig+0x2fe>
 80057a4:	2302      	movs	r3, #2
 80057a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057aa:	e0d4      	b.n	8005956 <UART_SetConfig+0x2fe>
 80057ac:	2304      	movs	r3, #4
 80057ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b2:	e0d0      	b.n	8005956 <UART_SetConfig+0x2fe>
 80057b4:	2308      	movs	r3, #8
 80057b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ba:	e0cc      	b.n	8005956 <UART_SetConfig+0x2fe>
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c2:	e0c8      	b.n	8005956 <UART_SetConfig+0x2fe>
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a5e      	ldr	r2, [pc, #376]	; (8005944 <UART_SetConfig+0x2ec>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d125      	bne.n	800581a <UART_SetConfig+0x1c2>
 80057ce:	4b5b      	ldr	r3, [pc, #364]	; (800593c <UART_SetConfig+0x2e4>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057d8:	2b30      	cmp	r3, #48	; 0x30
 80057da:	d016      	beq.n	800580a <UART_SetConfig+0x1b2>
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d818      	bhi.n	8005812 <UART_SetConfig+0x1ba>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d00a      	beq.n	80057fa <UART_SetConfig+0x1a2>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d814      	bhi.n	8005812 <UART_SetConfig+0x1ba>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <UART_SetConfig+0x19a>
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d008      	beq.n	8005802 <UART_SetConfig+0x1aa>
 80057f0:	e00f      	b.n	8005812 <UART_SetConfig+0x1ba>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f8:	e0ad      	b.n	8005956 <UART_SetConfig+0x2fe>
 80057fa:	2302      	movs	r3, #2
 80057fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005800:	e0a9      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005802:	2304      	movs	r3, #4
 8005804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005808:	e0a5      	b.n	8005956 <UART_SetConfig+0x2fe>
 800580a:	2308      	movs	r3, #8
 800580c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005810:	e0a1      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005812:	2310      	movs	r3, #16
 8005814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005818:	e09d      	b.n	8005956 <UART_SetConfig+0x2fe>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a4a      	ldr	r2, [pc, #296]	; (8005948 <UART_SetConfig+0x2f0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d125      	bne.n	8005870 <UART_SetConfig+0x218>
 8005824:	4b45      	ldr	r3, [pc, #276]	; (800593c <UART_SetConfig+0x2e4>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800582e:	2bc0      	cmp	r3, #192	; 0xc0
 8005830:	d016      	beq.n	8005860 <UART_SetConfig+0x208>
 8005832:	2bc0      	cmp	r3, #192	; 0xc0
 8005834:	d818      	bhi.n	8005868 <UART_SetConfig+0x210>
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d00a      	beq.n	8005850 <UART_SetConfig+0x1f8>
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d814      	bhi.n	8005868 <UART_SetConfig+0x210>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <UART_SetConfig+0x1f0>
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d008      	beq.n	8005858 <UART_SetConfig+0x200>
 8005846:	e00f      	b.n	8005868 <UART_SetConfig+0x210>
 8005848:	2300      	movs	r3, #0
 800584a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584e:	e082      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005850:	2302      	movs	r3, #2
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005856:	e07e      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005858:	2304      	movs	r3, #4
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585e:	e07a      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005860:	2308      	movs	r3, #8
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005866:	e076      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005868:	2310      	movs	r3, #16
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586e:	e072      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a35      	ldr	r2, [pc, #212]	; (800594c <UART_SetConfig+0x2f4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d12a      	bne.n	80058d0 <UART_SetConfig+0x278>
 800587a:	4b30      	ldr	r3, [pc, #192]	; (800593c <UART_SetConfig+0x2e4>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005884:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005888:	d01a      	beq.n	80058c0 <UART_SetConfig+0x268>
 800588a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800588e:	d81b      	bhi.n	80058c8 <UART_SetConfig+0x270>
 8005890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005894:	d00c      	beq.n	80058b0 <UART_SetConfig+0x258>
 8005896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589a:	d815      	bhi.n	80058c8 <UART_SetConfig+0x270>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <UART_SetConfig+0x250>
 80058a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a4:	d008      	beq.n	80058b8 <UART_SetConfig+0x260>
 80058a6:	e00f      	b.n	80058c8 <UART_SetConfig+0x270>
 80058a8:	2300      	movs	r3, #0
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ae:	e052      	b.n	8005956 <UART_SetConfig+0x2fe>
 80058b0:	2302      	movs	r3, #2
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b6:	e04e      	b.n	8005956 <UART_SetConfig+0x2fe>
 80058b8:	2304      	movs	r3, #4
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e04a      	b.n	8005956 <UART_SetConfig+0x2fe>
 80058c0:	2308      	movs	r3, #8
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e046      	b.n	8005956 <UART_SetConfig+0x2fe>
 80058c8:	2310      	movs	r3, #16
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e042      	b.n	8005956 <UART_SetConfig+0x2fe>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a17      	ldr	r2, [pc, #92]	; (8005934 <UART_SetConfig+0x2dc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d13a      	bne.n	8005950 <UART_SetConfig+0x2f8>
 80058da:	4b18      	ldr	r3, [pc, #96]	; (800593c <UART_SetConfig+0x2e4>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058e8:	d01a      	beq.n	8005920 <UART_SetConfig+0x2c8>
 80058ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058ee:	d81b      	bhi.n	8005928 <UART_SetConfig+0x2d0>
 80058f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f4:	d00c      	beq.n	8005910 <UART_SetConfig+0x2b8>
 80058f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fa:	d815      	bhi.n	8005928 <UART_SetConfig+0x2d0>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <UART_SetConfig+0x2b0>
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005904:	d008      	beq.n	8005918 <UART_SetConfig+0x2c0>
 8005906:	e00f      	b.n	8005928 <UART_SetConfig+0x2d0>
 8005908:	2300      	movs	r3, #0
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e022      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005910:	2302      	movs	r3, #2
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e01e      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e01a      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e016      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e012      	b.n	8005956 <UART_SetConfig+0x2fe>
 8005930:	cfff69f3 	.word	0xcfff69f3
 8005934:	40008000 	.word	0x40008000
 8005938:	40013800 	.word	0x40013800
 800593c:	40021000 	.word	0x40021000
 8005940:	40004400 	.word	0x40004400
 8005944:	40004800 	.word	0x40004800
 8005948:	40004c00 	.word	0x40004c00
 800594c:	40005000 	.word	0x40005000
 8005950:	2310      	movs	r3, #16
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4aae      	ldr	r2, [pc, #696]	; (8005c14 <UART_SetConfig+0x5bc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	f040 8097 	bne.w	8005a90 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005962:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005966:	2b08      	cmp	r3, #8
 8005968:	d823      	bhi.n	80059b2 <UART_SetConfig+0x35a>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <UART_SetConfig+0x318>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005995 	.word	0x08005995
 8005974:	080059b3 	.word	0x080059b3
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059b3 	.word	0x080059b3
 8005980:	080059a3 	.word	0x080059a3
 8005984:	080059b3 	.word	0x080059b3
 8005988:	080059b3 	.word	0x080059b3
 800598c:	080059b3 	.word	0x080059b3
 8005990:	080059ab 	.word	0x080059ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005994:	f7fd f898 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8005998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800599a:	e010      	b.n	80059be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800599c:	4b9e      	ldr	r3, [pc, #632]	; (8005c18 <UART_SetConfig+0x5c0>)
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059a0:	e00d      	b.n	80059be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a2:	f7fd f823 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80059a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059a8:	e009      	b.n	80059be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059b0:	e005      	b.n	80059be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8130 	beq.w	8005c26 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	4a94      	ldr	r2, [pc, #592]	; (8005c1c <UART_SetConfig+0x5c4>)
 80059cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d305      	bcc.n	80059f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059fc:	e113      	b.n	8005c26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	2200      	movs	r2, #0
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	60fa      	str	r2, [r7, #12]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	4a84      	ldr	r2, [pc, #528]	; (8005c1c <UART_SetConfig+0x5c4>)
 8005a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2200      	movs	r2, #0
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a20:	f7fa fc4e 	bl	80002c0 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	020b      	lsls	r3, r1, #8
 8005a36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a3a:	0202      	lsls	r2, r0, #8
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	6849      	ldr	r1, [r1, #4]
 8005a40:	0849      	lsrs	r1, r1, #1
 8005a42:	2000      	movs	r0, #0
 8005a44:	460c      	mov	r4, r1
 8005a46:	4605      	mov	r5, r0
 8005a48:	eb12 0804 	adds.w	r8, r2, r4
 8005a4c:	eb43 0905 	adc.w	r9, r3, r5
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	469a      	mov	sl, r3
 8005a58:	4693      	mov	fp, r2
 8005a5a:	4652      	mov	r2, sl
 8005a5c:	465b      	mov	r3, fp
 8005a5e:	4640      	mov	r0, r8
 8005a60:	4649      	mov	r1, r9
 8005a62:	f7fa fc2d 	bl	80002c0 <__aeabi_uldivmod>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a74:	d308      	bcc.n	8005a88 <UART_SetConfig+0x430>
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7c:	d204      	bcs.n	8005a88 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a3a      	ldr	r2, [r7, #32]
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	e0ce      	b.n	8005c26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a8e:	e0ca      	b.n	8005c26 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a98:	d166      	bne.n	8005b68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d827      	bhi.n	8005af2 <UART_SetConfig+0x49a>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x450>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005ad5 	.word	0x08005ad5
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005af3 	.word	0x08005af3
 8005ab8:	08005ae3 	.word	0x08005ae3
 8005abc:	08005af3 	.word	0x08005af3
 8005ac0:	08005af3 	.word	0x08005af3
 8005ac4:	08005af3 	.word	0x08005af3
 8005ac8:	08005aeb 	.word	0x08005aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fc fffc 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad2:	e014      	b.n	8005afe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad4:	f7fd f80e 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8005ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ada:	e010      	b.n	8005afe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005adc:	4b4e      	ldr	r3, [pc, #312]	; (8005c18 <UART_SetConfig+0x5c0>)
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ae0:	e00d      	b.n	8005afe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae2:	f7fc ff83 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ae8:	e009      	b.n	8005afe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005af0:	e005      	b.n	8005afe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005afc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8090 	beq.w	8005c26 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	4a44      	ldr	r2, [pc, #272]	; (8005c1c <UART_SetConfig+0x5c4>)
 8005b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b18:	005a      	lsls	r2, r3, #1
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	441a      	add	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	d916      	bls.n	8005b60 <UART_SetConfig+0x508>
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b38:	d212      	bcs.n	8005b60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f023 030f 	bic.w	r3, r3, #15
 8005b42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	8bfb      	ldrh	r3, [r7, #30]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	8bfa      	ldrh	r2, [r7, #30]
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	e062      	b.n	8005c26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b66:	e05e      	b.n	8005c26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d828      	bhi.n	8005bc2 <UART_SetConfig+0x56a>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x520>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005ba5 	.word	0x08005ba5
 8005b80:	08005bad 	.word	0x08005bad
 8005b84:	08005bc3 	.word	0x08005bc3
 8005b88:	08005bb3 	.word	0x08005bb3
 8005b8c:	08005bc3 	.word	0x08005bc3
 8005b90:	08005bc3 	.word	0x08005bc3
 8005b94:	08005bc3 	.word	0x08005bc3
 8005b98:	08005bbb 	.word	0x08005bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7fc ff94 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8005ba0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ba2:	e014      	b.n	8005bce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba4:	f7fc ffa6 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8005ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005baa:	e010      	b.n	8005bce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bac:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <UART_SetConfig+0x5c0>)
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bb0:	e00d      	b.n	8005bce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb2:	f7fc ff1b 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8005bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bb8:	e009      	b.n	8005bce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bc0:	e005      	b.n	8005bce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d028      	beq.n	8005c26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <UART_SetConfig+0x5c4>)
 8005bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	441a      	add	r2, r3
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d910      	bls.n	8005c20 <UART_SetConfig+0x5c8>
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d20c      	bcs.n	8005c20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60da      	str	r2, [r3, #12]
 8005c10:	e009      	b.n	8005c26 <UART_SetConfig+0x5ce>
 8005c12:	bf00      	nop
 8005c14:	40008000 	.word	0x40008000
 8005c18:	00f42400 	.word	0x00f42400
 8005c1c:	0800a4e0 	.word	0x0800a4e0
      }
      else
      {
        ret = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3730      	adds	r7, #48	; 0x30
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01a      	beq.n	8005d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d4e:	d10a      	bne.n	8005d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005da4:	f7fb fd9c 	bl	80018e0 <HAL_GetTick>
 8005da8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d10e      	bne.n	8005dd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f82f 	bl	8005e2a <UART_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e025      	b.n	8005e22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d10e      	bne.n	8005e02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f819 	bl	8005e2a <UART_WaitOnFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e00f      	b.n	8005e22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b09c      	sub	sp, #112	; 0x70
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	603b      	str	r3, [r7, #0]
 8005e36:	4613      	mov	r3, r2
 8005e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3a:	e0a9      	b.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e42:	f000 80a5 	beq.w	8005f90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fb fd4b 	bl	80018e0 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d140      	bne.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e70:	667b      	str	r3, [r7, #100]	; 0x64
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e6      	bne.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3308      	adds	r3, #8
 8005e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eae:	64ba      	str	r2, [r7, #72]	; 0x48
 8005eb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e5      	bne.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e069      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d051      	beq.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efa:	d149      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
 8005f26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e6      	bne.n	8005f06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	613b      	str	r3, [r7, #16]
   return(result);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3308      	adds	r3, #8
 8005f56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f58:	623a      	str	r2, [r7, #32]
 8005f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	69f9      	ldr	r1, [r7, #28]
 8005f5e:	6a3a      	ldr	r2, [r7, #32]
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e5      	bne.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e010      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f43f af46 	beq.w	8005e3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3770      	adds	r7, #112	; 0x70
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b095      	sub	sp, #84	; 0x54
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e6      	bne.n	8005fc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	61fb      	str	r3, [r7, #28]
   return(result);
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006018:	62fa      	str	r2, [r7, #44]	; 0x2c
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800601e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e3      	bne.n	8005ff4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006030:	2b01      	cmp	r3, #1
 8006032:	d118      	bne.n	8006066 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	60bb      	str	r3, [r7, #8]
   return(result);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f023 0310 	bic.w	r3, r3, #16
 8006048:	647b      	str	r3, [r7, #68]	; 0x44
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6979      	ldr	r1, [r7, #20]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	613b      	str	r3, [r7, #16]
   return(result);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e6      	bne.n	8006034 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	671a      	str	r2, [r3, #112]	; 0x70
}
 800607a:	bf00      	nop
 800607c:	3754      	adds	r7, #84	; 0x54
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fac1 	bl	800562c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b088      	sub	sp, #32
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	613b      	str	r3, [r7, #16]
   return(result);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fa8c 	bl	8005618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006100:	bf00      	nop
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_UARTEx_DisableFifoMode+0x16>
 8006156:	2302      	movs	r3, #2
 8006158:	e027      	b.n	80061aa <HAL_UARTEx_DisableFifoMode+0x66>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2224      	movs	r2, #36	; 0x24
 8006166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e02d      	b.n	800622a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2224      	movs	r2, #36	; 0x24
 80061da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f850 	bl	80062b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006246:	2302      	movs	r3, #2
 8006248:	e02d      	b.n	80062a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2224      	movs	r2, #36	; 0x24
 8006256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f812 	bl	80062b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d108      	bne.n	80062d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062d0:	e031      	b.n	8006336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062d2:	2308      	movs	r3, #8
 80062d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062d6:	2308      	movs	r3, #8
 80062d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	0e5b      	lsrs	r3, r3, #25
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	0f5b      	lsrs	r3, r3, #29
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	7b3a      	ldrb	r2, [r7, #12]
 80062fe:	4911      	ldr	r1, [pc, #68]	; (8006344 <UARTEx_SetNbDataToProcess+0x94>)
 8006300:	5c8a      	ldrb	r2, [r1, r2]
 8006302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006306:	7b3a      	ldrb	r2, [r7, #12]
 8006308:	490f      	ldr	r1, [pc, #60]	; (8006348 <UARTEx_SetNbDataToProcess+0x98>)
 800630a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800630c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	7b7a      	ldrb	r2, [r7, #13]
 800631c:	4909      	ldr	r1, [pc, #36]	; (8006344 <UARTEx_SetNbDataToProcess+0x94>)
 800631e:	5c8a      	ldrb	r2, [r1, r2]
 8006320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006324:	7b7a      	ldrb	r2, [r7, #13]
 8006326:	4908      	ldr	r1, [pc, #32]	; (8006348 <UARTEx_SetNbDataToProcess+0x98>)
 8006328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800632a:	fb93 f3f2 	sdiv	r3, r3, r2
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	0800a4f8 	.word	0x0800a4f8
 8006348:	0800a500 	.word	0x0800a500

0800634c <__NVIC_SetPriority>:
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	6039      	str	r1, [r7, #0]
 8006356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635c:	2b00      	cmp	r3, #0
 800635e:	db0a      	blt.n	8006376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	b2da      	uxtb	r2, r3
 8006364:	490c      	ldr	r1, [pc, #48]	; (8006398 <__NVIC_SetPriority+0x4c>)
 8006366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636a:	0112      	lsls	r2, r2, #4
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	440b      	add	r3, r1
 8006370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006374:	e00a      	b.n	800638c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	4908      	ldr	r1, [pc, #32]	; (800639c <__NVIC_SetPriority+0x50>)
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	3b04      	subs	r3, #4
 8006384:	0112      	lsls	r2, r2, #4
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	440b      	add	r3, r1
 800638a:	761a      	strb	r2, [r3, #24]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	e000e100 	.word	0xe000e100
 800639c:	e000ed00 	.word	0xe000ed00

080063a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063a4:	2100      	movs	r1, #0
 80063a6:	f06f 0004 	mvn.w	r0, #4
 80063aa:	f7ff ffcf 	bl	800634c <__NVIC_SetPriority>
#endif
}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ba:	f3ef 8305 	mrs	r3, IPSR
 80063be:	603b      	str	r3, [r7, #0]
  return(result);
 80063c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80063c6:	f06f 0305 	mvn.w	r3, #5
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e00c      	b.n	80063e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <osKernelInitialize+0x44>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d105      	bne.n	80063e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80063d6:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <osKernelInitialize+0x44>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063dc:	2300      	movs	r3, #0
 80063de:	607b      	str	r3, [r7, #4]
 80063e0:	e002      	b.n	80063e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295
 80063e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063e8:	687b      	ldr	r3, [r7, #4]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000398 	.word	0x20000398

080063fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006402:	f3ef 8305 	mrs	r3, IPSR
 8006406:	603b      	str	r3, [r7, #0]
  return(result);
 8006408:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <osKernelStart+0x1a>
    stat = osErrorISR;
 800640e:	f06f 0305 	mvn.w	r3, #5
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e010      	b.n	8006438 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006416:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <osKernelStart+0x48>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d109      	bne.n	8006432 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800641e:	f7ff ffbf 	bl	80063a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <osKernelStart+0x48>)
 8006424:	2202      	movs	r2, #2
 8006426:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006428:	f001 fcbc 	bl	8007da4 <vTaskStartScheduler>
      stat = osOK;
 800642c:	2300      	movs	r3, #0
 800642e:	607b      	str	r3, [r7, #4]
 8006430:	e002      	b.n	8006438 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006438:	687b      	ldr	r3, [r7, #4]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000398 	.word	0x20000398

08006448 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b08e      	sub	sp, #56	; 0x38
 800644c:	af04      	add	r7, sp, #16
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006458:	f3ef 8305 	mrs	r3, IPSR
 800645c:	617b      	str	r3, [r7, #20]
  return(result);
 800645e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006460:	2b00      	cmp	r3, #0
 8006462:	d17e      	bne.n	8006562 <osThreadNew+0x11a>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d07b      	beq.n	8006562 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800646a:	2380      	movs	r3, #128	; 0x80
 800646c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800646e:	2318      	movs	r3, #24
 8006470:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006476:	f04f 33ff 	mov.w	r3, #4294967295
 800647a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d045      	beq.n	800650e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <osThreadNew+0x48>
        name = attr->name;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <osThreadNew+0x6e>
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	2b38      	cmp	r3, #56	; 0x38
 80064a8:	d805      	bhi.n	80064b6 <osThreadNew+0x6e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <osThreadNew+0x72>
        return (NULL);
 80064b6:	2300      	movs	r3, #0
 80064b8:	e054      	b.n	8006564 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	089b      	lsrs	r3, r3, #2
 80064c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <osThreadNew+0xa8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2bbb      	cmp	r3, #187	; 0xbb
 80064d8:	d90a      	bls.n	80064f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <osThreadNew+0xa8>
        mem = 1;
 80064ea:	2301      	movs	r3, #1
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e010      	b.n	8006512 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10c      	bne.n	8006512 <osThreadNew+0xca>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d108      	bne.n	8006512 <osThreadNew+0xca>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <osThreadNew+0xca>
          mem = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	e001      	b.n	8006512 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d110      	bne.n	800653a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006520:	9202      	str	r2, [sp, #8]
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f001 fa4c 	bl	80079cc <xTaskCreateStatic>
 8006534:	4603      	mov	r3, r0
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	e013      	b.n	8006562 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d110      	bne.n	8006562 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	b29a      	uxth	r2, r3
 8006544:	f107 0310 	add.w	r3, r7, #16
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f001 fa97 	bl	8007a86 <xTaskCreate>
 8006558:	4603      	mov	r3, r0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d001      	beq.n	8006562 <osThreadNew+0x11a>
            hTask = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006562:	693b      	ldr	r3, [r7, #16]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006574:	f3ef 8305 	mrs	r3, IPSR
 8006578:	60bb      	str	r3, [r7, #8]
  return(result);
 800657a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <osDelay+0x1c>
    stat = osErrorISR;
 8006580:	f06f 0305 	mvn.w	r3, #5
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e007      	b.n	8006598 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 fbd2 	bl	8007d3c <vTaskDelay>
    }
  }

  return (stat);
 8006598:	68fb      	ldr	r3, [r7, #12]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b08a      	sub	sp, #40	; 0x28
 80065a6:	af02      	add	r7, sp, #8
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b2:	f3ef 8305 	mrs	r3, IPSR
 80065b6:	613b      	str	r3, [r7, #16]
  return(result);
 80065b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d175      	bne.n	80066aa <osSemaphoreNew+0x108>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d072      	beq.n	80066aa <osSemaphoreNew+0x108>
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d86e      	bhi.n	80066aa <osSemaphoreNew+0x108>
    mem = -1;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d015      	beq.n	8006604 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d006      	beq.n	80065ee <osSemaphoreNew+0x4c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b4f      	cmp	r3, #79	; 0x4f
 80065e6:	d902      	bls.n	80065ee <osSemaphoreNew+0x4c>
        mem = 1;
 80065e8:	2301      	movs	r3, #1
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e00c      	b.n	8006608 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <osSemaphoreNew+0x66>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <osSemaphoreNew+0x66>
          mem = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	e001      	b.n	8006608 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d04c      	beq.n	80066aa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d128      	bne.n	8006668 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d10a      	bne.n	8006632 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2203      	movs	r2, #3
 8006622:	9200      	str	r2, [sp, #0]
 8006624:	2200      	movs	r2, #0
 8006626:	2100      	movs	r1, #0
 8006628:	2001      	movs	r0, #1
 800662a:	f000 fa29 	bl	8006a80 <xQueueGenericCreateStatic>
 800662e:	61f8      	str	r0, [r7, #28]
 8006630:	e005      	b.n	800663e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006632:	2203      	movs	r2, #3
 8006634:	2100      	movs	r1, #0
 8006636:	2001      	movs	r0, #1
 8006638:	f000 fa9a 	bl	8006b70 <xQueueGenericCreate>
 800663c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d022      	beq.n	800668a <osSemaphoreNew+0xe8>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01f      	beq.n	800668a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800664a:	2300      	movs	r3, #0
 800664c:	2200      	movs	r2, #0
 800664e:	2100      	movs	r1, #0
 8006650:	69f8      	ldr	r0, [r7, #28]
 8006652:	f000 fb55 	bl	8006d00 <xQueueGenericSend>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d016      	beq.n	800668a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800665c:	69f8      	ldr	r0, [r7, #28]
 800665e:	f000 ffe1 	bl	8007624 <vQueueDelete>
            hSemaphore = NULL;
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	e010      	b.n	800668a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d108      	bne.n	8006680 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	461a      	mov	r2, r3
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fad7 	bl	8006c2a <xQueueCreateCountingSemaphoreStatic>
 800667c:	61f8      	str	r0, [r7, #28]
 800667e:	e004      	b.n	800668a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fb08 	bl	8006c98 <xQueueCreateCountingSemaphore>
 8006688:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00c      	beq.n	80066aa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <osSemaphoreNew+0xfc>
          name = attr->name;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e001      	b.n	80066a2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80066a2:	6979      	ldr	r1, [r7, #20]
 80066a4:	69f8      	ldr	r0, [r7, #28]
 80066a6:	f001 f909 	bl	80078bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80066aa:	69fb      	ldr	r3, [r7, #28]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80066cc:	f06f 0303 	mvn.w	r3, #3
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e039      	b.n	8006748 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d4:	f3ef 8305 	mrs	r3, IPSR
 80066d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80066da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d022      	beq.n	8006726 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80066e6:	f06f 0303 	mvn.w	r3, #3
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e02c      	b.n	8006748 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80066f2:	f107 0308 	add.w	r3, r7, #8
 80066f6:	461a      	mov	r2, r3
 80066f8:	2100      	movs	r1, #0
 80066fa:	6938      	ldr	r0, [r7, #16]
 80066fc:	f000 ff12 	bl	8007524 <xQueueReceiveFromISR>
 8006700:	4603      	mov	r3, r0
 8006702:	2b01      	cmp	r3, #1
 8006704:	d003      	beq.n	800670e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006706:	f06f 0302 	mvn.w	r3, #2
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e01c      	b.n	8006748 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d019      	beq.n	8006748 <osSemaphoreAcquire+0x94>
 8006714:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <osSemaphoreAcquire+0xa0>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	e010      	b.n	8006748 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6938      	ldr	r0, [r7, #16]
 800672a:	f000 fdef 	bl	800730c <xQueueSemaphoreTake>
 800672e:	4603      	mov	r3, r0
 8006730:	2b01      	cmp	r3, #1
 8006732:	d009      	beq.n	8006748 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800673a:	f06f 0301 	mvn.w	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e002      	b.n	8006748 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006742:	f06f 0302 	mvn.w	r3, #2
 8006746:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006748:	697b      	ldr	r3, [r7, #20]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d103      	bne.n	8006776 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800676e:	f06f 0303 	mvn.w	r3, #3
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e02c      	b.n	80067d0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006776:	f3ef 8305 	mrs	r3, IPSR
 800677a:	60fb      	str	r3, [r7, #12]
  return(result);
 800677c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01a      	beq.n	80067b8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006786:	f107 0308 	add.w	r3, r7, #8
 800678a:	4619      	mov	r1, r3
 800678c:	6938      	ldr	r0, [r7, #16]
 800678e:	f000 fc50 	bl	8007032 <xQueueGiveFromISR>
 8006792:	4603      	mov	r3, r0
 8006794:	2b01      	cmp	r3, #1
 8006796:	d003      	beq.n	80067a0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006798:	f06f 0302 	mvn.w	r3, #2
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	e017      	b.n	80067d0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d014      	beq.n	80067d0 <osSemaphoreRelease+0x78>
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <osSemaphoreRelease+0x84>)
 80067a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	e00b      	b.n	80067d0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80067b8:	2300      	movs	r3, #0
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	6938      	ldr	r0, [r7, #16]
 80067c0:	f000 fa9e 	bl	8006d00 <xQueueGenericSend>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d002      	beq.n	80067d0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80067ca:	f06f 0302 	mvn.w	r3, #2
 80067ce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80067d0:	697b      	ldr	r3, [r7, #20]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	e000ed04 	.word	0xe000ed04

080067e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a07      	ldr	r2, [pc, #28]	; (800680c <vApplicationGetIdleTaskMemory+0x2c>)
 80067f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4a06      	ldr	r2, [pc, #24]	; (8006810 <vApplicationGetIdleTaskMemory+0x30>)
 80067f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2280      	movs	r2, #128	; 0x80
 80067fc:	601a      	str	r2, [r3, #0]
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	2000039c 	.word	0x2000039c
 8006810:	20000458 	.word	0x20000458

08006814 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a07      	ldr	r2, [pc, #28]	; (8006840 <vApplicationGetTimerTaskMemory+0x2c>)
 8006824:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4a06      	ldr	r2, [pc, #24]	; (8006844 <vApplicationGetTimerTaskMemory+0x30>)
 800682a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006832:	601a      	str	r2, [r3, #0]
}
 8006834:	bf00      	nop
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	20000658 	.word	0x20000658
 8006844:	20000714 	.word	0x20000714

08006848 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f103 0208 	add.w	r2, r3, #8
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f04f 32ff 	mov.w	r2, #4294967295
 8006860:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f103 0208 	add.w	r2, r3, #8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f103 0208 	add.w	r2, r3, #8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d103      	bne.n	800690a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	e00c      	b.n	8006924 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3308      	adds	r3, #8
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e002      	b.n	8006918 <vListInsert+0x2e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	d2f6      	bcs.n	8006912 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]
}
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6892      	ldr	r2, [r2, #8]
 8006972:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6852      	ldr	r2, [r2, #4]
 800697c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	429a      	cmp	r2, r3
 8006986:	d103      	bne.n	8006990 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	1e5a      	subs	r2, r3, #1
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069da:	f002 fc9b 	bl	8009314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	68f9      	ldr	r1, [r7, #12]
 80069e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	441a      	add	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	68f9      	ldr	r1, [r7, #12]
 8006a0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a10:	fb01 f303 	mul.w	r3, r1, r3
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	22ff      	movs	r2, #255	; 0xff
 8006a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	22ff      	movs	r2, #255	; 0xff
 8006a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d114      	bne.n	8006a5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01a      	beq.n	8006a6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3310      	adds	r3, #16
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f001 fc4b 	bl	80082d8 <xTaskRemoveFromEventList>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d012      	beq.n	8006a6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <xQueueGenericReset+0xcc>)
 8006a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	e009      	b.n	8006a6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3310      	adds	r3, #16
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff fef2 	bl	8006848 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3324      	adds	r3, #36	; 0x24
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff feed 	bl	8006848 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a6e:	f002 fc81 	bl	8009374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a72:	2301      	movs	r3, #1
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <xQueueGenericCreateStatic+0x52>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <xQueueGenericCreateStatic+0x56>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGenericCreateStatic+0x58>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	623b      	str	r3, [r7, #32]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <xQueueGenericCreateStatic+0x7e>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <xQueueGenericCreateStatic+0x82>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <xQueueGenericCreateStatic+0x84>
 8006b02:	2300      	movs	r3, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	61fb      	str	r3, [r7, #28]
}
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b1e:	2350      	movs	r3, #80	; 0x50
 8006b20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b50      	cmp	r3, #80	; 0x50
 8006b26:	d00a      	beq.n	8006b3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61bb      	str	r3, [r7, #24]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f83f 	bl	8006be4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3730      	adds	r7, #48	; 0x30
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	; 0x28
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	613b      	str	r3, [r7, #16]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	3350      	adds	r3, #80	; 0x50
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f002 fcd5 	bl	8009558 <pvPortMalloc>
 8006bae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d011      	beq.n	8006bda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	3350      	adds	r3, #80	; 0x50
 8006bbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bc8:	79fa      	ldrb	r2, [r7, #7]
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f805 	bl	8006be4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bda:	69bb      	ldr	r3, [r7, #24]
	}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e002      	b.n	8006c06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c12:	2101      	movs	r1, #1
 8006c14:	69b8      	ldr	r0, [r7, #24]
 8006c16:	f7ff fecb 	bl	80069b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b08a      	sub	sp, #40	; 0x28
 8006c2e:	af02      	add	r7, sp, #8
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	61bb      	str	r3, [r7, #24]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d90a      	bls.n	8006c70 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	617b      	str	r3, [r7, #20]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c70:	2302      	movs	r3, #2
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff ff00 	bl	8006a80 <xQueueGenericCreateStatic>
 8006c80:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
	}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3720      	adds	r7, #32
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	613b      	str	r3, [r7, #16]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d90a      	bls.n	8006cdc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	60fb      	str	r3, [r7, #12]
}
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cdc:	2202      	movs	r2, #2
 8006cde:	2100      	movs	r1, #0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ff45 	bl	8006b70 <xQueueGenericCreate>
 8006ce6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006cf4:	697b      	ldr	r3, [r7, #20]
	}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08e      	sub	sp, #56	; 0x38
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <xQueueGenericSend+0x32>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d103      	bne.n	8006d40 <xQueueGenericSend+0x40>
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <xQueueGenericSend+0x44>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <xQueueGenericSend+0x46>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <xQueueGenericSend+0x60>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d103      	bne.n	8006d6e <xQueueGenericSend+0x6e>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <xQueueGenericSend+0x72>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <xQueueGenericSend+0x74>
 8006d72:	2300      	movs	r3, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueGenericSend+0x8e>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	623b      	str	r3, [r7, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d8e:	f001 fc65 	bl	800865c <xTaskGetSchedulerState>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <xQueueGenericSend+0x9e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <xQueueGenericSend+0xa2>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <xQueueGenericSend+0xa4>
 8006da2:	2300      	movs	r3, #0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <xQueueGenericSend+0xbe>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	61fb      	str	r3, [r7, #28]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dbe:	f002 faa9 	bl	8009314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d302      	bcc.n	8006dd4 <xQueueGenericSend+0xd4>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d129      	bne.n	8006e28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dda:	f000 fc5e 	bl	800769a <prvCopyDataToQueue>
 8006dde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d010      	beq.n	8006e0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	3324      	adds	r3, #36	; 0x24
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 fa73 	bl	80082d8 <xTaskRemoveFromEventList>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d013      	beq.n	8006e20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006df8:	4b3f      	ldr	r3, [pc, #252]	; (8006ef8 <xQueueGenericSend+0x1f8>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	e00a      	b.n	8006e20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e10:	4b39      	ldr	r3, [pc, #228]	; (8006ef8 <xQueueGenericSend+0x1f8>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e20:	f002 faa8 	bl	8009374 <vPortExitCritical>
				return pdPASS;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e063      	b.n	8006ef0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e2e:	f002 faa1 	bl	8009374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e05c      	b.n	8006ef0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e3c:	f107 0314 	add.w	r3, r7, #20
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 faad 	bl	80083a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e46:	2301      	movs	r3, #1
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e4a:	f002 fa93 	bl	8009374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e4e:	f001 f819 	bl	8007e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e52:	f002 fa5f 	bl	8009314 <vPortEnterCritical>
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d103      	bne.n	8006e6c <xQueueGenericSend+0x16c>
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e72:	b25b      	sxtb	r3, r3
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d103      	bne.n	8006e82 <xQueueGenericSend+0x182>
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e82:	f002 fa77 	bl	8009374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e86:	1d3a      	adds	r2, r7, #4
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 fa9c 	bl	80083cc <xTaskCheckForTimeOut>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d124      	bne.n	8006ee4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e9c:	f000 fcf5 	bl	800788a <prvIsQueueFull>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d018      	beq.n	8006ed8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	3310      	adds	r3, #16
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 f9c2 	bl	8008238 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eb6:	f000 fc80 	bl	80077ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006eba:	f000 fff1 	bl	8007ea0 <xTaskResumeAll>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f47f af7c 	bne.w	8006dbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <xQueueGenericSend+0x1f8>)
 8006ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	e772      	b.n	8006dbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eda:	f000 fc6e 	bl	80077ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ede:	f000 ffdf 	bl	8007ea0 <xTaskResumeAll>
 8006ee2:	e76c      	b.n	8006dbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ee6:	f000 fc68 	bl	80077ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eea:	f000 ffd9 	bl	8007ea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006eee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3738      	adds	r7, #56	; 0x38
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b090      	sub	sp, #64	; 0x40
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d103      	bne.n	8006f38 <xQueueGenericSendFromISR+0x3c>
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <xQueueGenericSendFromISR+0x40>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <xQueueGenericSendFromISR+0x42>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d103      	bne.n	8006f66 <xQueueGenericSendFromISR+0x6a>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <xQueueGenericSendFromISR+0x6e>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <xQueueGenericSendFromISR+0x70>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	623b      	str	r3, [r7, #32]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f86:	f002 faa7 	bl	80094d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	61fa      	str	r2, [r7, #28]
 8006fa0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fa2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d302      	bcc.n	8006fb8 <xQueueGenericSendFromISR+0xbc>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d12f      	bne.n	8007018 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fce:	f000 fb64 	bl	800769a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d112      	bne.n	8007002 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d016      	beq.n	8007012 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	3324      	adds	r3, #36	; 0x24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 f975 	bl	80082d8 <xTaskRemoveFromEventList>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00e      	beq.n	8007012 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e007      	b.n	8007012 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007002:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007006:	3301      	adds	r3, #1
 8007008:	b2db      	uxtb	r3, r3
 800700a:	b25a      	sxtb	r2, r3
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007012:	2301      	movs	r3, #1
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007016:	e001      	b.n	800701c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007018:	2300      	movs	r3, #0
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007026:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800702a:	4618      	mov	r0, r3
 800702c:	3740      	adds	r7, #64	; 0x40
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b08e      	sub	sp, #56	; 0x38
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	623b      	str	r3, [r7, #32]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <xQueueGiveFromISR+0x48>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	61fb      	str	r3, [r7, #28]
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <xQueueGiveFromISR+0x58>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <xQueueGiveFromISR+0x5c>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <xQueueGiveFromISR+0x5e>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <xQueueGiveFromISR+0x78>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	61bb      	str	r3, [r7, #24]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070aa:	f002 fa15 	bl	80094d8 <vPortValidateInterruptPriority>
	__asm volatile
 80070ae:	f3ef 8211 	mrs	r2, BASEPRI
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	617a      	str	r2, [r7, #20]
 80070c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80070c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d22b      	bcs.n	8007132 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d112      	bne.n	800711c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d016      	beq.n	800712c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	3324      	adds	r3, #36	; 0x24
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f8e8 	bl	80082d8 <xTaskRemoveFromEventList>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2201      	movs	r2, #1
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	e007      	b.n	800712c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007120:	3301      	adds	r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	b25a      	sxtb	r2, r3
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800712c:	2301      	movs	r3, #1
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
 8007130:	e001      	b.n	8007136 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007132:	2300      	movs	r3, #0
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f383 8811 	msr	BASEPRI, r3
}
 8007140:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007144:	4618      	mov	r0, r3
 8007146:	3738      	adds	r7, #56	; 0x38
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	; 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <xQueueReceive+0x30>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	623b      	str	r3, [r7, #32]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <xQueueReceive+0x3e>
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <xQueueReceive+0x42>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueReceive+0x44>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <xQueueReceive+0x5e>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	61fb      	str	r3, [r7, #28]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071aa:	f001 fa57 	bl	800865c <xTaskGetSchedulerState>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <xQueueReceive+0x6e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <xQueueReceive+0x72>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueReceive+0x74>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueReceive+0x8e>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	61bb      	str	r3, [r7, #24]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071da:	f002 f89b 	bl	8009314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01f      	beq.n	800722a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ee:	f000 fabe 	bl	800776e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	1e5a      	subs	r2, r3, #1
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00f      	beq.n	8007222 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	3310      	adds	r3, #16
 8007206:	4618      	mov	r0, r3
 8007208:	f001 f866 	bl	80082d8 <xTaskRemoveFromEventList>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007212:	4b3d      	ldr	r3, [pc, #244]	; (8007308 <xQueueReceive+0x1bc>)
 8007214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007222:	f002 f8a7 	bl	8009374 <vPortExitCritical>
				return pdPASS;
 8007226:	2301      	movs	r3, #1
 8007228:	e069      	b.n	80072fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007230:	f002 f8a0 	bl	8009374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007234:	2300      	movs	r3, #0
 8007236:	e062      	b.n	80072fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800723e:	f107 0310 	add.w	r3, r7, #16
 8007242:	4618      	mov	r0, r3
 8007244:	f001 f8ac 	bl	80083a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800724c:	f002 f892 	bl	8009374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007250:	f000 fe18 	bl	8007e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007254:	f002 f85e 	bl	8009314 <vPortEnterCritical>
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725e:	b25b      	sxtb	r3, r3
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d103      	bne.n	800726e <xQueueReceive+0x122>
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007274:	b25b      	sxtb	r3, r3
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d103      	bne.n	8007284 <xQueueReceive+0x138>
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007284:	f002 f876 	bl	8009374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007288:	1d3a      	adds	r2, r7, #4
 800728a:	f107 0310 	add.w	r3, r7, #16
 800728e:	4611      	mov	r1, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f89b 	bl	80083cc <xTaskCheckForTimeOut>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d123      	bne.n	80072e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800729c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800729e:	f000 fade 	bl	800785e <prvIsQueueEmpty>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d017      	beq.n	80072d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	3324      	adds	r3, #36	; 0x24
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 ffc1 	bl	8008238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b8:	f000 fa7f 	bl	80077ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072bc:	f000 fdf0 	bl	8007ea0 <xTaskResumeAll>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d189      	bne.n	80071da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <xQueueReceive+0x1bc>)
 80072c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	e780      	b.n	80071da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072da:	f000 fa6e 	bl	80077ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072de:	f000 fddf 	bl	8007ea0 <xTaskResumeAll>
 80072e2:	e77a      	b.n	80071da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e6:	f000 fa68 	bl	80077ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072ea:	f000 fdd9 	bl	8007ea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f0:	f000 fab5 	bl	800785e <prvIsQueueEmpty>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f43f af6f 	beq.w	80071da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3730      	adds	r7, #48	; 0x30
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007316:	2300      	movs	r3, #0
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	623b      	str	r3, [r7, #32]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	61fb      	str	r3, [r7, #28]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800735c:	f001 f97e 	bl	800865c <xTaskGetSchedulerState>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <xQueueSemaphoreTake+0x60>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <xQueueSemaphoreTake+0x64>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <xQueueSemaphoreTake+0x66>
 8007370:	2300      	movs	r3, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	61bb      	str	r3, [r7, #24]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800738c:	f001 ffc2 	bl	8009314 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	d024      	beq.n	80073e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	1e5a      	subs	r2, r3, #1
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073ac:	f001 facc 	bl	8008948 <pvTaskIncrementMutexHeldCount>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00f      	beq.n	80073de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	3310      	adds	r3, #16
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 ff88 	bl	80082d8 <xTaskRemoveFromEventList>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073ce:	4b54      	ldr	r3, [pc, #336]	; (8007520 <xQueueSemaphoreTake+0x214>)
 80073d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073de:	f001 ffc9 	bl	8009374 <vPortExitCritical>
				return pdPASS;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e097      	b.n	8007516 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d111      	bne.n	8007410 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	617b      	str	r3, [r7, #20]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007408:	f001 ffb4 	bl	8009374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800740c:	2300      	movs	r3, #0
 800740e:	e082      	b.n	8007516 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007416:	f107 030c 	add.w	r3, r7, #12
 800741a:	4618      	mov	r0, r3
 800741c:	f000 ffc0 	bl	80083a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007424:	f001 ffa6 	bl	8009374 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007428:	f000 fd2c 	bl	8007e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800742c:	f001 ff72 	bl	8009314 <vPortEnterCritical>
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007436:	b25b      	sxtb	r3, r3
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d103      	bne.n	8007446 <xQueueSemaphoreTake+0x13a>
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800744c:	b25b      	sxtb	r3, r3
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d103      	bne.n	800745c <xQueueSemaphoreTake+0x150>
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800745c:	f001 ff8a 	bl	8009374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007460:	463a      	mov	r2, r7
 8007462:	f107 030c 	add.w	r3, r7, #12
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f000 ffaf 	bl	80083cc <xTaskCheckForTimeOut>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d132      	bne.n	80074da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007476:	f000 f9f2 	bl	800785e <prvIsQueueEmpty>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d026      	beq.n	80074ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007488:	f001 ff44 	bl	8009314 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f001 f901 	bl	8008698 <xTaskPriorityInherit>
 8007496:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007498:	f001 ff6c 	bl	8009374 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	3324      	adds	r3, #36	; 0x24
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fec7 	bl	8008238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074ac:	f000 f985 	bl	80077ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074b0:	f000 fcf6 	bl	8007ea0 <xTaskResumeAll>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f47f af68 	bne.w	800738c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80074bc:	4b18      	ldr	r3, [pc, #96]	; (8007520 <xQueueSemaphoreTake+0x214>)
 80074be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	e75e      	b.n	800738c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80074ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074d0:	f000 f973 	bl	80077ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074d4:	f000 fce4 	bl	8007ea0 <xTaskResumeAll>
 80074d8:	e758      	b.n	800738c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80074da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074dc:	f000 f96d 	bl	80077ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074e0:	f000 fcde 	bl	8007ea0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074e6:	f000 f9ba 	bl	800785e <prvIsQueueEmpty>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f43f af4d 	beq.w	800738c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00d      	beq.n	8007514 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80074f8:	f001 ff0c 	bl	8009314 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80074fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074fe:	f000 f8b4 	bl	800766a <prvGetDisinheritPriorityAfterTimeout>
 8007502:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800750a:	4618      	mov	r0, r3
 800750c:	f001 f99a 	bl	8008844 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007510:	f001 ff30 	bl	8009374 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007516:	4618      	mov	r0, r3
 8007518:	3738      	adds	r7, #56	; 0x38
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08e      	sub	sp, #56	; 0x38
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	623b      	str	r3, [r7, #32]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <xQueueReceiveFromISR+0x3a>
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <xQueueReceiveFromISR+0x3e>
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <xQueueReceiveFromISR+0x40>
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	61fb      	str	r3, [r7, #28]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800757e:	f001 ffab 	bl	80094d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007582:	f3ef 8211 	mrs	r2, BASEPRI
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	61ba      	str	r2, [r7, #24]
 8007598:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800759a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d02f      	beq.n	800760a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075b8:	f000 f8d9 	bl	800776e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	1e5a      	subs	r2, r3, #1
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80075c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d112      	bne.n	80075f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d016      	beq.n	8007604 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	3310      	adds	r3, #16
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fe7c 	bl	80082d8 <xTaskRemoveFromEventList>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00e      	beq.n	8007604 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	e007      	b.n	8007604 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80075f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	b25a      	sxtb	r2, r3
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007604:	2301      	movs	r3, #1
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
 8007608:	e001      	b.n	800760e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800760a:	2300      	movs	r3, #0
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f383 8811 	msr	BASEPRI, r3
}
 8007618:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800761c:	4618      	mov	r0, r3
 800761e:	3738      	adds	r7, #56	; 0x38
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <vQueueDelete+0x28>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60bb      	str	r3, [r7, #8]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f95f 	bl	8007910 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007658:	2b00      	cmp	r3, #0
 800765a:	d102      	bne.n	8007662 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f002 f847 	bl	80096f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d006      	beq.n	8007688 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e001      	b.n	800768c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800768c:	68fb      	ldr	r3, [r7, #12]
	}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10d      	bne.n	80076d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d14d      	bne.n	800775c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 f84f 	bl	8008768 <xTaskPriorityDisinherit>
 80076ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	609a      	str	r2, [r3, #8]
 80076d2:	e043      	b.n	800775c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d119      	bne.n	800770e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6858      	ldr	r0, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	461a      	mov	r2, r3
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	f002 f94d 	bl	8009984 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	441a      	add	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	429a      	cmp	r2, r3
 8007702:	d32b      	bcc.n	800775c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	605a      	str	r2, [r3, #4]
 800770c:	e026      	b.n	800775c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	68d8      	ldr	r0, [r3, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	461a      	mov	r2, r3
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	f002 f933 	bl	8009984 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	425b      	negs	r3, r3
 8007728:	441a      	add	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d207      	bcs.n	800774a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	425b      	negs	r3, r3
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d105      	bne.n	800775c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	3b01      	subs	r3, #1
 800775a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007764:	697b      	ldr	r3, [r7, #20]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d018      	beq.n	80077b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	441a      	add	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	429a      	cmp	r2, r3
 8007798:	d303      	bcc.n	80077a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68d9      	ldr	r1, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	461a      	mov	r2, r3
 80077ac:	6838      	ldr	r0, [r7, #0]
 80077ae:	f002 f8e9 	bl	8009984 <memcpy>
	}
}
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077c2:	f001 fda7 	bl	8009314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077ce:	e011      	b.n	80077f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d012      	beq.n	80077fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3324      	adds	r3, #36	; 0x24
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fd7b 	bl	80082d8 <xTaskRemoveFromEventList>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077e8:	f000 fe52 	bl	8008490 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dce9      	bgt.n	80077d0 <prvUnlockQueue+0x16>
 80077fc:	e000      	b.n	8007800 <prvUnlockQueue+0x46>
					break;
 80077fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	22ff      	movs	r2, #255	; 0xff
 8007804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007808:	f001 fdb4 	bl	8009374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800780c:	f001 fd82 	bl	8009314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007816:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007818:	e011      	b.n	800783e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d012      	beq.n	8007848 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3310      	adds	r3, #16
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fd56 	bl	80082d8 <xTaskRemoveFromEventList>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007832:	f000 fe2d 	bl	8008490 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	3b01      	subs	r3, #1
 800783a:	b2db      	uxtb	r3, r3
 800783c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800783e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007842:	2b00      	cmp	r3, #0
 8007844:	dce9      	bgt.n	800781a <prvUnlockQueue+0x60>
 8007846:	e000      	b.n	800784a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007848:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007852:	f001 fd8f 	bl	8009374 <vPortExitCritical>
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007866:	f001 fd55 	bl	8009314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007872:	2301      	movs	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	e001      	b.n	800787c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800787c:	f001 fd7a 	bl	8009374 <vPortExitCritical>

	return xReturn;
 8007880:	68fb      	ldr	r3, [r7, #12]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007892:	f001 fd3f 	bl	8009314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	429a      	cmp	r2, r3
 80078a0:	d102      	bne.n	80078a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078a2:	2301      	movs	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	e001      	b.n	80078ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ac:	f001 fd62 	bl	8009374 <vPortExitCritical>

	return xReturn;
 80078b0:	68fb      	ldr	r3, [r7, #12]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	e014      	b.n	80078f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078cc:	4a0f      	ldr	r2, [pc, #60]	; (800790c <vQueueAddToRegistry+0x50>)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078d8:	490c      	ldr	r1, [pc, #48]	; (800790c <vQueueAddToRegistry+0x50>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078e2:	4a0a      	ldr	r2, [pc, #40]	; (800790c <vQueueAddToRegistry+0x50>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078ee:	e006      	b.n	80078fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b07      	cmp	r3, #7
 80078fa:	d9e7      	bls.n	80078cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	20000b14 	.word	0x20000b14

08007910 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e016      	b.n	800794c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800791e:	4a10      	ldr	r2, [pc, #64]	; (8007960 <vQueueUnregisterQueue+0x50>)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4413      	add	r3, r2
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	d10b      	bne.n	8007946 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800792e:	4a0c      	ldr	r2, [pc, #48]	; (8007960 <vQueueUnregisterQueue+0x50>)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2100      	movs	r1, #0
 8007934:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007938:	4a09      	ldr	r2, [pc, #36]	; (8007960 <vQueueUnregisterQueue+0x50>)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	4413      	add	r3, r2
 8007940:	2200      	movs	r2, #0
 8007942:	605a      	str	r2, [r3, #4]
				break;
 8007944:	e006      	b.n	8007954 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b07      	cmp	r3, #7
 8007950:	d9e5      	bls.n	800791e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	20000b14 	.word	0x20000b14

08007964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007974:	f001 fcce 	bl	8009314 <vPortEnterCritical>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800797e:	b25b      	sxtb	r3, r3
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d103      	bne.n	800798e <vQueueWaitForMessageRestricted+0x2a>
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007994:	b25b      	sxtb	r3, r3
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d103      	bne.n	80079a4 <vQueueWaitForMessageRestricted+0x40>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079a4:	f001 fce6 	bl	8009374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	3324      	adds	r3, #36	; 0x24
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fc61 	bl	8008280 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079be:	6978      	ldr	r0, [r7, #20]
 80079c0:	f7ff fefb 	bl	80077ba <prvUnlockQueue>
	}
 80079c4:	bf00      	nop
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08e      	sub	sp, #56	; 0x38
 80079d0:	af04      	add	r7, sp, #16
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	623b      	str	r3, [r7, #32]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xTaskCreateStatic+0x46>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	61fb      	str	r3, [r7, #28]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a12:	23bc      	movs	r3, #188	; 0xbc
 8007a14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2bbc      	cmp	r3, #188	; 0xbc
 8007a1a:	d00a      	beq.n	8007a32 <xTaskCreateStatic+0x66>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	61bb      	str	r3, [r7, #24]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01e      	beq.n	8007a78 <xTaskCreateStatic+0xac>
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01b      	beq.n	8007a78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a52:	2300      	movs	r3, #0
 8007a54:	9303      	str	r3, [sp, #12]
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	9302      	str	r3, [sp, #8]
 8007a5a:	f107 0314 	add.w	r3, r7, #20
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f850 	bl	8007b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a72:	f000 f8f3 	bl	8007c5c <prvAddNewTaskToReadyList>
 8007a76:	e001      	b.n	8007a7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a7c:	697b      	ldr	r3, [r7, #20]
	}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3728      	adds	r7, #40	; 0x28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b08c      	sub	sp, #48	; 0x30
 8007a8a:	af04      	add	r7, sp, #16
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	603b      	str	r3, [r7, #0]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f001 fd5c 	bl	8009558 <pvPortMalloc>
 8007aa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00e      	beq.n	8007ac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007aa8:	20bc      	movs	r0, #188	; 0xbc
 8007aaa:	f001 fd55 	bl	8009558 <pvPortMalloc>
 8007aae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30
 8007abc:	e005      	b.n	8007aca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007abe:	6978      	ldr	r0, [r7, #20]
 8007ac0:	f001 fe16 	bl	80096f0 <vPortFree>
 8007ac4:	e001      	b.n	8007aca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d017      	beq.n	8007b00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ad8:	88fa      	ldrh	r2, [r7, #6]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9303      	str	r3, [sp, #12]
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	9302      	str	r3, [sp, #8]
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f80e 	bl	8007b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007af4:	69f8      	ldr	r0, [r7, #28]
 8007af6:	f000 f8b1 	bl	8007c5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007afa:	2301      	movs	r3, #1
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	e002      	b.n	8007b06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b00:	f04f 33ff 	mov.w	r3, #4294967295
 8007b04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b06:	69bb      	ldr	r3, [r7, #24]
	}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	461a      	mov	r2, r3
 8007b28:	21a5      	movs	r1, #165	; 0xa5
 8007b2a:	f001 ff39 	bl	80099a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	f023 0307 	bic.w	r3, r3, #7
 8007b46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	617b      	str	r3, [r7, #20]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d01f      	beq.n	8007bae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	e012      	b.n	8007b9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	7819      	ldrb	r1, [r3, #0]
 8007b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	3334      	adds	r3, #52	; 0x34
 8007b84:	460a      	mov	r2, r1
 8007b86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d006      	beq.n	8007ba2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	3301      	adds	r3, #1
 8007b98:	61fb      	str	r3, [r7, #28]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2b0f      	cmp	r3, #15
 8007b9e:	d9e9      	bls.n	8007b74 <prvInitialiseNewTask+0x64>
 8007ba0:	e000      	b.n	8007ba4 <prvInitialiseNewTask+0x94>
			{
				break;
 8007ba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bac:	e003      	b.n	8007bb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	2b37      	cmp	r3, #55	; 0x37
 8007bba:	d901      	bls.n	8007bc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bbc:	2337      	movs	r3, #55	; 0x37
 8007bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	2200      	movs	r2, #0
 8007bd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fe56 	bl	8006888 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	3318      	adds	r3, #24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fe51 	bl	8006888 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	3354      	adds	r3, #84	; 0x54
 8007c10:	2260      	movs	r2, #96	; 0x60
 8007c12:	2100      	movs	r1, #0
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 fec3 	bl	80099a0 <memset>
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	4a0c      	ldr	r2, [pc, #48]	; (8007c50 <prvInitialiseNewTask+0x140>)
 8007c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	4a0c      	ldr	r2, [pc, #48]	; (8007c54 <prvInitialiseNewTask+0x144>)
 8007c24:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	4a0b      	ldr	r2, [pc, #44]	; (8007c58 <prvInitialiseNewTask+0x148>)
 8007c2a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	68f9      	ldr	r1, [r7, #12]
 8007c30:	69b8      	ldr	r0, [r7, #24]
 8007c32:	f001 fa3f 	bl	80090b4 <pxPortInitialiseStack>
 8007c36:	4602      	mov	r2, r0
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c48:	bf00      	nop
 8007c4a:	3720      	adds	r7, #32
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	0800a528 	.word	0x0800a528
 8007c54:	0800a548 	.word	0x0800a548
 8007c58:	0800a508 	.word	0x0800a508

08007c5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c64:	f001 fb56 	bl	8009314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c68:	4b2d      	ldr	r3, [pc, #180]	; (8007d20 <prvAddNewTaskToReadyList+0xc4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	4a2c      	ldr	r2, [pc, #176]	; (8007d20 <prvAddNewTaskToReadyList+0xc4>)
 8007c70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c72:	4b2c      	ldr	r3, [pc, #176]	; (8007d24 <prvAddNewTaskToReadyList+0xc8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c7a:	4a2a      	ldr	r2, [pc, #168]	; (8007d24 <prvAddNewTaskToReadyList+0xc8>)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c80:	4b27      	ldr	r3, [pc, #156]	; (8007d20 <prvAddNewTaskToReadyList+0xc4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d110      	bne.n	8007caa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c88:	f000 fc26 	bl	80084d8 <prvInitialiseTaskLists>
 8007c8c:	e00d      	b.n	8007caa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c8e:	4b26      	ldr	r3, [pc, #152]	; (8007d28 <prvAddNewTaskToReadyList+0xcc>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d109      	bne.n	8007caa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c96:	4b23      	ldr	r3, [pc, #140]	; (8007d24 <prvAddNewTaskToReadyList+0xc8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d802      	bhi.n	8007caa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ca4:	4a1f      	ldr	r2, [pc, #124]	; (8007d24 <prvAddNewTaskToReadyList+0xc8>)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007caa:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <prvAddNewTaskToReadyList+0xd0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	4a1e      	ldr	r2, [pc, #120]	; (8007d2c <prvAddNewTaskToReadyList+0xd0>)
 8007cb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cb4:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <prvAddNewTaskToReadyList+0xd0>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc0:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <prvAddNewTaskToReadyList+0xd4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d903      	bls.n	8007cd0 <prvAddNewTaskToReadyList+0x74>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	4a18      	ldr	r2, [pc, #96]	; (8007d30 <prvAddNewTaskToReadyList+0xd4>)
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4a15      	ldr	r2, [pc, #84]	; (8007d34 <prvAddNewTaskToReadyList+0xd8>)
 8007cde:	441a      	add	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	f7fe fddb 	bl	80068a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cec:	f001 fb42 	bl	8009374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cf0:	4b0d      	ldr	r3, [pc, #52]	; (8007d28 <prvAddNewTaskToReadyList+0xcc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00e      	beq.n	8007d16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <prvAddNewTaskToReadyList+0xc8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d207      	bcs.n	8007d16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <prvAddNewTaskToReadyList+0xdc>)
 8007d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20001028 	.word	0x20001028
 8007d24:	20000b54 	.word	0x20000b54
 8007d28:	20001034 	.word	0x20001034
 8007d2c:	20001044 	.word	0x20001044
 8007d30:	20001030 	.word	0x20001030
 8007d34:	20000b58 	.word	0x20000b58
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d017      	beq.n	8007d7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <vTaskDelay+0x60>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <vTaskDelay+0x30>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60bb      	str	r3, [r7, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d6c:	f000 f88a 	bl	8007e84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d70:	2100      	movs	r1, #0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fdfc 	bl	8008970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d78:	f000 f892 	bl	8007ea0 <xTaskResumeAll>
 8007d7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d107      	bne.n	8007d94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <vTaskDelay+0x64>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20001050 	.word	0x20001050
 8007da0:	e000ed04 	.word	0xe000ed04

08007da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007db2:	463a      	mov	r2, r7
 8007db4:	1d39      	adds	r1, r7, #4
 8007db6:	f107 0308 	add.w	r3, r7, #8
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fd10 	bl	80067e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	9202      	str	r2, [sp, #8]
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	4924      	ldr	r1, [pc, #144]	; (8007e64 <vTaskStartScheduler+0xc0>)
 8007dd4:	4824      	ldr	r0, [pc, #144]	; (8007e68 <vTaskStartScheduler+0xc4>)
 8007dd6:	f7ff fdf9 	bl	80079cc <xTaskCreateStatic>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4a23      	ldr	r2, [pc, #140]	; (8007e6c <vTaskStartScheduler+0xc8>)
 8007dde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007de0:	4b22      	ldr	r3, [pc, #136]	; (8007e6c <vTaskStartScheduler+0xc8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007de8:	2301      	movs	r3, #1
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	e001      	b.n	8007df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d102      	bne.n	8007dfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007df8:	f000 fe0e 	bl	8008a18 <xTimerCreateTimerTask>
 8007dfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d11b      	bne.n	8007e3c <vTaskStartScheduler+0x98>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	613b      	str	r3, [r7, #16]
}
 8007e16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e18:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <vTaskStartScheduler+0xcc>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3354      	adds	r3, #84	; 0x54
 8007e1e:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <vTaskStartScheduler+0xd0>)
 8007e20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e22:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <vTaskStartScheduler+0xd4>)
 8007e24:	f04f 32ff 	mov.w	r2, #4294967295
 8007e28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e2a:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <vTaskStartScheduler+0xd8>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e30:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <vTaskStartScheduler+0xdc>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e36:	f001 f9cb 	bl	80091d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e3a:	e00e      	b.n	8007e5a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e42:	d10a      	bne.n	8007e5a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	60fb      	str	r3, [r7, #12]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <vTaskStartScheduler+0xb4>
}
 8007e5a:	bf00      	nop
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	0800a3dc 	.word	0x0800a3dc
 8007e68:	080084a9 	.word	0x080084a9
 8007e6c:	2000104c 	.word	0x2000104c
 8007e70:	20000b54 	.word	0x20000b54
 8007e74:	20000010 	.word	0x20000010
 8007e78:	20001048 	.word	0x20001048
 8007e7c:	20001034 	.word	0x20001034
 8007e80:	2000102c 	.word	0x2000102c

08007e84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <vTaskSuspendAll+0x18>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	4a03      	ldr	r2, [pc, #12]	; (8007e9c <vTaskSuspendAll+0x18>)
 8007e90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e92:	bf00      	nop
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20001050 	.word	0x20001050

08007ea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007eae:	4b42      	ldr	r3, [pc, #264]	; (8007fb8 <xTaskResumeAll+0x118>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10a      	bne.n	8007ecc <xTaskResumeAll+0x2c>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	603b      	str	r3, [r7, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ecc:	f001 fa22 	bl	8009314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ed0:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <xTaskResumeAll+0x118>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	4a38      	ldr	r2, [pc, #224]	; (8007fb8 <xTaskResumeAll+0x118>)
 8007ed8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eda:	4b37      	ldr	r3, [pc, #220]	; (8007fb8 <xTaskResumeAll+0x118>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d162      	bne.n	8007fa8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ee2:	4b36      	ldr	r3, [pc, #216]	; (8007fbc <xTaskResumeAll+0x11c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d05e      	beq.n	8007fa8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eea:	e02f      	b.n	8007f4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eec:	4b34      	ldr	r3, [pc, #208]	; (8007fc0 <xTaskResumeAll+0x120>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3318      	adds	r3, #24
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe fd2f 	bl	800695c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fd2a 	bl	800695c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0c:	4b2d      	ldr	r3, [pc, #180]	; (8007fc4 <xTaskResumeAll+0x124>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d903      	bls.n	8007f1c <xTaskResumeAll+0x7c>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	4a2a      	ldr	r2, [pc, #168]	; (8007fc4 <xTaskResumeAll+0x124>)
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4a27      	ldr	r2, [pc, #156]	; (8007fc8 <xTaskResumeAll+0x128>)
 8007f2a:	441a      	add	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f7fe fcb5 	bl	80068a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3c:	4b23      	ldr	r3, [pc, #140]	; (8007fcc <xTaskResumeAll+0x12c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d302      	bcc.n	8007f4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f46:	4b22      	ldr	r3, [pc, #136]	; (8007fd0 <xTaskResumeAll+0x130>)
 8007f48:	2201      	movs	r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f4c:	4b1c      	ldr	r3, [pc, #112]	; (8007fc0 <xTaskResumeAll+0x120>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1cb      	bne.n	8007eec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f5a:	f000 fb5f 	bl	800861c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f5e:	4b1d      	ldr	r3, [pc, #116]	; (8007fd4 <xTaskResumeAll+0x134>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d010      	beq.n	8007f8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f6a:	f000 f847 	bl	8007ffc <xTaskIncrementTick>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f74:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <xTaskResumeAll+0x130>)
 8007f76:	2201      	movs	r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1f1      	bne.n	8007f6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <xTaskResumeAll+0x134>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f8c:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <xTaskResumeAll+0x130>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f98:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <xTaskResumeAll+0x138>)
 8007f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fa8:	f001 f9e4 	bl	8009374 <vPortExitCritical>

	return xAlreadyYielded;
 8007fac:	68bb      	ldr	r3, [r7, #8]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20001050 	.word	0x20001050
 8007fbc:	20001028 	.word	0x20001028
 8007fc0:	20000fe8 	.word	0x20000fe8
 8007fc4:	20001030 	.word	0x20001030
 8007fc8:	20000b58 	.word	0x20000b58
 8007fcc:	20000b54 	.word	0x20000b54
 8007fd0:	2000103c 	.word	0x2000103c
 8007fd4:	20001038 	.word	0x20001038
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <xTaskGetTickCount+0x1c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fe8:	687b      	ldr	r3, [r7, #4]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	2000102c 	.word	0x2000102c

08007ffc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008006:	4b4f      	ldr	r3, [pc, #316]	; (8008144 <xTaskIncrementTick+0x148>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f040 808f 	bne.w	800812e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008010:	4b4d      	ldr	r3, [pc, #308]	; (8008148 <xTaskIncrementTick+0x14c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008018:	4a4b      	ldr	r2, [pc, #300]	; (8008148 <xTaskIncrementTick+0x14c>)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d120      	bne.n	8008066 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008024:	4b49      	ldr	r3, [pc, #292]	; (800814c <xTaskIncrementTick+0x150>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <xTaskIncrementTick+0x48>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	603b      	str	r3, [r7, #0]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <xTaskIncrementTick+0x46>
 8008044:	4b41      	ldr	r3, [pc, #260]	; (800814c <xTaskIncrementTick+0x150>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	4b41      	ldr	r3, [pc, #260]	; (8008150 <xTaskIncrementTick+0x154>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a3f      	ldr	r2, [pc, #252]	; (800814c <xTaskIncrementTick+0x150>)
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	4a3f      	ldr	r2, [pc, #252]	; (8008150 <xTaskIncrementTick+0x154>)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	4b3e      	ldr	r3, [pc, #248]	; (8008154 <xTaskIncrementTick+0x158>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	4a3d      	ldr	r2, [pc, #244]	; (8008154 <xTaskIncrementTick+0x158>)
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	f000 fadb 	bl	800861c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008066:	4b3c      	ldr	r3, [pc, #240]	; (8008158 <xTaskIncrementTick+0x15c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	429a      	cmp	r2, r3
 800806e:	d349      	bcc.n	8008104 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008070:	4b36      	ldr	r3, [pc, #216]	; (800814c <xTaskIncrementTick+0x150>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800807a:	4b37      	ldr	r3, [pc, #220]	; (8008158 <xTaskIncrementTick+0x15c>)
 800807c:	f04f 32ff 	mov.w	r2, #4294967295
 8008080:	601a      	str	r2, [r3, #0]
					break;
 8008082:	e03f      	b.n	8008104 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008084:	4b31      	ldr	r3, [pc, #196]	; (800814c <xTaskIncrementTick+0x150>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	429a      	cmp	r2, r3
 800809a:	d203      	bcs.n	80080a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800809c:	4a2e      	ldr	r2, [pc, #184]	; (8008158 <xTaskIncrementTick+0x15c>)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080a2:	e02f      	b.n	8008104 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fc57 	bl	800695c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	3318      	adds	r3, #24
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fc4e 	bl	800695c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	4b25      	ldr	r3, [pc, #148]	; (800815c <xTaskIncrementTick+0x160>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d903      	bls.n	80080d4 <xTaskIncrementTick+0xd8>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	4a22      	ldr	r2, [pc, #136]	; (800815c <xTaskIncrementTick+0x160>)
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <xTaskIncrementTick+0x164>)
 80080e2:	441a      	add	r2, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f7fe fbd9 	bl	80068a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f4:	4b1b      	ldr	r3, [pc, #108]	; (8008164 <xTaskIncrementTick+0x168>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d3b8      	bcc.n	8008070 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80080fe:	2301      	movs	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008102:	e7b5      	b.n	8008070 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008104:	4b17      	ldr	r3, [pc, #92]	; (8008164 <xTaskIncrementTick+0x168>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810a:	4915      	ldr	r1, [pc, #84]	; (8008160 <xTaskIncrementTick+0x164>)
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d901      	bls.n	8008120 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008120:	4b11      	ldr	r3, [pc, #68]	; (8008168 <xTaskIncrementTick+0x16c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d007      	beq.n	8008138 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008128:	2301      	movs	r3, #1
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e004      	b.n	8008138 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800812e:	4b0f      	ldr	r3, [pc, #60]	; (800816c <xTaskIncrementTick+0x170>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	4a0d      	ldr	r2, [pc, #52]	; (800816c <xTaskIncrementTick+0x170>)
 8008136:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008138:	697b      	ldr	r3, [r7, #20]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20001050 	.word	0x20001050
 8008148:	2000102c 	.word	0x2000102c
 800814c:	20000fe0 	.word	0x20000fe0
 8008150:	20000fe4 	.word	0x20000fe4
 8008154:	20001040 	.word	0x20001040
 8008158:	20001048 	.word	0x20001048
 800815c:	20001030 	.word	0x20001030
 8008160:	20000b58 	.word	0x20000b58
 8008164:	20000b54 	.word	0x20000b54
 8008168:	2000103c 	.word	0x2000103c
 800816c:	20001038 	.word	0x20001038

08008170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008176:	4b2a      	ldr	r3, [pc, #168]	; (8008220 <vTaskSwitchContext+0xb0>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800817e:	4b29      	ldr	r3, [pc, #164]	; (8008224 <vTaskSwitchContext+0xb4>)
 8008180:	2201      	movs	r2, #1
 8008182:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008184:	e046      	b.n	8008214 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008186:	4b27      	ldr	r3, [pc, #156]	; (8008224 <vTaskSwitchContext+0xb4>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800818c:	4b26      	ldr	r3, [pc, #152]	; (8008228 <vTaskSwitchContext+0xb8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e010      	b.n	80081b6 <vTaskSwitchContext+0x46>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	607b      	str	r3, [r7, #4]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <vTaskSwitchContext+0x3e>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	491d      	ldr	r1, [pc, #116]	; (800822c <vTaskSwitchContext+0xbc>)
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0e4      	beq.n	8008194 <vTaskSwitchContext+0x24>
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4a15      	ldr	r2, [pc, #84]	; (800822c <vTaskSwitchContext+0xbc>)
 80081d6:	4413      	add	r3, r2
 80081d8:	60bb      	str	r3, [r7, #8]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	605a      	str	r2, [r3, #4]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	3308      	adds	r3, #8
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d104      	bne.n	80081fa <vTaskSwitchContext+0x8a>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	605a      	str	r2, [r3, #4]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	4a0b      	ldr	r2, [pc, #44]	; (8008230 <vTaskSwitchContext+0xc0>)
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	4a08      	ldr	r2, [pc, #32]	; (8008228 <vTaskSwitchContext+0xb8>)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <vTaskSwitchContext+0xc0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3354      	adds	r3, #84	; 0x54
 8008210:	4a08      	ldr	r2, [pc, #32]	; (8008234 <vTaskSwitchContext+0xc4>)
 8008212:	6013      	str	r3, [r2, #0]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	20001050 	.word	0x20001050
 8008224:	2000103c 	.word	0x2000103c
 8008228:	20001030 	.word	0x20001030
 800822c:	20000b58 	.word	0x20000b58
 8008230:	20000b54 	.word	0x20000b54
 8008234:	20000010 	.word	0x20000010

08008238 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	60fb      	str	r3, [r7, #12]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <vTaskPlaceOnEventList+0x44>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3318      	adds	r3, #24
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7fe fb3f 	bl	80068ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800826c:	2101      	movs	r1, #1
 800826e:	6838      	ldr	r0, [r7, #0]
 8008270:	f000 fb7e 	bl	8008970 <prvAddCurrentTaskToDelayedList>
}
 8008274:	bf00      	nop
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000b54 	.word	0x20000b54

08008280 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	617b      	str	r3, [r7, #20]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082a8:	4b0a      	ldr	r3, [pc, #40]	; (80082d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3318      	adds	r3, #24
 80082ae:	4619      	mov	r1, r3
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f7fe faf6 	bl	80068a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80082bc:	f04f 33ff 	mov.w	r3, #4294967295
 80082c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	68b8      	ldr	r0, [r7, #8]
 80082c6:	f000 fb53 	bl	8008970 <prvAddCurrentTaskToDelayedList>
	}
 80082ca:	bf00      	nop
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000b54 	.word	0x20000b54

080082d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	60fb      	str	r3, [r7, #12]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	3318      	adds	r3, #24
 8008308:	4618      	mov	r0, r3
 800830a:	f7fe fb27 	bl	800695c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800830e:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <xTaskRemoveFromEventList+0xb0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d11d      	bne.n	8008352 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	3304      	adds	r3, #4
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fb1e 	bl	800695c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008324:	4b19      	ldr	r3, [pc, #100]	; (800838c <xTaskRemoveFromEventList+0xb4>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d903      	bls.n	8008334 <xTaskRemoveFromEventList+0x5c>
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	4a16      	ldr	r2, [pc, #88]	; (800838c <xTaskRemoveFromEventList+0xb4>)
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4a13      	ldr	r2, [pc, #76]	; (8008390 <xTaskRemoveFromEventList+0xb8>)
 8008342:	441a      	add	r2, r3
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f7fe faa9 	bl	80068a2 <vListInsertEnd>
 8008350:	e005      	b.n	800835e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	3318      	adds	r3, #24
 8008356:	4619      	mov	r1, r3
 8008358:	480e      	ldr	r0, [pc, #56]	; (8008394 <xTaskRemoveFromEventList+0xbc>)
 800835a:	f7fe faa2 	bl	80068a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008362:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <xTaskRemoveFromEventList+0xc0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	429a      	cmp	r2, r3
 800836a:	d905      	bls.n	8008378 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008370:	4b0a      	ldr	r3, [pc, #40]	; (800839c <xTaskRemoveFromEventList+0xc4>)
 8008372:	2201      	movs	r2, #1
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	e001      	b.n	800837c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800837c:	697b      	ldr	r3, [r7, #20]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20001050 	.word	0x20001050
 800838c:	20001030 	.word	0x20001030
 8008390:	20000b58 	.word	0x20000b58
 8008394:	20000fe8 	.word	0x20000fe8
 8008398:	20000b54 	.word	0x20000b54
 800839c:	2000103c 	.word	0x2000103c

080083a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <vTaskInternalSetTimeOutState+0x24>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <vTaskInternalSetTimeOutState+0x28>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	605a      	str	r2, [r3, #4]
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20001040 	.word	0x20001040
 80083c8:	2000102c 	.word	0x2000102c

080083cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	613b      	str	r3, [r7, #16]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	60fb      	str	r3, [r7, #12]
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800840e:	f000 ff81 	bl	8009314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008412:	4b1d      	ldr	r3, [pc, #116]	; (8008488 <xTaskCheckForTimeOut+0xbc>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d102      	bne.n	8008432 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800842c:	2300      	movs	r3, #0
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e023      	b.n	800847a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	4b15      	ldr	r3, [pc, #84]	; (800848c <xTaskCheckForTimeOut+0xc0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d007      	beq.n	800844e <xTaskCheckForTimeOut+0x82>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	429a      	cmp	r2, r3
 8008446:	d302      	bcc.n	800844e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008448:	2301      	movs	r3, #1
 800844a:	61fb      	str	r3, [r7, #28]
 800844c:	e015      	b.n	800847a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	429a      	cmp	r2, r3
 8008456:	d20b      	bcs.n	8008470 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff ff9b 	bl	80083a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800846a:	2300      	movs	r3, #0
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	e004      	b.n	800847a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008476:	2301      	movs	r3, #1
 8008478:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800847a:	f000 ff7b 	bl	8009374 <vPortExitCritical>

	return xReturn;
 800847e:	69fb      	ldr	r3, [r7, #28]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3720      	adds	r7, #32
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	2000102c 	.word	0x2000102c
 800848c:	20001040 	.word	0x20001040

08008490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008494:	4b03      	ldr	r3, [pc, #12]	; (80084a4 <vTaskMissedYield+0x14>)
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]
}
 800849a:	bf00      	nop
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	2000103c 	.word	0x2000103c

080084a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80084b0:	f000 f852 	bl	8008558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084b4:	4b06      	ldr	r3, [pc, #24]	; (80084d0 <prvIdleTask+0x28>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d9f9      	bls.n	80084b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80084bc:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <prvIdleTask+0x2c>)
 80084be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084cc:	e7f0      	b.n	80084b0 <prvIdleTask+0x8>
 80084ce:	bf00      	nop
 80084d0:	20000b58 	.word	0x20000b58
 80084d4:	e000ed04 	.word	0xe000ed04

080084d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084de:	2300      	movs	r3, #0
 80084e0:	607b      	str	r3, [r7, #4]
 80084e2:	e00c      	b.n	80084fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4a12      	ldr	r2, [pc, #72]	; (8008538 <prvInitialiseTaskLists+0x60>)
 80084f0:	4413      	add	r3, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe f9a8 	bl	8006848 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3301      	adds	r3, #1
 80084fc:	607b      	str	r3, [r7, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b37      	cmp	r3, #55	; 0x37
 8008502:	d9ef      	bls.n	80084e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008504:	480d      	ldr	r0, [pc, #52]	; (800853c <prvInitialiseTaskLists+0x64>)
 8008506:	f7fe f99f 	bl	8006848 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800850a:	480d      	ldr	r0, [pc, #52]	; (8008540 <prvInitialiseTaskLists+0x68>)
 800850c:	f7fe f99c 	bl	8006848 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008510:	480c      	ldr	r0, [pc, #48]	; (8008544 <prvInitialiseTaskLists+0x6c>)
 8008512:	f7fe f999 	bl	8006848 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008516:	480c      	ldr	r0, [pc, #48]	; (8008548 <prvInitialiseTaskLists+0x70>)
 8008518:	f7fe f996 	bl	8006848 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800851c:	480b      	ldr	r0, [pc, #44]	; (800854c <prvInitialiseTaskLists+0x74>)
 800851e:	f7fe f993 	bl	8006848 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008522:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <prvInitialiseTaskLists+0x78>)
 8008524:	4a05      	ldr	r2, [pc, #20]	; (800853c <prvInitialiseTaskLists+0x64>)
 8008526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008528:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <prvInitialiseTaskLists+0x7c>)
 800852a:	4a05      	ldr	r2, [pc, #20]	; (8008540 <prvInitialiseTaskLists+0x68>)
 800852c:	601a      	str	r2, [r3, #0]
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000b58 	.word	0x20000b58
 800853c:	20000fb8 	.word	0x20000fb8
 8008540:	20000fcc 	.word	0x20000fcc
 8008544:	20000fe8 	.word	0x20000fe8
 8008548:	20000ffc 	.word	0x20000ffc
 800854c:	20001014 	.word	0x20001014
 8008550:	20000fe0 	.word	0x20000fe0
 8008554:	20000fe4 	.word	0x20000fe4

08008558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800855e:	e019      	b.n	8008594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008560:	f000 fed8 	bl	8009314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008564:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <prvCheckTasksWaitingTermination+0x50>)
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3304      	adds	r3, #4
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe f9f3 	bl	800695c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008576:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <prvCheckTasksWaitingTermination+0x54>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3b01      	subs	r3, #1
 800857c:	4a0b      	ldr	r2, [pc, #44]	; (80085ac <prvCheckTasksWaitingTermination+0x54>)
 800857e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <prvCheckTasksWaitingTermination+0x58>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3b01      	subs	r3, #1
 8008586:	4a0a      	ldr	r2, [pc, #40]	; (80085b0 <prvCheckTasksWaitingTermination+0x58>)
 8008588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800858a:	f000 fef3 	bl	8009374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f810 	bl	80085b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008594:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <prvCheckTasksWaitingTermination+0x58>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e1      	bne.n	8008560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800859c:	bf00      	nop
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000ffc 	.word	0x20000ffc
 80085ac:	20001028 	.word	0x20001028
 80085b0:	20001010 	.word	0x20001010

080085b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3354      	adds	r3, #84	; 0x54
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fa97 	bl	8009af4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d108      	bne.n	80085e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 f88b 	bl	80096f0 <vPortFree>
				vPortFree( pxTCB );
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 f888 	bl	80096f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085e0:	e018      	b.n	8008614 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d103      	bne.n	80085f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 f87f 	bl	80096f0 <vPortFree>
	}
 80085f2:	e00f      	b.n	8008614 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d00a      	beq.n	8008614 <prvDeleteTCB+0x60>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	60fb      	str	r3, [r7, #12]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <prvDeleteTCB+0x5e>
	}
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008622:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <prvResetNextTaskUnblockTime+0x38>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <prvResetNextTaskUnblockTime+0x3c>)
 800862e:	f04f 32ff 	mov.w	r2, #4294967295
 8008632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008634:	e008      	b.n	8008648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008636:	4b07      	ldr	r3, [pc, #28]	; (8008654 <prvResetNextTaskUnblockTime+0x38>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	4a04      	ldr	r2, [pc, #16]	; (8008658 <prvResetNextTaskUnblockTime+0x3c>)
 8008646:	6013      	str	r3, [r2, #0]
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	20000fe0 	.word	0x20000fe0
 8008658:	20001048 	.word	0x20001048

0800865c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008662:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <xTaskGetSchedulerState+0x34>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800866a:	2301      	movs	r3, #1
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	e008      	b.n	8008682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008670:	4b08      	ldr	r3, [pc, #32]	; (8008694 <xTaskGetSchedulerState+0x38>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008678:	2302      	movs	r3, #2
 800867a:	607b      	str	r3, [r7, #4]
 800867c:	e001      	b.n	8008682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800867e:	2300      	movs	r3, #0
 8008680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008682:	687b      	ldr	r3, [r7, #4]
	}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20001034 	.word	0x20001034
 8008694:	20001050 	.word	0x20001050

08008698 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d051      	beq.n	8008752 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b2:	4b2a      	ldr	r3, [pc, #168]	; (800875c <xTaskPriorityInherit+0xc4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d241      	bcs.n	8008740 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	db06      	blt.n	80086d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c4:	4b25      	ldr	r3, [pc, #148]	; (800875c <xTaskPriorityInherit+0xc4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6959      	ldr	r1, [r3, #20]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4a1f      	ldr	r2, [pc, #124]	; (8008760 <xTaskPriorityInherit+0xc8>)
 80086e4:	4413      	add	r3, r2
 80086e6:	4299      	cmp	r1, r3
 80086e8:	d122      	bne.n	8008730 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe f934 	bl	800695c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086f4:	4b19      	ldr	r3, [pc, #100]	; (800875c <xTaskPriorityInherit+0xc4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008702:	4b18      	ldr	r3, [pc, #96]	; (8008764 <xTaskPriorityInherit+0xcc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d903      	bls.n	8008712 <xTaskPriorityInherit+0x7a>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	4a15      	ldr	r2, [pc, #84]	; (8008764 <xTaskPriorityInherit+0xcc>)
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4a10      	ldr	r2, [pc, #64]	; (8008760 <xTaskPriorityInherit+0xc8>)
 8008720:	441a      	add	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	3304      	adds	r3, #4
 8008726:	4619      	mov	r1, r3
 8008728:	4610      	mov	r0, r2
 800872a:	f7fe f8ba 	bl	80068a2 <vListInsertEnd>
 800872e:	e004      	b.n	800873a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008730:	4b0a      	ldr	r3, [pc, #40]	; (800875c <xTaskPriorityInherit+0xc4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800873a:	2301      	movs	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	e008      	b.n	8008752 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <xTaskPriorityInherit+0xc4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	429a      	cmp	r2, r3
 800874c:	d201      	bcs.n	8008752 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800874e:	2301      	movs	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008752:	68fb      	ldr	r3, [r7, #12]
	}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000b54 	.word	0x20000b54
 8008760:	20000b58 	.word	0x20000b58
 8008764:	20001030 	.word	0x20001030

08008768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d056      	beq.n	800882c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800877e:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <xTaskPriorityDisinherit+0xd0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	429a      	cmp	r2, r3
 8008786:	d00a      	beq.n	800879e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	60fb      	str	r3, [r7, #12]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	60bb      	str	r3, [r7, #8]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c0:	1e5a      	subs	r2, r3, #1
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d02c      	beq.n	800882c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d128      	bne.n	800882c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	3304      	adds	r3, #4
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe f8bc 	bl	800695c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fc:	4b0f      	ldr	r3, [pc, #60]	; (800883c <xTaskPriorityDisinherit+0xd4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d903      	bls.n	800880c <xTaskPriorityDisinherit+0xa4>
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	4a0c      	ldr	r2, [pc, #48]	; (800883c <xTaskPriorityDisinherit+0xd4>)
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4a09      	ldr	r2, [pc, #36]	; (8008840 <xTaskPriorityDisinherit+0xd8>)
 800881a:	441a      	add	r2, r3
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	3304      	adds	r3, #4
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f7fe f83d 	bl	80068a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800882c:	697b      	ldr	r3, [r7, #20]
	}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000b54 	.word	0x20000b54
 800883c:	20001030 	.word	0x20001030
 8008840:	20000b58 	.word	0x20000b58

08008844 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008852:	2301      	movs	r3, #1
 8008854:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d06a      	beq.n	8008932 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	60fb      	str	r3, [r7, #12]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d902      	bls.n	800888a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	e002      	b.n	8008890 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	429a      	cmp	r2, r3
 8008898:	d04b      	beq.n	8008932 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d146      	bne.n	8008932 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80088a4:	4b25      	ldr	r3, [pc, #148]	; (800893c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d10a      	bne.n	80088c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	60bb      	str	r3, [r7, #8]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	db04      	blt.n	80088e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	6959      	ldr	r1, [r3, #20]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4a13      	ldr	r2, [pc, #76]	; (8008940 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80088f2:	4413      	add	r3, r2
 80088f4:	4299      	cmp	r1, r3
 80088f6:	d11c      	bne.n	8008932 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe f82d 	bl	800695c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008906:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d903      	bls.n	8008916 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	4a0c      	ldr	r2, [pc, #48]	; (8008944 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4a07      	ldr	r2, [pc, #28]	; (8008940 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008924:	441a      	add	r2, r3
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	3304      	adds	r3, #4
 800892a:	4619      	mov	r1, r3
 800892c:	4610      	mov	r0, r2
 800892e:	f7fd ffb8 	bl	80068a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008932:	bf00      	nop
 8008934:	3720      	adds	r7, #32
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000b54 	.word	0x20000b54
 8008940:	20000b58 	.word	0x20000b58
 8008944:	20001030 	.word	0x20001030

08008948 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <pvTaskIncrementMutexHeldCount+0x24>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <pvTaskIncrementMutexHeldCount+0x24>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800895a:	3201      	adds	r2, #1
 800895c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800895e:	4b03      	ldr	r3, [pc, #12]	; (800896c <pvTaskIncrementMutexHeldCount+0x24>)
 8008960:	681b      	ldr	r3, [r3, #0]
	}
 8008962:	4618      	mov	r0, r3
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20000b54 	.word	0x20000b54

08008970 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800897a:	4b21      	ldr	r3, [pc, #132]	; (8008a00 <prvAddCurrentTaskToDelayedList+0x90>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008980:	4b20      	ldr	r3, [pc, #128]	; (8008a04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3304      	adds	r3, #4
 8008986:	4618      	mov	r0, r3
 8008988:	f7fd ffe8 	bl	800695c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d10a      	bne.n	80089aa <prvAddCurrentTaskToDelayedList+0x3a>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d007      	beq.n	80089aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800899a:	4b1a      	ldr	r3, [pc, #104]	; (8008a04 <prvAddCurrentTaskToDelayedList+0x94>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3304      	adds	r3, #4
 80089a0:	4619      	mov	r1, r3
 80089a2:	4819      	ldr	r0, [pc, #100]	; (8008a08 <prvAddCurrentTaskToDelayedList+0x98>)
 80089a4:	f7fd ff7d 	bl	80068a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089a8:	e026      	b.n	80089f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4413      	add	r3, r2
 80089b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089b2:	4b14      	ldr	r3, [pc, #80]	; (8008a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d209      	bcs.n	80089d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c2:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <prvAddCurrentTaskToDelayedList+0x9c>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7fd ff8b 	bl	80068ea <vListInsert>
}
 80089d4:	e010      	b.n	80089f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089d6:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <prvAddCurrentTaskToDelayedList+0xa0>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7fd ff81 	bl	80068ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089e8:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d202      	bcs.n	80089f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80089f2:	4a08      	ldr	r2, [pc, #32]	; (8008a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	6013      	str	r3, [r2, #0]
}
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	2000102c 	.word	0x2000102c
 8008a04:	20000b54 	.word	0x20000b54
 8008a08:	20001014 	.word	0x20001014
 8008a0c:	20000fe4 	.word	0x20000fe4
 8008a10:	20000fe0 	.word	0x20000fe0
 8008a14:	20001048 	.word	0x20001048

08008a18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	; 0x28
 8008a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a22:	f000 fb07 	bl	8009034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a26:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <xTimerCreateTimerTask+0x80>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d021      	beq.n	8008a72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a36:	1d3a      	adds	r2, r7, #4
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	f107 030c 	add.w	r3, r7, #12
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fd fee7 	bl	8006814 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	9202      	str	r2, [sp, #8]
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	2302      	movs	r3, #2
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	2300      	movs	r3, #0
 8008a56:	460a      	mov	r2, r1
 8008a58:	4910      	ldr	r1, [pc, #64]	; (8008a9c <xTimerCreateTimerTask+0x84>)
 8008a5a:	4811      	ldr	r0, [pc, #68]	; (8008aa0 <xTimerCreateTimerTask+0x88>)
 8008a5c:	f7fe ffb6 	bl	80079cc <xTaskCreateStatic>
 8008a60:	4603      	mov	r3, r0
 8008a62:	4a10      	ldr	r2, [pc, #64]	; (8008aa4 <xTimerCreateTimerTask+0x8c>)
 8008a64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <xTimerCreateTimerTask+0x8c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	613b      	str	r3, [r7, #16]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a8e:	697b      	ldr	r3, [r7, #20]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20001084 	.word	0x20001084
 8008a9c:	0800a3e4 	.word	0x0800a3e4
 8008aa0:	08008bdd 	.word	0x08008bdd
 8008aa4:	20001088 	.word	0x20001088

08008aa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	; 0x28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	623b      	str	r3, [r7, #32]
}
 8008ad2:	bf00      	nop
 8008ad4:	e7fe      	b.n	8008ad4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ad6:	4b1a      	ldr	r3, [pc, #104]	; (8008b40 <xTimerGenericCommand+0x98>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d02a      	beq.n	8008b34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	dc18      	bgt.n	8008b22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008af0:	f7ff fdb4 	bl	800865c <xTaskGetSchedulerState>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d109      	bne.n	8008b0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008afa:	4b11      	ldr	r3, [pc, #68]	; (8008b40 <xTimerGenericCommand+0x98>)
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	f107 0110 	add.w	r1, r7, #16
 8008b02:	2300      	movs	r3, #0
 8008b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b06:	f7fe f8fb 	bl	8006d00 <xQueueGenericSend>
 8008b0a:	6278      	str	r0, [r7, #36]	; 0x24
 8008b0c:	e012      	b.n	8008b34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <xTimerGenericCommand+0x98>)
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	f107 0110 	add.w	r1, r7, #16
 8008b16:	2300      	movs	r3, #0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f7fe f8f1 	bl	8006d00 <xQueueGenericSend>
 8008b1e:	6278      	str	r0, [r7, #36]	; 0x24
 8008b20:	e008      	b.n	8008b34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b22:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <xTimerGenericCommand+0x98>)
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	f107 0110 	add.w	r1, r7, #16
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	f7fe f9e5 	bl	8006efc <xQueueGenericSendFromISR>
 8008b32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3728      	adds	r7, #40	; 0x28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20001084 	.word	0x20001084

08008b44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4e:	4b22      	ldr	r3, [pc, #136]	; (8008bd8 <prvProcessExpiredTimer+0x94>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fd fefd 	bl	800695c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d022      	beq.n	8008bb6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	699a      	ldr	r2, [r3, #24]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	18d1      	adds	r1, r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	6978      	ldr	r0, [r7, #20]
 8008b7e:	f000 f8d1 	bl	8008d24 <prvInsertTimerInActiveList>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01f      	beq.n	8008bc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b88:	2300      	movs	r3, #0
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	2100      	movs	r1, #0
 8008b92:	6978      	ldr	r0, [r7, #20]
 8008b94:	f7ff ff88 	bl	8008aa8 <xTimerGenericCommand>
 8008b98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d113      	bne.n	8008bc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	60fb      	str	r3, [r7, #12]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bbc:	f023 0301 	bic.w	r3, r3, #1
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	6978      	ldr	r0, [r7, #20]
 8008bce:	4798      	blx	r3
}
 8008bd0:	bf00      	nop
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	2000107c 	.word	0x2000107c

08008bdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008be4:	f107 0308 	add.w	r3, r7, #8
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 f857 	bl	8008c9c <prvGetNextExpireTime>
 8008bee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f803 	bl	8008c00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bfa:	f000 f8d5 	bl	8008da8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bfe:	e7f1      	b.n	8008be4 <prvTimerTask+0x8>

08008c00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c0a:	f7ff f93b 	bl	8007e84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c0e:	f107 0308 	add.w	r3, r7, #8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 f866 	bl	8008ce4 <prvSampleTimeNow>
 8008c18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d130      	bne.n	8008c82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <prvProcessTimerOrBlockTask+0x3c>
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d806      	bhi.n	8008c3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c2e:	f7ff f937 	bl	8007ea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff ff85 	bl	8008b44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c3a:	e024      	b.n	8008c86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d008      	beq.n	8008c54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c42:	4b13      	ldr	r3, [pc, #76]	; (8008c90 <prvProcessTimerOrBlockTask+0x90>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <prvProcessTimerOrBlockTask+0x50>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e000      	b.n	8008c52 <prvProcessTimerOrBlockTask+0x52>
 8008c50:	2300      	movs	r3, #0
 8008c52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c54:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <prvProcessTimerOrBlockTask+0x94>)
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	4619      	mov	r1, r3
 8008c62:	f7fe fe7f 	bl	8007964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c66:	f7ff f91b 	bl	8007ea0 <xTaskResumeAll>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c70:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <prvProcessTimerOrBlockTask+0x98>)
 8008c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
}
 8008c80:	e001      	b.n	8008c86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c82:	f7ff f90d 	bl	8007ea0 <xTaskResumeAll>
}
 8008c86:	bf00      	nop
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20001080 	.word	0x20001080
 8008c94:	20001084 	.word	0x20001084
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ca4:	4b0e      	ldr	r3, [pc, #56]	; (8008ce0 <prvGetNextExpireTime+0x44>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <prvGetNextExpireTime+0x16>
 8008cae:	2201      	movs	r2, #1
 8008cb0:	e000      	b.n	8008cb4 <prvGetNextExpireTime+0x18>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d105      	bne.n	8008ccc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cc0:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <prvGetNextExpireTime+0x44>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	e001      	b.n	8008cd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	2000107c 	.word	0x2000107c

08008ce4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008cec:	f7ff f976 	bl	8007fdc <xTaskGetTickCount>
 8008cf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <prvSampleTimeNow+0x3c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d205      	bcs.n	8008d08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cfc:	f000 f936 	bl	8008f6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	e002      	b.n	8008d0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d0e:	4a04      	ldr	r2, [pc, #16]	; (8008d20 <prvSampleTimeNow+0x3c>)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d14:	68fb      	ldr	r3, [r7, #12]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	2000108c 	.word	0x2000108c

08008d24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d812      	bhi.n	8008d70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	1ad2      	subs	r2, r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d302      	bcc.n	8008d5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	e01b      	b.n	8008d96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d5e:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <prvInsertTimerInActiveList+0x7c>)
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3304      	adds	r3, #4
 8008d66:	4619      	mov	r1, r3
 8008d68:	4610      	mov	r0, r2
 8008d6a:	f7fd fdbe 	bl	80068ea <vListInsert>
 8008d6e:	e012      	b.n	8008d96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d206      	bcs.n	8008d86 <prvInsertTimerInActiveList+0x62>
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d302      	bcc.n	8008d86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d80:	2301      	movs	r3, #1
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	e007      	b.n	8008d96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d86:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <prvInsertTimerInActiveList+0x80>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7fd fdaa 	bl	80068ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d96:	697b      	ldr	r3, [r7, #20]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20001080 	.word	0x20001080
 8008da4:	2000107c 	.word	0x2000107c

08008da8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08e      	sub	sp, #56	; 0x38
 8008dac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dae:	e0ca      	b.n	8008f46 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	da18      	bge.n	8008de8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008db6:	1d3b      	adds	r3, r7, #4
 8008db8:	3304      	adds	r3, #4
 8008dba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	61fb      	str	r3, [r7, #28]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dde:	6850      	ldr	r0, [r2, #4]
 8008de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008de2:	6892      	ldr	r2, [r2, #8]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f2c0 80aa 	blt.w	8008f44 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	3304      	adds	r3, #4
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fd fdab 	bl	800695c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e06:	463b      	mov	r3, r7
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff ff6b 	bl	8008ce4 <prvSampleTimeNow>
 8008e0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	f200 8097 	bhi.w	8008f46 <prvProcessReceivedCommands+0x19e>
 8008e18:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <prvProcessReceivedCommands+0x78>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008e49 	.word	0x08008e49
 8008e24:	08008e49 	.word	0x08008e49
 8008e28:	08008e49 	.word	0x08008e49
 8008e2c:	08008ebd 	.word	0x08008ebd
 8008e30:	08008ed1 	.word	0x08008ed1
 8008e34:	08008f1b 	.word	0x08008f1b
 8008e38:	08008e49 	.word	0x08008e49
 8008e3c:	08008e49 	.word	0x08008e49
 8008e40:	08008ebd 	.word	0x08008ebd
 8008e44:	08008ed1 	.word	0x08008ed1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	18d1      	adds	r1, r2, r3
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e68:	f7ff ff5c 	bl	8008d24 <prvInsertTimerInActiveList>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d069      	beq.n	8008f46 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d05e      	beq.n	8008f46 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	441a      	add	r2, r3
 8008e90:	2300      	movs	r3, #0
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	2300      	movs	r3, #0
 8008e96:	2100      	movs	r1, #0
 8008e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e9a:	f7ff fe05 	bl	8008aa8 <xTimerGenericCommand>
 8008e9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d14f      	bne.n	8008f46 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	61bb      	str	r3, [r7, #24]
}
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ec2:	f023 0301 	bic.w	r3, r3, #1
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ece:	e03a      	b.n	8008f46 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	617b      	str	r3, [r7, #20]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	699a      	ldr	r2, [r3, #24]
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	18d1      	adds	r1, r2, r3
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f14:	f7ff ff06 	bl	8008d24 <prvInsertTimerInActiveList>
					break;
 8008f18:	e015      	b.n	8008f46 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d103      	bne.n	8008f30 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f2a:	f000 fbe1 	bl	80096f0 <vPortFree>
 8008f2e:	e00a      	b.n	8008f46 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f42:	e000      	b.n	8008f46 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f46:	4b08      	ldr	r3, [pc, #32]	; (8008f68 <prvProcessReceivedCommands+0x1c0>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	1d39      	adds	r1, r7, #4
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe f8fc 	bl	800714c <xQueueReceive>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f47f af2a 	bne.w	8008db0 <prvProcessReceivedCommands+0x8>
	}
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	3730      	adds	r7, #48	; 0x30
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20001084 	.word	0x20001084

08008f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f72:	e048      	b.n	8009006 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f74:	4b2d      	ldr	r3, [pc, #180]	; (800902c <prvSwitchTimerLists+0xc0>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7e:	4b2b      	ldr	r3, [pc, #172]	; (800902c <prvSwitchTimerLists+0xc0>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fd fce5 	bl	800695c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d02e      	beq.n	8009006 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4413      	add	r3, r2
 8008fb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d90e      	bls.n	8008fd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fc6:	4b19      	ldr	r3, [pc, #100]	; (800902c <prvSwitchTimerLists+0xc0>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7fd fc8a 	bl	80068ea <vListInsert>
 8008fd6:	e016      	b.n	8009006 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f7ff fd60 	bl	8008aa8 <xTimerGenericCommand>
 8008fe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	603b      	str	r3, [r7, #0]
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009006:	4b09      	ldr	r3, [pc, #36]	; (800902c <prvSwitchTimerLists+0xc0>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1b1      	bne.n	8008f74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009010:	4b06      	ldr	r3, [pc, #24]	; (800902c <prvSwitchTimerLists+0xc0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009016:	4b06      	ldr	r3, [pc, #24]	; (8009030 <prvSwitchTimerLists+0xc4>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a04      	ldr	r2, [pc, #16]	; (800902c <prvSwitchTimerLists+0xc0>)
 800901c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800901e:	4a04      	ldr	r2, [pc, #16]	; (8009030 <prvSwitchTimerLists+0xc4>)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	6013      	str	r3, [r2, #0]
}
 8009024:	bf00      	nop
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	2000107c 	.word	0x2000107c
 8009030:	20001080 	.word	0x20001080

08009034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800903a:	f000 f96b 	bl	8009314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800903e:	4b15      	ldr	r3, [pc, #84]	; (8009094 <prvCheckForValidListAndQueue+0x60>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d120      	bne.n	8009088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009046:	4814      	ldr	r0, [pc, #80]	; (8009098 <prvCheckForValidListAndQueue+0x64>)
 8009048:	f7fd fbfe 	bl	8006848 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800904c:	4813      	ldr	r0, [pc, #76]	; (800909c <prvCheckForValidListAndQueue+0x68>)
 800904e:	f7fd fbfb 	bl	8006848 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009052:	4b13      	ldr	r3, [pc, #76]	; (80090a0 <prvCheckForValidListAndQueue+0x6c>)
 8009054:	4a10      	ldr	r2, [pc, #64]	; (8009098 <prvCheckForValidListAndQueue+0x64>)
 8009056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009058:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <prvCheckForValidListAndQueue+0x70>)
 800905a:	4a10      	ldr	r2, [pc, #64]	; (800909c <prvCheckForValidListAndQueue+0x68>)
 800905c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800905e:	2300      	movs	r3, #0
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <prvCheckForValidListAndQueue+0x74>)
 8009064:	4a11      	ldr	r2, [pc, #68]	; (80090ac <prvCheckForValidListAndQueue+0x78>)
 8009066:	2110      	movs	r1, #16
 8009068:	200a      	movs	r0, #10
 800906a:	f7fd fd09 	bl	8006a80 <xQueueGenericCreateStatic>
 800906e:	4603      	mov	r3, r0
 8009070:	4a08      	ldr	r2, [pc, #32]	; (8009094 <prvCheckForValidListAndQueue+0x60>)
 8009072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009074:	4b07      	ldr	r3, [pc, #28]	; (8009094 <prvCheckForValidListAndQueue+0x60>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <prvCheckForValidListAndQueue+0x60>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	490b      	ldr	r1, [pc, #44]	; (80090b0 <prvCheckForValidListAndQueue+0x7c>)
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fc1a 	bl	80078bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009088:	f000 f974 	bl	8009374 <vPortExitCritical>
}
 800908c:	bf00      	nop
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20001084 	.word	0x20001084
 8009098:	20001054 	.word	0x20001054
 800909c:	20001068 	.word	0x20001068
 80090a0:	2000107c 	.word	0x2000107c
 80090a4:	20001080 	.word	0x20001080
 80090a8:	20001130 	.word	0x20001130
 80090ac:	20001090 	.word	0x20001090
 80090b0:	0800a3ec 	.word	0x0800a3ec

080090b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3b04      	subs	r3, #4
 80090c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3b04      	subs	r3, #4
 80090d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f023 0201 	bic.w	r2, r3, #1
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3b04      	subs	r3, #4
 80090e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090e4:	4a0c      	ldr	r2, [pc, #48]	; (8009118 <pxPortInitialiseStack+0x64>)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3b14      	subs	r3, #20
 80090ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f06f 0202 	mvn.w	r2, #2
 8009102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3b20      	subs	r3, #32
 8009108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800910a:	68fb      	ldr	r3, [r7, #12]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	0800911d 	.word	0x0800911d

0800911c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009126:	4b12      	ldr	r3, [pc, #72]	; (8009170 <prvTaskExitError+0x54>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d00a      	beq.n	8009146 <prvTaskExitError+0x2a>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	60fb      	str	r3, [r7, #12]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <prvTaskExitError+0x28>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	60bb      	str	r3, [r7, #8]
}
 8009158:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800915a:	bf00      	nop
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0fc      	beq.n	800915c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	2000000c 	.word	0x2000000c
	...

08009180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <pxCurrentTCBConst2>)
 8009182:	6819      	ldr	r1, [r3, #0]
 8009184:	6808      	ldr	r0, [r1, #0]
 8009186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918a:	f380 8809 	msr	PSP, r0
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f04f 0000 	mov.w	r0, #0
 8009196:	f380 8811 	msr	BASEPRI, r0
 800919a:	4770      	bx	lr
 800919c:	f3af 8000 	nop.w

080091a0 <pxCurrentTCBConst2>:
 80091a0:	20000b54 	.word	0x20000b54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop

080091a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091a8:	4808      	ldr	r0, [pc, #32]	; (80091cc <prvPortStartFirstTask+0x24>)
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	6800      	ldr	r0, [r0, #0]
 80091ae:	f380 8808 	msr	MSP, r0
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8814 	msr	CONTROL, r0
 80091ba:	b662      	cpsie	i
 80091bc:	b661      	cpsie	f
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	df00      	svc	0
 80091c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ca:	bf00      	nop
 80091cc:	e000ed08 	.word	0xe000ed08

080091d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091d6:	4b46      	ldr	r3, [pc, #280]	; (80092f0 <xPortStartScheduler+0x120>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a46      	ldr	r2, [pc, #280]	; (80092f4 <xPortStartScheduler+0x124>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d10a      	bne.n	80091f6 <xPortStartScheduler+0x26>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091f6:	4b3e      	ldr	r3, [pc, #248]	; (80092f0 <xPortStartScheduler+0x120>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a3f      	ldr	r2, [pc, #252]	; (80092f8 <xPortStartScheduler+0x128>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d10a      	bne.n	8009216 <xPortStartScheduler+0x46>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009216:	4b39      	ldr	r3, [pc, #228]	; (80092fc <xPortStartScheduler+0x12c>)
 8009218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	22ff      	movs	r2, #255	; 0xff
 8009226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009238:	b2da      	uxtb	r2, r3
 800923a:	4b31      	ldr	r3, [pc, #196]	; (8009300 <xPortStartScheduler+0x130>)
 800923c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800923e:	4b31      	ldr	r3, [pc, #196]	; (8009304 <xPortStartScheduler+0x134>)
 8009240:	2207      	movs	r2, #7
 8009242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009244:	e009      	b.n	800925a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009246:	4b2f      	ldr	r3, [pc, #188]	; (8009304 <xPortStartScheduler+0x134>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3b01      	subs	r3, #1
 800924c:	4a2d      	ldr	r2, [pc, #180]	; (8009304 <xPortStartScheduler+0x134>)
 800924e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	b2db      	uxtb	r3, r3
 8009258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b80      	cmp	r3, #128	; 0x80
 8009264:	d0ef      	beq.n	8009246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009266:	4b27      	ldr	r3, [pc, #156]	; (8009304 <xPortStartScheduler+0x134>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f1c3 0307 	rsb	r3, r3, #7
 800926e:	2b04      	cmp	r3, #4
 8009270:	d00a      	beq.n	8009288 <xPortStartScheduler+0xb8>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	60bb      	str	r3, [r7, #8]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009288:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <xPortStartScheduler+0x134>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	4a1d      	ldr	r2, [pc, #116]	; (8009304 <xPortStartScheduler+0x134>)
 8009290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009292:	4b1c      	ldr	r3, [pc, #112]	; (8009304 <xPortStartScheduler+0x134>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800929a:	4a1a      	ldr	r2, [pc, #104]	; (8009304 <xPortStartScheduler+0x134>)
 800929c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092a6:	4b18      	ldr	r3, [pc, #96]	; (8009308 <xPortStartScheduler+0x138>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a17      	ldr	r2, [pc, #92]	; (8009308 <xPortStartScheduler+0x138>)
 80092ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092b2:	4b15      	ldr	r3, [pc, #84]	; (8009308 <xPortStartScheduler+0x138>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a14      	ldr	r2, [pc, #80]	; (8009308 <xPortStartScheduler+0x138>)
 80092b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092be:	f000 f8dd 	bl	800947c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092c2:	4b12      	ldr	r3, [pc, #72]	; (800930c <xPortStartScheduler+0x13c>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092c8:	f000 f8fc 	bl	80094c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092cc:	4b10      	ldr	r3, [pc, #64]	; (8009310 <xPortStartScheduler+0x140>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a0f      	ldr	r2, [pc, #60]	; (8009310 <xPortStartScheduler+0x140>)
 80092d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80092d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092d8:	f7ff ff66 	bl	80091a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092dc:	f7fe ff48 	bl	8008170 <vTaskSwitchContext>
	prvTaskExitError();
 80092e0:	f7ff ff1c 	bl	800911c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	e000ed00 	.word	0xe000ed00
 80092f4:	410fc271 	.word	0x410fc271
 80092f8:	410fc270 	.word	0x410fc270
 80092fc:	e000e400 	.word	0xe000e400
 8009300:	20001180 	.word	0x20001180
 8009304:	20001184 	.word	0x20001184
 8009308:	e000ed20 	.word	0xe000ed20
 800930c:	2000000c 	.word	0x2000000c
 8009310:	e000ef34 	.word	0xe000ef34

08009314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	607b      	str	r3, [r7, #4]
}
 800932c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800932e:	4b0f      	ldr	r3, [pc, #60]	; (800936c <vPortEnterCritical+0x58>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	4a0d      	ldr	r2, [pc, #52]	; (800936c <vPortEnterCritical+0x58>)
 8009336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009338:	4b0c      	ldr	r3, [pc, #48]	; (800936c <vPortEnterCritical+0x58>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d10f      	bne.n	8009360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <vPortEnterCritical+0x5c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <vPortEnterCritical+0x4c>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	603b      	str	r3, [r7, #0]
}
 800935c:	bf00      	nop
 800935e:	e7fe      	b.n	800935e <vPortEnterCritical+0x4a>
	}
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	2000000c 	.word	0x2000000c
 8009370:	e000ed04 	.word	0xe000ed04

08009374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800937a:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <vPortExitCritical+0x50>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10a      	bne.n	8009398 <vPortExitCritical+0x24>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	607b      	str	r3, [r7, #4]
}
 8009394:	bf00      	nop
 8009396:	e7fe      	b.n	8009396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009398:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <vPortExitCritical+0x50>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3b01      	subs	r3, #1
 800939e:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <vPortExitCritical+0x50>)
 80093a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093a2:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <vPortExitCritical+0x50>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d105      	bne.n	80093b6 <vPortExitCritical+0x42>
 80093aa:	2300      	movs	r3, #0
 80093ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	f383 8811 	msr	BASEPRI, r3
}
 80093b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	2000000c 	.word	0x2000000c
	...

080093d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093d0:	f3ef 8009 	mrs	r0, PSP
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	4b15      	ldr	r3, [pc, #84]	; (8009430 <pxCurrentTCBConst>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	f01e 0f10 	tst.w	lr, #16
 80093e0:	bf08      	it	eq
 80093e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	6010      	str	r0, [r2, #0]
 80093ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80093f4:	f380 8811 	msr	BASEPRI, r0
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f7fe feb6 	bl	8008170 <vTaskSwitchContext>
 8009404:	f04f 0000 	mov.w	r0, #0
 8009408:	f380 8811 	msr	BASEPRI, r0
 800940c:	bc09      	pop	{r0, r3}
 800940e:	6819      	ldr	r1, [r3, #0]
 8009410:	6808      	ldr	r0, [r1, #0]
 8009412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009416:	f01e 0f10 	tst.w	lr, #16
 800941a:	bf08      	it	eq
 800941c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009420:	f380 8809 	msr	PSP, r0
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	f3af 8000 	nop.w

08009430 <pxCurrentTCBConst>:
 8009430:	20000b54 	.word	0x20000b54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop

08009438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
}
 8009450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009452:	f7fe fdd3 	bl	8007ffc <xTaskIncrementTick>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800945c:	4b06      	ldr	r3, [pc, #24]	; (8009478 <xPortSysTickHandler+0x40>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	2300      	movs	r3, #0
 8009466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	f383 8811 	msr	BASEPRI, r3
}
 800946e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009480:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <vPortSetupTimerInterrupt+0x34>)
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <vPortSetupTimerInterrupt+0x38>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <vPortSetupTimerInterrupt+0x3c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <vPortSetupTimerInterrupt+0x40>)
 8009492:	fba2 2303 	umull	r2, r3, r2, r3
 8009496:	099b      	lsrs	r3, r3, #6
 8009498:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <vPortSetupTimerInterrupt+0x44>)
 800949a:	3b01      	subs	r3, #1
 800949c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800949e:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <vPortSetupTimerInterrupt+0x34>)
 80094a0:	2207      	movs	r2, #7
 80094a2:	601a      	str	r2, [r3, #0]
}
 80094a4:	bf00      	nop
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	e000e010 	.word	0xe000e010
 80094b4:	e000e018 	.word	0xe000e018
 80094b8:	20000000 	.word	0x20000000
 80094bc:	10624dd3 	.word	0x10624dd3
 80094c0:	e000e014 	.word	0xe000e014

080094c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80094d4 <vPortEnableVFP+0x10>
 80094c8:	6801      	ldr	r1, [r0, #0]
 80094ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094ce:	6001      	str	r1, [r0, #0]
 80094d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094d2:	bf00      	nop
 80094d4:	e000ed88 	.word	0xe000ed88

080094d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094de:	f3ef 8305 	mrs	r3, IPSR
 80094e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d914      	bls.n	8009514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094ea:	4a17      	ldr	r2, [pc, #92]	; (8009548 <vPortValidateInterruptPriority+0x70>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094f4:	4b15      	ldr	r3, [pc, #84]	; (800954c <vPortValidateInterruptPriority+0x74>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	7afa      	ldrb	r2, [r7, #11]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d20a      	bcs.n	8009514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	607b      	str	r3, [r7, #4]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009514:	4b0e      	ldr	r3, [pc, #56]	; (8009550 <vPortValidateInterruptPriority+0x78>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800951c:	4b0d      	ldr	r3, [pc, #52]	; (8009554 <vPortValidateInterruptPriority+0x7c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d90a      	bls.n	800953a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	603b      	str	r3, [r7, #0]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <vPortValidateInterruptPriority+0x60>
	}
 800953a:	bf00      	nop
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	e000e3f0 	.word	0xe000e3f0
 800954c:	20001180 	.word	0x20001180
 8009550:	e000ed0c 	.word	0xe000ed0c
 8009554:	20001184 	.word	0x20001184

08009558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	; 0x28
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009560:	2300      	movs	r3, #0
 8009562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009564:	f7fe fc8e 	bl	8007e84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009568:	4b5b      	ldr	r3, [pc, #364]	; (80096d8 <pvPortMalloc+0x180>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009570:	f000 f920 	bl	80097b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009574:	4b59      	ldr	r3, [pc, #356]	; (80096dc <pvPortMalloc+0x184>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	f040 8093 	bne.w	80096a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01d      	beq.n	80095c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009588:	2208      	movs	r2, #8
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4413      	add	r3, r2
 800958e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	2b00      	cmp	r3, #0
 8009598:	d014      	beq.n	80095c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f023 0307 	bic.w	r3, r3, #7
 80095a0:	3308      	adds	r3, #8
 80095a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00a      	beq.n	80095c4 <pvPortMalloc+0x6c>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	617b      	str	r3, [r7, #20]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d06e      	beq.n	80096a8 <pvPortMalloc+0x150>
 80095ca:	4b45      	ldr	r3, [pc, #276]	; (80096e0 <pvPortMalloc+0x188>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d869      	bhi.n	80096a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095d4:	4b43      	ldr	r3, [pc, #268]	; (80096e4 <pvPortMalloc+0x18c>)
 80095d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095d8:	4b42      	ldr	r3, [pc, #264]	; (80096e4 <pvPortMalloc+0x18c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095de:	e004      	b.n	80095ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d903      	bls.n	80095fc <pvPortMalloc+0xa4>
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1f1      	bne.n	80095e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095fc:	4b36      	ldr	r3, [pc, #216]	; (80096d8 <pvPortMalloc+0x180>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009602:	429a      	cmp	r2, r3
 8009604:	d050      	beq.n	80096a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2208      	movs	r2, #8
 800960c:	4413      	add	r3, r2
 800960e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	1ad2      	subs	r2, r2, r3
 8009620:	2308      	movs	r3, #8
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	429a      	cmp	r2, r3
 8009626:	d91f      	bls.n	8009668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f003 0307 	and.w	r3, r3, #7
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <pvPortMalloc+0xf8>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	613b      	str	r3, [r7, #16]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	1ad2      	subs	r2, r2, r3
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009662:	69b8      	ldr	r0, [r7, #24]
 8009664:	f000 f908 	bl	8009878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009668:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <pvPortMalloc+0x188>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	4a1b      	ldr	r2, [pc, #108]	; (80096e0 <pvPortMalloc+0x188>)
 8009674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009676:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <pvPortMalloc+0x188>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	4b1b      	ldr	r3, [pc, #108]	; (80096e8 <pvPortMalloc+0x190>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d203      	bcs.n	800968a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009682:	4b17      	ldr	r3, [pc, #92]	; (80096e0 <pvPortMalloc+0x188>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a18      	ldr	r2, [pc, #96]	; (80096e8 <pvPortMalloc+0x190>)
 8009688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <pvPortMalloc+0x184>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	431a      	orrs	r2, r3
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <pvPortMalloc+0x194>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3301      	adds	r3, #1
 80096a4:	4a11      	ldr	r2, [pc, #68]	; (80096ec <pvPortMalloc+0x194>)
 80096a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096a8:	f7fe fbfa 	bl	8007ea0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <pvPortMalloc+0x174>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60fb      	str	r3, [r7, #12]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <pvPortMalloc+0x172>
	return pvReturn;
 80096cc:	69fb      	ldr	r3, [r7, #28]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3728      	adds	r7, #40	; 0x28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20002590 	.word	0x20002590
 80096dc:	200025a4 	.word	0x200025a4
 80096e0:	20002594 	.word	0x20002594
 80096e4:	20002588 	.word	0x20002588
 80096e8:	20002598 	.word	0x20002598
 80096ec:	2000259c 	.word	0x2000259c

080096f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d04d      	beq.n	800979e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009702:	2308      	movs	r3, #8
 8009704:	425b      	negs	r3, r3
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	4413      	add	r3, r2
 800970a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <vPortFree+0xb8>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4013      	ands	r3, r2
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10a      	bne.n	8009734 <vPortFree+0x44>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	60fb      	str	r3, [r7, #12]
}
 8009730:	bf00      	nop
 8009732:	e7fe      	b.n	8009732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00a      	beq.n	8009752 <vPortFree+0x62>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	60bb      	str	r3, [r7, #8]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	4b14      	ldr	r3, [pc, #80]	; (80097a8 <vPortFree+0xb8>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4013      	ands	r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01e      	beq.n	800979e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d11a      	bne.n	800979e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <vPortFree+0xb8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	43db      	mvns	r3, r3
 8009772:	401a      	ands	r2, r3
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009778:	f7fe fb84 	bl	8007e84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <vPortFree+0xbc>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4413      	add	r3, r2
 8009786:	4a09      	ldr	r2, [pc, #36]	; (80097ac <vPortFree+0xbc>)
 8009788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800978a:	6938      	ldr	r0, [r7, #16]
 800978c:	f000 f874 	bl	8009878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009790:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <vPortFree+0xc0>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	4a06      	ldr	r2, [pc, #24]	; (80097b0 <vPortFree+0xc0>)
 8009798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800979a:	f7fe fb81 	bl	8007ea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800979e:	bf00      	nop
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	200025a4 	.word	0x200025a4
 80097ac:	20002594 	.word	0x20002594
 80097b0:	200025a0 	.word	0x200025a0

080097b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80097be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097c0:	4b27      	ldr	r3, [pc, #156]	; (8009860 <prvHeapInit+0xac>)
 80097c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00c      	beq.n	80097e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3307      	adds	r3, #7
 80097d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0307 	bic.w	r3, r3, #7
 80097da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	4a1f      	ldr	r2, [pc, #124]	; (8009860 <prvHeapInit+0xac>)
 80097e4:	4413      	add	r3, r2
 80097e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097ec:	4a1d      	ldr	r2, [pc, #116]	; (8009864 <prvHeapInit+0xb0>)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <prvHeapInit+0xb0>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	4413      	add	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009800:	2208      	movs	r2, #8
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1a9b      	subs	r3, r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a15      	ldr	r2, [pc, #84]	; (8009868 <prvHeapInit+0xb4>)
 8009814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <prvHeapInit+0xb4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <prvHeapInit+0xb4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <prvHeapInit+0xb4>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	4a0a      	ldr	r2, [pc, #40]	; (800986c <prvHeapInit+0xb8>)
 8009842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4a09      	ldr	r2, [pc, #36]	; (8009870 <prvHeapInit+0xbc>)
 800984a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800984c:	4b09      	ldr	r3, [pc, #36]	; (8009874 <prvHeapInit+0xc0>)
 800984e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009852:	601a      	str	r2, [r3, #0]
}
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20001188 	.word	0x20001188
 8009864:	20002588 	.word	0x20002588
 8009868:	20002590 	.word	0x20002590
 800986c:	20002598 	.word	0x20002598
 8009870:	20002594 	.word	0x20002594
 8009874:	200025a4 	.word	0x200025a4

08009878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009880:	4b28      	ldr	r3, [pc, #160]	; (8009924 <prvInsertBlockIntoFreeList+0xac>)
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e002      	b.n	800988c <prvInsertBlockIntoFreeList+0x14>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	429a      	cmp	r2, r3
 8009894:	d8f7      	bhi.n	8009886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	4413      	add	r3, r2
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d108      	bne.n	80098ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	441a      	add	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d118      	bne.n	8009900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <prvInsertBlockIntoFreeList+0xb0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d00d      	beq.n	80098f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	441a      	add	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e008      	b.n	8009908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <prvInsertBlockIntoFreeList+0xb0>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e003      	b.n	8009908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	429a      	cmp	r2, r3
 800990e:	d002      	beq.n	8009916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20002588 	.word	0x20002588
 8009928:	20002590 	.word	0x20002590

0800992c <__errno>:
 800992c:	4b01      	ldr	r3, [pc, #4]	; (8009934 <__errno+0x8>)
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	20000010 	.word	0x20000010

08009938 <__libc_init_array>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	4d0d      	ldr	r5, [pc, #52]	; (8009970 <__libc_init_array+0x38>)
 800993c:	4c0d      	ldr	r4, [pc, #52]	; (8009974 <__libc_init_array+0x3c>)
 800993e:	1b64      	subs	r4, r4, r5
 8009940:	10a4      	asrs	r4, r4, #2
 8009942:	2600      	movs	r6, #0
 8009944:	42a6      	cmp	r6, r4
 8009946:	d109      	bne.n	800995c <__libc_init_array+0x24>
 8009948:	4d0b      	ldr	r5, [pc, #44]	; (8009978 <__libc_init_array+0x40>)
 800994a:	4c0c      	ldr	r4, [pc, #48]	; (800997c <__libc_init_array+0x44>)
 800994c:	f000 fcf8 	bl	800a340 <_init>
 8009950:	1b64      	subs	r4, r4, r5
 8009952:	10a4      	asrs	r4, r4, #2
 8009954:	2600      	movs	r6, #0
 8009956:	42a6      	cmp	r6, r4
 8009958:	d105      	bne.n	8009966 <__libc_init_array+0x2e>
 800995a:	bd70      	pop	{r4, r5, r6, pc}
 800995c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009960:	4798      	blx	r3
 8009962:	3601      	adds	r6, #1
 8009964:	e7ee      	b.n	8009944 <__libc_init_array+0xc>
 8009966:	f855 3b04 	ldr.w	r3, [r5], #4
 800996a:	4798      	blx	r3
 800996c:	3601      	adds	r6, #1
 800996e:	e7f2      	b.n	8009956 <__libc_init_array+0x1e>
 8009970:	0800a5a4 	.word	0x0800a5a4
 8009974:	0800a5a4 	.word	0x0800a5a4
 8009978:	0800a5a4 	.word	0x0800a5a4
 800997c:	0800a5a8 	.word	0x0800a5a8

08009980 <__retarget_lock_acquire_recursive>:
 8009980:	4770      	bx	lr

08009982 <__retarget_lock_release_recursive>:
 8009982:	4770      	bx	lr

08009984 <memcpy>:
 8009984:	440a      	add	r2, r1
 8009986:	4291      	cmp	r1, r2
 8009988:	f100 33ff 	add.w	r3, r0, #4294967295
 800998c:	d100      	bne.n	8009990 <memcpy+0xc>
 800998e:	4770      	bx	lr
 8009990:	b510      	push	{r4, lr}
 8009992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800999a:	4291      	cmp	r1, r2
 800999c:	d1f9      	bne.n	8009992 <memcpy+0xe>
 800999e:	bd10      	pop	{r4, pc}

080099a0 <memset>:
 80099a0:	4402      	add	r2, r0
 80099a2:	4603      	mov	r3, r0
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d100      	bne.n	80099aa <memset+0xa>
 80099a8:	4770      	bx	lr
 80099aa:	f803 1b01 	strb.w	r1, [r3], #1
 80099ae:	e7f9      	b.n	80099a4 <memset+0x4>

080099b0 <sbrk_aligned>:
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	4e0e      	ldr	r6, [pc, #56]	; (80099ec <sbrk_aligned+0x3c>)
 80099b4:	460c      	mov	r4, r1
 80099b6:	6831      	ldr	r1, [r6, #0]
 80099b8:	4605      	mov	r5, r0
 80099ba:	b911      	cbnz	r1, 80099c2 <sbrk_aligned+0x12>
 80099bc:	f000 f8f6 	bl	8009bac <_sbrk_r>
 80099c0:	6030      	str	r0, [r6, #0]
 80099c2:	4621      	mov	r1, r4
 80099c4:	4628      	mov	r0, r5
 80099c6:	f000 f8f1 	bl	8009bac <_sbrk_r>
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	d00a      	beq.n	80099e4 <sbrk_aligned+0x34>
 80099ce:	1cc4      	adds	r4, r0, #3
 80099d0:	f024 0403 	bic.w	r4, r4, #3
 80099d4:	42a0      	cmp	r0, r4
 80099d6:	d007      	beq.n	80099e8 <sbrk_aligned+0x38>
 80099d8:	1a21      	subs	r1, r4, r0
 80099da:	4628      	mov	r0, r5
 80099dc:	f000 f8e6 	bl	8009bac <_sbrk_r>
 80099e0:	3001      	adds	r0, #1
 80099e2:	d101      	bne.n	80099e8 <sbrk_aligned+0x38>
 80099e4:	f04f 34ff 	mov.w	r4, #4294967295
 80099e8:	4620      	mov	r0, r4
 80099ea:	bd70      	pop	{r4, r5, r6, pc}
 80099ec:	200025b0 	.word	0x200025b0

080099f0 <_malloc_r>:
 80099f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f4:	1ccd      	adds	r5, r1, #3
 80099f6:	f025 0503 	bic.w	r5, r5, #3
 80099fa:	3508      	adds	r5, #8
 80099fc:	2d0c      	cmp	r5, #12
 80099fe:	bf38      	it	cc
 8009a00:	250c      	movcc	r5, #12
 8009a02:	2d00      	cmp	r5, #0
 8009a04:	4607      	mov	r7, r0
 8009a06:	db01      	blt.n	8009a0c <_malloc_r+0x1c>
 8009a08:	42a9      	cmp	r1, r5
 8009a0a:	d905      	bls.n	8009a18 <_malloc_r+0x28>
 8009a0c:	230c      	movs	r3, #12
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	2600      	movs	r6, #0
 8009a12:	4630      	mov	r0, r6
 8009a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a18:	4e2e      	ldr	r6, [pc, #184]	; (8009ad4 <_malloc_r+0xe4>)
 8009a1a:	f000 f8f7 	bl	8009c0c <__malloc_lock>
 8009a1e:	6833      	ldr	r3, [r6, #0]
 8009a20:	461c      	mov	r4, r3
 8009a22:	bb34      	cbnz	r4, 8009a72 <_malloc_r+0x82>
 8009a24:	4629      	mov	r1, r5
 8009a26:	4638      	mov	r0, r7
 8009a28:	f7ff ffc2 	bl	80099b0 <sbrk_aligned>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	4604      	mov	r4, r0
 8009a30:	d14d      	bne.n	8009ace <_malloc_r+0xde>
 8009a32:	6834      	ldr	r4, [r6, #0]
 8009a34:	4626      	mov	r6, r4
 8009a36:	2e00      	cmp	r6, #0
 8009a38:	d140      	bne.n	8009abc <_malloc_r+0xcc>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4638      	mov	r0, r7
 8009a40:	eb04 0803 	add.w	r8, r4, r3
 8009a44:	f000 f8b2 	bl	8009bac <_sbrk_r>
 8009a48:	4580      	cmp	r8, r0
 8009a4a:	d13a      	bne.n	8009ac2 <_malloc_r+0xd2>
 8009a4c:	6821      	ldr	r1, [r4, #0]
 8009a4e:	3503      	adds	r5, #3
 8009a50:	1a6d      	subs	r5, r5, r1
 8009a52:	f025 0503 	bic.w	r5, r5, #3
 8009a56:	3508      	adds	r5, #8
 8009a58:	2d0c      	cmp	r5, #12
 8009a5a:	bf38      	it	cc
 8009a5c:	250c      	movcc	r5, #12
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7ff ffa5 	bl	80099b0 <sbrk_aligned>
 8009a66:	3001      	adds	r0, #1
 8009a68:	d02b      	beq.n	8009ac2 <_malloc_r+0xd2>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	442b      	add	r3, r5
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	e00e      	b.n	8009a90 <_malloc_r+0xa0>
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	1b52      	subs	r2, r2, r5
 8009a76:	d41e      	bmi.n	8009ab6 <_malloc_r+0xc6>
 8009a78:	2a0b      	cmp	r2, #11
 8009a7a:	d916      	bls.n	8009aaa <_malloc_r+0xba>
 8009a7c:	1961      	adds	r1, r4, r5
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	6025      	str	r5, [r4, #0]
 8009a82:	bf18      	it	ne
 8009a84:	6059      	strne	r1, [r3, #4]
 8009a86:	6863      	ldr	r3, [r4, #4]
 8009a88:	bf08      	it	eq
 8009a8a:	6031      	streq	r1, [r6, #0]
 8009a8c:	5162      	str	r2, [r4, r5]
 8009a8e:	604b      	str	r3, [r1, #4]
 8009a90:	4638      	mov	r0, r7
 8009a92:	f104 060b 	add.w	r6, r4, #11
 8009a96:	f000 f8bf 	bl	8009c18 <__malloc_unlock>
 8009a9a:	f026 0607 	bic.w	r6, r6, #7
 8009a9e:	1d23      	adds	r3, r4, #4
 8009aa0:	1af2      	subs	r2, r6, r3
 8009aa2:	d0b6      	beq.n	8009a12 <_malloc_r+0x22>
 8009aa4:	1b9b      	subs	r3, r3, r6
 8009aa6:	50a3      	str	r3, [r4, r2]
 8009aa8:	e7b3      	b.n	8009a12 <_malloc_r+0x22>
 8009aaa:	6862      	ldr	r2, [r4, #4]
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	bf0c      	ite	eq
 8009ab0:	6032      	streq	r2, [r6, #0]
 8009ab2:	605a      	strne	r2, [r3, #4]
 8009ab4:	e7ec      	b.n	8009a90 <_malloc_r+0xa0>
 8009ab6:	4623      	mov	r3, r4
 8009ab8:	6864      	ldr	r4, [r4, #4]
 8009aba:	e7b2      	b.n	8009a22 <_malloc_r+0x32>
 8009abc:	4634      	mov	r4, r6
 8009abe:	6876      	ldr	r6, [r6, #4]
 8009ac0:	e7b9      	b.n	8009a36 <_malloc_r+0x46>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	603b      	str	r3, [r7, #0]
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	f000 f8a6 	bl	8009c18 <__malloc_unlock>
 8009acc:	e7a1      	b.n	8009a12 <_malloc_r+0x22>
 8009ace:	6025      	str	r5, [r4, #0]
 8009ad0:	e7de      	b.n	8009a90 <_malloc_r+0xa0>
 8009ad2:	bf00      	nop
 8009ad4:	200025ac 	.word	0x200025ac

08009ad8 <cleanup_glue>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	460c      	mov	r4, r1
 8009adc:	6809      	ldr	r1, [r1, #0]
 8009ade:	4605      	mov	r5, r0
 8009ae0:	b109      	cbz	r1, 8009ae6 <cleanup_glue+0xe>
 8009ae2:	f7ff fff9 	bl	8009ad8 <cleanup_glue>
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	4628      	mov	r0, r5
 8009aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aee:	f000 b899 	b.w	8009c24 <_free_r>
	...

08009af4 <_reclaim_reent>:
 8009af4:	4b2c      	ldr	r3, [pc, #176]	; (8009ba8 <_reclaim_reent+0xb4>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4283      	cmp	r3, r0
 8009afa:	b570      	push	{r4, r5, r6, lr}
 8009afc:	4604      	mov	r4, r0
 8009afe:	d051      	beq.n	8009ba4 <_reclaim_reent+0xb0>
 8009b00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b02:	b143      	cbz	r3, 8009b16 <_reclaim_reent+0x22>
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d14a      	bne.n	8009ba0 <_reclaim_reent+0xac>
 8009b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b0c:	6819      	ldr	r1, [r3, #0]
 8009b0e:	b111      	cbz	r1, 8009b16 <_reclaim_reent+0x22>
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 f887 	bl	8009c24 <_free_r>
 8009b16:	6961      	ldr	r1, [r4, #20]
 8009b18:	b111      	cbz	r1, 8009b20 <_reclaim_reent+0x2c>
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 f882 	bl	8009c24 <_free_r>
 8009b20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b22:	b111      	cbz	r1, 8009b2a <_reclaim_reent+0x36>
 8009b24:	4620      	mov	r0, r4
 8009b26:	f000 f87d 	bl	8009c24 <_free_r>
 8009b2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b2c:	b111      	cbz	r1, 8009b34 <_reclaim_reent+0x40>
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 f878 	bl	8009c24 <_free_r>
 8009b34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009b36:	b111      	cbz	r1, 8009b3e <_reclaim_reent+0x4a>
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f000 f873 	bl	8009c24 <_free_r>
 8009b3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009b40:	b111      	cbz	r1, 8009b48 <_reclaim_reent+0x54>
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f86e 	bl	8009c24 <_free_r>
 8009b48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009b4a:	b111      	cbz	r1, 8009b52 <_reclaim_reent+0x5e>
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 f869 	bl	8009c24 <_free_r>
 8009b52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009b54:	b111      	cbz	r1, 8009b5c <_reclaim_reent+0x68>
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 f864 	bl	8009c24 <_free_r>
 8009b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b5e:	b111      	cbz	r1, 8009b66 <_reclaim_reent+0x72>
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 f85f 	bl	8009c24 <_free_r>
 8009b66:	69a3      	ldr	r3, [r4, #24]
 8009b68:	b1e3      	cbz	r3, 8009ba4 <_reclaim_reent+0xb0>
 8009b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4798      	blx	r3
 8009b70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b72:	b1b9      	cbz	r1, 8009ba4 <_reclaim_reent+0xb0>
 8009b74:	4620      	mov	r0, r4
 8009b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b7a:	f7ff bfad 	b.w	8009ad8 <cleanup_glue>
 8009b7e:	5949      	ldr	r1, [r1, r5]
 8009b80:	b941      	cbnz	r1, 8009b94 <_reclaim_reent+0xa0>
 8009b82:	3504      	adds	r5, #4
 8009b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b86:	2d80      	cmp	r5, #128	; 0x80
 8009b88:	68d9      	ldr	r1, [r3, #12]
 8009b8a:	d1f8      	bne.n	8009b7e <_reclaim_reent+0x8a>
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f000 f849 	bl	8009c24 <_free_r>
 8009b92:	e7ba      	b.n	8009b0a <_reclaim_reent+0x16>
 8009b94:	680e      	ldr	r6, [r1, #0]
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 f844 	bl	8009c24 <_free_r>
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	e7ef      	b.n	8009b80 <_reclaim_reent+0x8c>
 8009ba0:	2500      	movs	r5, #0
 8009ba2:	e7ef      	b.n	8009b84 <_reclaim_reent+0x90>
 8009ba4:	bd70      	pop	{r4, r5, r6, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20000010 	.word	0x20000010

08009bac <_sbrk_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d06      	ldr	r5, [pc, #24]	; (8009bc8 <_sbrk_r+0x1c>)
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	602b      	str	r3, [r5, #0]
 8009bb8:	f7f7 f924 	bl	8000e04 <_sbrk>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_sbrk_r+0x1a>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_sbrk_r+0x1a>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	200025b4 	.word	0x200025b4

08009bcc <siprintf>:
 8009bcc:	b40e      	push	{r1, r2, r3}
 8009bce:	b500      	push	{lr}
 8009bd0:	b09c      	sub	sp, #112	; 0x70
 8009bd2:	ab1d      	add	r3, sp, #116	; 0x74
 8009bd4:	9002      	str	r0, [sp, #8]
 8009bd6:	9006      	str	r0, [sp, #24]
 8009bd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bdc:	4809      	ldr	r0, [pc, #36]	; (8009c04 <siprintf+0x38>)
 8009bde:	9107      	str	r1, [sp, #28]
 8009be0:	9104      	str	r1, [sp, #16]
 8009be2:	4909      	ldr	r1, [pc, #36]	; (8009c08 <siprintf+0x3c>)
 8009be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be8:	9105      	str	r1, [sp, #20]
 8009bea:	6800      	ldr	r0, [r0, #0]
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	a902      	add	r1, sp, #8
 8009bf0:	f000 f8c0 	bl	8009d74 <_svfiprintf_r>
 8009bf4:	9b02      	ldr	r3, [sp, #8]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
 8009bfa:	b01c      	add	sp, #112	; 0x70
 8009bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c00:	b003      	add	sp, #12
 8009c02:	4770      	bx	lr
 8009c04:	20000010 	.word	0x20000010
 8009c08:	ffff0208 	.word	0xffff0208

08009c0c <__malloc_lock>:
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__malloc_lock+0x8>)
 8009c0e:	f7ff beb7 	b.w	8009980 <__retarget_lock_acquire_recursive>
 8009c12:	bf00      	nop
 8009c14:	200025a8 	.word	0x200025a8

08009c18 <__malloc_unlock>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__malloc_unlock+0x8>)
 8009c1a:	f7ff beb2 	b.w	8009982 <__retarget_lock_release_recursive>
 8009c1e:	bf00      	nop
 8009c20:	200025a8 	.word	0x200025a8

08009c24 <_free_r>:
 8009c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d044      	beq.n	8009cb4 <_free_r+0x90>
 8009c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2e:	9001      	str	r0, [sp, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f1a1 0404 	sub.w	r4, r1, #4
 8009c36:	bfb8      	it	lt
 8009c38:	18e4      	addlt	r4, r4, r3
 8009c3a:	f7ff ffe7 	bl	8009c0c <__malloc_lock>
 8009c3e:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <_free_r+0x94>)
 8009c40:	9801      	ldr	r0, [sp, #4]
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	b933      	cbnz	r3, 8009c54 <_free_r+0x30>
 8009c46:	6063      	str	r3, [r4, #4]
 8009c48:	6014      	str	r4, [r2, #0]
 8009c4a:	b003      	add	sp, #12
 8009c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c50:	f7ff bfe2 	b.w	8009c18 <__malloc_unlock>
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	d908      	bls.n	8009c6a <_free_r+0x46>
 8009c58:	6825      	ldr	r5, [r4, #0]
 8009c5a:	1961      	adds	r1, r4, r5
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf01      	itttt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	1949      	addeq	r1, r1, r5
 8009c66:	6021      	streq	r1, [r4, #0]
 8009c68:	e7ed      	b.n	8009c46 <_free_r+0x22>
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	b10b      	cbz	r3, 8009c74 <_free_r+0x50>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d9fa      	bls.n	8009c6a <_free_r+0x46>
 8009c74:	6811      	ldr	r1, [r2, #0]
 8009c76:	1855      	adds	r5, r2, r1
 8009c78:	42a5      	cmp	r5, r4
 8009c7a:	d10b      	bne.n	8009c94 <_free_r+0x70>
 8009c7c:	6824      	ldr	r4, [r4, #0]
 8009c7e:	4421      	add	r1, r4
 8009c80:	1854      	adds	r4, r2, r1
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	6011      	str	r1, [r2, #0]
 8009c86:	d1e0      	bne.n	8009c4a <_free_r+0x26>
 8009c88:	681c      	ldr	r4, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	6053      	str	r3, [r2, #4]
 8009c8e:	4421      	add	r1, r4
 8009c90:	6011      	str	r1, [r2, #0]
 8009c92:	e7da      	b.n	8009c4a <_free_r+0x26>
 8009c94:	d902      	bls.n	8009c9c <_free_r+0x78>
 8009c96:	230c      	movs	r3, #12
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	e7d6      	b.n	8009c4a <_free_r+0x26>
 8009c9c:	6825      	ldr	r5, [r4, #0]
 8009c9e:	1961      	adds	r1, r4, r5
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	bf04      	itt	eq
 8009ca4:	6819      	ldreq	r1, [r3, #0]
 8009ca6:	685b      	ldreq	r3, [r3, #4]
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	bf04      	itt	eq
 8009cac:	1949      	addeq	r1, r1, r5
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	6054      	str	r4, [r2, #4]
 8009cb2:	e7ca      	b.n	8009c4a <_free_r+0x26>
 8009cb4:	b003      	add	sp, #12
 8009cb6:	bd30      	pop	{r4, r5, pc}
 8009cb8:	200025ac 	.word	0x200025ac

08009cbc <__ssputs_r>:
 8009cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc0:	688e      	ldr	r6, [r1, #8]
 8009cc2:	429e      	cmp	r6, r3
 8009cc4:	4682      	mov	sl, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	4690      	mov	r8, r2
 8009cca:	461f      	mov	r7, r3
 8009ccc:	d838      	bhi.n	8009d40 <__ssputs_r+0x84>
 8009cce:	898a      	ldrh	r2, [r1, #12]
 8009cd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cd4:	d032      	beq.n	8009d3c <__ssputs_r+0x80>
 8009cd6:	6825      	ldr	r5, [r4, #0]
 8009cd8:	6909      	ldr	r1, [r1, #16]
 8009cda:	eba5 0901 	sub.w	r9, r5, r1
 8009cde:	6965      	ldr	r5, [r4, #20]
 8009ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ce8:	3301      	adds	r3, #1
 8009cea:	444b      	add	r3, r9
 8009cec:	106d      	asrs	r5, r5, #1
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	bf38      	it	cc
 8009cf2:	461d      	movcc	r5, r3
 8009cf4:	0553      	lsls	r3, r2, #21
 8009cf6:	d531      	bpl.n	8009d5c <__ssputs_r+0xa0>
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	f7ff fe79 	bl	80099f0 <_malloc_r>
 8009cfe:	4606      	mov	r6, r0
 8009d00:	b950      	cbnz	r0, 8009d18 <__ssputs_r+0x5c>
 8009d02:	230c      	movs	r3, #12
 8009d04:	f8ca 3000 	str.w	r3, [sl]
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d0e:	81a3      	strh	r3, [r4, #12]
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295
 8009d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d18:	6921      	ldr	r1, [r4, #16]
 8009d1a:	464a      	mov	r2, r9
 8009d1c:	f7ff fe32 	bl	8009984 <memcpy>
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2a:	81a3      	strh	r3, [r4, #12]
 8009d2c:	6126      	str	r6, [r4, #16]
 8009d2e:	6165      	str	r5, [r4, #20]
 8009d30:	444e      	add	r6, r9
 8009d32:	eba5 0509 	sub.w	r5, r5, r9
 8009d36:	6026      	str	r6, [r4, #0]
 8009d38:	60a5      	str	r5, [r4, #8]
 8009d3a:	463e      	mov	r6, r7
 8009d3c:	42be      	cmp	r6, r7
 8009d3e:	d900      	bls.n	8009d42 <__ssputs_r+0x86>
 8009d40:	463e      	mov	r6, r7
 8009d42:	6820      	ldr	r0, [r4, #0]
 8009d44:	4632      	mov	r2, r6
 8009d46:	4641      	mov	r1, r8
 8009d48:	f000 faa8 	bl	800a29c <memmove>
 8009d4c:	68a3      	ldr	r3, [r4, #8]
 8009d4e:	1b9b      	subs	r3, r3, r6
 8009d50:	60a3      	str	r3, [r4, #8]
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	4433      	add	r3, r6
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	2000      	movs	r0, #0
 8009d5a:	e7db      	b.n	8009d14 <__ssputs_r+0x58>
 8009d5c:	462a      	mov	r2, r5
 8009d5e:	f000 fab7 	bl	800a2d0 <_realloc_r>
 8009d62:	4606      	mov	r6, r0
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1e1      	bne.n	8009d2c <__ssputs_r+0x70>
 8009d68:	6921      	ldr	r1, [r4, #16]
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	f7ff ff5a 	bl	8009c24 <_free_r>
 8009d70:	e7c7      	b.n	8009d02 <__ssputs_r+0x46>
	...

08009d74 <_svfiprintf_r>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	4698      	mov	r8, r3
 8009d7a:	898b      	ldrh	r3, [r1, #12]
 8009d7c:	061b      	lsls	r3, r3, #24
 8009d7e:	b09d      	sub	sp, #116	; 0x74
 8009d80:	4607      	mov	r7, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	4614      	mov	r4, r2
 8009d86:	d50e      	bpl.n	8009da6 <_svfiprintf_r+0x32>
 8009d88:	690b      	ldr	r3, [r1, #16]
 8009d8a:	b963      	cbnz	r3, 8009da6 <_svfiprintf_r+0x32>
 8009d8c:	2140      	movs	r1, #64	; 0x40
 8009d8e:	f7ff fe2f 	bl	80099f0 <_malloc_r>
 8009d92:	6028      	str	r0, [r5, #0]
 8009d94:	6128      	str	r0, [r5, #16]
 8009d96:	b920      	cbnz	r0, 8009da2 <_svfiprintf_r+0x2e>
 8009d98:	230c      	movs	r3, #12
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	e0d1      	b.n	8009f46 <_svfiprintf_r+0x1d2>
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	616b      	str	r3, [r5, #20]
 8009da6:	2300      	movs	r3, #0
 8009da8:	9309      	str	r3, [sp, #36]	; 0x24
 8009daa:	2320      	movs	r3, #32
 8009dac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db4:	2330      	movs	r3, #48	; 0x30
 8009db6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f60 <_svfiprintf_r+0x1ec>
 8009dba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dbe:	f04f 0901 	mov.w	r9, #1
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	469a      	mov	sl, r3
 8009dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dca:	b10a      	cbz	r2, 8009dd0 <_svfiprintf_r+0x5c>
 8009dcc:	2a25      	cmp	r2, #37	; 0x25
 8009dce:	d1f9      	bne.n	8009dc4 <_svfiprintf_r+0x50>
 8009dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd4:	d00b      	beq.n	8009dee <_svfiprintf_r+0x7a>
 8009dd6:	465b      	mov	r3, fp
 8009dd8:	4622      	mov	r2, r4
 8009dda:	4629      	mov	r1, r5
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f7ff ff6d 	bl	8009cbc <__ssputs_r>
 8009de2:	3001      	adds	r0, #1
 8009de4:	f000 80aa 	beq.w	8009f3c <_svfiprintf_r+0x1c8>
 8009de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dea:	445a      	add	r2, fp
 8009dec:	9209      	str	r2, [sp, #36]	; 0x24
 8009dee:	f89a 3000 	ldrb.w	r3, [sl]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 80a2 	beq.w	8009f3c <_svfiprintf_r+0x1c8>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e02:	f10a 0a01 	add.w	sl, sl, #1
 8009e06:	9304      	str	r3, [sp, #16]
 8009e08:	9307      	str	r3, [sp, #28]
 8009e0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e10:	4654      	mov	r4, sl
 8009e12:	2205      	movs	r2, #5
 8009e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e18:	4851      	ldr	r0, [pc, #324]	; (8009f60 <_svfiprintf_r+0x1ec>)
 8009e1a:	f7f6 fa01 	bl	8000220 <memchr>
 8009e1e:	9a04      	ldr	r2, [sp, #16]
 8009e20:	b9d8      	cbnz	r0, 8009e5a <_svfiprintf_r+0xe6>
 8009e22:	06d0      	lsls	r0, r2, #27
 8009e24:	bf44      	itt	mi
 8009e26:	2320      	movmi	r3, #32
 8009e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2c:	0711      	lsls	r1, r2, #28
 8009e2e:	bf44      	itt	mi
 8009e30:	232b      	movmi	r3, #43	; 0x2b
 8009e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e36:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3c:	d015      	beq.n	8009e6a <_svfiprintf_r+0xf6>
 8009e3e:	9a07      	ldr	r2, [sp, #28]
 8009e40:	4654      	mov	r4, sl
 8009e42:	2000      	movs	r0, #0
 8009e44:	f04f 0c0a 	mov.w	ip, #10
 8009e48:	4621      	mov	r1, r4
 8009e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e4e:	3b30      	subs	r3, #48	; 0x30
 8009e50:	2b09      	cmp	r3, #9
 8009e52:	d94e      	bls.n	8009ef2 <_svfiprintf_r+0x17e>
 8009e54:	b1b0      	cbz	r0, 8009e84 <_svfiprintf_r+0x110>
 8009e56:	9207      	str	r2, [sp, #28]
 8009e58:	e014      	b.n	8009e84 <_svfiprintf_r+0x110>
 8009e5a:	eba0 0308 	sub.w	r3, r0, r8
 8009e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e62:	4313      	orrs	r3, r2
 8009e64:	9304      	str	r3, [sp, #16]
 8009e66:	46a2      	mov	sl, r4
 8009e68:	e7d2      	b.n	8009e10 <_svfiprintf_r+0x9c>
 8009e6a:	9b03      	ldr	r3, [sp, #12]
 8009e6c:	1d19      	adds	r1, r3, #4
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	9103      	str	r1, [sp, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	bfbb      	ittet	lt
 8009e76:	425b      	neglt	r3, r3
 8009e78:	f042 0202 	orrlt.w	r2, r2, #2
 8009e7c:	9307      	strge	r3, [sp, #28]
 8009e7e:	9307      	strlt	r3, [sp, #28]
 8009e80:	bfb8      	it	lt
 8009e82:	9204      	strlt	r2, [sp, #16]
 8009e84:	7823      	ldrb	r3, [r4, #0]
 8009e86:	2b2e      	cmp	r3, #46	; 0x2e
 8009e88:	d10c      	bne.n	8009ea4 <_svfiprintf_r+0x130>
 8009e8a:	7863      	ldrb	r3, [r4, #1]
 8009e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e8e:	d135      	bne.n	8009efc <_svfiprintf_r+0x188>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	1d1a      	adds	r2, r3, #4
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	9203      	str	r2, [sp, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bfb8      	it	lt
 8009e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea0:	3402      	adds	r4, #2
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f70 <_svfiprintf_r+0x1fc>
 8009ea8:	7821      	ldrb	r1, [r4, #0]
 8009eaa:	2203      	movs	r2, #3
 8009eac:	4650      	mov	r0, sl
 8009eae:	f7f6 f9b7 	bl	8000220 <memchr>
 8009eb2:	b140      	cbz	r0, 8009ec6 <_svfiprintf_r+0x152>
 8009eb4:	2340      	movs	r3, #64	; 0x40
 8009eb6:	eba0 000a 	sub.w	r0, r0, sl
 8009eba:	fa03 f000 	lsl.w	r0, r3, r0
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	4303      	orrs	r3, r0
 8009ec2:	3401      	adds	r4, #1
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eca:	4826      	ldr	r0, [pc, #152]	; (8009f64 <_svfiprintf_r+0x1f0>)
 8009ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed0:	2206      	movs	r2, #6
 8009ed2:	f7f6 f9a5 	bl	8000220 <memchr>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d038      	beq.n	8009f4c <_svfiprintf_r+0x1d8>
 8009eda:	4b23      	ldr	r3, [pc, #140]	; (8009f68 <_svfiprintf_r+0x1f4>)
 8009edc:	bb1b      	cbnz	r3, 8009f26 <_svfiprintf_r+0x1b2>
 8009ede:	9b03      	ldr	r3, [sp, #12]
 8009ee0:	3307      	adds	r3, #7
 8009ee2:	f023 0307 	bic.w	r3, r3, #7
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	9303      	str	r3, [sp, #12]
 8009eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eec:	4433      	add	r3, r6
 8009eee:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef0:	e767      	b.n	8009dc2 <_svfiprintf_r+0x4e>
 8009ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	2001      	movs	r0, #1
 8009efa:	e7a5      	b.n	8009e48 <_svfiprintf_r+0xd4>
 8009efc:	2300      	movs	r3, #0
 8009efe:	3401      	adds	r4, #1
 8009f00:	9305      	str	r3, [sp, #20]
 8009f02:	4619      	mov	r1, r3
 8009f04:	f04f 0c0a 	mov.w	ip, #10
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f0e:	3a30      	subs	r2, #48	; 0x30
 8009f10:	2a09      	cmp	r2, #9
 8009f12:	d903      	bls.n	8009f1c <_svfiprintf_r+0x1a8>
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d0c5      	beq.n	8009ea4 <_svfiprintf_r+0x130>
 8009f18:	9105      	str	r1, [sp, #20]
 8009f1a:	e7c3      	b.n	8009ea4 <_svfiprintf_r+0x130>
 8009f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f20:	4604      	mov	r4, r0
 8009f22:	2301      	movs	r3, #1
 8009f24:	e7f0      	b.n	8009f08 <_svfiprintf_r+0x194>
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	462a      	mov	r2, r5
 8009f2c:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <_svfiprintf_r+0x1f8>)
 8009f2e:	a904      	add	r1, sp, #16
 8009f30:	4638      	mov	r0, r7
 8009f32:	f3af 8000 	nop.w
 8009f36:	1c42      	adds	r2, r0, #1
 8009f38:	4606      	mov	r6, r0
 8009f3a:	d1d6      	bne.n	8009eea <_svfiprintf_r+0x176>
 8009f3c:	89ab      	ldrh	r3, [r5, #12]
 8009f3e:	065b      	lsls	r3, r3, #25
 8009f40:	f53f af2c 	bmi.w	8009d9c <_svfiprintf_r+0x28>
 8009f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f46:	b01d      	add	sp, #116	; 0x74
 8009f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4c:	ab03      	add	r3, sp, #12
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	462a      	mov	r2, r5
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <_svfiprintf_r+0x1f8>)
 8009f54:	a904      	add	r1, sp, #16
 8009f56:	4638      	mov	r0, r7
 8009f58:	f000 f87a 	bl	800a050 <_printf_i>
 8009f5c:	e7eb      	b.n	8009f36 <_svfiprintf_r+0x1c2>
 8009f5e:	bf00      	nop
 8009f60:	0800a568 	.word	0x0800a568
 8009f64:	0800a572 	.word	0x0800a572
 8009f68:	00000000 	.word	0x00000000
 8009f6c:	08009cbd 	.word	0x08009cbd
 8009f70:	0800a56e 	.word	0x0800a56e

08009f74 <_printf_common>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	4616      	mov	r6, r2
 8009f7a:	4699      	mov	r9, r3
 8009f7c:	688a      	ldr	r2, [r1, #8]
 8009f7e:	690b      	ldr	r3, [r1, #16]
 8009f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	bfb8      	it	lt
 8009f88:	4613      	movlt	r3, r2
 8009f8a:	6033      	str	r3, [r6, #0]
 8009f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f90:	4607      	mov	r7, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	b10a      	cbz	r2, 8009f9a <_printf_common+0x26>
 8009f96:	3301      	adds	r3, #1
 8009f98:	6033      	str	r3, [r6, #0]
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	0699      	lsls	r1, r3, #26
 8009f9e:	bf42      	ittt	mi
 8009fa0:	6833      	ldrmi	r3, [r6, #0]
 8009fa2:	3302      	addmi	r3, #2
 8009fa4:	6033      	strmi	r3, [r6, #0]
 8009fa6:	6825      	ldr	r5, [r4, #0]
 8009fa8:	f015 0506 	ands.w	r5, r5, #6
 8009fac:	d106      	bne.n	8009fbc <_printf_common+0x48>
 8009fae:	f104 0a19 	add.w	sl, r4, #25
 8009fb2:	68e3      	ldr	r3, [r4, #12]
 8009fb4:	6832      	ldr	r2, [r6, #0]
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	42ab      	cmp	r3, r5
 8009fba:	dc26      	bgt.n	800a00a <_printf_common+0x96>
 8009fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fc0:	1e13      	subs	r3, r2, #0
 8009fc2:	6822      	ldr	r2, [r4, #0]
 8009fc4:	bf18      	it	ne
 8009fc6:	2301      	movne	r3, #1
 8009fc8:	0692      	lsls	r2, r2, #26
 8009fca:	d42b      	bmi.n	800a024 <_printf_common+0xb0>
 8009fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	47c0      	blx	r8
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d01e      	beq.n	800a018 <_printf_common+0xa4>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	68e5      	ldr	r5, [r4, #12]
 8009fde:	6832      	ldr	r2, [r6, #0]
 8009fe0:	f003 0306 	and.w	r3, r3, #6
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	bf08      	it	eq
 8009fe8:	1aad      	subeq	r5, r5, r2
 8009fea:	68a3      	ldr	r3, [r4, #8]
 8009fec:	6922      	ldr	r2, [r4, #16]
 8009fee:	bf0c      	ite	eq
 8009ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ff4:	2500      	movne	r5, #0
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	bfc4      	itt	gt
 8009ffa:	1a9b      	subgt	r3, r3, r2
 8009ffc:	18ed      	addgt	r5, r5, r3
 8009ffe:	2600      	movs	r6, #0
 800a000:	341a      	adds	r4, #26
 800a002:	42b5      	cmp	r5, r6
 800a004:	d11a      	bne.n	800a03c <_printf_common+0xc8>
 800a006:	2000      	movs	r0, #0
 800a008:	e008      	b.n	800a01c <_printf_common+0xa8>
 800a00a:	2301      	movs	r3, #1
 800a00c:	4652      	mov	r2, sl
 800a00e:	4649      	mov	r1, r9
 800a010:	4638      	mov	r0, r7
 800a012:	47c0      	blx	r8
 800a014:	3001      	adds	r0, #1
 800a016:	d103      	bne.n	800a020 <_printf_common+0xac>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a020:	3501      	adds	r5, #1
 800a022:	e7c6      	b.n	8009fb2 <_printf_common+0x3e>
 800a024:	18e1      	adds	r1, r4, r3
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	2030      	movs	r0, #48	; 0x30
 800a02a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a02e:	4422      	add	r2, r4
 800a030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a038:	3302      	adds	r3, #2
 800a03a:	e7c7      	b.n	8009fcc <_printf_common+0x58>
 800a03c:	2301      	movs	r3, #1
 800a03e:	4622      	mov	r2, r4
 800a040:	4649      	mov	r1, r9
 800a042:	4638      	mov	r0, r7
 800a044:	47c0      	blx	r8
 800a046:	3001      	adds	r0, #1
 800a048:	d0e6      	beq.n	800a018 <_printf_common+0xa4>
 800a04a:	3601      	adds	r6, #1
 800a04c:	e7d9      	b.n	800a002 <_printf_common+0x8e>
	...

0800a050 <_printf_i>:
 800a050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a054:	7e0f      	ldrb	r7, [r1, #24]
 800a056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a058:	2f78      	cmp	r7, #120	; 0x78
 800a05a:	4691      	mov	r9, r2
 800a05c:	4680      	mov	r8, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	469a      	mov	sl, r3
 800a062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a066:	d807      	bhi.n	800a078 <_printf_i+0x28>
 800a068:	2f62      	cmp	r7, #98	; 0x62
 800a06a:	d80a      	bhi.n	800a082 <_printf_i+0x32>
 800a06c:	2f00      	cmp	r7, #0
 800a06e:	f000 80d8 	beq.w	800a222 <_printf_i+0x1d2>
 800a072:	2f58      	cmp	r7, #88	; 0x58
 800a074:	f000 80a3 	beq.w	800a1be <_printf_i+0x16e>
 800a078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a07c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a080:	e03a      	b.n	800a0f8 <_printf_i+0xa8>
 800a082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a086:	2b15      	cmp	r3, #21
 800a088:	d8f6      	bhi.n	800a078 <_printf_i+0x28>
 800a08a:	a101      	add	r1, pc, #4	; (adr r1, 800a090 <_printf_i+0x40>)
 800a08c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a090:	0800a0e9 	.word	0x0800a0e9
 800a094:	0800a0fd 	.word	0x0800a0fd
 800a098:	0800a079 	.word	0x0800a079
 800a09c:	0800a079 	.word	0x0800a079
 800a0a0:	0800a079 	.word	0x0800a079
 800a0a4:	0800a079 	.word	0x0800a079
 800a0a8:	0800a0fd 	.word	0x0800a0fd
 800a0ac:	0800a079 	.word	0x0800a079
 800a0b0:	0800a079 	.word	0x0800a079
 800a0b4:	0800a079 	.word	0x0800a079
 800a0b8:	0800a079 	.word	0x0800a079
 800a0bc:	0800a209 	.word	0x0800a209
 800a0c0:	0800a12d 	.word	0x0800a12d
 800a0c4:	0800a1eb 	.word	0x0800a1eb
 800a0c8:	0800a079 	.word	0x0800a079
 800a0cc:	0800a079 	.word	0x0800a079
 800a0d0:	0800a22b 	.word	0x0800a22b
 800a0d4:	0800a079 	.word	0x0800a079
 800a0d8:	0800a12d 	.word	0x0800a12d
 800a0dc:	0800a079 	.word	0x0800a079
 800a0e0:	0800a079 	.word	0x0800a079
 800a0e4:	0800a1f3 	.word	0x0800a1f3
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	1d1a      	adds	r2, r3, #4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	602a      	str	r2, [r5, #0]
 800a0f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0a3      	b.n	800a244 <_printf_i+0x1f4>
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	6829      	ldr	r1, [r5, #0]
 800a100:	0606      	lsls	r6, r0, #24
 800a102:	f101 0304 	add.w	r3, r1, #4
 800a106:	d50a      	bpl.n	800a11e <_printf_i+0xce>
 800a108:	680e      	ldr	r6, [r1, #0]
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	2e00      	cmp	r6, #0
 800a10e:	da03      	bge.n	800a118 <_printf_i+0xc8>
 800a110:	232d      	movs	r3, #45	; 0x2d
 800a112:	4276      	negs	r6, r6
 800a114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a118:	485e      	ldr	r0, [pc, #376]	; (800a294 <_printf_i+0x244>)
 800a11a:	230a      	movs	r3, #10
 800a11c:	e019      	b.n	800a152 <_printf_i+0x102>
 800a11e:	680e      	ldr	r6, [r1, #0]
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a126:	bf18      	it	ne
 800a128:	b236      	sxthne	r6, r6
 800a12a:	e7ef      	b.n	800a10c <_printf_i+0xbc>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	6820      	ldr	r0, [r4, #0]
 800a130:	1d19      	adds	r1, r3, #4
 800a132:	6029      	str	r1, [r5, #0]
 800a134:	0601      	lsls	r1, r0, #24
 800a136:	d501      	bpl.n	800a13c <_printf_i+0xec>
 800a138:	681e      	ldr	r6, [r3, #0]
 800a13a:	e002      	b.n	800a142 <_printf_i+0xf2>
 800a13c:	0646      	lsls	r6, r0, #25
 800a13e:	d5fb      	bpl.n	800a138 <_printf_i+0xe8>
 800a140:	881e      	ldrh	r6, [r3, #0]
 800a142:	4854      	ldr	r0, [pc, #336]	; (800a294 <_printf_i+0x244>)
 800a144:	2f6f      	cmp	r7, #111	; 0x6f
 800a146:	bf0c      	ite	eq
 800a148:	2308      	moveq	r3, #8
 800a14a:	230a      	movne	r3, #10
 800a14c:	2100      	movs	r1, #0
 800a14e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a152:	6865      	ldr	r5, [r4, #4]
 800a154:	60a5      	str	r5, [r4, #8]
 800a156:	2d00      	cmp	r5, #0
 800a158:	bfa2      	ittt	ge
 800a15a:	6821      	ldrge	r1, [r4, #0]
 800a15c:	f021 0104 	bicge.w	r1, r1, #4
 800a160:	6021      	strge	r1, [r4, #0]
 800a162:	b90e      	cbnz	r6, 800a168 <_printf_i+0x118>
 800a164:	2d00      	cmp	r5, #0
 800a166:	d04d      	beq.n	800a204 <_printf_i+0x1b4>
 800a168:	4615      	mov	r5, r2
 800a16a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a16e:	fb03 6711 	mls	r7, r3, r1, r6
 800a172:	5dc7      	ldrb	r7, [r0, r7]
 800a174:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a178:	4637      	mov	r7, r6
 800a17a:	42bb      	cmp	r3, r7
 800a17c:	460e      	mov	r6, r1
 800a17e:	d9f4      	bls.n	800a16a <_printf_i+0x11a>
 800a180:	2b08      	cmp	r3, #8
 800a182:	d10b      	bne.n	800a19c <_printf_i+0x14c>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	07de      	lsls	r6, r3, #31
 800a188:	d508      	bpl.n	800a19c <_printf_i+0x14c>
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	6861      	ldr	r1, [r4, #4]
 800a18e:	4299      	cmp	r1, r3
 800a190:	bfde      	ittt	le
 800a192:	2330      	movle	r3, #48	; 0x30
 800a194:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a198:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a19c:	1b52      	subs	r2, r2, r5
 800a19e:	6122      	str	r2, [r4, #16]
 800a1a0:	f8cd a000 	str.w	sl, [sp]
 800a1a4:	464b      	mov	r3, r9
 800a1a6:	aa03      	add	r2, sp, #12
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	f7ff fee2 	bl	8009f74 <_printf_common>
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d14c      	bne.n	800a24e <_printf_i+0x1fe>
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b8:	b004      	add	sp, #16
 800a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1be:	4835      	ldr	r0, [pc, #212]	; (800a294 <_printf_i+0x244>)
 800a1c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1c4:	6829      	ldr	r1, [r5, #0]
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1cc:	6029      	str	r1, [r5, #0]
 800a1ce:	061d      	lsls	r5, r3, #24
 800a1d0:	d514      	bpl.n	800a1fc <_printf_i+0x1ac>
 800a1d2:	07df      	lsls	r7, r3, #31
 800a1d4:	bf44      	itt	mi
 800a1d6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1da:	6023      	strmi	r3, [r4, #0]
 800a1dc:	b91e      	cbnz	r6, 800a1e6 <_printf_i+0x196>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	f023 0320 	bic.w	r3, r3, #32
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	2310      	movs	r3, #16
 800a1e8:	e7b0      	b.n	800a14c <_printf_i+0xfc>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	f043 0320 	orr.w	r3, r3, #32
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	2378      	movs	r3, #120	; 0x78
 800a1f4:	4828      	ldr	r0, [pc, #160]	; (800a298 <_printf_i+0x248>)
 800a1f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1fa:	e7e3      	b.n	800a1c4 <_printf_i+0x174>
 800a1fc:	0659      	lsls	r1, r3, #25
 800a1fe:	bf48      	it	mi
 800a200:	b2b6      	uxthmi	r6, r6
 800a202:	e7e6      	b.n	800a1d2 <_printf_i+0x182>
 800a204:	4615      	mov	r5, r2
 800a206:	e7bb      	b.n	800a180 <_printf_i+0x130>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	6826      	ldr	r6, [r4, #0]
 800a20c:	6961      	ldr	r1, [r4, #20]
 800a20e:	1d18      	adds	r0, r3, #4
 800a210:	6028      	str	r0, [r5, #0]
 800a212:	0635      	lsls	r5, r6, #24
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	d501      	bpl.n	800a21c <_printf_i+0x1cc>
 800a218:	6019      	str	r1, [r3, #0]
 800a21a:	e002      	b.n	800a222 <_printf_i+0x1d2>
 800a21c:	0670      	lsls	r0, r6, #25
 800a21e:	d5fb      	bpl.n	800a218 <_printf_i+0x1c8>
 800a220:	8019      	strh	r1, [r3, #0]
 800a222:	2300      	movs	r3, #0
 800a224:	6123      	str	r3, [r4, #16]
 800a226:	4615      	mov	r5, r2
 800a228:	e7ba      	b.n	800a1a0 <_printf_i+0x150>
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	1d1a      	adds	r2, r3, #4
 800a22e:	602a      	str	r2, [r5, #0]
 800a230:	681d      	ldr	r5, [r3, #0]
 800a232:	6862      	ldr	r2, [r4, #4]
 800a234:	2100      	movs	r1, #0
 800a236:	4628      	mov	r0, r5
 800a238:	f7f5 fff2 	bl	8000220 <memchr>
 800a23c:	b108      	cbz	r0, 800a242 <_printf_i+0x1f2>
 800a23e:	1b40      	subs	r0, r0, r5
 800a240:	6060      	str	r0, [r4, #4]
 800a242:	6863      	ldr	r3, [r4, #4]
 800a244:	6123      	str	r3, [r4, #16]
 800a246:	2300      	movs	r3, #0
 800a248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a24c:	e7a8      	b.n	800a1a0 <_printf_i+0x150>
 800a24e:	6923      	ldr	r3, [r4, #16]
 800a250:	462a      	mov	r2, r5
 800a252:	4649      	mov	r1, r9
 800a254:	4640      	mov	r0, r8
 800a256:	47d0      	blx	sl
 800a258:	3001      	adds	r0, #1
 800a25a:	d0ab      	beq.n	800a1b4 <_printf_i+0x164>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	079b      	lsls	r3, r3, #30
 800a260:	d413      	bmi.n	800a28a <_printf_i+0x23a>
 800a262:	68e0      	ldr	r0, [r4, #12]
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	4298      	cmp	r0, r3
 800a268:	bfb8      	it	lt
 800a26a:	4618      	movlt	r0, r3
 800a26c:	e7a4      	b.n	800a1b8 <_printf_i+0x168>
 800a26e:	2301      	movs	r3, #1
 800a270:	4632      	mov	r2, r6
 800a272:	4649      	mov	r1, r9
 800a274:	4640      	mov	r0, r8
 800a276:	47d0      	blx	sl
 800a278:	3001      	adds	r0, #1
 800a27a:	d09b      	beq.n	800a1b4 <_printf_i+0x164>
 800a27c:	3501      	adds	r5, #1
 800a27e:	68e3      	ldr	r3, [r4, #12]
 800a280:	9903      	ldr	r1, [sp, #12]
 800a282:	1a5b      	subs	r3, r3, r1
 800a284:	42ab      	cmp	r3, r5
 800a286:	dcf2      	bgt.n	800a26e <_printf_i+0x21e>
 800a288:	e7eb      	b.n	800a262 <_printf_i+0x212>
 800a28a:	2500      	movs	r5, #0
 800a28c:	f104 0619 	add.w	r6, r4, #25
 800a290:	e7f5      	b.n	800a27e <_printf_i+0x22e>
 800a292:	bf00      	nop
 800a294:	0800a579 	.word	0x0800a579
 800a298:	0800a58a 	.word	0x0800a58a

0800a29c <memmove>:
 800a29c:	4288      	cmp	r0, r1
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	eb01 0402 	add.w	r4, r1, r2
 800a2a4:	d902      	bls.n	800a2ac <memmove+0x10>
 800a2a6:	4284      	cmp	r4, r0
 800a2a8:	4623      	mov	r3, r4
 800a2aa:	d807      	bhi.n	800a2bc <memmove+0x20>
 800a2ac:	1e43      	subs	r3, r0, #1
 800a2ae:	42a1      	cmp	r1, r4
 800a2b0:	d008      	beq.n	800a2c4 <memmove+0x28>
 800a2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ba:	e7f8      	b.n	800a2ae <memmove+0x12>
 800a2bc:	4402      	add	r2, r0
 800a2be:	4601      	mov	r1, r0
 800a2c0:	428a      	cmp	r2, r1
 800a2c2:	d100      	bne.n	800a2c6 <memmove+0x2a>
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ce:	e7f7      	b.n	800a2c0 <memmove+0x24>

0800a2d0 <_realloc_r>:
 800a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	4614      	mov	r4, r2
 800a2d8:	460e      	mov	r6, r1
 800a2da:	b921      	cbnz	r1, 800a2e6 <_realloc_r+0x16>
 800a2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	f7ff bb85 	b.w	80099f0 <_malloc_r>
 800a2e6:	b92a      	cbnz	r2, 800a2f4 <_realloc_r+0x24>
 800a2e8:	f7ff fc9c 	bl	8009c24 <_free_r>
 800a2ec:	4625      	mov	r5, r4
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f4:	f000 f81b 	bl	800a32e <_malloc_usable_size_r>
 800a2f8:	4284      	cmp	r4, r0
 800a2fa:	4607      	mov	r7, r0
 800a2fc:	d802      	bhi.n	800a304 <_realloc_r+0x34>
 800a2fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a302:	d812      	bhi.n	800a32a <_realloc_r+0x5a>
 800a304:	4621      	mov	r1, r4
 800a306:	4640      	mov	r0, r8
 800a308:	f7ff fb72 	bl	80099f0 <_malloc_r>
 800a30c:	4605      	mov	r5, r0
 800a30e:	2800      	cmp	r0, #0
 800a310:	d0ed      	beq.n	800a2ee <_realloc_r+0x1e>
 800a312:	42bc      	cmp	r4, r7
 800a314:	4622      	mov	r2, r4
 800a316:	4631      	mov	r1, r6
 800a318:	bf28      	it	cs
 800a31a:	463a      	movcs	r2, r7
 800a31c:	f7ff fb32 	bl	8009984 <memcpy>
 800a320:	4631      	mov	r1, r6
 800a322:	4640      	mov	r0, r8
 800a324:	f7ff fc7e 	bl	8009c24 <_free_r>
 800a328:	e7e1      	b.n	800a2ee <_realloc_r+0x1e>
 800a32a:	4635      	mov	r5, r6
 800a32c:	e7df      	b.n	800a2ee <_realloc_r+0x1e>

0800a32e <_malloc_usable_size_r>:
 800a32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a332:	1f18      	subs	r0, r3, #4
 800a334:	2b00      	cmp	r3, #0
 800a336:	bfbc      	itt	lt
 800a338:	580b      	ldrlt	r3, [r1, r0]
 800a33a:	18c0      	addlt	r0, r0, r3
 800a33c:	4770      	bx	lr
	...

0800a340 <_init>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr

0800a34c <_fini>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	bf00      	nop
 800a350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a352:	bc08      	pop	{r3}
 800a354:	469e      	mov	lr, r3
 800a356:	4770      	bx	lr
