
Seguidor_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a548  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a904  0800a904  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a90c  0800a90c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a90c  0800a90c  0001a90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a910  0800a910  0001a910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  20000078  0800a98c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cd4  0800a98c  00021cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cc5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f84  00000000  00000000  00040d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00044cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  000465f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029695  00000000  00000000  00047d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d18e  00000000  00000000  000713f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106e76  00000000  00000000  0008e583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001953f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f1c  00000000  00000000  0019544c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a710 	.word	0x0800a710

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	0800a710 	.word	0x0800a710

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore */
  SemaphoreHandle = osSemaphoreNew(1, 1, &Semaphore_attributes);
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <MX_FREERTOS_Init+0x58>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	2001      	movs	r0, #1
 8000daa:	f005 fde8 	bl	800697e <osSemaphoreNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_FREERTOS_Init+0x5c>)
 8000db2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of triger */
  trigerHandle = osThreadNew(StartTriger, NULL, &triger_attributes);
 8000db4:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <MX_FREERTOS_Init+0x60>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4812      	ldr	r0, [pc, #72]	; (8000e04 <MX_FREERTOS_Init+0x64>)
 8000dba:	f005 fd33 	bl	8006824 <osThreadNew>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <MX_FREERTOS_Init+0x68>)
 8000dc2:	6013      	str	r3, [r2, #0]

  /* creation of comunicacao */
  comunicacaoHandle = osThreadNew(StartComunicacao, NULL, &comunicacao_attributes);
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <MX_FREERTOS_Init+0x6c>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4811      	ldr	r0, [pc, #68]	; (8000e10 <MX_FREERTOS_Init+0x70>)
 8000dca:	f005 fd2b 	bl	8006824 <osThreadNew>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <MX_FREERTOS_Init+0x74>)
 8000dd2:	6013      	str	r3, [r2, #0]

  /* creation of seguidor */
  seguidorHandle = osThreadNew(StartSeguidor, NULL, &seguidor_attributes);
 8000dd4:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <MX_FREERTOS_Init+0x78>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <MX_FREERTOS_Init+0x7c>)
 8000dda:	f005 fd23 	bl	8006824 <osThreadNew>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <MX_FREERTOS_Init+0x80>)
 8000de2:	6013      	str	r3, [r2, #0]

  /* creation of motores */
  motoresHandle = osThreadNew(StartMotores, NULL, &motores_attributes);
 8000de4:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <MX_FREERTOS_Init+0x84>)
 8000de6:	2100      	movs	r1, #0
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <MX_FREERTOS_Init+0x88>)
 8000dea:	f005 fd1b 	bl	8006824 <osThreadNew>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <MX_FREERTOS_Init+0x8c>)
 8000df2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	0800a820 	.word	0x0800a820
 8000dfc:	20000134 	.word	0x20000134
 8000e00:	0800a790 	.word	0x0800a790
 8000e04:	08000e31 	.word	0x08000e31
 8000e08:	20000124 	.word	0x20000124
 8000e0c:	0800a7b4 	.word	0x0800a7b4
 8000e10:	08000e71 	.word	0x08000e71
 8000e14:	20000128 	.word	0x20000128
 8000e18:	0800a7d8 	.word	0x0800a7d8
 8000e1c:	08000ec1 	.word	0x08000ec1
 8000e20:	2000012c 	.word	0x2000012c
 8000e24:	0800a7fc 	.word	0x0800a7fc
 8000e28:	080010a9 	.word	0x080010a9
 8000e2c:	20000130 	.word	0x20000130

08000e30 <StartTriger>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTriger */
void StartTriger(void *argument)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTriger */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <StartTriger+0x38>)
 8000e3c:	f002 fd40 	bl	80038c0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e40:	2100      	movs	r1, #0
 8000e42:	480a      	ldr	r0, [pc, #40]	; (8000e6c <StartTriger+0x3c>)
 8000e44:	f002 fbd2 	bl	80035ec <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <StartTriger+0x38>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <StartTriger+0x38>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0202 	orr.w	r2, r2, #2
 8000e56:	60da      	str	r2, [r3, #12]
	  htim2.Instance->CCR1 = 5;
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <StartTriger+0x3c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
	  osDelay(10);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f005 fd71 	bl	8006948 <osDelay>
	  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e66:	e7ef      	b.n	8000e48 <StartTriger+0x18>
 8000e68:	2000013c 	.word	0x2000013c
 8000e6c:	20000188 	.word	0x20000188

08000e70 <StartComunicacao>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComunicacao */
void StartComunicacao(void *argument)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartComunicacao */
  /* Infinite loop */
  for(;;)
  {
	  //sprintf(mostrar,"D: %d, V1: %d, V2: %d, DIF: %d \r \n ",(int)distancia,(int)valor1,(int)valor2,(int)diferenca);
	  sprintf(mostrar,"S2: %d, S3: %d, S4: %d \r \n ",(int)S2,(int)S3,(int)S4);
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <StartComunicacao+0x38>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <StartComunicacao+0x3c>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <StartComunicacao+0x40>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4909      	ldr	r1, [pc, #36]	; (8000eb4 <StartComunicacao+0x44>)
 8000e8e:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <StartComunicacao+0x48>)
 8000e90:	f009 f884 	bl	8009f9c <siprintf>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)mostrar, sizeof(mostrar), 100);
 8000e94:	2364      	movs	r3, #100	; 0x64
 8000e96:	2264      	movs	r2, #100	; 0x64
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <StartComunicacao+0x48>)
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <StartComunicacao+0x4c>)
 8000e9c:	f004 f9fc 	bl	8005298 <HAL_UART_Transmit>
	  osDelay(100);
 8000ea0:	2064      	movs	r0, #100	; 0x64
 8000ea2:	f005 fd51 	bl	8006948 <osDelay>
	  sprintf(mostrar,"S2: %d, S3: %d, S4: %d \r \n ",(int)S2,(int)S3,(int)S4);
 8000ea6:	e7e7      	b.n	8000e78 <StartComunicacao+0x8>
 8000ea8:	20000094 	.word	0x20000094
 8000eac:	20000095 	.word	0x20000095
 8000eb0:	20000096 	.word	0x20000096
 8000eb4:	0800a75c 	.word	0x0800a75c
 8000eb8:	200000c0 	.word	0x200000c0
 8000ebc:	20000220 	.word	0x20000220

08000ec0 <StartSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSeguidor */
void StartSeguidor(void *argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSeguidor */
  /* Infinite loop */
  for(;;)
  {
    S2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8000ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f001 fa7e 	bl	80023d0 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b66      	ldr	r3, [pc, #408]	; (8001074 <StartSeguidor+0x1b4>)
 8000eda:	701a      	strb	r2, [r3, #0]
    S3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8000edc:	2120      	movs	r1, #32
 8000ede:	4866      	ldr	r0, [pc, #408]	; (8001078 <StartSeguidor+0x1b8>)
 8000ee0:	f001 fa76 	bl	80023d0 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b64      	ldr	r3, [pc, #400]	; (800107c <StartSeguidor+0x1bc>)
 8000eea:	701a      	strb	r2, [r3, #0]
    S4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	4862      	ldr	r0, [pc, #392]	; (8001078 <StartSeguidor+0x1b8>)
 8000ef0:	f001 fa6e 	bl	80023d0 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b61      	ldr	r3, [pc, #388]	; (8001080 <StartSeguidor+0x1c0>)
 8000efa:	701a      	strb	r2, [r3, #0]
    NEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
 8000efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f00:	485d      	ldr	r0, [pc, #372]	; (8001078 <StartSeguidor+0x1b8>)
 8000f02:	f001 fa65 	bl	80023d0 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <StartSeguidor+0x1c4>)
 8000f0c:	701a      	strb	r2, [r3, #0]
    CLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
 8000f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f12:	4859      	ldr	r0, [pc, #356]	; (8001078 <StartSeguidor+0x1b8>)
 8000f14:	f001 fa5c 	bl	80023d0 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b5a      	ldr	r3, [pc, #360]	; (8001088 <StartSeguidor+0x1c8>)
 8000f1e:	701a      	strb	r2, [r3, #0]

    osSemaphoreAcquire(SemaphoreHandle, 200);
 8000f20:	4b5a      	ldr	r3, [pc, #360]	; (800108c <StartSeguidor+0x1cc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	21c8      	movs	r1, #200	; 0xc8
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 fdb2 	bl	8006a90 <osSemaphoreAcquire>


    if(!CLP){
 8000f2c:	4b56      	ldr	r3, [pc, #344]	; (8001088 <StartSeguidor+0x1c8>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10c      	bne.n	8000f4e <StartSeguidor+0x8e>
    	IN1 = 0;
 8000f34:	4b56      	ldr	r3, [pc, #344]	; (8001090 <StartSeguidor+0x1d0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
		IN2 = 0;
 8000f3a:	4b56      	ldr	r3, [pc, #344]	; (8001094 <StartSeguidor+0x1d4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]

		IN3 = 0;
 8000f40:	4b55      	ldr	r3, [pc, #340]	; (8001098 <StartSeguidor+0x1d8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
		IN4 = 0;
 8000f46:	4b55      	ldr	r3, [pc, #340]	; (800109c <StartSeguidor+0x1dc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e086      	b.n	800105c <StartSeguidor+0x19c>
    }else if(S2 && !S3 && S4){
 8000f4e:	4b49      	ldr	r3, [pc, #292]	; (8001074 <StartSeguidor+0x1b4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d014      	beq.n	8000f80 <StartSeguidor+0xc0>
 8000f56:	4b49      	ldr	r3, [pc, #292]	; (800107c <StartSeguidor+0x1bc>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d110      	bne.n	8000f80 <StartSeguidor+0xc0>
 8000f5e:	4b48      	ldr	r3, [pc, #288]	; (8001080 <StartSeguidor+0x1c0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00c      	beq.n	8000f80 <StartSeguidor+0xc0>
    	IN1 = 1;
 8000f66:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <StartSeguidor+0x1d0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
    	IN2 = 0;
 8000f6c:	4b49      	ldr	r3, [pc, #292]	; (8001094 <StartSeguidor+0x1d4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]

    	IN3 = 0;
 8000f72:	4b49      	ldr	r3, [pc, #292]	; (8001098 <StartSeguidor+0x1d8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
    	IN4 = 1;
 8000f78:	4b48      	ldr	r3, [pc, #288]	; (800109c <StartSeguidor+0x1dc>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e06d      	b.n	800105c <StartSeguidor+0x19c>
    }else if(S2 && S3 && !S4){
 8000f80:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <StartSeguidor+0x1b4>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d014      	beq.n	8000fb2 <StartSeguidor+0xf2>
 8000f88:	4b3c      	ldr	r3, [pc, #240]	; (800107c <StartSeguidor+0x1bc>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d010      	beq.n	8000fb2 <StartSeguidor+0xf2>
 8000f90:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <StartSeguidor+0x1c0>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10c      	bne.n	8000fb2 <StartSeguidor+0xf2>
    	IN1 = 1;
 8000f98:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <StartSeguidor+0x1d0>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
		IN2 = 0;
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <StartSeguidor+0x1d4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]

		IN3 = 0;
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <StartSeguidor+0x1d8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
		IN4 = 0;
 8000faa:	4b3c      	ldr	r3, [pc, #240]	; (800109c <StartSeguidor+0x1dc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e054      	b.n	800105c <StartSeguidor+0x19c>
    }else if(!S2 && S3 && S4){
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <StartSeguidor+0x1b4>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d114      	bne.n	8000fe4 <StartSeguidor+0x124>
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <StartSeguidor+0x1bc>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d010      	beq.n	8000fe4 <StartSeguidor+0x124>
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <StartSeguidor+0x1c0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00c      	beq.n	8000fe4 <StartSeguidor+0x124>
    	IN1 = 0;
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <StartSeguidor+0x1d0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
		IN2 = 0;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	; (8001094 <StartSeguidor+0x1d4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]

		IN3 = 0;
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <StartSeguidor+0x1d8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
		IN4 = 1;
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <StartSeguidor+0x1dc>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e03b      	b.n	800105c <StartSeguidor+0x19c>
    }else if(!S2 && !S3 && !S4){
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <StartSeguidor+0x1b4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d137      	bne.n	800105c <StartSeguidor+0x19c>
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <StartSeguidor+0x1bc>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d133      	bne.n	800105c <StartSeguidor+0x19c>
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <StartSeguidor+0x1c0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d12f      	bne.n	800105c <StartSeguidor+0x19c>
    	IN1 = 0;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <StartSeguidor+0x1d0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
		IN2 = 0;
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <StartSeguidor+0x1d4>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

		IN3 = 0;
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <StartSeguidor+0x1d8>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
		IN4 = 0;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <StartSeguidor+0x1dc>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]

		osDelay(500);
 8001014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001018:	f005 fc96 	bl	8006948 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2104      	movs	r1, #4
 8001020:	481f      	ldr	r0, [pc, #124]	; (80010a0 <StartSeguidor+0x1e0>)
 8001022:	f001 f9ed 	bl	8002400 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102a:	f005 fc8d 	bl	8006948 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2104      	movs	r1, #4
 8001032:	481b      	ldr	r0, [pc, #108]	; (80010a0 <StartSeguidor+0x1e0>)
 8001034:	f001 f9e4 	bl	8002400 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001038:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800103c:	f005 fc84 	bl	8006948 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2104      	movs	r1, #4
 8001044:	4816      	ldr	r0, [pc, #88]	; (80010a0 <StartSeguidor+0x1e0>)
 8001046:	f001 f9db 	bl	8002400 <HAL_GPIO_WritePin>
		osDelay(500);
 800104a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104e:	f005 fc7b 	bl	8006948 <osDelay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2104      	movs	r1, #4
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <StartSeguidor+0x1e0>)
 8001058:	f001 f9d2 	bl	8002400 <HAL_GPIO_WritePin>
    }
    velocidade = 10;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <StartSeguidor+0x1e4>)
 800105e:	220a      	movs	r2, #10
 8001060:	601a      	str	r2, [r3, #0]

    osSemaphoreRelease(SemaphoreHandle);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <StartSeguidor+0x1cc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f005 fd64 	bl	8006b34 <osSemaphoreRelease>
    osDelay(200);
 800106c:	20c8      	movs	r0, #200	; 0xc8
 800106e:	f005 fc6b 	bl	8006948 <osDelay>
    S2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8001072:	e729      	b.n	8000ec8 <StartSeguidor+0x8>
 8001074:	20000094 	.word	0x20000094
 8001078:	48000800 	.word	0x48000800
 800107c:	20000095 	.word	0x20000095
 8001080:	20000096 	.word	0x20000096
 8001084:	20000097 	.word	0x20000097
 8001088:	20000098 	.word	0x20000098
 800108c:	20000134 	.word	0x20000134
 8001090:	200000ac 	.word	0x200000ac
 8001094:	200000b0 	.word	0x200000b0
 8001098:	200000b4 	.word	0x200000b4
 800109c:	200000b8 	.word	0x200000b8
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	200000bc 	.word	0x200000bc

080010a8 <StartMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotores */
void StartMotores(void *argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotores */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010b0:	2100      	movs	r1, #0
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <StartMotores+0x90>)
 80010b4:	f002 fa9a 	bl	80035ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010b8:	2104      	movs	r1, #4
 80010ba:	481f      	ldr	r0, [pc, #124]	; (8001138 <StartMotores+0x90>)
 80010bc:	f002 fa96 	bl	80035ec <HAL_TIM_PWM_Start>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreHandle, 200);
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <StartMotores+0x94>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	21c8      	movs	r1, #200	; 0xc8
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 fce2 	bl	8006a90 <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, IN1);
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <StartMotores+0x98>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f001 f990 	bl	8002400 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, IN2);
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <StartMotores+0x9c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f001 f986 	bl	8002400 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, IN3);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <StartMotores+0xa0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <StartMotores+0xa4>)
 8001100:	f001 f97e 	bl	8002400 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, IN4);
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <StartMotores+0xa8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <StartMotores+0xac>)
 8001110:	f001 f976 	bl	8002400 <HAL_GPIO_WritePin>
	  //htim3.Instance->CCR1 = velocidade;
	  //htim3.Instance->CCR2 = velocidade;

	  htim3.Instance->CCR1 = 10;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <StartMotores+0x90>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	220a      	movs	r2, #10
 800111a:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = 255;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <StartMotores+0x90>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	639a      	str	r2, [r3, #56]	; 0x38
	  osSemaphoreRelease(SemaphoreHandle);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <StartMotores+0x94>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f005 fd03 	bl	8006b34 <osSemaphoreRelease>
	  osDelay(200);
 800112e:	20c8      	movs	r0, #200	; 0xc8
 8001130:	f005 fc0a 	bl	8006948 <osDelay>
	  osSemaphoreAcquire(SemaphoreHandle, 200);
 8001134:	e7c4      	b.n	80010c0 <StartMotores+0x18>
 8001136:	bf00      	nop
 8001138:	200001d4 	.word	0x200001d4
 800113c:	20000134 	.word	0x20000134
 8001140:	200000ac 	.word	0x200000ac
 8001144:	200000b0 	.word	0x200000b0
 8001148:	200000b4 	.word	0x200000b4
 800114c:	48000800 	.word	0x48000800
 8001150:	200000b8 	.word	0x200000b8
 8001154:	48000400 	.word	0x48000400

08001158 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a41      	ldr	r2, [pc, #260]	; (8001268 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d177      	bne.n	8001258 <HAL_TIM_IC_CaptureCallback+0x100>
		if (Is_First) {
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <HAL_TIM_IC_CaptureCallback+0x114>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d01a      	beq.n	80011a6 <HAL_TIM_IC_CaptureCallback+0x4e>
			valor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f003 f93a 	bl	80043ec <HAL_TIM_ReadCapturedValue>
 8001178:	4603      	mov	r3, r0
 800117a:	4a3d      	ldr	r2, [pc, #244]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x118>)
 800117c:	6013      	str	r3, [r2, #0]
			Is_First = 0;
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 020a 	bic.w	r2, r2, #10
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0202 	orr.w	r2, r2, #2
 80011a2:	621a      	str	r2, [r3, #32]
			Is_First = 1;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
}
 80011a4:	e058      	b.n	8001258 <HAL_TIM_IC_CaptureCallback+0x100>
		} else if(!Is_First){
 80011a6:	4b31      	ldr	r3, [pc, #196]	; (800126c <HAL_TIM_IC_CaptureCallback+0x114>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d154      	bne.n	8001258 <HAL_TIM_IC_CaptureCallback+0x100>
			valor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011ae:	2100      	movs	r1, #0
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f003 f91b 	bl	80043ec <HAL_TIM_ReadCapturedValue>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011ba:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
			diferenca = valor2>valor1?valor2-valor1:valor1-valor2;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d905      	bls.n	80011dc <HAL_TIM_IC_CaptureCallback+0x84>
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	e004      	b.n	80011e6 <HAL_TIM_IC_CaptureCallback+0x8e>
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	4a24      	ldr	r2, [pc, #144]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011e8:	6013      	str	r3, [r2, #0]
			distancia = diferenca * .034/2;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9a8 	bl	8000544 <__aeabi_ui2d>
 80011f4:	a31a      	add	r3, pc, #104	; (adr r3, 8001260 <HAL_TIM_IC_CaptureCallback+0x108>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff fa1d 	bl	8000638 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120e:	f7ff fb3d 	bl	800088c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff fc1f 	bl	8000a5c <__aeabi_d2uiz>
 800121e:	4603      	mov	r3, r0
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_TIM_IC_CaptureCallback+0x124>)
 8001224:	701a      	strb	r2, [r3, #0]
			Is_First = 1;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a1a      	ldr	r2, [r3, #32]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 020a 	bic.w	r2, r2, #10
 800123a:	621a      	str	r2, [r3, #32]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a12      	ldr	r2, [r2, #32]
 8001246:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0202 	bic.w	r2, r2, #2
 8001256:	60da      	str	r2, [r3, #12]
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	b020c49c 	.word	0xb020c49c
 8001264:	3fa16872 	.word	0x3fa16872
 8001268:	2000013c 	.word	0x2000013c
 800126c:	20000000 	.word	0x20000000
 8001270:	2000009c 	.word	0x2000009c
 8001274:	200000a0 	.word	0x200000a0
 8001278:	200000a4 	.word	0x200000a4
 800127c:	200000a8 	.word	0x200000a8

08001280 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <MX_GPIO_Init+0x154>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a4e      	ldr	r2, [pc, #312]	; (80013d4 <MX_GPIO_Init+0x154>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a42      	ldr	r2, [pc, #264]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a3c      	ldr	r2, [pc, #240]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <MX_GPIO_Init+0x154>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	4837      	ldr	r0, [pc, #220]	; (80013d8 <MX_GPIO_Init+0x158>)
 80012fc:	f001 f880 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f001 f879 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2104      	movs	r1, #4
 8001312:	4832      	ldr	r0, [pc, #200]	; (80013dc <MX_GPIO_Init+0x15c>)
 8001314:	f001 f874 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	4830      	ldr	r0, [pc, #192]	; (80013e0 <MX_GPIO_Init+0x160>)
 800131e:	f001 f86f 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S3_Pin|S4_Pin|CLP_Pin|NEAR_Pin;
 8001322:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4828      	ldr	r0, [pc, #160]	; (80013d8 <MX_GPIO_Init+0x158>)
 8001338:	f000 fec8 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4821      	ldr	r0, [pc, #132]	; (80013d8 <MX_GPIO_Init+0x158>)
 8001354:	f000 feba 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8001358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f000 feaa 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f000 fe9c 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001394:	2304      	movs	r3, #4
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_GPIO_Init+0x15c>)
 80013ac:	f000 fe8e 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN4_Pin;
 80013b0:	2340      	movs	r3, #64	; 0x40
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_GPIO_Init+0x160>)
 80013c8:	f000 fe80 	bl	80020cc <HAL_GPIO_Init>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000800 	.word	0x48000800
 80013dc:	48000c00 	.word	0x48000c00
 80013e0:	48000400 	.word	0x48000400

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e8:	f000 fc2f 	bl	8001c4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ec:	f000 f811 	bl	8001412 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f0:	f7ff ff46 	bl	8001280 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013f4:	f000 f91c 	bl	8001630 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013f8:	f000 f974 	bl	80016e4 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80013fc:	f000 fb52 	bl	8001aa4 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8001400:	f000 f9e6 	bl	80017d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001404:	f005 f9c4 	bl	8006790 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001408:	f7ff fcca 	bl	8000da0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800140c:	f005 f9e4 	bl	80067d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001410:	e7fe      	b.n	8001410 <main+0x2c>

08001412 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b094      	sub	sp, #80	; 0x50
 8001416:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	2238      	movs	r2, #56	; 0x38
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f008 fca5 	bl	8009d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001438:	f000 fffa 	bl	8002430 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144a:	2302      	movs	r3, #2
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001452:	2302      	movs	r3, #2
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001456:	2319      	movs	r3, #25
 8001458:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001462:	2302      	movs	r3, #2
 8001464:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	4618      	mov	r0, r3
 800146c:	f001 f884 	bl	8002578 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001476:	f000 f819 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2303      	movs	r3, #3
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001486:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800148a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2103      	movs	r1, #3
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fb87 	bl	8002ba8 <HAL_RCC_ClockConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014a0:	f000 f804 	bl	80014ac <Error_Handler>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3750      	adds	r7, #80	; 0x50
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_MspInit+0x4c>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_MspInit+0x4c>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_MspInit+0x4c>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_MspInit+0x4c>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_MspInit+0x4c>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6593      	str	r3, [r2, #88]	; 0x58
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_MspInit+0x4c>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	210f      	movs	r1, #15
 80014f2:	f06f 0001 	mvn.w	r0, #1
 80014f6:	f000 fcf4 	bl	8001ee2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>

0800150e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 fbda 	bl	8001cf0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800153c:	f007 fa7c 	bl	8008a38 <xTaskGetSchedulerState>
 8001540:	4603      	mov	r3, r0
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001546:	f008 f95f 	bl	8009808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM1_CC_IRQHandler+0x10>)
 8001556:	f002 fb03 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000013c 	.word	0x2000013c

08001564 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <TIM2_IRQHandler+0x10>)
 800156a:	f002 faf9 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000188 	.word	0x20000188

08001578 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM3_IRQHandler+0x10>)
 800157e:	f002 faef 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001d4 	.word	0x200001d4

0800158c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <LPUART1_IRQHandler+0x10>)
 8001592:	f003 ff17 	bl	80053c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000220 	.word	0x20000220

080015a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <_sbrk+0x5c>)
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <_sbrk+0x60>)
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <_sbrk+0x64>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <_sbrk+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d207      	bcs.n	80015e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d0:	f008 fb94 	bl	8009cfc <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	220c      	movs	r2, #12
 80015d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e009      	b.n	80015f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <_sbrk+0x64>)
 80015f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20020000 	.word	0x20020000
 8001600:	00000400 	.word	0x00000400
 8001604:	20000138 	.word	0x20000138
 8001608:	20001cd8 	.word	0x20001cd8

0800160c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <MX_TIM1_Init+0xac>)
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <MX_TIM1_Init+0xb0>)
 8001652:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 125-1;
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MX_TIM1_Init+0xac>)
 8001656:	227c      	movs	r2, #124	; 0x7c
 8001658:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <MX_TIM1_Init+0xac>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_TIM1_Init+0xac>)
 8001662:	f240 128f 	movw	r2, #399	; 0x18f
 8001666:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <MX_TIM1_Init+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_TIM1_Init+0xac>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_TIM1_Init+0xac>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800167a:	4818      	ldr	r0, [pc, #96]	; (80016dc <MX_TIM1_Init+0xac>)
 800167c:	f002 f8c8 	bl	8003810 <HAL_TIM_IC_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001686:	f7ff ff11 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <MX_TIM1_Init+0xac>)
 800169e:	f003 fccf 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016a8:	f7ff ff00 	bl	80014ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016b0:	2301      	movs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <MX_TIM1_Init+0xac>)
 80016c4:	f002 fbcb 	bl	8003e5e <HAL_TIM_IC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80016ce:	f7ff feed 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000013c 	.word	0x2000013c
 80016e0:	40012c00 	.word	0x40012c00

080016e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08e      	sub	sp, #56	; 0x38
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001716:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <MX_TIM2_Init+0xe8>)
 8001718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125-1;
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <MX_TIM2_Init+0xe8>)
 8001720:	227c      	movs	r2, #124	; 0x7c
 8001722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <MX_TIM2_Init+0xe8>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <MX_TIM2_Init+0xe8>)
 800172c:	f240 128f 	movw	r2, #399	; 0x18f
 8001730:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <MX_TIM2_Init+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <MX_TIM2_Init+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800173e:	4823      	ldr	r0, [pc, #140]	; (80017cc <MX_TIM2_Init+0xe8>)
 8001740:	f001 fe9c 	bl	800347c <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800174a:	f7ff feaf 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001758:	4619      	mov	r1, r3
 800175a:	481c      	ldr	r0, [pc, #112]	; (80017cc <MX_TIM2_Init+0xe8>)
 800175c:	f002 fd30 	bl	80041c0 <HAL_TIM_ConfigClockSource>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001766:	f7ff fea1 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800176a:	4818      	ldr	r0, [pc, #96]	; (80017cc <MX_TIM2_Init+0xe8>)
 800176c:	f001 fedd 	bl	800352a <HAL_TIM_PWM_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001776:	f7ff fe99 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4810      	ldr	r0, [pc, #64]	; (80017cc <MX_TIM2_Init+0xe8>)
 800178a:	f003 fc59 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001794:	f7ff fe8a 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001798:	2360      	movs	r3, #96	; 0x60
 800179a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <MX_TIM2_Init+0xe8>)
 80017b0:	f002 fbf2 	bl	8003f98 <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017ba:	f7ff fe77 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017be:	4803      	ldr	r0, [pc, #12]	; (80017cc <MX_TIM2_Init+0xe8>)
 80017c0:	f000 f914 	bl	80019ec <HAL_TIM_MspPostInit>

}
 80017c4:	bf00      	nop
 80017c6:	3738      	adds	r7, #56	; 0x38
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000188 	.word	0x20000188

080017d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001804:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <MX_TIM3_Init+0x100>)
 8001806:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 125-1;
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <MX_TIM3_Init+0xfc>)
 800180a:	227c      	movs	r2, #124	; 0x7c
 800180c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001816:	2209      	movs	r2, #9
 8001818:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <MX_TIM3_Init+0xfc>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001826:	4829      	ldr	r0, [pc, #164]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001828:	f001 fe28 	bl	800347c <HAL_TIM_Base_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001832:	f7ff fe3b 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800183c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001840:	4619      	mov	r1, r3
 8001842:	4822      	ldr	r0, [pc, #136]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001844:	f002 fcbc 	bl	80041c0 <HAL_TIM_ConfigClockSource>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800184e:	f7ff fe2d 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001852:	481e      	ldr	r0, [pc, #120]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001854:	f001 fe69 	bl	800352a <HAL_TIM_PWM_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800185e:	f7ff fe25 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	4816      	ldr	r0, [pc, #88]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001872:	f003 fbe5 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800187c:	f7ff fe16 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	2360      	movs	r3, #96	; 0x60
 8001882:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_TIM3_Init+0xfc>)
 8001898:	f002 fb7e 	bl	8003f98 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018a2:	f7ff fe03 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a6:	463b      	mov	r3, r7
 80018a8:	2204      	movs	r2, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM3_Init+0xfc>)
 80018ae:	f002 fb73 	bl	8003f98 <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80018b8:	f7ff fdf8 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM3_Init+0xfc>)
 80018be:	f000 f895 	bl	80019ec <HAL_TIM_MspPostInit>

}
 80018c2:	bf00      	nop
 80018c4:	3738      	adds	r7, #56	; 0x38
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200001d4 	.word	0x200001d4
 80018d0:	40000400 	.word	0x40000400

080018d4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <HAL_TIM_IC_MspInit+0x8c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12f      	bne.n	8001956 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_TIM_IC_MspInit+0x90>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_TIM_IC_MspInit+0x90>)
 80018fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001900:	6613      	str	r3, [r2, #96]	; 0x60
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_TIM_IC_MspInit+0x90>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_TIM_IC_MspInit+0x90>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_TIM_IC_MspInit+0x90>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_TIM_IC_MspInit+0x90>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001926:	2301      	movs	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001936:	2302      	movs	r3, #2
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <HAL_TIM_IC_MspInit+0x94>)
 8001942:	f000 fbc3 	bl	80020cc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2105      	movs	r1, #5
 800194a:	201b      	movs	r0, #27
 800194c:	f000 fac9 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001950:	201b      	movs	r0, #27
 8001952:	f000 fae0 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40012c00 	.word	0x40012c00
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800

0800196c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d114      	bne.n	80019a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_TIM_Base_MspInit+0x78>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <HAL_TIM_Base_MspInit+0x78>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6593      	str	r3, [r2, #88]	; 0x58
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_TIM_Base_MspInit+0x78>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	201c      	movs	r0, #28
 800199c:	f000 faa1 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019a0:	201c      	movs	r0, #28
 80019a2:	f000 fab8 	bl	8001f16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019a6:	e018      	b.n	80019da <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_TIM_Base_MspInit+0x7c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d113      	bne.n	80019da <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_TIM_Base_MspInit+0x78>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <HAL_TIM_Base_MspInit+0x78>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_TIM_Base_MspInit+0x78>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	201d      	movs	r0, #29
 80019d0:	f000 fa87 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019d4:	201d      	movs	r0, #29
 80019d6:	f000 fa9e 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40000400 	.word	0x40000400

080019ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0c:	d11e      	bne.n	8001a4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_TIM_MspPostInit+0xac>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <HAL_TIM_MspPostInit+0xac>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_TIM_MspPostInit+0xac>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 8001a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f000 fb41 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a4a:	e020      	b.n	8001a8e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <HAL_TIM_MspPostInit+0xb0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d11b      	bne.n	8001a8e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_TIM_MspPostInit+0xac>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_TIM_MspPostInit+0xac>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_TIM_MspPostInit+0xac>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8001a6e:	2330      	movs	r3, #48	; 0x30
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_TIM_MspPostInit+0xb4>)
 8001a8a:	f000 fb1f 	bl	80020cc <HAL_GPIO_Init>
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	48000400 	.word	0x48000400

08001aa4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001aaa:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <MX_LPUART1_UART_Init+0x90>)
 8001aac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001ab0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ab4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001ae8:	f003 fb86 	bl	80051f8 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001af2:	f7ff fcdb 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001afa:	f004 fd4a 	bl	8006592 <HAL_UARTEx_SetTxFifoThreshold>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b04:	f7ff fcd2 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4809      	ldr	r0, [pc, #36]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001b0c:	f004 fd7f 	bl	800660e <HAL_UARTEx_SetRxFifoThreshold>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b16:	f7ff fcc9 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_LPUART1_UART_Init+0x8c>)
 8001b1c:	f004 fd00 	bl	8006520 <HAL_UARTEx_DisableFifoMode>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b26:	f7ff fcc1 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000220 	.word	0x20000220
 8001b34:	40008000 	.word	0x40008000

08001b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b09e      	sub	sp, #120	; 0x78
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	2254      	movs	r2, #84	; 0x54
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f008 f909 	bl	8009d70 <memset>
  if(uartHandle->Instance==LPUART1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <HAL_UART_MspInit+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d13e      	bne.n	8001be6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 fa33 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b80:	f7ff fc94 	bl	80014ac <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0xbc>)
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_UART_MspInit+0xbc>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0xbc>)
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0xbc>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_UART_MspInit+0xbc>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_UART_MspInit+0xbc>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f000 fa7b 	bl	80020cc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2105      	movs	r1, #5
 8001bda:	205b      	movs	r0, #91	; 0x5b
 8001bdc:	f000 f981 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001be0:	205b      	movs	r0, #91	; 0x5b
 8001be2:	f000 f998 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001be6:	bf00      	nop
 8001be8:	3778      	adds	r7, #120	; 0x78
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40008000 	.word	0x40008000
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfe:	490e      	ldr	r1, [pc, #56]	; (8001c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c00:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <LoopForever+0xe>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c14:	4c0b      	ldr	r4, [pc, #44]	; (8001c44 <LoopForever+0x16>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c22:	f7ff fcf3 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c26:	f008 f86f 	bl	8009d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c2a:	f7ff fbdb 	bl	80013e4 <main>

08001c2e <LoopForever>:

LoopForever:
    b LoopForever
 8001c2e:	e7fe      	b.n	8001c2e <LoopForever>
  ldr   r0, =_estack
 8001c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001c3c:	0800a914 	.word	0x0800a914
  ldr r2, =_sbss
 8001c40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001c44:	20001cd4 	.word	0x20001cd4

08001c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC1_2_IRQHandler>

08001c4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c54:	2003      	movs	r0, #3
 8001c56:	f000 f939 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c5a:	200f      	movs	r0, #15
 8001c5c:	f000 f80e 	bl	8001c7c <HAL_InitTick>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	e001      	b.n	8001c70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c6c:	f7ff fc24 	bl	80014b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c70:	79fb      	ldrb	r3, [r7, #7]

}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_InitTick+0x68>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d022      	beq.n	8001cd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_InitTick+0x6c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_InitTick+0x68>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 f944 	bl	8001f32 <HAL_SYSTICK_Config>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10f      	bne.n	8001cd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	d809      	bhi.n	8001cca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbe:	f000 f910 	bl	8001ee2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_InitTick+0x70>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e007      	b.n	8001cda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	e004      	b.n	8001cda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e001      	b.n	8001cda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x1c>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_IncTick+0x20>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <HAL_IncTick+0x1c>)
 8001d00:	6013      	str	r3, [r2, #0]
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	200002b0 	.word	0x200002b0
 8001d10:	2000000c 	.word	0x2000000c

08001d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_GetTick+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	200002b0 	.word	0x200002b0

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff29 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff40 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff90 	bl	8001e20 <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5f 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff33 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa4 	bl	8001e88 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d005      	beq.n	8001f6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e037      	b.n	8001fde <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 020e 	bic.w	r2, r2, #14
 8001f7c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f8c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f003 021f 	and.w	r2, r3, #31
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00c      	beq.n	8001fde <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fdc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d00d      	beq.n	8002030 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2204      	movs	r2, #4
 8002018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e047      	b.n	80020c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 020e 	bic.w	r2, r2, #14
 800203e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800205e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800207c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002094:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800209e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
    }
  }
  return status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020da:	e15a      	b.n	8002392 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 814c 	beq.w	800238c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d005      	beq.n	800210c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002108:	2b02      	cmp	r3, #2
 800210a:	d130      	bne.n	800216e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002142:	2201      	movs	r2, #1
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 0201 	and.w	r2, r3, #1
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b03      	cmp	r3, #3
 8002178:	d017      	beq.n	80021aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d123      	bne.n	80021fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	6939      	ldr	r1, [r7, #16]
 80021fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0203 	and.w	r2, r3, #3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80a6 	beq.w	800238c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002240:	4b5b      	ldr	r3, [pc, #364]	; (80023b0 <HAL_GPIO_Init+0x2e4>)
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	4a5a      	ldr	r2, [pc, #360]	; (80023b0 <HAL_GPIO_Init+0x2e4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6613      	str	r3, [r2, #96]	; 0x60
 800224c:	4b58      	ldr	r3, [pc, #352]	; (80023b0 <HAL_GPIO_Init+0x2e4>)
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002258:	4a56      	ldr	r2, [pc, #344]	; (80023b4 <HAL_GPIO_Init+0x2e8>)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002282:	d01f      	beq.n	80022c4 <HAL_GPIO_Init+0x1f8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a4c      	ldr	r2, [pc, #304]	; (80023b8 <HAL_GPIO_Init+0x2ec>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d019      	beq.n	80022c0 <HAL_GPIO_Init+0x1f4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <HAL_GPIO_Init+0x2f0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_GPIO_Init+0x1f0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_GPIO_Init+0x2f4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00d      	beq.n	80022b8 <HAL_GPIO_Init+0x1ec>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a49      	ldr	r2, [pc, #292]	; (80023c4 <HAL_GPIO_Init+0x2f8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d007      	beq.n	80022b4 <HAL_GPIO_Init+0x1e8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a48      	ldr	r2, [pc, #288]	; (80023c8 <HAL_GPIO_Init+0x2fc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_GPIO_Init+0x1e4>
 80022ac:	2305      	movs	r3, #5
 80022ae:	e00a      	b.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022b0:	2306      	movs	r3, #6
 80022b2:	e008      	b.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022b4:	2304      	movs	r3, #4
 80022b6:	e006      	b.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022b8:	2303      	movs	r3, #3
 80022ba:	e004      	b.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022bc:	2302      	movs	r3, #2
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022c4:	2300      	movs	r3, #0
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	f002 0203 	and.w	r2, r2, #3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4093      	lsls	r3, r2
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d6:	4937      	ldr	r1, [pc, #220]	; (80023b4 <HAL_GPIO_Init+0x2e8>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e4:	4b39      	ldr	r3, [pc, #228]	; (80023cc <HAL_GPIO_Init+0x300>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002308:	4a30      	ldr	r2, [pc, #192]	; (80023cc <HAL_GPIO_Init+0x300>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <HAL_GPIO_Init+0x300>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002332:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_GPIO_Init+0x300>)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_GPIO_Init+0x300>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_GPIO_Init+0x300>)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_GPIO_Init+0x300>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002386:	4a11      	ldr	r2, [pc, #68]	; (80023cc <HAL_GPIO_Init+0x300>)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	f47f ae9d 	bne.w	80020dc <HAL_GPIO_Init+0x10>
  }
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	48000800 	.word	0x48000800
 80023c0:	48000c00 	.word	0x48000c00
 80023c4:	48001000 	.word	0x48001000
 80023c8:	48001400 	.word	0x48001400
 80023cc:	40010400 	.word	0x40010400

080023d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	e001      	b.n	80023f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241c:	e002      	b.n	8002424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d141      	bne.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d131      	bne.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800244c:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002452:	4a46      	ldr	r2, [pc, #280]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002458:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800245c:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002464:	4a41      	ldr	r2, [pc, #260]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2232      	movs	r2, #50	; 0x32
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	0c9b      	lsrs	r3, r3, #18
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002482:	e002      	b.n	800248a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3b01      	subs	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002496:	d102      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f2      	bne.n	8002484 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800249e:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024aa:	d158      	bne.n	800255e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e057      	b.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b6:	4a2d      	ldr	r2, [pc, #180]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024c0:	e04d      	b.n	800255e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c8:	d141      	bne.n	800254e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d6:	d131      	bne.n	800253c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024de:	4a23      	ldr	r2, [pc, #140]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2232      	movs	r2, #50	; 0x32
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	0c9b      	lsrs	r3, r3, #18
 800250a:	3301      	adds	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800250e:	e002      	b.n	8002516 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3b01      	subs	r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002522:	d102      	bne.n	800252a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f2      	bne.n	8002510 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002536:	d112      	bne.n	800255e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e011      	b.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800254c:	e007      	b.n	800255e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40007000 	.word	0x40007000
 8002570:	20000004 	.word	0x20000004
 8002574:	431bde83 	.word	0x431bde83

08002578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e306      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d075      	beq.n	8002682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002596:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a0:	4b94      	ldr	r3, [pc, #592]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b0c      	cmp	r3, #12
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3e>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d002      	beq.n	80025bc <HAL_RCC_OscConfig+0x44>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05b      	beq.n	8002680 <HAL_RCC_OscConfig+0x108>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d157      	bne.n	8002680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e2e1      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x74>
 80025de:	4b85      	ldr	r3, [pc, #532]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a84      	ldr	r2, [pc, #528]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x98>
 80025f6:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7e      	ldr	r2, [pc, #504]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7b      	ldr	r2, [pc, #492]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 8002610:	4b78      	ldr	r3, [pc, #480]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a77      	ldr	r2, [pc, #476]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a74      	ldr	r2, [pc, #464]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff fb70 	bl	8001d14 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff fb6c 	bl	8001d14 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e2a6      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264a:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xc0>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7ff fb5c 	bl	8001d14 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff fb58 	bl	8001d14 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e292      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002672:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0xe8>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d075      	beq.n	800277a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268e:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002698:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_OscConfig+0x136>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_OscConfig+0x13c>
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d11f      	bne.n	80026f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b4:	4b4f      	ldr	r3, [pc, #316]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_OscConfig+0x154>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e265      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	4946      	ldr	r1, [pc, #280]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026e0:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <HAL_RCC_OscConfig+0x280>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fac9 	bl	8001c7c <HAL_InitTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d043      	beq.n	8002778 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e251      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d023      	beq.n	8002744 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fc:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7ff fb04 	bl	8001d14 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002710:	f7ff fb00 	bl	8001d14 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e23a      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002722:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	492d      	ldr	r1, [pc, #180]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
 8002742:	e01a      	b.n	800277a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2a      	ldr	r2, [pc, #168]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 800274a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800274e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7ff fae0 	bl	8001d14 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002758:	f7ff fadc 	bl	8001d14 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e216      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800276a:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x1e0>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d041      	beq.n	800280a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7ff fab9 	bl	8001d14 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a6:	f7ff fab5 	bl	8001d14 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1ef      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ef      	beq.n	80027a6 <HAL_RCC_OscConfig+0x22e>
 80027c6:	e020      	b.n	800280a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80027ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7ff fa9c 	bl	8001d14 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027de:	e00d      	b.n	80027fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e0:	f7ff fa98 	bl	8001d14 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d906      	bls.n	80027fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1d2      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027fc:	4b8c      	ldr	r3, [pc, #560]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ea      	bne.n	80027e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80a6 	beq.w	8002964 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800281c:	4b84      	ldr	r3, [pc, #528]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x2b4>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x2b6>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b7f      	ldr	r3, [pc, #508]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a7e      	ldr	r2, [pc, #504]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
 800283e:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284e:	4b79      	ldr	r3, [pc, #484]	; (8002a34 <HAL_RCC_OscConfig+0x4bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d118      	bne.n	800288c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800285a:	4b76      	ldr	r3, [pc, #472]	; (8002a34 <HAL_RCC_OscConfig+0x4bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a75      	ldr	r2, [pc, #468]	; (8002a34 <HAL_RCC_OscConfig+0x4bc>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7ff fa55 	bl	8001d14 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286e:	f7ff fa51 	bl	8001d14 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e18b      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002880:	4b6c      	ldr	r3, [pc, #432]	; (8002a34 <HAL_RCC_OscConfig+0x4bc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d108      	bne.n	80028a6 <HAL_RCC_OscConfig+0x32e>
 8002894:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	4a65      	ldr	r2, [pc, #404]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a4:	e024      	b.n	80028f0 <HAL_RCC_OscConfig+0x378>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d110      	bne.n	80028d0 <HAL_RCC_OscConfig+0x358>
 80028ae:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	4a5e      	ldr	r2, [pc, #376]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028be:	4b5c      	ldr	r3, [pc, #368]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a5a      	ldr	r2, [pc, #360]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ce:	e00f      	b.n	80028f0 <HAL_RCC_OscConfig+0x378>
 80028d0:	4b57      	ldr	r3, [pc, #348]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	4a56      	ldr	r2, [pc, #344]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e0:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d016      	beq.n	8002926 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7ff fa0c 	bl	8001d14 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7ff fa08 	bl	8001d14 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e140      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002916:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ed      	beq.n	8002900 <HAL_RCC_OscConfig+0x388>
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7ff f9f5 	bl	8001d14 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7ff f9f1 	bl	8001d14 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e129      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ed      	bne.n	800292e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002952:	7ffb      	ldrb	r3, [r7, #31]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d03c      	beq.n	80029ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 800297a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800297e:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7ff f9c4 	bl	8001d14 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002990:	f7ff f9c0 	bl	8001d14 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0fa      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80029a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ef      	beq.n	8002990 <HAL_RCC_OscConfig+0x418>
 80029b0:	e01b      	b.n	80029ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80029b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7ff f9a7 	bl	8001d14 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ca:	f7ff f9a3 	bl	8001d14 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e0dd      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80029de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ef      	bne.n	80029ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80d1 	beq.w	8002b96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	f000 808b 	beq.w	8002b18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d15e      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_RCC_OscConfig+0x4b8>)
 8002a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7ff f97d 	bl	8001d14 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1c:	e00c      	b.n	8002a38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7ff f979 	bl	8001d14 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d905      	bls.n	8002a38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0b3      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ec      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a44:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	4b56      	ldr	r3, [pc, #344]	; (8002ba4 <HAL_RCC_OscConfig+0x62c>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6a11      	ldr	r1, [r2, #32]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a54:	3a01      	subs	r2, #1
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	4311      	orrs	r1, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a5e:	0212      	lsls	r2, r2, #8
 8002a60:	4311      	orrs	r1, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a66:	0852      	lsrs	r2, r2, #1
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	0552      	lsls	r2, r2, #21
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a7e:	06d2      	lsls	r2, r2, #27
 8002a80:	430a      	orrs	r2, r1
 8002a82:	4947      	ldr	r1, [pc, #284]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b45      	ldr	r3, [pc, #276]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a44      	ldr	r2, [pc, #272]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a94:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a41      	ldr	r2, [pc, #260]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7ff f938 	bl	8001d14 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7ff f934 	bl	8001d14 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e06e      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x530>
 8002ac6:	e066      	b.n	8002b96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a34      	ldr	r2, [pc, #208]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ad4:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a31      	ldr	r2, [pc, #196]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a2e      	ldr	r2, [pc, #184]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002ae6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7ff f910 	bl	8001d14 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7ff f90c 	bl	8001d14 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e046      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0a:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x580>
 8002b16:	e03e      	b.n	8002b96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e039      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_RCC_OscConfig+0x628>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d12c      	bne.n	8002b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	3b01      	subs	r3, #1
 8002b44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d123      	bne.n	8002b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d11b      	bne.n	8002b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d113      	bne.n	8002b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	019f800c 	.word	0x019f800c

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e11e      	b.n	8002dfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b91      	ldr	r3, [pc, #580]	; (8002e08 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d910      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b8e      	ldr	r3, [pc, #568]	; (8002e08 <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 020f 	bic.w	r2, r3, #15
 8002bd6:	498c      	ldr	r1, [pc, #560]	; (8002e08 <HAL_RCC_ClockConfig+0x260>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b8a      	ldr	r3, [pc, #552]	; (8002e08 <HAL_RCC_ClockConfig+0x260>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e106      	b.n	8002dfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d073      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d129      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c04:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0f4      	b.n	8002dfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c14:	f000 f99e 	bl	8002f54 <RCC_GetSysClockFreqFromPLLSource>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4a7c      	ldr	r2, [pc, #496]	; (8002e10 <HAL_RCC_ClockConfig+0x268>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d93f      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c22:	4b7a      	ldr	r3, [pc, #488]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d033      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d12f      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c42:	4b72      	ldr	r3, [pc, #456]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4a:	4a70      	ldr	r2, [pc, #448]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e024      	b.n	8002ca2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0c6      	b.n	8002dfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0be      	b.n	8002dfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c80:	f000 f8ce 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4a61      	ldr	r2, [pc, #388]	; (8002e10 <HAL_RCC_ClockConfig+0x268>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d909      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c96:	4a5d      	ldr	r2, [pc, #372]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4957      	ldr	r1, [pc, #348]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7ff f82e 	bl	8001d14 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7ff f82a 	bl	8001d14 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e095      	b.n	8002dfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d023      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a42      	ldr	r2, [pc, #264]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d14:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4936      	ldr	r1, [pc, #216]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b80      	cmp	r3, #128	; 0x80
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d3e:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	4a32      	ldr	r2, [pc, #200]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002d44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d21d      	bcs.n	8002d94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 020f 	bic.w	r2, r3, #15
 8002d60:	4929      	ldr	r1, [pc, #164]	; (8002e08 <HAL_RCC_ClockConfig+0x260>)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d68:	f7fe ffd4 	bl	8001d14 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d70:	f7fe ffd0 	bl	8001d14 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e03b      	b.n	8002dfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_ClockConfig+0x260>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1ed      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4917      	ldr	r1, [pc, #92]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	490f      	ldr	r1, [pc, #60]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dd2:	f000 f825 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_RCC_ClockConfig+0x264>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	490c      	ldr	r1, [pc, #48]	; (8002e14 <HAL_RCC_ClockConfig+0x26c>)
 8002de4:	5ccb      	ldrb	r3, [r1, r3]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_RCC_ClockConfig+0x270>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe ff40 	bl	8001c7c <HAL_InitTick>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	04c4b400 	.word	0x04c4b400
 8002e14:	0800a830 	.word	0x0800a830
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	20000008 	.word	0x20000008

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e26:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d102      	bne.n	8002e38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e32:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e047      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d102      	bne.n	8002e4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e03e      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e4a:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d136      	bne.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e74:	4a1a      	ldr	r2, [pc, #104]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e7e:	68d2      	ldr	r2, [r2, #12]
 8002e80:	0a12      	lsrs	r2, r2, #8
 8002e82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	617b      	str	r3, [r7, #20]
      break;
 8002e8c:	e00c      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	0a12      	lsrs	r2, r2, #8
 8002e9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	0e5b      	lsrs	r3, r3, #25
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e001      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ec8:	693b      	ldr	r3, [r7, #16]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4904      	ldr	r1, [pc, #16]	; (8002f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	0800a840 	.word	0x0800a840

08002f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f2c:	f7ff ffda 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0adb      	lsrs	r3, r3, #11
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4904      	ldr	r1, [pc, #16]	; (8002f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	0800a840 	.word	0x0800a840

08002f54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d10c      	bne.n	8002f92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f82:	68d2      	ldr	r2, [r2, #12]
 8002f84:	0a12      	lsrs	r2, r2, #8
 8002f86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
    break;
 8002f90:	e00c      	b.n	8002fac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	0a12      	lsrs	r2, r2, #8
 8002fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
    break;
 8002faa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0e5b      	lsrs	r3, r3, #25
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002fc6:	687b      	ldr	r3, [r7, #4]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	007a1200 	.word	0x007a1200
 8002fdc:	00f42400 	.word	0x00f42400

08002fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8098 	beq.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10d      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	4b40      	ldr	r3, [pc, #256]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	4a3f      	ldr	r2, [pc, #252]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6593      	str	r3, [r2, #88]	; 0x58
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003026:	2301      	movs	r3, #1
 8003028:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302a:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a39      	ldr	r2, [pc, #228]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003036:	f7fe fe6d 	bl	8001d14 <HAL_GetTick>
 800303a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800303c:	e009      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe fe69 	bl	8001d14 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d902      	bls.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	74fb      	strb	r3, [r7, #19]
        break;
 8003050:	e005      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ef      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d159      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003064:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01e      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	d019      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe fe29 	bl	8001d14 <HAL_GetTick>
 80030c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c4:	e00b      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fe fe25 	bl	8001d14 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d902      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	74fb      	strb	r3, [r7, #19]
            break;
 80030dc:	e006      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ec      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	74bb      	strb	r3, [r7, #18]
 800310e:	e005      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003110:	40021000 	.word	0x40021000
 8003114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311c:	7c7b      	ldrb	r3, [r7, #17]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4ba7      	ldr	r3, [pc, #668]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	4aa6      	ldr	r2, [pc, #664]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313a:	4ba1      	ldr	r3, [pc, #644]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f023 0203 	bic.w	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	499d      	ldr	r1, [pc, #628]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315c:	4b98      	ldr	r3, [pc, #608]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f023 020c 	bic.w	r2, r3, #12
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	4995      	ldr	r1, [pc, #596]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800317e:	4b90      	ldr	r3, [pc, #576]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	498c      	ldr	r1, [pc, #560]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031a0:	4b87      	ldr	r3, [pc, #540]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	4984      	ldr	r1, [pc, #528]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031c2:	4b7f      	ldr	r3, [pc, #508]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	497b      	ldr	r1, [pc, #492]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e4:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4973      	ldr	r1, [pc, #460]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003206:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	496a      	ldr	r1, [pc, #424]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003228:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4962      	ldr	r1, [pc, #392]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800324a:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	4959      	ldr	r1, [pc, #356]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800326c:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	4951      	ldr	r1, [pc, #324]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	4948      	ldr	r1, [pc, #288]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d015      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032b0:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4940      	ldr	r1, [pc, #256]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ce:	d105      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a3a      	ldr	r2, [pc, #232]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	4932      	ldr	r1, [pc, #200]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003308:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003312:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	4924      	ldr	r1, [pc, #144]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333e:	d105      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d015      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	4916      	ldr	r1, [pc, #88]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003376:	d105      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d019      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4908      	ldr	r1, [pc, #32]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ae:	d109      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a02      	ldr	r2, [pc, #8]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ba:	60d3      	str	r3, [r2, #12]
 80033bc:	e002      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4926      	ldr	r1, [pc, #152]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ee:	d105      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	4918      	ldr	r1, [pc, #96]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003426:	d105      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a12      	ldr	r2, [pc, #72]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	490a      	ldr	r1, [pc, #40]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345e:	d105      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800346c:	7cbb      	ldrb	r3, [r7, #18]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e049      	b.n	8003522 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fa62 	bl	800196c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f001 f802 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e049      	b.n	80035d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f841 	bl	80035d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 ffab 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_TIM_PWM_Start+0x24>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e03c      	b.n	800368a <HAL_TIM_PWM_Start+0x9e>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d109      	bne.n	800362a <HAL_TIM_PWM_Start+0x3e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e02f      	b.n	800368a <HAL_TIM_PWM_Start+0x9e>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d109      	bne.n	8003644 <HAL_TIM_PWM_Start+0x58>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e022      	b.n	800368a <HAL_TIM_PWM_Start+0x9e>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d109      	bne.n	800365e <HAL_TIM_PWM_Start+0x72>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e015      	b.n	800368a <HAL_TIM_PWM_Start+0x9e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d109      	bne.n	8003678 <HAL_TIM_PWM_Start+0x8c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e008      	b.n	800368a <HAL_TIM_PWM_Start+0x9e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0a6      	b.n	80037e0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d104      	bne.n	80036a2 <HAL_TIM_PWM_Start+0xb6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	e023      	b.n	80036ea <HAL_TIM_PWM_Start+0xfe>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d104      	bne.n	80036b2 <HAL_TIM_PWM_Start+0xc6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	e01b      	b.n	80036ea <HAL_TIM_PWM_Start+0xfe>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_PWM_Start+0xd6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c0:	e013      	b.n	80036ea <HAL_TIM_PWM_Start+0xfe>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Start+0xe6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_PWM_Start+0xfe>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Start+0xf6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e0:	e003      	b.n	80036ea <HAL_TIM_PWM_Start+0xfe>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fc7e 	bl	8004ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3a      	ldr	r2, [pc, #232]	; (80037e8 <HAL_TIM_PWM_Start+0x1fc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_TIM_PWM_Start+0x148>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a39      	ldr	r2, [pc, #228]	; (80037ec <HAL_TIM_PWM_Start+0x200>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_TIM_PWM_Start+0x148>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a37      	ldr	r2, [pc, #220]	; (80037f0 <HAL_TIM_PWM_Start+0x204>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_TIM_PWM_Start+0x148>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a36      	ldr	r2, [pc, #216]	; (80037f4 <HAL_TIM_PWM_Start+0x208>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_TIM_PWM_Start+0x148>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a34      	ldr	r2, [pc, #208]	; (80037f8 <HAL_TIM_PWM_Start+0x20c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIM_PWM_Start+0x148>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a33      	ldr	r2, [pc, #204]	; (80037fc <HAL_TIM_PWM_Start+0x210>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_TIM_PWM_Start+0x14c>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_TIM_PWM_Start+0x14e>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a25      	ldr	r2, [pc, #148]	; (80037e8 <HAL_TIM_PWM_Start+0x1fc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d022      	beq.n	800379e <HAL_TIM_PWM_Start+0x1b2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d01d      	beq.n	800379e <HAL_TIM_PWM_Start+0x1b2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a26      	ldr	r2, [pc, #152]	; (8003800 <HAL_TIM_PWM_Start+0x214>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d018      	beq.n	800379e <HAL_TIM_PWM_Start+0x1b2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <HAL_TIM_PWM_Start+0x218>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_TIM_PWM_Start+0x1b2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_TIM_PWM_Start+0x21c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_TIM_PWM_Start+0x1b2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <HAL_TIM_PWM_Start+0x200>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_TIM_PWM_Start+0x1b2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <HAL_TIM_PWM_Start+0x204>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_TIM_PWM_Start+0x1b2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_TIM_PWM_Start+0x210>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d115      	bne.n	80037ca <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_TIM_PWM_Start+0x220>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d015      	beq.n	80037dc <HAL_TIM_PWM_Start+0x1f0>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b6:	d011      	beq.n	80037dc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c8:	e008      	b.n	80037dc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e000      	b.n	80037de <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40013400 	.word	0x40013400
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40014400 	.word	0x40014400
 80037f8:	40014800 	.word	0x40014800
 80037fc:	40015000 	.word	0x40015000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	00010007 	.word	0x00010007

08003810 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e049      	b.n	80038b6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe f84c 	bl	80018d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f000 fe38 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d104      	bne.n	80038de <HAL_TIM_IC_Start_IT+0x1e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	e023      	b.n	8003926 <HAL_TIM_IC_Start_IT+0x66>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_IC_Start_IT+0x2e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e01b      	b.n	8003926 <HAL_TIM_IC_Start_IT+0x66>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_IC_Start_IT+0x3e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e013      	b.n	8003926 <HAL_TIM_IC_Start_IT+0x66>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d104      	bne.n	800390e <HAL_TIM_IC_Start_IT+0x4e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e00b      	b.n	8003926 <HAL_TIM_IC_Start_IT+0x66>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b10      	cmp	r3, #16
 8003912:	d104      	bne.n	800391e <HAL_TIM_IC_Start_IT+0x5e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e003      	b.n	8003926 <HAL_TIM_IC_Start_IT+0x66>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_TIM_IC_Start_IT+0x78>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e013      	b.n	8003960 <HAL_TIM_IC_Start_IT+0xa0>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d104      	bne.n	8003948 <HAL_TIM_IC_Start_IT+0x88>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e00b      	b.n	8003960 <HAL_TIM_IC_Start_IT+0xa0>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b08      	cmp	r3, #8
 800394c:	d104      	bne.n	8003958 <HAL_TIM_IC_Start_IT+0x98>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e003      	b.n	8003960 <HAL_TIM_IC_Start_IT+0xa0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800395e:	b2db      	uxtb	r3, r3
 8003960:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d102      	bne.n	800396e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003968:	7b7b      	ldrb	r3, [r7, #13]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0e2      	b.n	8003b38 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0xc2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	e023      	b.n	80039ca <HAL_TIM_IC_Start_IT+0x10a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0xd2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	e01b      	b.n	80039ca <HAL_TIM_IC_Start_IT+0x10a>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start_IT+0xe2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	e013      	b.n	80039ca <HAL_TIM_IC_Start_IT+0x10a>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_IC_Start_IT+0xf2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039b0:	e00b      	b.n	80039ca <HAL_TIM_IC_Start_IT+0x10a>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_IC_Start_IT+0x102>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c0:	e003      	b.n	80039ca <HAL_TIM_IC_Start_IT+0x10a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <HAL_TIM_IC_Start_IT+0x11a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	e013      	b.n	8003a02 <HAL_TIM_IC_Start_IT+0x142>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d104      	bne.n	80039ea <HAL_TIM_IC_Start_IT+0x12a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039e8:	e00b      	b.n	8003a02 <HAL_TIM_IC_Start_IT+0x142>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_IC_Start_IT+0x13a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039f8:	e003      	b.n	8003a02 <HAL_TIM_IC_Start_IT+0x142>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d841      	bhi.n	8003a8c <HAL_TIM_IC_Start_IT+0x1cc>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_TIM_IC_Start_IT+0x150>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003a8d 	.word	0x08003a8d
 8003a18:	08003a8d 	.word	0x08003a8d
 8003a1c:	08003a8d 	.word	0x08003a8d
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a8d 	.word	0x08003a8d
 8003a28:	08003a8d 	.word	0x08003a8d
 8003a2c:	08003a8d 	.word	0x08003a8d
 8003a30:	08003a69 	.word	0x08003a69
 8003a34:	08003a8d 	.word	0x08003a8d
 8003a38:	08003a8d 	.word	0x08003a8d
 8003a3c:	08003a8d 	.word	0x08003a8d
 8003a40:	08003a7b 	.word	0x08003a7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0202 	orr.w	r2, r2, #2
 8003a52:	60da      	str	r2, [r3, #12]
      break;
 8003a54:	e01d      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0204 	orr.w	r2, r2, #4
 8003a64:	60da      	str	r2, [r3, #12]
      break;
 8003a66:	e014      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	60da      	str	r2, [r3, #12]
      break;
 8003a78:	e00b      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0210 	orr.w	r2, r2, #16
 8003a88:	60da      	str	r2, [r3, #12]
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a90:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d14e      	bne.n	8003b36 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	6839      	ldr	r1, [r7, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 faa7 	bl	8004ff4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <HAL_TIM_IC_Start_IT+0x280>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_TIM_IC_Start_IT+0x236>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d01d      	beq.n	8003af6 <HAL_TIM_IC_Start_IT+0x236>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <HAL_TIM_IC_Start_IT+0x284>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_TIM_IC_Start_IT+0x236>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <HAL_TIM_IC_Start_IT+0x288>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_TIM_IC_Start_IT+0x236>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_TIM_IC_Start_IT+0x28c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIM_IC_Start_IT+0x236>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_TIM_IC_Start_IT+0x290>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIM_IC_Start_IT+0x236>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_TIM_IC_Start_IT+0x294>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIM_IC_Start_IT+0x236>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	; (8003b58 <HAL_TIM_IC_Start_IT+0x298>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d115      	bne.n	8003b22 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_TIM_IC_Start_IT+0x29c>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b06      	cmp	r3, #6
 8003b06:	d015      	beq.n	8003b34 <HAL_TIM_IC_Start_IT+0x274>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d011      	beq.n	8003b34 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	e008      	b.n	8003b34 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e000      	b.n	8003b36 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40013400 	.word	0x40013400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40015000 	.word	0x40015000
 8003b5c:	00010007 	.word	0x00010007

08003b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0202 	mvn.w	r2, #2
 8003b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd fad8 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fc6c 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fc73 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0204 	mvn.w	r2, #4
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd faae 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fc42 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fc49 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d122      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d11b      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0208 	mvn.w	r2, #8
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fa84 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fc18 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fc1f 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d122      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0210 	mvn.w	r2, #16
 8003c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd fa5a 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e005      	b.n	8003cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fbee 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fbf5 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0201 	mvn.w	r2, #1
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fbc8 	bl	8004474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b80      	cmp	r3, #128	; 0x80
 8003cf0:	d10e      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b80      	cmp	r3, #128	; 0x80
 8003cfe:	d107      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f001 fa38 	bl	8005180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d10e      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d107      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f001 fa2b 	bl	8005194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d10e      	bne.n	8003d6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d107      	bne.n	8003d6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fba3 	bl	80044b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d10e      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d107      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f06f 0220 	mvn.w	r2, #32
 8003d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f001 f9eb 	bl	800516c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da4:	d10f      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db4:	d107      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f001 f9f1 	bl	80051a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd4:	d10f      	bne.n	8003df6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de4:	d107      	bne.n	8003df6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f001 f9e3 	bl	80051bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e04:	d10f      	bne.n	8003e26 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e14:	d107      	bne.n	8003e26 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f001 f9d5 	bl	80051d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e34:	d10f      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e44:	d107      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f001 f9c7 	bl	80051e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e088      	b.n	8003f8e <HAL_TIM_IC_ConfigChannel+0x130>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11b      	bne.n	8003ec2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f000 fee5 	bl	8004c68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 020c 	bic.w	r2, r2, #12
 8003eac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6999      	ldr	r1, [r3, #24]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	619a      	str	r2, [r3, #24]
 8003ec0:	e060      	b.n	8003f84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d11c      	bne.n	8003f02 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f000 ff69 	bl	8004dae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003eea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	619a      	str	r2, [r3, #24]
 8003f00:	e040      	b.n	8003f84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d11b      	bne.n	8003f40 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f000 ffb6 	bl	8004e88 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 020c 	bic.w	r2, r2, #12
 8003f2a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69d9      	ldr	r1, [r3, #28]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	61da      	str	r2, [r3, #28]
 8003f3e:	e021      	b.n	8003f84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d11c      	bne.n	8003f80 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f000 ffd3 	bl	8004f00 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69d9      	ldr	r1, [r3, #28]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	021a      	lsls	r2, r3, #8
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	61da      	str	r2, [r3, #28]
 8003f7e:	e001      	b.n	8003f84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e0ff      	b.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b14      	cmp	r3, #20
 8003fc2:	f200 80f0 	bhi.w	80041a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	080041a7 	.word	0x080041a7
 8003fd4:	080041a7 	.word	0x080041a7
 8003fd8:	080041a7 	.word	0x080041a7
 8003fdc:	08004061 	.word	0x08004061
 8003fe0:	080041a7 	.word	0x080041a7
 8003fe4:	080041a7 	.word	0x080041a7
 8003fe8:	080041a7 	.word	0x080041a7
 8003fec:	080040a3 	.word	0x080040a3
 8003ff0:	080041a7 	.word	0x080041a7
 8003ff4:	080041a7 	.word	0x080041a7
 8003ff8:	080041a7 	.word	0x080041a7
 8003ffc:	080040e3 	.word	0x080040e3
 8004000:	080041a7 	.word	0x080041a7
 8004004:	080041a7 	.word	0x080041a7
 8004008:	080041a7 	.word	0x080041a7
 800400c:	08004125 	.word	0x08004125
 8004010:	080041a7 	.word	0x080041a7
 8004014:	080041a7 	.word	0x080041a7
 8004018:	080041a7 	.word	0x080041a7
 800401c:	08004165 	.word	0x08004165
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 faf4 	bl	8004614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0208 	orr.w	r2, r2, #8
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0204 	bic.w	r2, r2, #4
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	619a      	str	r2, [r3, #24]
      break;
 800405e:	e0a5      	b.n	80041ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fb6e 	bl	8004748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	619a      	str	r2, [r3, #24]
      break;
 80040a0:	e084      	b.n	80041ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fbe1 	bl	8004870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0208 	orr.w	r2, r2, #8
 80040bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0204 	bic.w	r2, r2, #4
 80040cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	61da      	str	r2, [r3, #28]
      break;
 80040e0:	e064      	b.n	80041ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fc53 	bl	8004994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	61da      	str	r2, [r3, #28]
      break;
 8004122:	e043      	b.n	80041ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fcc6 	bl	8004abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0208 	orr.w	r2, r2, #8
 800413e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0204 	bic.w	r2, r2, #4
 800414e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004162:	e023      	b.n	80041ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fd10 	bl	8004b90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	021a      	lsls	r2, r3, #8
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80041a4:	e002      	b.n	80041ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
      break;
 80041aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop

080041c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_TIM_ConfigClockSource+0x1c>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0f6      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x20a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80041fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6f      	ldr	r2, [pc, #444]	; (80043d4 <HAL_TIM_ConfigClockSource+0x214>)
 8004216:	4293      	cmp	r3, r2
 8004218:	f000 80c1 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1de>
 800421c:	4a6d      	ldr	r2, [pc, #436]	; (80043d4 <HAL_TIM_ConfigClockSource+0x214>)
 800421e:	4293      	cmp	r3, r2
 8004220:	f200 80c6 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004224:	4a6c      	ldr	r2, [pc, #432]	; (80043d8 <HAL_TIM_ConfigClockSource+0x218>)
 8004226:	4293      	cmp	r3, r2
 8004228:	f000 80b9 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1de>
 800422c:	4a6a      	ldr	r2, [pc, #424]	; (80043d8 <HAL_TIM_ConfigClockSource+0x218>)
 800422e:	4293      	cmp	r3, r2
 8004230:	f200 80be 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004234:	4a69      	ldr	r2, [pc, #420]	; (80043dc <HAL_TIM_ConfigClockSource+0x21c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	f000 80b1 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1de>
 800423c:	4a67      	ldr	r2, [pc, #412]	; (80043dc <HAL_TIM_ConfigClockSource+0x21c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	f200 80b6 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004244:	4a66      	ldr	r2, [pc, #408]	; (80043e0 <HAL_TIM_ConfigClockSource+0x220>)
 8004246:	4293      	cmp	r3, r2
 8004248:	f000 80a9 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1de>
 800424c:	4a64      	ldr	r2, [pc, #400]	; (80043e0 <HAL_TIM_ConfigClockSource+0x220>)
 800424e:	4293      	cmp	r3, r2
 8004250:	f200 80ae 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004254:	4a63      	ldr	r2, [pc, #396]	; (80043e4 <HAL_TIM_ConfigClockSource+0x224>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f000 80a1 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1de>
 800425c:	4a61      	ldr	r2, [pc, #388]	; (80043e4 <HAL_TIM_ConfigClockSource+0x224>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f200 80a6 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004264:	4a60      	ldr	r2, [pc, #384]	; (80043e8 <HAL_TIM_ConfigClockSource+0x228>)
 8004266:	4293      	cmp	r3, r2
 8004268:	f000 8099 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1de>
 800426c:	4a5e      	ldr	r2, [pc, #376]	; (80043e8 <HAL_TIM_ConfigClockSource+0x228>)
 800426e:	4293      	cmp	r3, r2
 8004270:	f200 809e 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004274:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004278:	f000 8091 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1de>
 800427c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004280:	f200 8096 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004288:	f000 8089 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x1de>
 800428c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004290:	f200 808e 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004298:	d03e      	beq.n	8004318 <HAL_TIM_ConfigClockSource+0x158>
 800429a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429e:	f200 8087 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a6:	f000 8086 	beq.w	80043b6 <HAL_TIM_ConfigClockSource+0x1f6>
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d87f      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042b0:	2b70      	cmp	r3, #112	; 0x70
 80042b2:	d01a      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x12a>
 80042b4:	2b70      	cmp	r3, #112	; 0x70
 80042b6:	d87b      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042b8:	2b60      	cmp	r3, #96	; 0x60
 80042ba:	d050      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x19e>
 80042bc:	2b60      	cmp	r3, #96	; 0x60
 80042be:	d877      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042c0:	2b50      	cmp	r3, #80	; 0x50
 80042c2:	d03c      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x17e>
 80042c4:	2b50      	cmp	r3, #80	; 0x50
 80042c6:	d873      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d058      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x1be>
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d86f      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042d0:	2b30      	cmp	r3, #48	; 0x30
 80042d2:	d064      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x1de>
 80042d4:	2b30      	cmp	r3, #48	; 0x30
 80042d6:	d86b      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d060      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x1de>
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d867      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d05c      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x1de>
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d05a      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x1de>
 80042e8:	e062      	b.n	80043b0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6899      	ldr	r1, [r3, #8]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f000 fe5b 	bl	8004fb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800430c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	609a      	str	r2, [r3, #8]
      break;
 8004316:	e04f      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6899      	ldr	r1, [r3, #8]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f000 fe44 	bl	8004fb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800433a:	609a      	str	r2, [r3, #8]
      break;
 800433c:	e03c      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	461a      	mov	r2, r3
 800434c:	f000 fd00 	bl	8004d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2150      	movs	r1, #80	; 0x50
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fe0f 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 800435c:	e02c      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6859      	ldr	r1, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	461a      	mov	r2, r3
 800436c:	f000 fd5c 	bl	8004e28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2160      	movs	r1, #96	; 0x60
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fdff 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 800437c:	e01c      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	461a      	mov	r2, r3
 800438c:	f000 fce0 	bl	8004d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2140      	movs	r1, #64	; 0x40
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fdef 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 800439c:	e00c      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fde6 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 80043ae:	e003      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e000      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80043b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	00100070 	.word	0x00100070
 80043d8:	00100060 	.word	0x00100060
 80043dc:	00100050 	.word	0x00100050
 80043e0:	00100040 	.word	0x00100040
 80043e4:	00100030 	.word	0x00100030
 80043e8:	00100020 	.word	0x00100020

080043ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d831      	bhi.n	8004464 <HAL_TIM_ReadCapturedValue+0x78>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800443d 	.word	0x0800443d
 800440c:	08004465 	.word	0x08004465
 8004410:	08004465 	.word	0x08004465
 8004414:	08004465 	.word	0x08004465
 8004418:	08004447 	.word	0x08004447
 800441c:	08004465 	.word	0x08004465
 8004420:	08004465 	.word	0x08004465
 8004424:	08004465 	.word	0x08004465
 8004428:	08004451 	.word	0x08004451
 800442c:	08004465 	.word	0x08004465
 8004430:	08004465 	.word	0x08004465
 8004434:	08004465 	.word	0x08004465
 8004438:	0800445b 	.word	0x0800445b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	60fb      	str	r3, [r7, #12]

      break;
 8004444:	e00f      	b.n	8004466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	60fb      	str	r3, [r7, #12]

      break;
 800444e:	e00a      	b.n	8004466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	60fb      	str	r3, [r7, #12]

      break;
 8004458:	e005      	b.n	8004466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	60fb      	str	r3, [r7, #12]

      break;
 8004462:	e000      	b.n	8004466 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004464:	bf00      	nop
  }

  return tmpreg;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a46      	ldr	r2, [pc, #280]	; (80045f0 <TIM_Base_SetConfig+0x12c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d017      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d013      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a43      	ldr	r2, [pc, #268]	; (80045f4 <TIM_Base_SetConfig+0x130>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00f      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a42      	ldr	r2, [pc, #264]	; (80045f8 <TIM_Base_SetConfig+0x134>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a41      	ldr	r2, [pc, #260]	; (80045fc <TIM_Base_SetConfig+0x138>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a40      	ldr	r2, [pc, #256]	; (8004600 <TIM_Base_SetConfig+0x13c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3f      	ldr	r2, [pc, #252]	; (8004604 <TIM_Base_SetConfig+0x140>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a33      	ldr	r2, [pc, #204]	; (80045f0 <TIM_Base_SetConfig+0x12c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d023      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d01f      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <TIM_Base_SetConfig+0x130>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01b      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2f      	ldr	r2, [pc, #188]	; (80045f8 <TIM_Base_SetConfig+0x134>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d017      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2e      	ldr	r2, [pc, #184]	; (80045fc <TIM_Base_SetConfig+0x138>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2d      	ldr	r2, [pc, #180]	; (8004600 <TIM_Base_SetConfig+0x13c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00f      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <TIM_Base_SetConfig+0x144>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a2c      	ldr	r2, [pc, #176]	; (800460c <TIM_Base_SetConfig+0x148>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2b      	ldr	r2, [pc, #172]	; (8004610 <TIM_Base_SetConfig+0x14c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a26      	ldr	r2, [pc, #152]	; (8004604 <TIM_Base_SetConfig+0x140>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <TIM_Base_SetConfig+0x12c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a14      	ldr	r2, [pc, #80]	; (8004600 <TIM_Base_SetConfig+0x13c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a14      	ldr	r2, [pc, #80]	; (8004608 <TIM_Base_SetConfig+0x144>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a13      	ldr	r2, [pc, #76]	; (800460c <TIM_Base_SetConfig+0x148>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a12      	ldr	r2, [pc, #72]	; (8004610 <TIM_Base_SetConfig+0x14c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0d      	ldr	r2, [pc, #52]	; (8004604 <TIM_Base_SetConfig+0x140>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d103      	bne.n	80045dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	615a      	str	r2, [r3, #20]
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40015000 	.word	0x40015000
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800

08004614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f023 0201 	bic.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 0302 	bic.w	r3, r3, #2
 8004660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a30      	ldr	r2, [pc, #192]	; (8004730 <TIM_OC1_SetConfig+0x11c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <TIM_OC1_SetConfig+0x88>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2f      	ldr	r2, [pc, #188]	; (8004734 <TIM_OC1_SetConfig+0x120>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00f      	beq.n	800469c <TIM_OC1_SetConfig+0x88>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2e      	ldr	r2, [pc, #184]	; (8004738 <TIM_OC1_SetConfig+0x124>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <TIM_OC1_SetConfig+0x88>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a2d      	ldr	r2, [pc, #180]	; (800473c <TIM_OC1_SetConfig+0x128>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <TIM_OC1_SetConfig+0x88>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <TIM_OC1_SetConfig+0x12c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC1_SetConfig+0x88>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <TIM_OC1_SetConfig+0x130>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10c      	bne.n	80046b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0308 	bic.w	r3, r3, #8
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <TIM_OC1_SetConfig+0x11c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <TIM_OC1_SetConfig+0xd2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <TIM_OC1_SetConfig+0x120>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00f      	beq.n	80046e6 <TIM_OC1_SetConfig+0xd2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <TIM_OC1_SetConfig+0x124>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <TIM_OC1_SetConfig+0xd2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1a      	ldr	r2, [pc, #104]	; (800473c <TIM_OC1_SetConfig+0x128>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <TIM_OC1_SetConfig+0xd2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a19      	ldr	r2, [pc, #100]	; (8004740 <TIM_OC1_SetConfig+0x12c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_OC1_SetConfig+0xd2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a18      	ldr	r2, [pc, #96]	; (8004744 <TIM_OC1_SetConfig+0x130>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d111      	bne.n	800470a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	621a      	str	r2, [r3, #32]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40013400 	.word	0x40013400
 8004738:	40014000 	.word	0x40014000
 800473c:	40014400 	.word	0x40014400
 8004740:	40014800 	.word	0x40014800
 8004744:	40015000 	.word	0x40015000

08004748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0210 	bic.w	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0320 	bic.w	r3, r3, #32
 8004796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <TIM_OC2_SetConfig+0x110>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_OC2_SetConfig+0x74>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a2b      	ldr	r2, [pc, #172]	; (800485c <TIM_OC2_SetConfig+0x114>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_OC2_SetConfig+0x74>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <TIM_OC2_SetConfig+0x118>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d10d      	bne.n	80047d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a1f      	ldr	r2, [pc, #124]	; (8004858 <TIM_OC2_SetConfig+0x110>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <TIM_OC2_SetConfig+0xc0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1e      	ldr	r2, [pc, #120]	; (800485c <TIM_OC2_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_OC2_SetConfig+0xc0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <TIM_OC2_SetConfig+0x11c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_OC2_SetConfig+0xc0>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <TIM_OC2_SetConfig+0x120>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_OC2_SetConfig+0xc0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a1c      	ldr	r2, [pc, #112]	; (800486c <TIM_OC2_SetConfig+0x124>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC2_SetConfig+0xc0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a17      	ldr	r2, [pc, #92]	; (8004860 <TIM_OC2_SetConfig+0x118>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d113      	bne.n	8004830 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800480e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40013400 	.word	0x40013400
 8004860:	40015000 	.word	0x40015000
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800

08004870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a2b      	ldr	r2, [pc, #172]	; (800497c <TIM_OC3_SetConfig+0x10c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <TIM_OC3_SetConfig+0x72>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a2a      	ldr	r2, [pc, #168]	; (8004980 <TIM_OC3_SetConfig+0x110>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_OC3_SetConfig+0x72>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a29      	ldr	r2, [pc, #164]	; (8004984 <TIM_OC3_SetConfig+0x114>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10d      	bne.n	80048fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1e      	ldr	r2, [pc, #120]	; (800497c <TIM_OC3_SetConfig+0x10c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <TIM_OC3_SetConfig+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <TIM_OC3_SetConfig+0x110>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00f      	beq.n	800492e <TIM_OC3_SetConfig+0xbe>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <TIM_OC3_SetConfig+0x118>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_OC3_SetConfig+0xbe>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1c      	ldr	r2, [pc, #112]	; (800498c <TIM_OC3_SetConfig+0x11c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <TIM_OC3_SetConfig+0xbe>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <TIM_OC3_SetConfig+0x120>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_OC3_SetConfig+0xbe>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a16      	ldr	r2, [pc, #88]	; (8004984 <TIM_OC3_SetConfig+0x114>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d113      	bne.n	8004956 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800493c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	621a      	str	r2, [r3, #32]
}
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40013400 	.word	0x40013400
 8004984:	40015000 	.word	0x40015000
 8004988:	40014000 	.word	0x40014000
 800498c:	40014400 	.word	0x40014400
 8004990:	40014800 	.word	0x40014800

08004994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	031b      	lsls	r3, r3, #12
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2c      	ldr	r2, [pc, #176]	; (8004aa4 <TIM_OC4_SetConfig+0x110>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d007      	beq.n	8004a08 <TIM_OC4_SetConfig+0x74>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a2b      	ldr	r2, [pc, #172]	; (8004aa8 <TIM_OC4_SetConfig+0x114>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC4_SetConfig+0x74>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a2a      	ldr	r2, [pc, #168]	; (8004aac <TIM_OC4_SetConfig+0x118>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10d      	bne.n	8004a24 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	031b      	lsls	r3, r3, #12
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <TIM_OC4_SetConfig+0x110>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <TIM_OC4_SetConfig+0xc0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <TIM_OC4_SetConfig+0x114>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_OC4_SetConfig+0xc0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <TIM_OC4_SetConfig+0x11c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_OC4_SetConfig+0xc0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <TIM_OC4_SetConfig+0x120>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_OC4_SetConfig+0xc0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <TIM_OC4_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_OC4_SetConfig+0xc0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a17      	ldr	r2, [pc, #92]	; (8004aac <TIM_OC4_SetConfig+0x118>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d113      	bne.n	8004a7c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	019b      	lsls	r3, r3, #6
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40015000 	.word	0x40015000
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800

08004abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <TIM_OC5_SetConfig+0xbc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <TIM_OC5_SetConfig+0x82>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <TIM_OC5_SetConfig+0xc0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00f      	beq.n	8004b3e <TIM_OC5_SetConfig+0x82>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <TIM_OC5_SetConfig+0xc4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_OC5_SetConfig+0x82>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <TIM_OC5_SetConfig+0xc8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <TIM_OC5_SetConfig+0x82>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <TIM_OC5_SetConfig+0xcc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_OC5_SetConfig+0x82>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <TIM_OC5_SetConfig+0xd0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d109      	bne.n	8004b52 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	621a      	str	r2, [r3, #32]
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40013400 	.word	0x40013400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40014800 	.word	0x40014800
 8004b8c:	40015000 	.word	0x40015000

08004b90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	051b      	lsls	r3, r3, #20
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	; (8004c50 <TIM_OC6_SetConfig+0xc0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d013      	beq.n	8004c14 <TIM_OC6_SetConfig+0x84>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <TIM_OC6_SetConfig+0xc4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00f      	beq.n	8004c14 <TIM_OC6_SetConfig+0x84>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <TIM_OC6_SetConfig+0xc8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_OC6_SetConfig+0x84>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <TIM_OC6_SetConfig+0xcc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_OC6_SetConfig+0x84>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <TIM_OC6_SetConfig+0xd0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC6_SetConfig+0x84>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <TIM_OC6_SetConfig+0xd4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d109      	bne.n	8004c28 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	029b      	lsls	r3, r3, #10
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40013400 	.word	0x40013400
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800
 8004c64:	40015000 	.word	0x40015000

08004c68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a28      	ldr	r2, [pc, #160]	; (8004d34 <TIM_TI1_SetConfig+0xcc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01b      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d017      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <TIM_TI1_SetConfig+0xd0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a24      	ldr	r2, [pc, #144]	; (8004d3c <TIM_TI1_SetConfig+0xd4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <TIM_TI1_SetConfig+0xd8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <TIM_TI1_SetConfig+0xdc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <TIM_TI1_SetConfig+0xe0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_TI1_SetConfig+0x66>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <TIM_TI1_SetConfig+0xe4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <TIM_TI1_SetConfig+0x6a>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <TIM_TI1_SetConfig+0x6c>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e003      	b.n	8004cf2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f023 030a 	bic.w	r3, r3, #10
 8004d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f003 030a 	and.w	r3, r3, #10
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40015000 	.word	0x40015000

08004d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 030a 	bic.w	r3, r3, #10
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b087      	sub	sp, #28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f023 0210 	bic.w	r2, r3, #16
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	031b      	lsls	r3, r3, #12
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	f023 0210 	bic.w	r2, r3, #16
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	031b      	lsls	r3, r3, #12
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	621a      	str	r2, [r3, #32]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 0303 	bic.w	r3, r3, #3
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ed8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	031b      	lsls	r3, r3, #12
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	031b      	lsls	r3, r3, #12
 8004f58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f043 0307 	orr.w	r3, r3, #7
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	609a      	str	r2, [r3, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2201      	movs	r2, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	43db      	mvns	r3, r3
 8005016:	401a      	ands	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e074      	b.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a34      	ldr	r2, [pc, #208]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a33      	ldr	r2, [pc, #204]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a31      	ldr	r2, [pc, #196]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800509c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a21      	ldr	r2, [pc, #132]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d022      	beq.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d01d      	beq.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1f      	ldr	r2, [pc, #124]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d018      	beq.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00e      	beq.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a15      	ldr	r2, [pc, #84]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d009      	beq.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d004      	beq.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a11      	ldr	r2, [pc, #68]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10c      	bne.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	4313      	orrs	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400
 8005158:	40015000 	.word	0x40015000
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40014000 	.word	0x40014000

0800516c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e042      	b.n	8005290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fc fc8b 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2224      	movs	r2, #36	; 0x24
 8005226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fbfa 	bl	8005a34 <UART_SetConfig>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e022      	b.n	8005290 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 feea 	bl	800602c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 ff71 	bl	8006170 <UART_CheckIdleState>
 800528e:	4603      	mov	r3, r0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	f040 8083 	bne.w	80053ba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_UART_Transmit+0x28>
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e07b      	b.n	80053bc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Transmit+0x3a>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e074      	b.n	80053bc <HAL_UART_Transmit+0x124>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2221      	movs	r2, #33	; 0x21
 80052e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ea:	f7fc fd13 	bl	8001d14 <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005308:	d108      	bne.n	800531c <HAL_UART_Transmit+0x84>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	e003      	b.n	8005324 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800532c:	e02c      	b.n	8005388 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2200      	movs	r2, #0
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 ff64 	bl	8006206 <UART_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e039      	b.n	80053bc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800535c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	3302      	adds	r3, #2
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	e007      	b.n	8005376 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	781a      	ldrb	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	3301      	adds	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1cc      	bne.n	800532e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2200      	movs	r2, #0
 800539c:	2140      	movs	r1, #64	; 0x40
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 ff31 	bl	8006206 <UART_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e006      	b.n	80053bc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e000      	b.n	80053bc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80053ba:	2302      	movs	r3, #2
  }
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b0ba      	sub	sp, #232	; 0xe8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80053f2:	4013      	ands	r3, r2
 80053f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d11b      	bne.n	8005438 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800540c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 82d6 	beq.w	80059da <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
      }
      return;
 8005436:	e2d0      	b.n	80059da <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 811f 	beq.w	8005680 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005442:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005446:	4b8b      	ldr	r3, [pc, #556]	; (8005674 <HAL_UART_IRQHandler+0x2b0>)
 8005448:	4013      	ands	r3, r2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800544e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005452:	4b89      	ldr	r3, [pc, #548]	; (8005678 <HAL_UART_IRQHandler+0x2b4>)
 8005454:	4013      	ands	r3, r2
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8112 	beq.w	8005680 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d011      	beq.n	800548c <HAL_UART_IRQHandler+0xc8>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00b      	beq.n	800548c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2201      	movs	r2, #1
 800547a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005482:	f043 0201 	orr.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800548c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d011      	beq.n	80054bc <HAL_UART_IRQHandler+0xf8>
 8005498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00b      	beq.n	80054bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2202      	movs	r2, #2
 80054aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b2:	f043 0204 	orr.w	r2, r3, #4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d011      	beq.n	80054ec <HAL_UART_IRQHandler+0x128>
 80054c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2204      	movs	r2, #4
 80054da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e2:	f043 0202 	orr.w	r2, r3, #2
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005504:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005508:	4b5a      	ldr	r3, [pc, #360]	; (8005674 <HAL_UART_IRQHandler+0x2b0>)
 800550a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2208      	movs	r2, #8
 8005516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800551e:	f043 0208 	orr.w	r2, r3, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005530:	2b00      	cmp	r3, #0
 8005532:	d012      	beq.n	800555a <HAL_UART_IRQHandler+0x196>
 8005534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 823c 	beq.w	80059de <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d013      	beq.n	800559a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d105      	bne.n	800558a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800557e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d005      	beq.n	80055be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d04f      	beq.n	800565e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fee9 	bl	8006396 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d141      	bne.n	8005656 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3308      	adds	r3, #8
 80055d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3308      	adds	r3, #8
 80055fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800560a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1d9      	bne.n	80055d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d013      	beq.n	800564e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562a:	4a14      	ldr	r2, [pc, #80]	; (800567c <HAL_UART_IRQHandler+0x2b8>)
 800562c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005632:	4618      	mov	r0, r3
 8005634:	f7fc fce2 	bl	8001ffc <HAL_DMA_Abort_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d017      	beq.n	800566e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005648:	4610      	mov	r0, r2
 800564a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	e00f      	b.n	800566e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9da 	bl	8005a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	e00b      	b.n	800566e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9d6 	bl	8005a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	e007      	b.n	800566e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9d2 	bl	8005a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800566c:	e1b7      	b.n	80059de <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566e:	bf00      	nop
    return;
 8005670:	e1b5      	b.n	80059de <HAL_UART_IRQHandler+0x61a>
 8005672:	bf00      	nop
 8005674:	10000001 	.word	0x10000001
 8005678:	04000120 	.word	0x04000120
 800567c:	08006463 	.word	0x08006463

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005684:	2b01      	cmp	r3, #1
 8005686:	f040 814a 	bne.w	800591e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 8143 	beq.w	800591e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 813c 	beq.w	800591e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2210      	movs	r2, #16
 80056ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	f040 80b5 	bne.w	8005828 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8187 	beq.w	80059e2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056de:	429a      	cmp	r2, r3
 80056e0:	f080 817f 	bcs.w	80059e2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 8086 	bne.w	800580c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800572a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800572e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005736:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1da      	bne.n	8005700 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800575a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800576e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005772:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005776:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e1      	bne.n	800574a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3308      	adds	r3, #8
 800578c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	f023 0310 	bic.w	r3, r3, #16
 80057e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80057f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e4      	bne.n	80057cc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc fb9f 	bl	8001f4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005818:	b29b      	uxth	r3, r3
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	b29b      	uxth	r3, r3
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8fb 	bl	8005a1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005826:	e0dc      	b.n	80059e2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005834:	b29b      	uxth	r3, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80ce 	beq.w	80059e6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800584a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 80c9 	beq.w	80059e6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
 8005878:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800587c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e4      	bne.n	8005854 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3308      	adds	r3, #8
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	623b      	str	r3, [r7, #32]
   return(result);
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3308      	adds	r3, #8
 80058ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058b2:	633a      	str	r2, [r7, #48]	; 0x30
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e1      	bne.n	800588a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0310 	bic.w	r3, r3, #16
 80058ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	617b      	str	r3, [r7, #20]
   return(result);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e4      	bne.n	80058da <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f880 	bl	8005a1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800591c:	e063      	b.n	80059e6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <HAL_UART_IRQHandler+0x584>
 800592a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800593e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fdcf 	bl	80064e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005946:	e051      	b.n	80059ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005950:	2b00      	cmp	r3, #0
 8005952:	d014      	beq.n	800597e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b00      	cmp	r3, #0
 800595e:	d105      	bne.n	800596c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005970:	2b00      	cmp	r3, #0
 8005972:	d03a      	beq.n	80059ea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
    }
    return;
 800597c:	e035      	b.n	80059ea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_UART_IRQHandler+0x5da>
 800598a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fd79 	bl	800648e <UART_EndTransmit_IT>
    return;
 800599c:	e026      	b.n	80059ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <HAL_UART_IRQHandler+0x5fa>
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fda8 	bl	800650c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059bc:	e016      	b.n	80059ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_UART_IRQHandler+0x628>
 80059ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	da0c      	bge.n	80059ec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fd90 	bl	80064f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059d8:	e008      	b.n	80059ec <HAL_UART_IRQHandler+0x628>
      return;
 80059da:	bf00      	nop
 80059dc:	e006      	b.n	80059ec <HAL_UART_IRQHandler+0x628>
    return;
 80059de:	bf00      	nop
 80059e0:	e004      	b.n	80059ec <HAL_UART_IRQHandler+0x628>
      return;
 80059e2:	bf00      	nop
 80059e4:	e002      	b.n	80059ec <HAL_UART_IRQHandler+0x628>
      return;
 80059e6:	bf00      	nop
 80059e8:	e000      	b.n	80059ec <HAL_UART_IRQHandler+0x628>
    return;
 80059ea:	bf00      	nop
  }
}
 80059ec:	37e8      	adds	r7, #232	; 0xe8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop

080059f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a38:	b08c      	sub	sp, #48	; 0x30
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4baa      	ldr	r3, [pc, #680]	; (8005d0c <UART_SetConfig+0x2d8>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a9f      	ldr	r2, [pc, #636]	; (8005d10 <UART_SetConfig+0x2dc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005aaa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	f023 010f 	bic.w	r1, r3, #15
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a90      	ldr	r2, [pc, #576]	; (8005d14 <UART_SetConfig+0x2e0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d125      	bne.n	8005b24 <UART_SetConfig+0xf0>
 8005ad8:	4b8f      	ldr	r3, [pc, #572]	; (8005d18 <UART_SetConfig+0x2e4>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d81a      	bhi.n	8005b1c <UART_SetConfig+0xe8>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <UART_SetConfig+0xb8>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	08005b05 	.word	0x08005b05
 8005af8:	08005b15 	.word	0x08005b15
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b02:	e116      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b04:	2302      	movs	r3, #2
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e112      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e10e      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b14:	2308      	movs	r3, #8
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e10a      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b22:	e106      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a7c      	ldr	r2, [pc, #496]	; (8005d1c <UART_SetConfig+0x2e8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d138      	bne.n	8005ba0 <UART_SetConfig+0x16c>
 8005b2e:	4b7a      	ldr	r3, [pc, #488]	; (8005d18 <UART_SetConfig+0x2e4>)
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b34:	f003 030c 	and.w	r3, r3, #12
 8005b38:	2b0c      	cmp	r3, #12
 8005b3a:	d82d      	bhi.n	8005b98 <UART_SetConfig+0x164>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <UART_SetConfig+0x110>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b79 	.word	0x08005b79
 8005b48:	08005b99 	.word	0x08005b99
 8005b4c:	08005b99 	.word	0x08005b99
 8005b50:	08005b99 	.word	0x08005b99
 8005b54:	08005b89 	.word	0x08005b89
 8005b58:	08005b99 	.word	0x08005b99
 8005b5c:	08005b99 	.word	0x08005b99
 8005b60:	08005b99 	.word	0x08005b99
 8005b64:	08005b81 	.word	0x08005b81
 8005b68:	08005b99 	.word	0x08005b99
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7e:	e0d8      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b80:	2302      	movs	r3, #2
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b86:	e0d4      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8e:	e0d0      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b96:	e0cc      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9e:	e0c8      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a5e      	ldr	r2, [pc, #376]	; (8005d20 <UART_SetConfig+0x2ec>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d125      	bne.n	8005bf6 <UART_SetConfig+0x1c2>
 8005baa:	4b5b      	ldr	r3, [pc, #364]	; (8005d18 <UART_SetConfig+0x2e4>)
 8005bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bb4:	2b30      	cmp	r3, #48	; 0x30
 8005bb6:	d016      	beq.n	8005be6 <UART_SetConfig+0x1b2>
 8005bb8:	2b30      	cmp	r3, #48	; 0x30
 8005bba:	d818      	bhi.n	8005bee <UART_SetConfig+0x1ba>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d00a      	beq.n	8005bd6 <UART_SetConfig+0x1a2>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d814      	bhi.n	8005bee <UART_SetConfig+0x1ba>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <UART_SetConfig+0x19a>
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d008      	beq.n	8005bde <UART_SetConfig+0x1aa>
 8005bcc:	e00f      	b.n	8005bee <UART_SetConfig+0x1ba>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd4:	e0ad      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bdc:	e0a9      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005bde:	2304      	movs	r3, #4
 8005be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be4:	e0a5      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005be6:	2308      	movs	r3, #8
 8005be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bec:	e0a1      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005bee:	2310      	movs	r3, #16
 8005bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf4:	e09d      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a4a      	ldr	r2, [pc, #296]	; (8005d24 <UART_SetConfig+0x2f0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d125      	bne.n	8005c4c <UART_SetConfig+0x218>
 8005c00:	4b45      	ldr	r3, [pc, #276]	; (8005d18 <UART_SetConfig+0x2e4>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c0c:	d016      	beq.n	8005c3c <UART_SetConfig+0x208>
 8005c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c10:	d818      	bhi.n	8005c44 <UART_SetConfig+0x210>
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d00a      	beq.n	8005c2c <UART_SetConfig+0x1f8>
 8005c16:	2b80      	cmp	r3, #128	; 0x80
 8005c18:	d814      	bhi.n	8005c44 <UART_SetConfig+0x210>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <UART_SetConfig+0x1f0>
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d008      	beq.n	8005c34 <UART_SetConfig+0x200>
 8005c22:	e00f      	b.n	8005c44 <UART_SetConfig+0x210>
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2a:	e082      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c32:	e07e      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005c34:	2304      	movs	r3, #4
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	e07a      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005c3c:	2308      	movs	r3, #8
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c42:	e076      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005c44:	2310      	movs	r3, #16
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c4a:	e072      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a35      	ldr	r2, [pc, #212]	; (8005d28 <UART_SetConfig+0x2f4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d12a      	bne.n	8005cac <UART_SetConfig+0x278>
 8005c56:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <UART_SetConfig+0x2e4>)
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c64:	d01a      	beq.n	8005c9c <UART_SetConfig+0x268>
 8005c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6a:	d81b      	bhi.n	8005ca4 <UART_SetConfig+0x270>
 8005c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c70:	d00c      	beq.n	8005c8c <UART_SetConfig+0x258>
 8005c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c76:	d815      	bhi.n	8005ca4 <UART_SetConfig+0x270>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <UART_SetConfig+0x250>
 8005c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c80:	d008      	beq.n	8005c94 <UART_SetConfig+0x260>
 8005c82:	e00f      	b.n	8005ca4 <UART_SetConfig+0x270>
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	e052      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c92:	e04e      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e04a      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e046      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005caa:	e042      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <UART_SetConfig+0x2dc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d13a      	bne.n	8005d2c <UART_SetConfig+0x2f8>
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <UART_SetConfig+0x2e4>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc4:	d01a      	beq.n	8005cfc <UART_SetConfig+0x2c8>
 8005cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cca:	d81b      	bhi.n	8005d04 <UART_SetConfig+0x2d0>
 8005ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd0:	d00c      	beq.n	8005cec <UART_SetConfig+0x2b8>
 8005cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd6:	d815      	bhi.n	8005d04 <UART_SetConfig+0x2d0>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <UART_SetConfig+0x2b0>
 8005cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce0:	d008      	beq.n	8005cf4 <UART_SetConfig+0x2c0>
 8005ce2:	e00f      	b.n	8005d04 <UART_SetConfig+0x2d0>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cea:	e022      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005cec:	2302      	movs	r3, #2
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	e01e      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e01a      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d02:	e016      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005d04:	2310      	movs	r3, #16
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0a:	e012      	b.n	8005d32 <UART_SetConfig+0x2fe>
 8005d0c:	cfff69f3 	.word	0xcfff69f3
 8005d10:	40008000 	.word	0x40008000
 8005d14:	40013800 	.word	0x40013800
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40004400 	.word	0x40004400
 8005d20:	40004800 	.word	0x40004800
 8005d24:	40004c00 	.word	0x40004c00
 8005d28:	40005000 	.word	0x40005000
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4aae      	ldr	r2, [pc, #696]	; (8005ff0 <UART_SetConfig+0x5bc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	f040 8097 	bne.w	8005e6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d823      	bhi.n	8005d8e <UART_SetConfig+0x35a>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x318>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d8f 	.word	0x08005d8f
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005d7f 	.word	0x08005d7f
 8005d60:	08005d8f 	.word	0x08005d8f
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d8f 	.word	0x08005d8f
 8005d6c:	08005d87 	.word	0x08005d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7fd f8c4 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d76:	e010      	b.n	8005d9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d78:	4b9e      	ldr	r3, [pc, #632]	; (8005ff4 <UART_SetConfig+0x5c0>)
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d7c:	e00d      	b.n	8005d9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7e:	f7fd f84f 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d84:	e009      	b.n	8005d9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d8c:	e005      	b.n	8005d9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8130 	beq.w	8006002 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	4a94      	ldr	r2, [pc, #592]	; (8005ff8 <UART_SetConfig+0x5c4>)
 8005da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dac:	461a      	mov	r2, r3
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	4413      	add	r3, r2
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d305      	bcc.n	8005dd2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d903      	bls.n	8005dda <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dd8:	e113      	b.n	8006002 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	2200      	movs	r2, #0
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	60fa      	str	r2, [r7, #12]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	4a84      	ldr	r2, [pc, #528]	; (8005ff8 <UART_SetConfig+0x5c4>)
 8005de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2200      	movs	r2, #0
 8005df0:	603b      	str	r3, [r7, #0]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005dfc:	f7fa fe4e 	bl	8000a9c <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4610      	mov	r0, r2
 8005e06:	4619      	mov	r1, r3
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	020b      	lsls	r3, r1, #8
 8005e12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e16:	0202      	lsls	r2, r0, #8
 8005e18:	6979      	ldr	r1, [r7, #20]
 8005e1a:	6849      	ldr	r1, [r1, #4]
 8005e1c:	0849      	lsrs	r1, r1, #1
 8005e1e:	2000      	movs	r0, #0
 8005e20:	460c      	mov	r4, r1
 8005e22:	4605      	mov	r5, r0
 8005e24:	eb12 0804 	adds.w	r8, r2, r4
 8005e28:	eb43 0905 	adc.w	r9, r3, r5
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	469a      	mov	sl, r3
 8005e34:	4693      	mov	fp, r2
 8005e36:	4652      	mov	r2, sl
 8005e38:	465b      	mov	r3, fp
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	f7fa fe2d 	bl	8000a9c <__aeabi_uldivmod>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4613      	mov	r3, r2
 8005e48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e50:	d308      	bcc.n	8005e64 <UART_SetConfig+0x430>
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e58:	d204      	bcs.n	8005e64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a3a      	ldr	r2, [r7, #32]
 8005e60:	60da      	str	r2, [r3, #12]
 8005e62:	e0ce      	b.n	8006002 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e6a:	e0ca      	b.n	8006002 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e74:	d166      	bne.n	8005f44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d827      	bhi.n	8005ece <UART_SetConfig+0x49a>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0x450>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005eb1 	.word	0x08005eb1
 8005e8c:	08005eb9 	.word	0x08005eb9
 8005e90:	08005ecf 	.word	0x08005ecf
 8005e94:	08005ebf 	.word	0x08005ebf
 8005e98:	08005ecf 	.word	0x08005ecf
 8005e9c:	08005ecf 	.word	0x08005ecf
 8005ea0:	08005ecf 	.word	0x08005ecf
 8005ea4:	08005ec7 	.word	0x08005ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea8:	f7fd f828 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8005eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eae:	e014      	b.n	8005eda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eb0:	f7fd f83a 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8005eb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eb6:	e010      	b.n	8005eda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb8:	4b4e      	ldr	r3, [pc, #312]	; (8005ff4 <UART_SetConfig+0x5c0>)
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ebc:	e00d      	b.n	8005eda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ebe:	f7fc ffaf 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8005ec2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ec4:	e009      	b.n	8005eda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ecc:	e005      	b.n	8005eda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8090 	beq.w	8006002 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	4a44      	ldr	r2, [pc, #272]	; (8005ff8 <UART_SetConfig+0x5c4>)
 8005ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eec:	461a      	mov	r2, r3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef4:	005a      	lsls	r2, r3, #1
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	441a      	add	r2, r3
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b0f      	cmp	r3, #15
 8005f0c:	d916      	bls.n	8005f3c <UART_SetConfig+0x508>
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f14:	d212      	bcs.n	8005f3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f023 030f 	bic.w	r3, r3, #15
 8005f1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	8bfb      	ldrh	r3, [r7, #30]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	8bfa      	ldrh	r2, [r7, #30]
 8005f38:	60da      	str	r2, [r3, #12]
 8005f3a:	e062      	b.n	8006002 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f42:	e05e      	b.n	8006002 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d828      	bhi.n	8005f9e <UART_SetConfig+0x56a>
 8005f4c:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <UART_SetConfig+0x520>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f81 	.word	0x08005f81
 8005f5c:	08005f89 	.word	0x08005f89
 8005f60:	08005f9f 	.word	0x08005f9f
 8005f64:	08005f8f 	.word	0x08005f8f
 8005f68:	08005f9f 	.word	0x08005f9f
 8005f6c:	08005f9f 	.word	0x08005f9f
 8005f70:	08005f9f 	.word	0x08005f9f
 8005f74:	08005f97 	.word	0x08005f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7fc ffc0 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8005f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f7e:	e014      	b.n	8005faa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f80:	f7fc ffd2 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8005f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f86:	e010      	b.n	8005faa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f88:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <UART_SetConfig+0x5c0>)
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f8c:	e00d      	b.n	8005faa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8e:	f7fc ff47 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8005f92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f94:	e009      	b.n	8005faa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f9c:	e005      	b.n	8005faa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fa8:	bf00      	nop
    }

    if (pclk != 0U)
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d028      	beq.n	8006002 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	4a10      	ldr	r2, [pc, #64]	; (8005ff8 <UART_SetConfig+0x5c4>)
 8005fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	441a      	add	r2, r3
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d910      	bls.n	8005ffc <UART_SetConfig+0x5c8>
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d20c      	bcs.n	8005ffc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60da      	str	r2, [r3, #12]
 8005fec:	e009      	b.n	8006002 <UART_SetConfig+0x5ce>
 8005fee:	bf00      	nop
 8005ff0:	40008000 	.word	0x40008000
 8005ff4:	00f42400 	.word	0x00f42400
 8005ff8:	0800a848 	.word	0x0800a848
      }
      else
      {
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2201      	movs	r2, #1
 8006006:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2201      	movs	r2, #1
 800600e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800601e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006022:	4618      	mov	r0, r3
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800602c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01a      	beq.n	8006142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800612a:	d10a      	bne.n	8006142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006180:	f7fb fdc8 	bl	8001d14 <HAL_GetTick>
 8006184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b08      	cmp	r3, #8
 8006192:	d10e      	bne.n	80061b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f82f 	bl	8006206 <UART_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e025      	b.n	80061fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d10e      	bne.n	80061de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f819 	bl	8006206 <UART_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e00f      	b.n	80061fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b09c      	sub	sp, #112	; 0x70
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006216:	e0a9      	b.n	800636c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	f000 80a5 	beq.w	800636c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006222:	f7fb fd77 	bl	8001d14 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800622e:	429a      	cmp	r2, r3
 8006230:	d302      	bcc.n	8006238 <UART_WaitOnFlagUntilTimeout+0x32>
 8006232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006234:	2b00      	cmp	r3, #0
 8006236:	d140      	bne.n	80062ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006248:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800624c:	667b      	str	r3, [r7, #100]	; 0x64
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006258:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800625c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e6      	bne.n	8006238 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	663b      	str	r3, [r7, #96]	; 0x60
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800628a:	64ba      	str	r2, [r7, #72]	; 0x48
 800628c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e5      	bne.n	800626a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e069      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d051      	beq.n	800636c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d6:	d149      	bne.n	800636c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
 8006302:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e6      	bne.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	613b      	str	r3, [r7, #16]
   return(result);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	66bb      	str	r3, [r7, #104]	; 0x68
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006334:	623a      	str	r2, [r7, #32]
 8006336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	69f9      	ldr	r1, [r7, #28]
 800633a:	6a3a      	ldr	r2, [r7, #32]
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	61bb      	str	r3, [r7, #24]
   return(result);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e010      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4013      	ands	r3, r2
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	429a      	cmp	r2, r3
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	429a      	cmp	r2, r3
 8006388:	f43f af46 	beq.w	8006218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3770      	adds	r7, #112	; 0x70
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006396:	b480      	push	{r7}
 8006398:	b095      	sub	sp, #84	; 0x54
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063bc:	643b      	str	r3, [r7, #64]	; 0x40
 80063be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e6      	bne.n	800639e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3308      	adds	r3, #8
 80063d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e3      	bne.n	80063d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d118      	bne.n	8006442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	60bb      	str	r3, [r7, #8]
   return(result);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f023 0310 	bic.w	r3, r3, #16
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	613b      	str	r3, [r7, #16]
   return(result);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e6      	bne.n	8006410 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006456:	bf00      	nop
 8006458:	3754      	adds	r7, #84	; 0x54
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff fac1 	bl	8005a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b088      	sub	sp, #32
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6979      	ldr	r1, [r7, #20]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	613b      	str	r3, [r7, #16]
   return(result);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e6      	bne.n	8006496 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fa8c 	bl	80059f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064dc:	bf00      	nop
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_UARTEx_DisableFifoMode+0x16>
 8006532:	2302      	movs	r3, #2
 8006534:	e027      	b.n	8006586 <HAL_UARTEx_DisableFifoMode+0x66>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2224      	movs	r2, #36	; 0x24
 8006542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0201 	bic.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006564:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e02d      	b.n	8006606 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2224      	movs	r2, #36	; 0x24
 80065b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0201 	bic.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f850 	bl	800668c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006622:	2302      	movs	r3, #2
 8006624:	e02d      	b.n	8006682 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2224      	movs	r2, #36	; 0x24
 8006632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f812 	bl	800668c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006698:	2b00      	cmp	r3, #0
 800669a:	d108      	bne.n	80066ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066ac:	e031      	b.n	8006712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066ae:	2308      	movs	r3, #8
 80066b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066b2:	2308      	movs	r3, #8
 80066b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	0e5b      	lsrs	r3, r3, #25
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	0f5b      	lsrs	r3, r3, #29
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	7b3a      	ldrb	r2, [r7, #12]
 80066da:	4911      	ldr	r1, [pc, #68]	; (8006720 <UARTEx_SetNbDataToProcess+0x94>)
 80066dc:	5c8a      	ldrb	r2, [r1, r2]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066e2:	7b3a      	ldrb	r2, [r7, #12]
 80066e4:	490f      	ldr	r1, [pc, #60]	; (8006724 <UARTEx_SetNbDataToProcess+0x98>)
 80066e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	7b7a      	ldrb	r2, [r7, #13]
 80066f8:	4909      	ldr	r1, [pc, #36]	; (8006720 <UARTEx_SetNbDataToProcess+0x94>)
 80066fa:	5c8a      	ldrb	r2, [r1, r2]
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006700:	7b7a      	ldrb	r2, [r7, #13]
 8006702:	4908      	ldr	r1, [pc, #32]	; (8006724 <UARTEx_SetNbDataToProcess+0x98>)
 8006704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006706:	fb93 f3f2 	sdiv	r3, r3, r2
 800670a:	b29a      	uxth	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	0800a860 	.word	0x0800a860
 8006724:	0800a868 	.word	0x0800a868

08006728 <__NVIC_SetPriority>:
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	6039      	str	r1, [r7, #0]
 8006732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006738:	2b00      	cmp	r3, #0
 800673a:	db0a      	blt.n	8006752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	b2da      	uxtb	r2, r3
 8006740:	490c      	ldr	r1, [pc, #48]	; (8006774 <__NVIC_SetPriority+0x4c>)
 8006742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006746:	0112      	lsls	r2, r2, #4
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	440b      	add	r3, r1
 800674c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006750:	e00a      	b.n	8006768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	4908      	ldr	r1, [pc, #32]	; (8006778 <__NVIC_SetPriority+0x50>)
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	3b04      	subs	r3, #4
 8006760:	0112      	lsls	r2, r2, #4
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	440b      	add	r3, r1
 8006766:	761a      	strb	r2, [r3, #24]
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	e000e100 	.word	0xe000e100
 8006778:	e000ed00 	.word	0xe000ed00

0800677c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006780:	2100      	movs	r1, #0
 8006782:	f06f 0004 	mvn.w	r0, #4
 8006786:	f7ff ffcf 	bl	8006728 <__NVIC_SetPriority>
#endif
}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006796:	f3ef 8305 	mrs	r3, IPSR
 800679a:	603b      	str	r3, [r7, #0]
  return(result);
 800679c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80067a2:	f06f 0305 	mvn.w	r3, #5
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	e00c      	b.n	80067c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <osKernelInitialize+0x44>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d105      	bne.n	80067be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067b2:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <osKernelInitialize+0x44>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	e002      	b.n	80067c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295
 80067c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067c4:	687b      	ldr	r3, [r7, #4]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	200002b4 	.word	0x200002b4

080067d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067de:	f3ef 8305 	mrs	r3, IPSR
 80067e2:	603b      	str	r3, [r7, #0]
  return(result);
 80067e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80067ea:	f06f 0305 	mvn.w	r3, #5
 80067ee:	607b      	str	r3, [r7, #4]
 80067f0:	e010      	b.n	8006814 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067f2:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <osKernelStart+0x48>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d109      	bne.n	800680e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067fa:	f7ff ffbf 	bl	800677c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067fe:	4b08      	ldr	r3, [pc, #32]	; (8006820 <osKernelStart+0x48>)
 8006800:	2202      	movs	r2, #2
 8006802:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006804:	f001 fcbc 	bl	8008180 <vTaskStartScheduler>
      stat = osOK;
 8006808:	2300      	movs	r3, #0
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	e002      	b.n	8006814 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800680e:	f04f 33ff 	mov.w	r3, #4294967295
 8006812:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006814:	687b      	ldr	r3, [r7, #4]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200002b4 	.word	0x200002b4

08006824 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b08e      	sub	sp, #56	; 0x38
 8006828:	af04      	add	r7, sp, #16
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006834:	f3ef 8305 	mrs	r3, IPSR
 8006838:	617b      	str	r3, [r7, #20]
  return(result);
 800683a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800683c:	2b00      	cmp	r3, #0
 800683e:	d17e      	bne.n	800693e <osThreadNew+0x11a>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d07b      	beq.n	800693e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006846:	2380      	movs	r3, #128	; 0x80
 8006848:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800684a:	2318      	movs	r3, #24
 800684c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d045      	beq.n	80068ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <osThreadNew+0x48>
        name = attr->name;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <osThreadNew+0x6e>
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2b38      	cmp	r3, #56	; 0x38
 8006884:	d805      	bhi.n	8006892 <osThreadNew+0x6e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <osThreadNew+0x72>
        return (NULL);
 8006892:	2300      	movs	r3, #0
 8006894:	e054      	b.n	8006940 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	089b      	lsrs	r3, r3, #2
 80068a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00e      	beq.n	80068cc <osThreadNew+0xa8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2bbb      	cmp	r3, #187	; 0xbb
 80068b4:	d90a      	bls.n	80068cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d006      	beq.n	80068cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <osThreadNew+0xa8>
        mem = 1;
 80068c6:	2301      	movs	r3, #1
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	e010      	b.n	80068ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10c      	bne.n	80068ee <osThreadNew+0xca>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d108      	bne.n	80068ee <osThreadNew+0xca>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <osThreadNew+0xca>
          mem = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e001      	b.n	80068ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d110      	bne.n	8006916 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068fc:	9202      	str	r2, [sp, #8]
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6a3a      	ldr	r2, [r7, #32]
 8006908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f001 fa4c 	bl	8007da8 <xTaskCreateStatic>
 8006910:	4603      	mov	r3, r0
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	e013      	b.n	800693e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d110      	bne.n	800693e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	b29a      	uxth	r2, r3
 8006920:	f107 0310 	add.w	r3, r7, #16
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f001 fa97 	bl	8007e62 <xTaskCreate>
 8006934:	4603      	mov	r3, r0
 8006936:	2b01      	cmp	r3, #1
 8006938:	d001      	beq.n	800693e <osThreadNew+0x11a>
            hTask = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800693e:	693b      	ldr	r3, [r7, #16]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3728      	adds	r7, #40	; 0x28
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006950:	f3ef 8305 	mrs	r3, IPSR
 8006954:	60bb      	str	r3, [r7, #8]
  return(result);
 8006956:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <osDelay+0x1c>
    stat = osErrorISR;
 800695c:	f06f 0305 	mvn.w	r3, #5
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e007      	b.n	8006974 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <osDelay+0x2c>
      vTaskDelay(ticks);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fbd2 	bl	8008118 <vTaskDelay>
    }
  }

  return (stat);
 8006974:	68fb      	ldr	r3, [r7, #12]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800697e:	b580      	push	{r7, lr}
 8006980:	b08a      	sub	sp, #40	; 0x28
 8006982:	af02      	add	r7, sp, #8
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800698e:	f3ef 8305 	mrs	r3, IPSR
 8006992:	613b      	str	r3, [r7, #16]
  return(result);
 8006994:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006996:	2b00      	cmp	r3, #0
 8006998:	d175      	bne.n	8006a86 <osSemaphoreNew+0x108>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d072      	beq.n	8006a86 <osSemaphoreNew+0x108>
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d86e      	bhi.n	8006a86 <osSemaphoreNew+0x108>
    mem = -1;
 80069a8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d015      	beq.n	80069e0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <osSemaphoreNew+0x4c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2b4f      	cmp	r3, #79	; 0x4f
 80069c2:	d902      	bls.n	80069ca <osSemaphoreNew+0x4c>
        mem = 1;
 80069c4:	2301      	movs	r3, #1
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	e00c      	b.n	80069e4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d108      	bne.n	80069e4 <osSemaphoreNew+0x66>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <osSemaphoreNew+0x66>
          mem = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	e001      	b.n	80069e4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d04c      	beq.n	8006a86 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d128      	bne.n	8006a44 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d10a      	bne.n	8006a0e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2203      	movs	r2, #3
 80069fe:	9200      	str	r2, [sp, #0]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2100      	movs	r1, #0
 8006a04:	2001      	movs	r0, #1
 8006a06:	f000 fa29 	bl	8006e5c <xQueueGenericCreateStatic>
 8006a0a:	61f8      	str	r0, [r7, #28]
 8006a0c:	e005      	b.n	8006a1a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006a0e:	2203      	movs	r2, #3
 8006a10:	2100      	movs	r1, #0
 8006a12:	2001      	movs	r0, #1
 8006a14:	f000 fa9a 	bl	8006f4c <xQueueGenericCreate>
 8006a18:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d022      	beq.n	8006a66 <osSemaphoreNew+0xe8>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01f      	beq.n	8006a66 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a26:	2300      	movs	r3, #0
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	69f8      	ldr	r0, [r7, #28]
 8006a2e:	f000 fb55 	bl	80070dc <xQueueGenericSend>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d016      	beq.n	8006a66 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006a38:	69f8      	ldr	r0, [r7, #28]
 8006a3a:	f000 ffe1 	bl	8007a00 <vQueueDelete>
            hSemaphore = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	e010      	b.n	8006a66 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d108      	bne.n	8006a5c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fad7 	bl	8007006 <xQueueCreateCountingSemaphoreStatic>
 8006a58:	61f8      	str	r0, [r7, #28]
 8006a5a:	e004      	b.n	8006a66 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 fb08 	bl	8007074 <xQueueCreateCountingSemaphore>
 8006a64:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00c      	beq.n	8006a86 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <osSemaphoreNew+0xfc>
          name = attr->name;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	e001      	b.n	8006a7e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006a7e:	6979      	ldr	r1, [r7, #20]
 8006a80:	69f8      	ldr	r0, [r7, #28]
 8006a82:	f001 f909 	bl	8007c98 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006a86:	69fb      	ldr	r3, [r7, #28]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006aa8:	f06f 0303 	mvn.w	r3, #3
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	e039      	b.n	8006b24 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ab0:	f3ef 8305 	mrs	r3, IPSR
 8006ab4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d022      	beq.n	8006b02 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006ac2:	f06f 0303 	mvn.w	r3, #3
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e02c      	b.n	8006b24 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006ace:	f107 0308 	add.w	r3, r7, #8
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	6938      	ldr	r0, [r7, #16]
 8006ad8:	f000 ff12 	bl	8007900 <xQueueReceiveFromISR>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d003      	beq.n	8006aea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006ae2:	f06f 0302 	mvn.w	r3, #2
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e01c      	b.n	8006b24 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d019      	beq.n	8006b24 <osSemaphoreAcquire+0x94>
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <osSemaphoreAcquire+0xa0>)
 8006af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	e010      	b.n	8006b24 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6938      	ldr	r0, [r7, #16]
 8006b06:	f000 fdef 	bl	80076e8 <xQueueSemaphoreTake>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d009      	beq.n	8006b24 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006b16:	f06f 0301 	mvn.w	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e002      	b.n	8006b24 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006b1e:	f06f 0302 	mvn.w	r3, #2
 8006b22:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b24:	697b      	ldr	r3, [r7, #20]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006b4a:	f06f 0303 	mvn.w	r3, #3
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e02c      	b.n	8006bac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b52:	f3ef 8305 	mrs	r3, IPSR
 8006b56:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b58:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d01a      	beq.n	8006b94 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b62:	f107 0308 	add.w	r3, r7, #8
 8006b66:	4619      	mov	r1, r3
 8006b68:	6938      	ldr	r0, [r7, #16]
 8006b6a:	f000 fc50 	bl	800740e <xQueueGiveFromISR>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d003      	beq.n	8006b7c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006b74:	f06f 0302 	mvn.w	r3, #2
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e017      	b.n	8006bac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d014      	beq.n	8006bac <osSemaphoreRelease+0x78>
 8006b82:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <osSemaphoreRelease+0x84>)
 8006b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	e00b      	b.n	8006bac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b94:	2300      	movs	r3, #0
 8006b96:	2200      	movs	r2, #0
 8006b98:	2100      	movs	r1, #0
 8006b9a:	6938      	ldr	r0, [r7, #16]
 8006b9c:	f000 fa9e 	bl	80070dc <xQueueGenericSend>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d002      	beq.n	8006bac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006ba6:	f06f 0302 	mvn.w	r3, #2
 8006baa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006bac:	697b      	ldr	r3, [r7, #20]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a07      	ldr	r2, [pc, #28]	; (8006be8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006bcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a06      	ldr	r2, [pc, #24]	; (8006bec <vApplicationGetIdleTaskMemory+0x30>)
 8006bd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2280      	movs	r2, #128	; 0x80
 8006bd8:	601a      	str	r2, [r3, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	200002b8 	.word	0x200002b8
 8006bec:	20000374 	.word	0x20000374

08006bf0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a07      	ldr	r2, [pc, #28]	; (8006c1c <vApplicationGetTimerTaskMemory+0x2c>)
 8006c00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	4a06      	ldr	r2, [pc, #24]	; (8006c20 <vApplicationGetTimerTaskMemory+0x30>)
 8006c06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000574 	.word	0x20000574
 8006c20:	20000630 	.word	0x20000630

08006c24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f103 0208 	add.w	r2, r3, #8
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f103 0208 	add.w	r2, r3, #8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f103 0208 	add.w	r2, r3, #8
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	601a      	str	r2, [r3, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d103      	bne.n	8006ce6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e00c      	b.n	8006d00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e002      	b.n	8006cf4 <vListInsert+0x2e>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d2f6      	bcs.n	8006cee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	601a      	str	r2, [r3, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6892      	ldr	r2, [r2, #8]
 8006d4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6852      	ldr	r2, [r2, #4]
 8006d58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d103      	bne.n	8006d6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	1e5a      	subs	r2, r3, #1
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006db6:	f002 fc95 	bl	80096e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dc6:	fb01 f303 	mul.w	r3, r1, r3
 8006dca:	441a      	add	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	3b01      	subs	r3, #1
 8006de8:	68f9      	ldr	r1, [r7, #12]
 8006dea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	441a      	add	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	22ff      	movs	r2, #255	; 0xff
 8006dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	22ff      	movs	r2, #255	; 0xff
 8006e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d114      	bne.n	8006e36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01a      	beq.n	8006e4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3310      	adds	r3, #16
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 fc4b 	bl	80086b4 <xTaskRemoveFromEventList>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d012      	beq.n	8006e4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <xQueueGenericReset+0xcc>)
 8006e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	e009      	b.n	8006e4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3310      	adds	r3, #16
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fef2 	bl	8006c24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3324      	adds	r3, #36	; 0x24
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff feed 	bl	8006c24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e4a:	f002 fc7b 	bl	8009744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e4e:	2301      	movs	r3, #1
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08e      	sub	sp, #56	; 0x38
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <xQueueGenericCreateStatic+0x52>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <xQueueGenericCreateStatic+0x56>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <xQueueGenericCreateStatic+0x58>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	623b      	str	r3, [r7, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <xQueueGenericCreateStatic+0x7e>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <xQueueGenericCreateStatic+0x82>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <xQueueGenericCreateStatic+0x84>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	61fb      	str	r3, [r7, #28]
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006efa:	2350      	movs	r3, #80	; 0x50
 8006efc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b50      	cmp	r3, #80	; 0x50
 8006f02:	d00a      	beq.n	8006f1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	61bb      	str	r3, [r7, #24]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00d      	beq.n	8006f42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	4613      	mov	r3, r2
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f83f 	bl	8006fc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3730      	adds	r7, #48	; 0x30
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08a      	sub	sp, #40	; 0x28
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	613b      	str	r3, [r7, #16]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	3350      	adds	r3, #80	; 0x50
 8006f84:	4618      	mov	r0, r3
 8006f86:	f002 fccf 	bl	8009928 <pvPortMalloc>
 8006f8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d011      	beq.n	8006fb6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	3350      	adds	r3, #80	; 0x50
 8006f9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fa4:	79fa      	ldrb	r2, [r7, #7]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4613      	mov	r3, r2
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f805 	bl	8006fc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
	}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3720      	adds	r7, #32
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d103      	bne.n	8006fdc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fee:	2101      	movs	r1, #1
 8006ff0:	69b8      	ldr	r0, [r7, #24]
 8006ff2:	f7ff fecb 	bl	8006d8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007006:	b580      	push	{r7, lr}
 8007008:	b08a      	sub	sp, #40	; 0x28
 800700a:	af02      	add	r7, sp, #8
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	61bb      	str	r3, [r7, #24]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	429a      	cmp	r2, r3
 8007034:	d90a      	bls.n	800704c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	617b      	str	r3, [r7, #20]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800704c:	2302      	movs	r3, #2
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	2100      	movs	r1, #0
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff ff00 	bl	8006e5c <xQueueGenericCreateStatic>
 800705c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800706a:	69fb      	ldr	r3, [r7, #28]
	}
 800706c:	4618      	mov	r0, r3
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	613b      	str	r3, [r7, #16]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d90a      	bls.n	80070b8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60fb      	str	r3, [r7, #12]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070b8:	2202      	movs	r2, #2
 80070ba:	2100      	movs	r1, #0
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff ff45 	bl	8006f4c <xQueueGenericCreate>
 80070c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070d0:	697b      	ldr	r3, [r7, #20]
	}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08e      	sub	sp, #56	; 0x38
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070ea:	2300      	movs	r3, #0
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <xQueueGenericSend+0x32>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d103      	bne.n	800711c <xQueueGenericSend+0x40>
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <xQueueGenericSend+0x44>
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <xQueueGenericSend+0x46>
 8007120:	2300      	movs	r3, #0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <xQueueGenericSend+0x60>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d103      	bne.n	800714a <xQueueGenericSend+0x6e>
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007146:	2b01      	cmp	r3, #1
 8007148:	d101      	bne.n	800714e <xQueueGenericSend+0x72>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <xQueueGenericSend+0x74>
 800714e:	2300      	movs	r3, #0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <xQueueGenericSend+0x8e>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	623b      	str	r3, [r7, #32]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800716a:	f001 fc65 	bl	8008a38 <xTaskGetSchedulerState>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <xQueueGenericSend+0x9e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <xQueueGenericSend+0xa2>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <xQueueGenericSend+0xa4>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <xQueueGenericSend+0xbe>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	61fb      	str	r3, [r7, #28]
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800719a:	f002 faa3 	bl	80096e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d302      	bcc.n	80071b0 <xQueueGenericSend+0xd4>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d129      	bne.n	8007204 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b6:	f000 fc5e 	bl	8007a76 <prvCopyDataToQueue>
 80071ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d010      	beq.n	80071e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	3324      	adds	r3, #36	; 0x24
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 fa73 	bl	80086b4 <xTaskRemoveFromEventList>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d013      	beq.n	80071fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071d4:	4b3f      	ldr	r3, [pc, #252]	; (80072d4 <xQueueGenericSend+0x1f8>)
 80071d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	e00a      	b.n	80071fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071ec:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <xQueueGenericSend+0x1f8>)
 80071ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071fc:	f002 faa2 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 8007200:	2301      	movs	r3, #1
 8007202:	e063      	b.n	80072cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800720a:	f002 fa9b 	bl	8009744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800720e:	2300      	movs	r3, #0
 8007210:	e05c      	b.n	80072cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	4618      	mov	r0, r3
 800721e:	f001 faad 	bl	800877c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007226:	f002 fa8d 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800722a:	f001 f819 	bl	8008260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800722e:	f002 fa59 	bl	80096e4 <vPortEnterCritical>
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007238:	b25b      	sxtb	r3, r3
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d103      	bne.n	8007248 <xQueueGenericSend+0x16c>
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800724e:	b25b      	sxtb	r3, r3
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d103      	bne.n	800725e <xQueueGenericSend+0x182>
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800725e:	f002 fa71 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007262:	1d3a      	adds	r2, r7, #4
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f001 fa9c 	bl	80087a8 <xTaskCheckForTimeOut>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d124      	bne.n	80072c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007278:	f000 fcf5 	bl	8007c66 <prvIsQueueFull>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d018      	beq.n	80072b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	3310      	adds	r3, #16
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f001 f9c2 	bl	8008614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007292:	f000 fc80 	bl	8007b96 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007296:	f000 fff1 	bl	800827c <xTaskResumeAll>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	f47f af7c 	bne.w	800719a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80072a2:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <xQueueGenericSend+0x1f8>)
 80072a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	e772      	b.n	800719a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b6:	f000 fc6e 	bl	8007b96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072ba:	f000 ffdf 	bl	800827c <xTaskResumeAll>
 80072be:	e76c      	b.n	800719a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072c2:	f000 fc68 	bl	8007b96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c6:	f000 ffd9 	bl	800827c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3738      	adds	r7, #56	; 0x38
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b090      	sub	sp, #64	; 0x40
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d103      	bne.n	8007314 <xQueueGenericSendFromISR+0x3c>
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <xQueueGenericSendFromISR+0x40>
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <xQueueGenericSendFromISR+0x42>
 8007318:	2300      	movs	r3, #0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d103      	bne.n	8007342 <xQueueGenericSendFromISR+0x6a>
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <xQueueGenericSendFromISR+0x6e>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <xQueueGenericSendFromISR+0x70>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	623b      	str	r3, [r7, #32]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007362:	f002 faa1 	bl	80098a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007366:	f3ef 8211 	mrs	r2, BASEPRI
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	61fa      	str	r2, [r7, #28]
 800737c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800737e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738a:	429a      	cmp	r2, r3
 800738c:	d302      	bcc.n	8007394 <xQueueGenericSendFromISR+0xbc>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d12f      	bne.n	80073f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800739a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073aa:	f000 fb64 	bl	8007a76 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d112      	bne.n	80073de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d016      	beq.n	80073ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	3324      	adds	r3, #36	; 0x24
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 f975 	bl	80086b4 <xTaskRemoveFromEventList>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00e      	beq.n	80073ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e007      	b.n	80073ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073e2:	3301      	adds	r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	b25a      	sxtb	r2, r3
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073ee:	2301      	movs	r3, #1
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80073f2:	e001      	b.n	80073f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007402:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007406:	4618      	mov	r0, r3
 8007408:	3740      	adds	r7, #64	; 0x40
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b08e      	sub	sp, #56	; 0x38
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10a      	bne.n	8007438 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	623b      	str	r3, [r7, #32]
}
 8007434:	bf00      	nop
 8007436:	e7fe      	b.n	8007436 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	61fb      	str	r3, [r7, #28]
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <xQueueGiveFromISR+0x58>
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <xQueueGiveFromISR+0x5c>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueGiveFromISR+0x5e>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	61bb      	str	r3, [r7, #24]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007486:	f002 fa0f 	bl	80098a8 <vPortValidateInterruptPriority>
	__asm volatile
 800748a:	f3ef 8211 	mrs	r2, BASEPRI
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	617a      	str	r2, [r7, #20]
 80074a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80074a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d22b      	bcs.n	800750e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d0:	d112      	bne.n	80074f8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d016      	beq.n	8007508 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	3324      	adds	r3, #36	; 0x24
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 f8e8 	bl	80086b4 <xTaskRemoveFromEventList>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00e      	beq.n	8007508 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2201      	movs	r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	e007      	b.n	8007508 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074fc:	3301      	adds	r3, #1
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	b25a      	sxtb	r2, r3
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007508:	2301      	movs	r3, #1
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
 800750c:	e001      	b.n	8007512 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800750e:	2300      	movs	r3, #0
 8007510:	637b      	str	r3, [r7, #52]	; 0x34
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f383 8811 	msr	BASEPRI, r3
}
 800751c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800751e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007520:	4618      	mov	r0, r3
 8007522:	3738      	adds	r7, #56	; 0x38
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08c      	sub	sp, #48	; 0x30
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <xQueueReceive+0x30>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	623b      	str	r3, [r7, #32]
}
 8007554:	bf00      	nop
 8007556:	e7fe      	b.n	8007556 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <xQueueReceive+0x3e>
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <xQueueReceive+0x42>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <xQueueReceive+0x44>
 800756a:	2300      	movs	r3, #0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <xQueueReceive+0x5e>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	61fb      	str	r3, [r7, #28]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007586:	f001 fa57 	bl	8008a38 <xTaskGetSchedulerState>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <xQueueReceive+0x6e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <xQueueReceive+0x72>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <xQueueReceive+0x74>
 800759a:	2300      	movs	r3, #0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10a      	bne.n	80075b6 <xQueueReceive+0x8e>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	61bb      	str	r3, [r7, #24]
}
 80075b2:	bf00      	nop
 80075b4:	e7fe      	b.n	80075b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075b6:	f002 f895 	bl	80096e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01f      	beq.n	8007606 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ca:	f000 fabe 	bl	8007b4a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	1e5a      	subs	r2, r3, #1
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00f      	beq.n	80075fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	3310      	adds	r3, #16
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 f866 	bl	80086b4 <xTaskRemoveFromEventList>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075ee:	4b3d      	ldr	r3, [pc, #244]	; (80076e4 <xQueueReceive+0x1bc>)
 80075f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075fe:	f002 f8a1 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 8007602:	2301      	movs	r3, #1
 8007604:	e069      	b.n	80076da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d103      	bne.n	8007614 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800760c:	f002 f89a 	bl	8009744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007610:	2300      	movs	r3, #0
 8007612:	e062      	b.n	80076da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800761a:	f107 0310 	add.w	r3, r7, #16
 800761e:	4618      	mov	r0, r3
 8007620:	f001 f8ac 	bl	800877c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007624:	2301      	movs	r3, #1
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007628:	f002 f88c 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800762c:	f000 fe18 	bl	8008260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007630:	f002 f858 	bl	80096e4 <vPortEnterCritical>
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800763a:	b25b      	sxtb	r3, r3
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007640:	d103      	bne.n	800764a <xQueueReceive+0x122>
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007650:	b25b      	sxtb	r3, r3
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	d103      	bne.n	8007660 <xQueueReceive+0x138>
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007660:	f002 f870 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007664:	1d3a      	adds	r2, r7, #4
 8007666:	f107 0310 	add.w	r3, r7, #16
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f001 f89b 	bl	80087a8 <xTaskCheckForTimeOut>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d123      	bne.n	80076c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767a:	f000 fade 	bl	8007c3a <prvIsQueueEmpty>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d017      	beq.n	80076b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	3324      	adds	r3, #36	; 0x24
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4611      	mov	r1, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f000 ffc1 	bl	8008614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007694:	f000 fa7f 	bl	8007b96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007698:	f000 fdf0 	bl	800827c <xTaskResumeAll>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d189      	bne.n	80075b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <xQueueReceive+0x1bc>)
 80076a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	e780      	b.n	80075b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b6:	f000 fa6e 	bl	8007b96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076ba:	f000 fddf 	bl	800827c <xTaskResumeAll>
 80076be:	e77a      	b.n	80075b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c2:	f000 fa68 	bl	8007b96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076c6:	f000 fdd9 	bl	800827c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076cc:	f000 fab5 	bl	8007c3a <prvIsQueueEmpty>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f43f af6f 	beq.w	80075b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3730      	adds	r7, #48	; 0x30
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08e      	sub	sp, #56	; 0x38
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	623b      	str	r3, [r7, #32]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	61fb      	str	r3, [r7, #28]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007738:	f001 f97e 	bl	8008a38 <xTaskGetSchedulerState>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <xQueueSemaphoreTake+0x60>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <xQueueSemaphoreTake+0x64>
 8007748:	2301      	movs	r3, #1
 800774a:	e000      	b.n	800774e <xQueueSemaphoreTake+0x66>
 800774c:	2300      	movs	r3, #0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	61bb      	str	r3, [r7, #24]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007768:	f001 ffbc 	bl	80096e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d024      	beq.n	80077c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	1e5a      	subs	r2, r3, #1
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d104      	bne.n	8007792 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007788:	f001 facc 	bl	8008d24 <pvTaskIncrementMutexHeldCount>
 800778c:	4602      	mov	r2, r0
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00f      	beq.n	80077ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	3310      	adds	r3, #16
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 ff88 	bl	80086b4 <xTaskRemoveFromEventList>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d007      	beq.n	80077ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077aa:	4b54      	ldr	r3, [pc, #336]	; (80078fc <xQueueSemaphoreTake+0x214>)
 80077ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077ba:	f001 ffc3 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 80077be:	2301      	movs	r3, #1
 80077c0:	e097      	b.n	80078f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d111      	bne.n	80077ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	617b      	str	r3, [r7, #20]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077e4:	f001 ffae 	bl	8009744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e082      	b.n	80078f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077f2:	f107 030c 	add.w	r3, r7, #12
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 ffc0 	bl	800877c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007800:	f001 ffa0 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007804:	f000 fd2c 	bl	8008260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007808:	f001 ff6c 	bl	80096e4 <vPortEnterCritical>
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007812:	b25b      	sxtb	r3, r3
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d103      	bne.n	8007822 <xQueueSemaphoreTake+0x13a>
 800781a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007828:	b25b      	sxtb	r3, r3
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d103      	bne.n	8007838 <xQueueSemaphoreTake+0x150>
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007838:	f001 ff84 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800783c:	463a      	mov	r2, r7
 800783e:	f107 030c 	add.w	r3, r7, #12
 8007842:	4611      	mov	r1, r2
 8007844:	4618      	mov	r0, r3
 8007846:	f000 ffaf 	bl	80087a8 <xTaskCheckForTimeOut>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d132      	bne.n	80078b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007852:	f000 f9f2 	bl	8007c3a <prvIsQueueEmpty>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d026      	beq.n	80078aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d109      	bne.n	8007878 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007864:	f001 ff3e 	bl	80096e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	4618      	mov	r0, r3
 800786e:	f001 f901 	bl	8008a74 <xTaskPriorityInherit>
 8007872:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007874:	f001 ff66 	bl	8009744 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	3324      	adds	r3, #36	; 0x24
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	4611      	mov	r1, r2
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fec7 	bl	8008614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007888:	f000 f985 	bl	8007b96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800788c:	f000 fcf6 	bl	800827c <xTaskResumeAll>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	f47f af68 	bne.w	8007768 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007898:	4b18      	ldr	r3, [pc, #96]	; (80078fc <xQueueSemaphoreTake+0x214>)
 800789a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	e75e      	b.n	8007768 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ac:	f000 f973 	bl	8007b96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078b0:	f000 fce4 	bl	800827c <xTaskResumeAll>
 80078b4:	e758      	b.n	8007768 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078b8:	f000 f96d 	bl	8007b96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078bc:	f000 fcde 	bl	800827c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078c2:	f000 f9ba 	bl	8007c3a <prvIsQueueEmpty>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f43f af4d 	beq.w	8007768 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00d      	beq.n	80078f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80078d4:	f001 ff06 	bl	80096e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078da:	f000 f8b4 	bl	8007a46 <prvGetDisinheritPriorityAfterTimeout>
 80078de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 f99a 	bl	8008c20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078ec:	f001 ff2a 	bl	8009744 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3738      	adds	r7, #56	; 0x38
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08e      	sub	sp, #56	; 0x38
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10a      	bne.n	800792c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	623b      	str	r3, [r7, #32]
}
 8007928:	bf00      	nop
 800792a:	e7fe      	b.n	800792a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <xQueueReceiveFromISR+0x3a>
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <xQueueReceiveFromISR+0x3e>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <xQueueReceiveFromISR+0x40>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	61fb      	str	r3, [r7, #28]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800795a:	f001 ffa5 	bl	80098a8 <vPortValidateInterruptPriority>
	__asm volatile
 800795e:	f3ef 8211 	mrs	r2, BASEPRI
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	61ba      	str	r2, [r7, #24]
 8007974:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007976:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02f      	beq.n	80079e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800798c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007994:	f000 f8d9 	bl	8007b4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	1e5a      	subs	r2, r3, #1
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80079a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d112      	bne.n	80079d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d016      	beq.n	80079e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	3310      	adds	r3, #16
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fe7c 	bl	80086b4 <xTaskRemoveFromEventList>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e007      	b.n	80079e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80079d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079d4:	3301      	adds	r3, #1
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	b25a      	sxtb	r2, r3
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80079e0:	2301      	movs	r3, #1
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
 80079e4:	e001      	b.n	80079ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f383 8811 	msr	BASEPRI, r3
}
 80079f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3738      	adds	r7, #56	; 0x38
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <vQueueDelete+0x28>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	60bb      	str	r3, [r7, #8]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f95f 	bl	8007cec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f002 f841 	bl	8009ac0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007a3e:	bf00      	nop
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d006      	beq.n	8007a64 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	e001      	b.n	8007a68 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007a68:	68fb      	ldr	r3, [r7, #12]
	}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10d      	bne.n	8007ab0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d14d      	bne.n	8007b38 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 f84f 	bl	8008b44 <xTaskPriorityDisinherit>
 8007aa6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	609a      	str	r2, [r3, #8]
 8007aae:	e043      	b.n	8007b38 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d119      	bne.n	8007aea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6858      	ldr	r0, [r3, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	461a      	mov	r2, r3
 8007ac0:	68b9      	ldr	r1, [r7, #8]
 8007ac2:	f002 f947 	bl	8009d54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d32b      	bcc.n	8007b38 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	605a      	str	r2, [r3, #4]
 8007ae8:	e026      	b.n	8007b38 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68d8      	ldr	r0, [r3, #12]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	461a      	mov	r2, r3
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	f002 f92d 	bl	8009d54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	425b      	negs	r3, r3
 8007b04:	441a      	add	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d207      	bcs.n	8007b26 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	425b      	negs	r3, r3
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d105      	bne.n	8007b38 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b40:	697b      	ldr	r3, [r7, #20]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d018      	beq.n	8007b8e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d303      	bcc.n	8007b7e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68d9      	ldr	r1, [r3, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	461a      	mov	r2, r3
 8007b88:	6838      	ldr	r0, [r7, #0]
 8007b8a:	f002 f8e3 	bl	8009d54 <memcpy>
	}
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b9e:	f001 fda1 	bl	80096e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ba8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007baa:	e011      	b.n	8007bd0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d012      	beq.n	8007bda <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fd7b 	bl	80086b4 <xTaskRemoveFromEventList>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bc4:	f000 fe52 	bl	800886c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dce9      	bgt.n	8007bac <prvUnlockQueue+0x16>
 8007bd8:	e000      	b.n	8007bdc <prvUnlockQueue+0x46>
					break;
 8007bda:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	22ff      	movs	r2, #255	; 0xff
 8007be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007be4:	f001 fdae 	bl	8009744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007be8:	f001 fd7c 	bl	80096e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bf2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bf4:	e011      	b.n	8007c1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d012      	beq.n	8007c24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3310      	adds	r3, #16
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fd56 	bl	80086b4 <xTaskRemoveFromEventList>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c0e:	f000 fe2d 	bl	800886c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dce9      	bgt.n	8007bf6 <prvUnlockQueue+0x60>
 8007c22:	e000      	b.n	8007c26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	22ff      	movs	r2, #255	; 0xff
 8007c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c2e:	f001 fd89 	bl	8009744 <vPortExitCritical>
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c42:	f001 fd4f 	bl	80096e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d102      	bne.n	8007c54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	e001      	b.n	8007c58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c58:	f001 fd74 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c6e:	f001 fd39 	bl	80096e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d102      	bne.n	8007c84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	e001      	b.n	8007c88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c88:	f001 fd5c 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	e014      	b.n	8007cd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ca8:	4a0f      	ldr	r2, [pc, #60]	; (8007ce8 <vQueueAddToRegistry+0x50>)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10b      	bne.n	8007ccc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cb4:	490c      	ldr	r1, [pc, #48]	; (8007ce8 <vQueueAddToRegistry+0x50>)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007cbe:	4a0a      	ldr	r2, [pc, #40]	; (8007ce8 <vQueueAddToRegistry+0x50>)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	4413      	add	r3, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cca:	e006      	b.n	8007cda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b07      	cmp	r3, #7
 8007cd6:	d9e7      	bls.n	8007ca8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	20000a30 	.word	0x20000a30

08007cec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	e016      	b.n	8007d28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007cfa:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <vQueueUnregisterQueue+0x50>)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	4413      	add	r3, r2
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d10b      	bne.n	8007d22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d0a:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <vQueueUnregisterQueue+0x50>)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d14:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <vQueueUnregisterQueue+0x50>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	605a      	str	r2, [r3, #4]
				break;
 8007d20:	e006      	b.n	8007d30 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b07      	cmp	r3, #7
 8007d2c:	d9e5      	bls.n	8007cfa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d2e:	bf00      	nop
 8007d30:	bf00      	nop
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	20000a30 	.word	0x20000a30

08007d40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d50:	f001 fcc8 	bl	80096e4 <vPortEnterCritical>
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d5a:	b25b      	sxtb	r3, r3
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d103      	bne.n	8007d6a <vQueueWaitForMessageRestricted+0x2a>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d70:	b25b      	sxtb	r3, r3
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d103      	bne.n	8007d80 <vQueueWaitForMessageRestricted+0x40>
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d80:	f001 fce0 	bl	8009744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d106      	bne.n	8007d9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	3324      	adds	r3, #36	; 0x24
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f000 fc61 	bl	800865c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d9a:	6978      	ldr	r0, [r7, #20]
 8007d9c:	f7ff fefb 	bl	8007b96 <prvUnlockQueue>
	}
 8007da0:	bf00      	nop
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08e      	sub	sp, #56	; 0x38
 8007dac:	af04      	add	r7, sp, #16
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	623b      	str	r3, [r7, #32]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <xTaskCreateStatic+0x46>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	61fb      	str	r3, [r7, #28]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dee:	23bc      	movs	r3, #188	; 0xbc
 8007df0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2bbc      	cmp	r3, #188	; 0xbc
 8007df6:	d00a      	beq.n	8007e0e <xTaskCreateStatic+0x66>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	61bb      	str	r3, [r7, #24]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01e      	beq.n	8007e54 <xTaskCreateStatic+0xac>
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	9302      	str	r3, [sp, #8]
 8007e36:	f107 0314 	add.w	r3, r7, #20
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 f850 	bl	8007eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e4e:	f000 f8f3 	bl	8008038 <prvAddNewTaskToReadyList>
 8007e52:	e001      	b.n	8007e58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e58:	697b      	ldr	r3, [r7, #20]
	}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3728      	adds	r7, #40	; 0x28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b08c      	sub	sp, #48	; 0x30
 8007e66:	af04      	add	r7, sp, #16
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 fd56 	bl	8009928 <pvPortMalloc>
 8007e7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00e      	beq.n	8007ea2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e84:	20bc      	movs	r0, #188	; 0xbc
 8007e86:	f001 fd4f 	bl	8009928 <pvPortMalloc>
 8007e8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	631a      	str	r2, [r3, #48]	; 0x30
 8007e98:	e005      	b.n	8007ea6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e9a:	6978      	ldr	r0, [r7, #20]
 8007e9c:	f001 fe10 	bl	8009ac0 <vPortFree>
 8007ea0:	e001      	b.n	8007ea6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d017      	beq.n	8007edc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007eb4:	88fa      	ldrh	r2, [r7, #6]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9303      	str	r3, [sp, #12]
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	9302      	str	r3, [sp, #8]
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f80e 	bl	8007eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ed0:	69f8      	ldr	r0, [r7, #28]
 8007ed2:	f000 f8b1 	bl	8008038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	e002      	b.n	8007ee2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007edc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	461a      	mov	r2, r3
 8007f04:	21a5      	movs	r1, #165	; 0xa5
 8007f06:	f001 ff33 	bl	8009d70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f14:	3b01      	subs	r3, #1
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f023 0307 	bic.w	r3, r3, #7
 8007f22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	617b      	str	r3, [r7, #20]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d01f      	beq.n	8007f8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61fb      	str	r3, [r7, #28]
 8007f4e:	e012      	b.n	8007f76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	7819      	ldrb	r1, [r3, #0]
 8007f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	3334      	adds	r3, #52	; 0x34
 8007f60:	460a      	mov	r2, r1
 8007f62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	4413      	add	r3, r2
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d006      	beq.n	8007f7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	3301      	adds	r3, #1
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	2b0f      	cmp	r3, #15
 8007f7a:	d9e9      	bls.n	8007f50 <prvInitialiseNewTask+0x64>
 8007f7c:	e000      	b.n	8007f80 <prvInitialiseNewTask+0x94>
			{
				break;
 8007f7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f88:	e003      	b.n	8007f92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	2b37      	cmp	r3, #55	; 0x37
 8007f96:	d901      	bls.n	8007f9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f98:	2337      	movs	r3, #55	; 0x37
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	2200      	movs	r2, #0
 8007fac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe fe56 	bl	8006c64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	3318      	adds	r3, #24
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fe51 	bl	8006c64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	3354      	adds	r3, #84	; 0x54
 8007fec:	2260      	movs	r2, #96	; 0x60
 8007fee:	2100      	movs	r1, #0
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f001 febd 	bl	8009d70 <memset>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	4a0c      	ldr	r2, [pc, #48]	; (800802c <prvInitialiseNewTask+0x140>)
 8007ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	4a0c      	ldr	r2, [pc, #48]	; (8008030 <prvInitialiseNewTask+0x144>)
 8008000:	65da      	str	r2, [r3, #92]	; 0x5c
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	4a0b      	ldr	r2, [pc, #44]	; (8008034 <prvInitialiseNewTask+0x148>)
 8008006:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	68f9      	ldr	r1, [r7, #12]
 800800c:	69b8      	ldr	r0, [r7, #24]
 800800e:	f001 fa3f 	bl	8009490 <pxPortInitialiseStack>
 8008012:	4602      	mov	r2, r0
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008022:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008024:	bf00      	nop
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	0800a890 	.word	0x0800a890
 8008030:	0800a8b0 	.word	0x0800a8b0
 8008034:	0800a870 	.word	0x0800a870

08008038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008040:	f001 fb50 	bl	80096e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008044:	4b2d      	ldr	r3, [pc, #180]	; (80080fc <prvAddNewTaskToReadyList+0xc4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	4a2c      	ldr	r2, [pc, #176]	; (80080fc <prvAddNewTaskToReadyList+0xc4>)
 800804c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800804e:	4b2c      	ldr	r3, [pc, #176]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008056:	4a2a      	ldr	r2, [pc, #168]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800805c:	4b27      	ldr	r3, [pc, #156]	; (80080fc <prvAddNewTaskToReadyList+0xc4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d110      	bne.n	8008086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008064:	f000 fc26 	bl	80088b4 <prvInitialiseTaskLists>
 8008068:	e00d      	b.n	8008086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800806a:	4b26      	ldr	r3, [pc, #152]	; (8008104 <prvAddNewTaskToReadyList+0xcc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d109      	bne.n	8008086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008072:	4b23      	ldr	r3, [pc, #140]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	429a      	cmp	r2, r3
 800807e:	d802      	bhi.n	8008086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008080:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008086:	4b20      	ldr	r3, [pc, #128]	; (8008108 <prvAddNewTaskToReadyList+0xd0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3301      	adds	r3, #1
 800808c:	4a1e      	ldr	r2, [pc, #120]	; (8008108 <prvAddNewTaskToReadyList+0xd0>)
 800808e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008090:	4b1d      	ldr	r3, [pc, #116]	; (8008108 <prvAddNewTaskToReadyList+0xd0>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <prvAddNewTaskToReadyList+0xd4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d903      	bls.n	80080ac <prvAddNewTaskToReadyList+0x74>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4a18      	ldr	r2, [pc, #96]	; (800810c <prvAddNewTaskToReadyList+0xd4>)
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4a15      	ldr	r2, [pc, #84]	; (8008110 <prvAddNewTaskToReadyList+0xd8>)
 80080ba:	441a      	add	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f7fe fddb 	bl	8006c7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080c8:	f001 fb3c 	bl	8009744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <prvAddNewTaskToReadyList+0xcc>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00e      	beq.n	80080f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080d4:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	429a      	cmp	r2, r3
 80080e0:	d207      	bcs.n	80080f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080e2:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <prvAddNewTaskToReadyList+0xdc>)
 80080e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000f44 	.word	0x20000f44
 8008100:	20000a70 	.word	0x20000a70
 8008104:	20000f50 	.word	0x20000f50
 8008108:	20000f60 	.word	0x20000f60
 800810c:	20000f4c 	.word	0x20000f4c
 8008110:	20000a74 	.word	0x20000a74
 8008114:	e000ed04 	.word	0xe000ed04

08008118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d017      	beq.n	800815a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800812a:	4b13      	ldr	r3, [pc, #76]	; (8008178 <vTaskDelay+0x60>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <vTaskDelay+0x30>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60bb      	str	r3, [r7, #8]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008148:	f000 f88a 	bl	8008260 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fdfc 	bl	8008d4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008154:	f000 f892 	bl	800827c <xTaskResumeAll>
 8008158:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d107      	bne.n	8008170 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008160:	4b06      	ldr	r3, [pc, #24]	; (800817c <vTaskDelay+0x64>)
 8008162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000f6c 	.word	0x20000f6c
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08a      	sub	sp, #40	; 0x28
 8008184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800818e:	463a      	mov	r2, r7
 8008190:	1d39      	adds	r1, r7, #4
 8008192:	f107 0308 	add.w	r3, r7, #8
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fd10 	bl	8006bbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	9202      	str	r2, [sp, #8]
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	460a      	mov	r2, r1
 80081ae:	4924      	ldr	r1, [pc, #144]	; (8008240 <vTaskStartScheduler+0xc0>)
 80081b0:	4824      	ldr	r0, [pc, #144]	; (8008244 <vTaskStartScheduler+0xc4>)
 80081b2:	f7ff fdf9 	bl	8007da8 <xTaskCreateStatic>
 80081b6:	4603      	mov	r3, r0
 80081b8:	4a23      	ldr	r2, [pc, #140]	; (8008248 <vTaskStartScheduler+0xc8>)
 80081ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081bc:	4b22      	ldr	r3, [pc, #136]	; (8008248 <vTaskStartScheduler+0xc8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081c4:	2301      	movs	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e001      	b.n	80081ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d102      	bne.n	80081da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081d4:	f000 fe0e 	bl	8008df4 <xTimerCreateTimerTask>
 80081d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d11b      	bne.n	8008218 <vTaskStartScheduler+0x98>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	613b      	str	r3, [r7, #16]
}
 80081f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081f4:	4b15      	ldr	r3, [pc, #84]	; (800824c <vTaskStartScheduler+0xcc>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3354      	adds	r3, #84	; 0x54
 80081fa:	4a15      	ldr	r2, [pc, #84]	; (8008250 <vTaskStartScheduler+0xd0>)
 80081fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081fe:	4b15      	ldr	r3, [pc, #84]	; (8008254 <vTaskStartScheduler+0xd4>)
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <vTaskStartScheduler+0xd8>)
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800820c:	4b13      	ldr	r3, [pc, #76]	; (800825c <vTaskStartScheduler+0xdc>)
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008212:	f001 f9c5 	bl	80095a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008216:	e00e      	b.n	8008236 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821e:	d10a      	bne.n	8008236 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <vTaskStartScheduler+0xb4>
}
 8008236:	bf00      	nop
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	0800a778 	.word	0x0800a778
 8008244:	08008885 	.word	0x08008885
 8008248:	20000f68 	.word	0x20000f68
 800824c:	20000a70 	.word	0x20000a70
 8008250:	20000014 	.word	0x20000014
 8008254:	20000f64 	.word	0x20000f64
 8008258:	20000f50 	.word	0x20000f50
 800825c:	20000f48 	.word	0x20000f48

08008260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008264:	4b04      	ldr	r3, [pc, #16]	; (8008278 <vTaskSuspendAll+0x18>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3301      	adds	r3, #1
 800826a:	4a03      	ldr	r2, [pc, #12]	; (8008278 <vTaskSuspendAll+0x18>)
 800826c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800826e:	bf00      	nop
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	20000f6c 	.word	0x20000f6c

0800827c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008286:	2300      	movs	r3, #0
 8008288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800828a:	4b42      	ldr	r3, [pc, #264]	; (8008394 <xTaskResumeAll+0x118>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	603b      	str	r3, [r7, #0]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082a8:	f001 fa1c 	bl	80096e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082ac:	4b39      	ldr	r3, [pc, #228]	; (8008394 <xTaskResumeAll+0x118>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	4a38      	ldr	r2, [pc, #224]	; (8008394 <xTaskResumeAll+0x118>)
 80082b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082b6:	4b37      	ldr	r3, [pc, #220]	; (8008394 <xTaskResumeAll+0x118>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d162      	bne.n	8008384 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082be:	4b36      	ldr	r3, [pc, #216]	; (8008398 <xTaskResumeAll+0x11c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d05e      	beq.n	8008384 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082c6:	e02f      	b.n	8008328 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082c8:	4b34      	ldr	r3, [pc, #208]	; (800839c <xTaskResumeAll+0x120>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3318      	adds	r3, #24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fd2f 	bl	8006d38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3304      	adds	r3, #4
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fd2a 	bl	8006d38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e8:	4b2d      	ldr	r3, [pc, #180]	; (80083a0 <xTaskResumeAll+0x124>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d903      	bls.n	80082f8 <xTaskResumeAll+0x7c>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	4a2a      	ldr	r2, [pc, #168]	; (80083a0 <xTaskResumeAll+0x124>)
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4a27      	ldr	r2, [pc, #156]	; (80083a4 <xTaskResumeAll+0x128>)
 8008306:	441a      	add	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fe fcb5 	bl	8006c7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	4b23      	ldr	r3, [pc, #140]	; (80083a8 <xTaskResumeAll+0x12c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008322:	4b22      	ldr	r3, [pc, #136]	; (80083ac <xTaskResumeAll+0x130>)
 8008324:	2201      	movs	r2, #1
 8008326:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008328:	4b1c      	ldr	r3, [pc, #112]	; (800839c <xTaskResumeAll+0x120>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1cb      	bne.n	80082c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008336:	f000 fb5f 	bl	80089f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800833a:	4b1d      	ldr	r3, [pc, #116]	; (80083b0 <xTaskResumeAll+0x134>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d010      	beq.n	8008368 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008346:	f000 f847 	bl	80083d8 <xTaskIncrementTick>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008350:	4b16      	ldr	r3, [pc, #88]	; (80083ac <xTaskResumeAll+0x130>)
 8008352:	2201      	movs	r2, #1
 8008354:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3b01      	subs	r3, #1
 800835a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1f1      	bne.n	8008346 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008362:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <xTaskResumeAll+0x134>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008368:	4b10      	ldr	r3, [pc, #64]	; (80083ac <xTaskResumeAll+0x130>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <xTaskResumeAll+0x138>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008384:	f001 f9de 	bl	8009744 <vPortExitCritical>

	return xAlreadyYielded;
 8008388:	68bb      	ldr	r3, [r7, #8]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000f6c 	.word	0x20000f6c
 8008398:	20000f44 	.word	0x20000f44
 800839c:	20000f04 	.word	0x20000f04
 80083a0:	20000f4c 	.word	0x20000f4c
 80083a4:	20000a74 	.word	0x20000a74
 80083a8:	20000a70 	.word	0x20000a70
 80083ac:	20000f58 	.word	0x20000f58
 80083b0:	20000f54 	.word	0x20000f54
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <xTaskGetTickCount+0x1c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083c4:	687b      	ldr	r3, [r7, #4]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20000f48 	.word	0x20000f48

080083d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e2:	4b4f      	ldr	r3, [pc, #316]	; (8008520 <xTaskIncrementTick+0x148>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f040 808f 	bne.w	800850a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083ec:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <xTaskIncrementTick+0x14c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083f4:	4a4b      	ldr	r2, [pc, #300]	; (8008524 <xTaskIncrementTick+0x14c>)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d120      	bne.n	8008442 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008400:	4b49      	ldr	r3, [pc, #292]	; (8008528 <xTaskIncrementTick+0x150>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <xTaskIncrementTick+0x48>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	603b      	str	r3, [r7, #0]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <xTaskIncrementTick+0x46>
 8008420:	4b41      	ldr	r3, [pc, #260]	; (8008528 <xTaskIncrementTick+0x150>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	4b41      	ldr	r3, [pc, #260]	; (800852c <xTaskIncrementTick+0x154>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a3f      	ldr	r2, [pc, #252]	; (8008528 <xTaskIncrementTick+0x150>)
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	4a3f      	ldr	r2, [pc, #252]	; (800852c <xTaskIncrementTick+0x154>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <xTaskIncrementTick+0x158>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	4a3d      	ldr	r2, [pc, #244]	; (8008530 <xTaskIncrementTick+0x158>)
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	f000 fadb 	bl	80089f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008442:	4b3c      	ldr	r3, [pc, #240]	; (8008534 <xTaskIncrementTick+0x15c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	429a      	cmp	r2, r3
 800844a:	d349      	bcc.n	80084e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800844c:	4b36      	ldr	r3, [pc, #216]	; (8008528 <xTaskIncrementTick+0x150>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d104      	bne.n	8008460 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008456:	4b37      	ldr	r3, [pc, #220]	; (8008534 <xTaskIncrementTick+0x15c>)
 8008458:	f04f 32ff 	mov.w	r2, #4294967295
 800845c:	601a      	str	r2, [r3, #0]
					break;
 800845e:	e03f      	b.n	80084e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008460:	4b31      	ldr	r3, [pc, #196]	; (8008528 <xTaskIncrementTick+0x150>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d203      	bcs.n	8008480 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008478:	4a2e      	ldr	r2, [pc, #184]	; (8008534 <xTaskIncrementTick+0x15c>)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800847e:	e02f      	b.n	80084e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	3304      	adds	r3, #4
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe fc57 	bl	8006d38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3318      	adds	r3, #24
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fc4e 	bl	8006d38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4b25      	ldr	r3, [pc, #148]	; (8008538 <xTaskIncrementTick+0x160>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d903      	bls.n	80084b0 <xTaskIncrementTick+0xd8>
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a22      	ldr	r2, [pc, #136]	; (8008538 <xTaskIncrementTick+0x160>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a1f      	ldr	r2, [pc, #124]	; (800853c <xTaskIncrementTick+0x164>)
 80084be:	441a      	add	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fe fbd9 	bl	8006c7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d0:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <xTaskIncrementTick+0x168>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d3b8      	bcc.n	800844c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084da:	2301      	movs	r3, #1
 80084dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084de:	e7b5      	b.n	800844c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084e0:	4b17      	ldr	r3, [pc, #92]	; (8008540 <xTaskIncrementTick+0x168>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e6:	4915      	ldr	r1, [pc, #84]	; (800853c <xTaskIncrementTick+0x164>)
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d901      	bls.n	80084fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <xTaskIncrementTick+0x16c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d007      	beq.n	8008514 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e004      	b.n	8008514 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <xTaskIncrementTick+0x170>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	4a0d      	ldr	r2, [pc, #52]	; (8008548 <xTaskIncrementTick+0x170>)
 8008512:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008514:	697b      	ldr	r3, [r7, #20]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000f6c 	.word	0x20000f6c
 8008524:	20000f48 	.word	0x20000f48
 8008528:	20000efc 	.word	0x20000efc
 800852c:	20000f00 	.word	0x20000f00
 8008530:	20000f5c 	.word	0x20000f5c
 8008534:	20000f64 	.word	0x20000f64
 8008538:	20000f4c 	.word	0x20000f4c
 800853c:	20000a74 	.word	0x20000a74
 8008540:	20000a70 	.word	0x20000a70
 8008544:	20000f58 	.word	0x20000f58
 8008548:	20000f54 	.word	0x20000f54

0800854c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008552:	4b2a      	ldr	r3, [pc, #168]	; (80085fc <vTaskSwitchContext+0xb0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800855a:	4b29      	ldr	r3, [pc, #164]	; (8008600 <vTaskSwitchContext+0xb4>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008560:	e046      	b.n	80085f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008562:	4b27      	ldr	r3, [pc, #156]	; (8008600 <vTaskSwitchContext+0xb4>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008568:	4b26      	ldr	r3, [pc, #152]	; (8008604 <vTaskSwitchContext+0xb8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	e010      	b.n	8008592 <vTaskSwitchContext+0x46>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10a      	bne.n	800858c <vTaskSwitchContext+0x40>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	607b      	str	r3, [r7, #4]
}
 8008588:	bf00      	nop
 800858a:	e7fe      	b.n	800858a <vTaskSwitchContext+0x3e>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3b01      	subs	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	491d      	ldr	r1, [pc, #116]	; (8008608 <vTaskSwitchContext+0xbc>)
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0e4      	beq.n	8008570 <vTaskSwitchContext+0x24>
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4a15      	ldr	r2, [pc, #84]	; (8008608 <vTaskSwitchContext+0xbc>)
 80085b2:	4413      	add	r3, r2
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	605a      	str	r2, [r3, #4]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	3308      	adds	r3, #8
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d104      	bne.n	80085d6 <vTaskSwitchContext+0x8a>
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4a0b      	ldr	r2, [pc, #44]	; (800860c <vTaskSwitchContext+0xc0>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	4a08      	ldr	r2, [pc, #32]	; (8008604 <vTaskSwitchContext+0xb8>)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <vTaskSwitchContext+0xc0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3354      	adds	r3, #84	; 0x54
 80085ec:	4a08      	ldr	r2, [pc, #32]	; (8008610 <vTaskSwitchContext+0xc4>)
 80085ee:	6013      	str	r3, [r2, #0]
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	20000f6c 	.word	0x20000f6c
 8008600:	20000f58 	.word	0x20000f58
 8008604:	20000f4c 	.word	0x20000f4c
 8008608:	20000a74 	.word	0x20000a74
 800860c:	20000a70 	.word	0x20000a70
 8008610:	20000014 	.word	0x20000014

08008614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800863a:	4b07      	ldr	r3, [pc, #28]	; (8008658 <vTaskPlaceOnEventList+0x44>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3318      	adds	r3, #24
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fe fb3f 	bl	8006cc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008648:	2101      	movs	r1, #1
 800864a:	6838      	ldr	r0, [r7, #0]
 800864c:	f000 fb7e 	bl	8008d4c <prvAddCurrentTaskToDelayedList>
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20000a70 	.word	0x20000a70

0800865c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	617b      	str	r3, [r7, #20]
}
 8008680:	bf00      	nop
 8008682:	e7fe      	b.n	8008682 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008684:	4b0a      	ldr	r3, [pc, #40]	; (80086b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3318      	adds	r3, #24
 800868a:	4619      	mov	r1, r3
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f7fe faf6 	bl	8006c7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	68b8      	ldr	r0, [r7, #8]
 80086a2:	f000 fb53 	bl	8008d4c <prvAddCurrentTaskToDelayedList>
	}
 80086a6:	bf00      	nop
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000a70 	.word	0x20000a70

080086b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	60fb      	str	r3, [r7, #12]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3318      	adds	r3, #24
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe fb27 	bl	8006d38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ea:	4b1e      	ldr	r3, [pc, #120]	; (8008764 <xTaskRemoveFromEventList+0xb0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d11d      	bne.n	800872e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fb1e 	bl	8006d38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008700:	4b19      	ldr	r3, [pc, #100]	; (8008768 <xTaskRemoveFromEventList+0xb4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d903      	bls.n	8008710 <xTaskRemoveFromEventList+0x5c>
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	4a16      	ldr	r2, [pc, #88]	; (8008768 <xTaskRemoveFromEventList+0xb4>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4a13      	ldr	r2, [pc, #76]	; (800876c <xTaskRemoveFromEventList+0xb8>)
 800871e:	441a      	add	r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4610      	mov	r0, r2
 8008728:	f7fe faa9 	bl	8006c7e <vListInsertEnd>
 800872c:	e005      	b.n	800873a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3318      	adds	r3, #24
 8008732:	4619      	mov	r1, r3
 8008734:	480e      	ldr	r0, [pc, #56]	; (8008770 <xTaskRemoveFromEventList+0xbc>)
 8008736:	f7fe faa2 	bl	8006c7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <xTaskRemoveFromEventList+0xc0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	429a      	cmp	r2, r3
 8008746:	d905      	bls.n	8008754 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <xTaskRemoveFromEventList+0xc4>)
 800874e:	2201      	movs	r2, #1
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e001      	b.n	8008758 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008758:	697b      	ldr	r3, [r7, #20]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000f6c 	.word	0x20000f6c
 8008768:	20000f4c 	.word	0x20000f4c
 800876c:	20000a74 	.word	0x20000a74
 8008770:	20000f04 	.word	0x20000f04
 8008774:	20000a70 	.word	0x20000a70
 8008778:	20000f58 	.word	0x20000f58

0800877c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008784:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <vTaskInternalSetTimeOutState+0x24>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <vTaskInternalSetTimeOutState+0x28>)
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	605a      	str	r2, [r3, #4]
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	20000f5c 	.word	0x20000f5c
 80087a4:	20000f48 	.word	0x20000f48

080087a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	613b      	str	r3, [r7, #16]
}
 80087ca:	bf00      	nop
 80087cc:	e7fe      	b.n	80087cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	60fb      	str	r3, [r7, #12]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087ea:	f000 ff7b 	bl	80096e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <xTaskCheckForTimeOut+0xbc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d102      	bne.n	800880e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008808:	2300      	movs	r3, #0
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	e023      	b.n	8008856 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <xTaskCheckForTimeOut+0xc0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d007      	beq.n	800882a <xTaskCheckForTimeOut+0x82>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	429a      	cmp	r2, r3
 8008822:	d302      	bcc.n	800882a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	61fb      	str	r3, [r7, #28]
 8008828:	e015      	b.n	8008856 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	429a      	cmp	r2, r3
 8008832:	d20b      	bcs.n	800884c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	1ad2      	subs	r2, r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff ff9b 	bl	800877c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
 800884a:	e004      	b.n	8008856 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008852:	2301      	movs	r3, #1
 8008854:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008856:	f000 ff75 	bl	8009744 <vPortExitCritical>

	return xReturn;
 800885a:	69fb      	ldr	r3, [r7, #28]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3720      	adds	r7, #32
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20000f48 	.word	0x20000f48
 8008868:	20000f5c 	.word	0x20000f5c

0800886c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008870:	4b03      	ldr	r3, [pc, #12]	; (8008880 <vTaskMissedYield+0x14>)
 8008872:	2201      	movs	r2, #1
 8008874:	601a      	str	r2, [r3, #0]
}
 8008876:	bf00      	nop
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	20000f58 	.word	0x20000f58

08008884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800888c:	f000 f852 	bl	8008934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008890:	4b06      	ldr	r3, [pc, #24]	; (80088ac <prvIdleTask+0x28>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d9f9      	bls.n	800888c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <prvIdleTask+0x2c>)
 800889a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088a8:	e7f0      	b.n	800888c <prvIdleTask+0x8>
 80088aa:	bf00      	nop
 80088ac:	20000a74 	.word	0x20000a74
 80088b0:	e000ed04 	.word	0xe000ed04

080088b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088ba:	2300      	movs	r3, #0
 80088bc:	607b      	str	r3, [r7, #4]
 80088be:	e00c      	b.n	80088da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4a12      	ldr	r2, [pc, #72]	; (8008914 <prvInitialiseTaskLists+0x60>)
 80088cc:	4413      	add	r3, r2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe f9a8 	bl	8006c24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3301      	adds	r3, #1
 80088d8:	607b      	str	r3, [r7, #4]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b37      	cmp	r3, #55	; 0x37
 80088de:	d9ef      	bls.n	80088c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088e0:	480d      	ldr	r0, [pc, #52]	; (8008918 <prvInitialiseTaskLists+0x64>)
 80088e2:	f7fe f99f 	bl	8006c24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088e6:	480d      	ldr	r0, [pc, #52]	; (800891c <prvInitialiseTaskLists+0x68>)
 80088e8:	f7fe f99c 	bl	8006c24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088ec:	480c      	ldr	r0, [pc, #48]	; (8008920 <prvInitialiseTaskLists+0x6c>)
 80088ee:	f7fe f999 	bl	8006c24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088f2:	480c      	ldr	r0, [pc, #48]	; (8008924 <prvInitialiseTaskLists+0x70>)
 80088f4:	f7fe f996 	bl	8006c24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088f8:	480b      	ldr	r0, [pc, #44]	; (8008928 <prvInitialiseTaskLists+0x74>)
 80088fa:	f7fe f993 	bl	8006c24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088fe:	4b0b      	ldr	r3, [pc, #44]	; (800892c <prvInitialiseTaskLists+0x78>)
 8008900:	4a05      	ldr	r2, [pc, #20]	; (8008918 <prvInitialiseTaskLists+0x64>)
 8008902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <prvInitialiseTaskLists+0x7c>)
 8008906:	4a05      	ldr	r2, [pc, #20]	; (800891c <prvInitialiseTaskLists+0x68>)
 8008908:	601a      	str	r2, [r3, #0]
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000a74 	.word	0x20000a74
 8008918:	20000ed4 	.word	0x20000ed4
 800891c:	20000ee8 	.word	0x20000ee8
 8008920:	20000f04 	.word	0x20000f04
 8008924:	20000f18 	.word	0x20000f18
 8008928:	20000f30 	.word	0x20000f30
 800892c:	20000efc 	.word	0x20000efc
 8008930:	20000f00 	.word	0x20000f00

08008934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800893a:	e019      	b.n	8008970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800893c:	f000 fed2 	bl	80096e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008940:	4b10      	ldr	r3, [pc, #64]	; (8008984 <prvCheckTasksWaitingTermination+0x50>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3304      	adds	r3, #4
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe f9f3 	bl	8006d38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <prvCheckTasksWaitingTermination+0x54>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3b01      	subs	r3, #1
 8008958:	4a0b      	ldr	r2, [pc, #44]	; (8008988 <prvCheckTasksWaitingTermination+0x54>)
 800895a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800895c:	4b0b      	ldr	r3, [pc, #44]	; (800898c <prvCheckTasksWaitingTermination+0x58>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3b01      	subs	r3, #1
 8008962:	4a0a      	ldr	r2, [pc, #40]	; (800898c <prvCheckTasksWaitingTermination+0x58>)
 8008964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008966:	f000 feed 	bl	8009744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f810 	bl	8008990 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <prvCheckTasksWaitingTermination+0x58>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e1      	bne.n	800893c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000f18 	.word	0x20000f18
 8008988:	20000f44 	.word	0x20000f44
 800898c:	20000f2c 	.word	0x20000f2c

08008990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3354      	adds	r3, #84	; 0x54
 800899c:	4618      	mov	r0, r3
 800899e:	f001 fa91 	bl	8009ec4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d108      	bne.n	80089be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 f885 	bl	8009ac0 <vPortFree>
				vPortFree( pxTCB );
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 f882 	bl	8009ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089bc:	e018      	b.n	80089f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d103      	bne.n	80089d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f879 	bl	8009ac0 <vPortFree>
	}
 80089ce:	e00f      	b.n	80089f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d00a      	beq.n	80089f0 <prvDeleteTCB+0x60>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	60fb      	str	r3, [r7, #12]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <prvDeleteTCB+0x5e>
	}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <prvResetNextTaskUnblockTime+0x38>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a08:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <prvResetNextTaskUnblockTime+0x3c>)
 8008a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a10:	e008      	b.n	8008a24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a12:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <prvResetNextTaskUnblockTime+0x38>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	4a04      	ldr	r2, [pc, #16]	; (8008a34 <prvResetNextTaskUnblockTime+0x3c>)
 8008a22:	6013      	str	r3, [r2, #0]
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	20000efc 	.word	0x20000efc
 8008a34:	20000f64 	.word	0x20000f64

08008a38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a3e:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <xTaskGetSchedulerState+0x34>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a46:	2301      	movs	r3, #1
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	e008      	b.n	8008a5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a4c:	4b08      	ldr	r3, [pc, #32]	; (8008a70 <xTaskGetSchedulerState+0x38>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a54:	2302      	movs	r3, #2
 8008a56:	607b      	str	r3, [r7, #4]
 8008a58:	e001      	b.n	8008a5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a5e:	687b      	ldr	r3, [r7, #4]
	}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	20000f50 	.word	0x20000f50
 8008a70:	20000f6c 	.word	0x20000f6c

08008a74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d051      	beq.n	8008b2e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8e:	4b2a      	ldr	r3, [pc, #168]	; (8008b38 <xTaskPriorityInherit+0xc4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d241      	bcs.n	8008b1c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	db06      	blt.n	8008aae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aa0:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <xTaskPriorityInherit+0xc4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6959      	ldr	r1, [r3, #20]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4a1f      	ldr	r2, [pc, #124]	; (8008b3c <xTaskPriorityInherit+0xc8>)
 8008ac0:	4413      	add	r3, r2
 8008ac2:	4299      	cmp	r1, r3
 8008ac4:	d122      	bne.n	8008b0c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe f934 	bl	8006d38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ad0:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <xTaskPriorityInherit+0xc4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	4b18      	ldr	r3, [pc, #96]	; (8008b40 <xTaskPriorityInherit+0xcc>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d903      	bls.n	8008aee <xTaskPriorityInherit+0x7a>
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <xTaskPriorityInherit+0xcc>)
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af2:	4613      	mov	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4a10      	ldr	r2, [pc, #64]	; (8008b3c <xTaskPriorityInherit+0xc8>)
 8008afc:	441a      	add	r2, r3
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	3304      	adds	r3, #4
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f7fe f8ba 	bl	8006c7e <vListInsertEnd>
 8008b0a:	e004      	b.n	8008b16 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <xTaskPriorityInherit+0xc4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b16:	2301      	movs	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e008      	b.n	8008b2e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b20:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <xTaskPriorityInherit+0xc4>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d201      	bcs.n	8008b2e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	20000a70 	.word	0x20000a70
 8008b3c:	20000a74 	.word	0x20000a74
 8008b40:	20000f4c 	.word	0x20000f4c

08008b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d056      	beq.n	8008c08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b5a:	4b2e      	ldr	r3, [pc, #184]	; (8008c14 <xTaskPriorityDisinherit+0xd0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d00a      	beq.n	8008b7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	60fb      	str	r3, [r7, #12]
}
 8008b76:	bf00      	nop
 8008b78:	e7fe      	b.n	8008b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	60bb      	str	r3, [r7, #8]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b9c:	1e5a      	subs	r2, r3, #1
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d02c      	beq.n	8008c08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d128      	bne.n	8008c08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe f8bc 	bl	8006d38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd8:	4b0f      	ldr	r3, [pc, #60]	; (8008c18 <xTaskPriorityDisinherit+0xd4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d903      	bls.n	8008be8 <xTaskPriorityDisinherit+0xa4>
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	4a0c      	ldr	r2, [pc, #48]	; (8008c18 <xTaskPriorityDisinherit+0xd4>)
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4a09      	ldr	r2, [pc, #36]	; (8008c1c <xTaskPriorityDisinherit+0xd8>)
 8008bf6:	441a      	add	r2, r3
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f7fe f83d 	bl	8006c7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c04:	2301      	movs	r3, #1
 8008c06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c08:	697b      	ldr	r3, [r7, #20]
	}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000a70 	.word	0x20000a70
 8008c18:	20000f4c 	.word	0x20000f4c
 8008c1c:	20000a74 	.word	0x20000a74

08008c20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d06a      	beq.n	8008d0e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10a      	bne.n	8008c56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d902      	bls.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	e002      	b.n	8008c6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d04b      	beq.n	8008d0e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d146      	bne.n	8008d0e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c80:	4b25      	ldr	r3, [pc, #148]	; (8008d18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d10a      	bne.n	8008ca0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	60bb      	str	r3, [r7, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	69fa      	ldr	r2, [r7, #28]
 8008caa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	db04      	blt.n	8008cbe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	6959      	ldr	r1, [r3, #20]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4a13      	ldr	r2, [pc, #76]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008cce:	4413      	add	r3, r2
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	d11c      	bne.n	8008d0e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fe f82d 	bl	8006d38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce2:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d903      	bls.n	8008cf2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	4a0c      	ldr	r2, [pc, #48]	; (8008d20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4a07      	ldr	r2, [pc, #28]	; (8008d1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d00:	441a      	add	r2, r3
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	3304      	adds	r3, #4
 8008d06:	4619      	mov	r1, r3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	f7fd ffb8 	bl	8006c7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d0e:	bf00      	nop
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000a70 	.word	0x20000a70
 8008d1c:	20000a74 	.word	0x20000a74
 8008d20:	20000f4c 	.word	0x20000f4c

08008d24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d28:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d004      	beq.n	8008d3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d30:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d36:	3201      	adds	r2, #1
 8008d38:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008d3a:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
	}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20000a70 	.word	0x20000a70

08008d4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d56:	4b21      	ldr	r3, [pc, #132]	; (8008ddc <prvAddCurrentTaskToDelayedList+0x90>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d5c:	4b20      	ldr	r3, [pc, #128]	; (8008de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3304      	adds	r3, #4
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fd ffe8 	bl	8006d38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d10a      	bne.n	8008d86 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d007      	beq.n	8008d86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d76:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4819      	ldr	r0, [pc, #100]	; (8008de4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d80:	f7fd ff7d 	bl	8006c7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d84:	e026      	b.n	8008dd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d8e:	4b14      	ldr	r3, [pc, #80]	; (8008de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d209      	bcs.n	8008db2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d9e:	4b12      	ldr	r3, [pc, #72]	; (8008de8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3304      	adds	r3, #4
 8008da8:	4619      	mov	r1, r3
 8008daa:	4610      	mov	r0, r2
 8008dac:	f7fd ff8b 	bl	8006cc6 <vListInsert>
}
 8008db0:	e010      	b.n	8008dd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db2:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <prvAddCurrentTaskToDelayedList+0xa0>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f7fd ff81 	bl	8006cc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d202      	bcs.n	8008dd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dce:	4a08      	ldr	r2, [pc, #32]	; (8008df0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	6013      	str	r3, [r2, #0]
}
 8008dd4:	bf00      	nop
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	20000f48 	.word	0x20000f48
 8008de0:	20000a70 	.word	0x20000a70
 8008de4:	20000f30 	.word	0x20000f30
 8008de8:	20000f00 	.word	0x20000f00
 8008dec:	20000efc 	.word	0x20000efc
 8008df0:	20000f64 	.word	0x20000f64

08008df4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08a      	sub	sp, #40	; 0x28
 8008df8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dfe:	f000 fb07 	bl	8009410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e02:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <xTimerCreateTimerTask+0x80>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d021      	beq.n	8008e4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e12:	1d3a      	adds	r2, r7, #4
 8008e14:	f107 0108 	add.w	r1, r7, #8
 8008e18:	f107 030c 	add.w	r3, r7, #12
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fd fee7 	bl	8006bf0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	9202      	str	r2, [sp, #8]
 8008e2a:	9301      	str	r3, [sp, #4]
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	2300      	movs	r3, #0
 8008e32:	460a      	mov	r2, r1
 8008e34:	4910      	ldr	r1, [pc, #64]	; (8008e78 <xTimerCreateTimerTask+0x84>)
 8008e36:	4811      	ldr	r0, [pc, #68]	; (8008e7c <xTimerCreateTimerTask+0x88>)
 8008e38:	f7fe ffb6 	bl	8007da8 <xTaskCreateStatic>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <xTimerCreateTimerTask+0x8c>)
 8008e40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e42:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <xTimerCreateTimerTask+0x8c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10a      	bne.n	8008e6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	613b      	str	r3, [r7, #16]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e6a:	697b      	ldr	r3, [r7, #20]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000fa0 	.word	0x20000fa0
 8008e78:	0800a780 	.word	0x0800a780
 8008e7c:	08008fb9 	.word	0x08008fb9
 8008e80:	20000fa4 	.word	0x20000fa4

08008e84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08a      	sub	sp, #40	; 0x28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	623b      	str	r3, [r7, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008eb2:	4b1a      	ldr	r3, [pc, #104]	; (8008f1c <xTimerGenericCommand+0x98>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d02a      	beq.n	8008f10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b05      	cmp	r3, #5
 8008eca:	dc18      	bgt.n	8008efe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ecc:	f7ff fdb4 	bl	8008a38 <xTaskGetSchedulerState>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d109      	bne.n	8008eea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ed6:	4b11      	ldr	r3, [pc, #68]	; (8008f1c <xTimerGenericCommand+0x98>)
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	f107 0110 	add.w	r1, r7, #16
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee2:	f7fe f8fb 	bl	80070dc <xQueueGenericSend>
 8008ee6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ee8:	e012      	b.n	8008f10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008eea:	4b0c      	ldr	r3, [pc, #48]	; (8008f1c <xTimerGenericCommand+0x98>)
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	f107 0110 	add.w	r1, r7, #16
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f7fe f8f1 	bl	80070dc <xQueueGenericSend>
 8008efa:	6278      	str	r0, [r7, #36]	; 0x24
 8008efc:	e008      	b.n	8008f10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008efe:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <xTimerGenericCommand+0x98>)
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f107 0110 	add.w	r1, r7, #16
 8008f06:	2300      	movs	r3, #0
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	f7fe f9e5 	bl	80072d8 <xQueueGenericSendFromISR>
 8008f0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3728      	adds	r7, #40	; 0x28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20000fa0 	.word	0x20000fa0

08008f20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f2a:	4b22      	ldr	r3, [pc, #136]	; (8008fb4 <prvProcessExpiredTimer+0x94>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fd fefd 	bl	8006d38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d022      	beq.n	8008f92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	699a      	ldr	r2, [r3, #24]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	18d1      	adds	r1, r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	6978      	ldr	r0, [r7, #20]
 8008f5a:	f000 f8d1 	bl	8009100 <prvInsertTimerInActiveList>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01f      	beq.n	8008fa4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f64:	2300      	movs	r3, #0
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	6978      	ldr	r0, [r7, #20]
 8008f70:	f7ff ff88 	bl	8008e84 <xTimerGenericCommand>
 8008f74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d113      	bne.n	8008fa4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60fb      	str	r3, [r7, #12]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f98:	f023 0301 	bic.w	r3, r3, #1
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	6978      	ldr	r0, [r7, #20]
 8008faa:	4798      	blx	r3
}
 8008fac:	bf00      	nop
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000f98 	.word	0x20000f98

08008fb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fc0:	f107 0308 	add.w	r3, r7, #8
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f857 	bl	8009078 <prvGetNextExpireTime>
 8008fca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f000 f803 	bl	8008fdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fd6:	f000 f8d5 	bl	8009184 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fda:	e7f1      	b.n	8008fc0 <prvTimerTask+0x8>

08008fdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fe6:	f7ff f93b 	bl	8008260 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fea:	f107 0308 	add.w	r3, r7, #8
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f866 	bl	80090c0 <prvSampleTimeNow>
 8008ff4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d130      	bne.n	800905e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <prvProcessTimerOrBlockTask+0x3c>
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	429a      	cmp	r2, r3
 8009008:	d806      	bhi.n	8009018 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800900a:	f7ff f937 	bl	800827c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff ff85 	bl	8008f20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009016:	e024      	b.n	8009062 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d008      	beq.n	8009030 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <prvProcessTimerOrBlockTask+0x90>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <prvProcessTimerOrBlockTask+0x50>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <prvProcessTimerOrBlockTask+0x52>
 800902c:	2300      	movs	r3, #0
 800902e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009030:	4b0f      	ldr	r3, [pc, #60]	; (8009070 <prvProcessTimerOrBlockTask+0x94>)
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	4619      	mov	r1, r3
 800903e:	f7fe fe7f 	bl	8007d40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009042:	f7ff f91b 	bl	800827c <xTaskResumeAll>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <prvProcessTimerOrBlockTask+0x98>)
 800904e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	f3bf 8f6f 	isb	sy
}
 800905c:	e001      	b.n	8009062 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800905e:	f7ff f90d 	bl	800827c <xTaskResumeAll>
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000f9c 	.word	0x20000f9c
 8009070:	20000fa0 	.word	0x20000fa0
 8009074:	e000ed04 	.word	0xe000ed04

08009078 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009080:	4b0e      	ldr	r3, [pc, #56]	; (80090bc <prvGetNextExpireTime+0x44>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <prvGetNextExpireTime+0x16>
 800908a:	2201      	movs	r2, #1
 800908c:	e000      	b.n	8009090 <prvGetNextExpireTime+0x18>
 800908e:	2200      	movs	r2, #0
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d105      	bne.n	80090a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800909c:	4b07      	ldr	r3, [pc, #28]	; (80090bc <prvGetNextExpireTime+0x44>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	e001      	b.n	80090ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090ac:	68fb      	ldr	r3, [r7, #12]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20000f98 	.word	0x20000f98

080090c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090c8:	f7ff f976 	bl	80083b8 <xTaskGetTickCount>
 80090cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090ce:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <prvSampleTimeNow+0x3c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d205      	bcs.n	80090e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090d8:	f000 f936 	bl	8009348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	e002      	b.n	80090ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090ea:	4a04      	ldr	r2, [pc, #16]	; (80090fc <prvSampleTimeNow+0x3c>)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090f0:	68fb      	ldr	r3, [r7, #12]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	20000fa8 	.word	0x20000fa8

08009100 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	429a      	cmp	r2, r3
 8009124:	d812      	bhi.n	800914c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	1ad2      	subs	r2, r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	429a      	cmp	r2, r3
 8009132:	d302      	bcc.n	800913a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	e01b      	b.n	8009172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800913a:	4b10      	ldr	r3, [pc, #64]	; (800917c <prvInsertTimerInActiveList+0x7c>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3304      	adds	r3, #4
 8009142:	4619      	mov	r1, r3
 8009144:	4610      	mov	r0, r2
 8009146:	f7fd fdbe 	bl	8006cc6 <vListInsert>
 800914a:	e012      	b.n	8009172 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d206      	bcs.n	8009162 <prvInsertTimerInActiveList+0x62>
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d302      	bcc.n	8009162 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800915c:	2301      	movs	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e007      	b.n	8009172 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009162:	4b07      	ldr	r3, [pc, #28]	; (8009180 <prvInsertTimerInActiveList+0x80>)
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3304      	adds	r3, #4
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f7fd fdaa 	bl	8006cc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009172:	697b      	ldr	r3, [r7, #20]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20000f9c 	.word	0x20000f9c
 8009180:	20000f98 	.word	0x20000f98

08009184 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b08e      	sub	sp, #56	; 0x38
 8009188:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800918a:	e0ca      	b.n	8009322 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	da18      	bge.n	80091c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009192:	1d3b      	adds	r3, r7, #4
 8009194:	3304      	adds	r3, #4
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	61fb      	str	r3, [r7, #28]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ba:	6850      	ldr	r0, [r2, #4]
 80091bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091be:	6892      	ldr	r2, [r2, #8]
 80091c0:	4611      	mov	r1, r2
 80091c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f2c0 80aa 	blt.w	8009320 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d004      	beq.n	80091e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	3304      	adds	r3, #4
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fd fdab 	bl	8006d38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091e2:	463b      	mov	r3, r7
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff ff6b 	bl	80090c0 <prvSampleTimeNow>
 80091ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b09      	cmp	r3, #9
 80091f0:	f200 8097 	bhi.w	8009322 <prvProcessReceivedCommands+0x19e>
 80091f4:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <prvProcessReceivedCommands+0x78>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	08009225 	.word	0x08009225
 8009200:	08009225 	.word	0x08009225
 8009204:	08009225 	.word	0x08009225
 8009208:	08009299 	.word	0x08009299
 800920c:	080092ad 	.word	0x080092ad
 8009210:	080092f7 	.word	0x080092f7
 8009214:	08009225 	.word	0x08009225
 8009218:	08009225 	.word	0x08009225
 800921c:	08009299 	.word	0x08009299
 8009220:	080092ad 	.word	0x080092ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800922a:	f043 0301 	orr.w	r3, r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	18d1      	adds	r1, r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009244:	f7ff ff5c 	bl	8009100 <prvInsertTimerInActiveList>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d069      	beq.n	8009322 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	d05e      	beq.n	8009322 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	441a      	add	r2, r3
 800926c:	2300      	movs	r3, #0
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	2300      	movs	r3, #0
 8009272:	2100      	movs	r1, #0
 8009274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009276:	f7ff fe05 	bl	8008e84 <xTimerGenericCommand>
 800927a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d14f      	bne.n	8009322 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	61bb      	str	r3, [r7, #24]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800929e:	f023 0301 	bic.w	r3, r3, #1
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80092aa:	e03a      	b.n	8009322 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b2:	f043 0301 	orr.w	r3, r3, #1
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	617b      	str	r3, [r7, #20]
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	699a      	ldr	r2, [r3, #24]
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	18d1      	adds	r1, r2, r3
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092f0:	f7ff ff06 	bl	8009100 <prvInsertTimerInActiveList>
					break;
 80092f4:	e015      	b.n	8009322 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d103      	bne.n	800930c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009306:	f000 fbdb 	bl	8009ac0 <vPortFree>
 800930a:	e00a      	b.n	8009322 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009312:	f023 0301 	bic.w	r3, r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800931e:	e000      	b.n	8009322 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009320:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009322:	4b08      	ldr	r3, [pc, #32]	; (8009344 <prvProcessReceivedCommands+0x1c0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	1d39      	adds	r1, r7, #4
 8009328:	2200      	movs	r2, #0
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe f8fc 	bl	8007528 <xQueueReceive>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	f47f af2a 	bne.w	800918c <prvProcessReceivedCommands+0x8>
	}
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	3730      	adds	r7, #48	; 0x30
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000fa0 	.word	0x20000fa0

08009348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800934e:	e048      	b.n	80093e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009350:	4b2d      	ldr	r3, [pc, #180]	; (8009408 <prvSwitchTimerLists+0xc0>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935a:	4b2b      	ldr	r3, [pc, #172]	; (8009408 <prvSwitchTimerLists+0xc0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3304      	adds	r3, #4
 8009368:	4618      	mov	r0, r3
 800936a:	f7fd fce5 	bl	8006d38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d02e      	beq.n	80093e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	4413      	add	r3, r2
 800938c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	429a      	cmp	r2, r3
 8009394:	d90e      	bls.n	80093b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093a2:	4b19      	ldr	r3, [pc, #100]	; (8009408 <prvSwitchTimerLists+0xc0>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3304      	adds	r3, #4
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	f7fd fc8a 	bl	8006cc6 <vListInsert>
 80093b2:	e016      	b.n	80093e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093b4:	2300      	movs	r3, #0
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	2300      	movs	r3, #0
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	2100      	movs	r1, #0
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f7ff fd60 	bl	8008e84 <xTimerGenericCommand>
 80093c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	603b      	str	r3, [r7, #0]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <prvSwitchTimerLists+0xc0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1b1      	bne.n	8009350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093ec:	4b06      	ldr	r3, [pc, #24]	; (8009408 <prvSwitchTimerLists+0xc0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093f2:	4b06      	ldr	r3, [pc, #24]	; (800940c <prvSwitchTimerLists+0xc4>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a04      	ldr	r2, [pc, #16]	; (8009408 <prvSwitchTimerLists+0xc0>)
 80093f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093fa:	4a04      	ldr	r2, [pc, #16]	; (800940c <prvSwitchTimerLists+0xc4>)
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	6013      	str	r3, [r2, #0]
}
 8009400:	bf00      	nop
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000f98 	.word	0x20000f98
 800940c:	20000f9c 	.word	0x20000f9c

08009410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009416:	f000 f965 	bl	80096e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800941a:	4b15      	ldr	r3, [pc, #84]	; (8009470 <prvCheckForValidListAndQueue+0x60>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d120      	bne.n	8009464 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009422:	4814      	ldr	r0, [pc, #80]	; (8009474 <prvCheckForValidListAndQueue+0x64>)
 8009424:	f7fd fbfe 	bl	8006c24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009428:	4813      	ldr	r0, [pc, #76]	; (8009478 <prvCheckForValidListAndQueue+0x68>)
 800942a:	f7fd fbfb 	bl	8006c24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <prvCheckForValidListAndQueue+0x6c>)
 8009430:	4a10      	ldr	r2, [pc, #64]	; (8009474 <prvCheckForValidListAndQueue+0x64>)
 8009432:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009434:	4b12      	ldr	r3, [pc, #72]	; (8009480 <prvCheckForValidListAndQueue+0x70>)
 8009436:	4a10      	ldr	r2, [pc, #64]	; (8009478 <prvCheckForValidListAndQueue+0x68>)
 8009438:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800943a:	2300      	movs	r3, #0
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	4b11      	ldr	r3, [pc, #68]	; (8009484 <prvCheckForValidListAndQueue+0x74>)
 8009440:	4a11      	ldr	r2, [pc, #68]	; (8009488 <prvCheckForValidListAndQueue+0x78>)
 8009442:	2110      	movs	r1, #16
 8009444:	200a      	movs	r0, #10
 8009446:	f7fd fd09 	bl	8006e5c <xQueueGenericCreateStatic>
 800944a:	4603      	mov	r3, r0
 800944c:	4a08      	ldr	r2, [pc, #32]	; (8009470 <prvCheckForValidListAndQueue+0x60>)
 800944e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009450:	4b07      	ldr	r3, [pc, #28]	; (8009470 <prvCheckForValidListAndQueue+0x60>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d005      	beq.n	8009464 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009458:	4b05      	ldr	r3, [pc, #20]	; (8009470 <prvCheckForValidListAndQueue+0x60>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	490b      	ldr	r1, [pc, #44]	; (800948c <prvCheckForValidListAndQueue+0x7c>)
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe fc1a 	bl	8007c98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009464:	f000 f96e 	bl	8009744 <vPortExitCritical>
}
 8009468:	bf00      	nop
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20000fa0 	.word	0x20000fa0
 8009474:	20000f70 	.word	0x20000f70
 8009478:	20000f84 	.word	0x20000f84
 800947c:	20000f98 	.word	0x20000f98
 8009480:	20000f9c 	.word	0x20000f9c
 8009484:	2000104c 	.word	0x2000104c
 8009488:	20000fac 	.word	0x20000fac
 800948c:	0800a788 	.word	0x0800a788

08009490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3b04      	subs	r3, #4
 80094a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3b04      	subs	r3, #4
 80094ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f023 0201 	bic.w	r2, r3, #1
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3b04      	subs	r3, #4
 80094be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094c0:	4a0c      	ldr	r2, [pc, #48]	; (80094f4 <pxPortInitialiseStack+0x64>)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3b14      	subs	r3, #20
 80094ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3b04      	subs	r3, #4
 80094d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f06f 0202 	mvn.w	r2, #2
 80094de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3b20      	subs	r3, #32
 80094e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094e6:	68fb      	ldr	r3, [r7, #12]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	080094f9 	.word	0x080094f9

080094f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <prvTaskExitError+0x54>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950a:	d00a      	beq.n	8009522 <prvTaskExitError+0x2a>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60fb      	str	r3, [r7, #12]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <prvTaskExitError+0x28>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	60bb      	str	r3, [r7, #8]
}
 8009534:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009536:	bf00      	nop
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0fc      	beq.n	8009538 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	20000010 	.word	0x20000010

08009550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <pxCurrentTCBConst2>)
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	6808      	ldr	r0, [r1, #0]
 8009556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955a:	f380 8809 	msr	PSP, r0
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8811 	msr	BASEPRI, r0
 800956a:	4770      	bx	lr
 800956c:	f3af 8000 	nop.w

08009570 <pxCurrentTCBConst2>:
 8009570:	20000a70 	.word	0x20000a70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop

08009578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009578:	4808      	ldr	r0, [pc, #32]	; (800959c <prvPortStartFirstTask+0x24>)
 800957a:	6800      	ldr	r0, [r0, #0]
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	f380 8808 	msr	MSP, r0
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8814 	msr	CONTROL, r0
 800958a:	b662      	cpsie	i
 800958c:	b661      	cpsie	f
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	df00      	svc	0
 8009598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800959a:	bf00      	nop
 800959c:	e000ed08 	.word	0xe000ed08

080095a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095a6:	4b46      	ldr	r3, [pc, #280]	; (80096c0 <xPortStartScheduler+0x120>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a46      	ldr	r2, [pc, #280]	; (80096c4 <xPortStartScheduler+0x124>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d10a      	bne.n	80095c6 <xPortStartScheduler+0x26>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095c6:	4b3e      	ldr	r3, [pc, #248]	; (80096c0 <xPortStartScheduler+0x120>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a3f      	ldr	r2, [pc, #252]	; (80096c8 <xPortStartScheduler+0x128>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d10a      	bne.n	80095e6 <xPortStartScheduler+0x46>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	60fb      	str	r3, [r7, #12]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095e6:	4b39      	ldr	r3, [pc, #228]	; (80096cc <xPortStartScheduler+0x12c>)
 80095e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	22ff      	movs	r2, #255	; 0xff
 80095f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4b31      	ldr	r3, [pc, #196]	; (80096d0 <xPortStartScheduler+0x130>)
 800960c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800960e:	4b31      	ldr	r3, [pc, #196]	; (80096d4 <xPortStartScheduler+0x134>)
 8009610:	2207      	movs	r2, #7
 8009612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009614:	e009      	b.n	800962a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009616:	4b2f      	ldr	r3, [pc, #188]	; (80096d4 <xPortStartScheduler+0x134>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3b01      	subs	r3, #1
 800961c:	4a2d      	ldr	r2, [pc, #180]	; (80096d4 <xPortStartScheduler+0x134>)
 800961e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009632:	2b80      	cmp	r3, #128	; 0x80
 8009634:	d0ef      	beq.n	8009616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <xPortStartScheduler+0x134>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1c3 0307 	rsb	r3, r3, #7
 800963e:	2b04      	cmp	r3, #4
 8009640:	d00a      	beq.n	8009658 <xPortStartScheduler+0xb8>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	60bb      	str	r3, [r7, #8]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <xPortStartScheduler+0x134>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	4a1d      	ldr	r2, [pc, #116]	; (80096d4 <xPortStartScheduler+0x134>)
 8009660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009662:	4b1c      	ldr	r3, [pc, #112]	; (80096d4 <xPortStartScheduler+0x134>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800966a:	4a1a      	ldr	r2, [pc, #104]	; (80096d4 <xPortStartScheduler+0x134>)
 800966c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	b2da      	uxtb	r2, r3
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009676:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <xPortStartScheduler+0x138>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a17      	ldr	r2, [pc, #92]	; (80096d8 <xPortStartScheduler+0x138>)
 800967c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <xPortStartScheduler+0x138>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a14      	ldr	r2, [pc, #80]	; (80096d8 <xPortStartScheduler+0x138>)
 8009688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800968c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800968e:	f000 f8dd 	bl	800984c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009692:	4b12      	ldr	r3, [pc, #72]	; (80096dc <xPortStartScheduler+0x13c>)
 8009694:	2200      	movs	r2, #0
 8009696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009698:	f000 f8fc 	bl	8009894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800969c:	4b10      	ldr	r3, [pc, #64]	; (80096e0 <xPortStartScheduler+0x140>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0f      	ldr	r2, [pc, #60]	; (80096e0 <xPortStartScheduler+0x140>)
 80096a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096a8:	f7ff ff66 	bl	8009578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096ac:	f7fe ff4e 	bl	800854c <vTaskSwitchContext>
	prvTaskExitError();
 80096b0:	f7ff ff22 	bl	80094f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	e000ed00 	.word	0xe000ed00
 80096c4:	410fc271 	.word	0x410fc271
 80096c8:	410fc270 	.word	0x410fc270
 80096cc:	e000e400 	.word	0xe000e400
 80096d0:	2000109c 	.word	0x2000109c
 80096d4:	200010a0 	.word	0x200010a0
 80096d8:	e000ed20 	.word	0xe000ed20
 80096dc:	20000010 	.word	0x20000010
 80096e0:	e000ef34 	.word	0xe000ef34

080096e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	607b      	str	r3, [r7, #4]
}
 80096fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <vPortEnterCritical+0x58>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	4a0d      	ldr	r2, [pc, #52]	; (800973c <vPortEnterCritical+0x58>)
 8009706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009708:	4b0c      	ldr	r3, [pc, #48]	; (800973c <vPortEnterCritical+0x58>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d10f      	bne.n	8009730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009710:	4b0b      	ldr	r3, [pc, #44]	; (8009740 <vPortEnterCritical+0x5c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <vPortEnterCritical+0x4c>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	603b      	str	r3, [r7, #0]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <vPortEnterCritical+0x4a>
	}
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20000010 	.word	0x20000010
 8009740:	e000ed04 	.word	0xe000ed04

08009744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <vPortExitCritical+0x50>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <vPortExitCritical+0x24>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	607b      	str	r3, [r7, #4]
}
 8009764:	bf00      	nop
 8009766:	e7fe      	b.n	8009766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <vPortExitCritical+0x50>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3b01      	subs	r3, #1
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <vPortExitCritical+0x50>)
 8009770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009772:	4b08      	ldr	r3, [pc, #32]	; (8009794 <vPortExitCritical+0x50>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <vPortExitCritical+0x42>
 800977a:	2300      	movs	r3, #0
 800977c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	f383 8811 	msr	BASEPRI, r3
}
 8009784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009786:	bf00      	nop
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20000010 	.word	0x20000010
	...

080097a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097a0:	f3ef 8009 	mrs	r0, PSP
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4b15      	ldr	r3, [pc, #84]	; (8009800 <pxCurrentTCBConst>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f01e 0f10 	tst.w	lr, #16
 80097b0:	bf08      	it	eq
 80097b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	6010      	str	r0, [r2, #0]
 80097bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097c4:	f380 8811 	msr	BASEPRI, r0
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f7fe febc 	bl	800854c <vTaskSwitchContext>
 80097d4:	f04f 0000 	mov.w	r0, #0
 80097d8:	f380 8811 	msr	BASEPRI, r0
 80097dc:	bc09      	pop	{r0, r3}
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	6808      	ldr	r0, [r1, #0]
 80097e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e6:	f01e 0f10 	tst.w	lr, #16
 80097ea:	bf08      	it	eq
 80097ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097f0:	f380 8809 	msr	PSP, r0
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst>:
 8009800:	20000a70 	.word	0x20000a70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	607b      	str	r3, [r7, #4]
}
 8009820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009822:	f7fe fdd9 	bl	80083d8 <xTaskIncrementTick>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800982c:	4b06      	ldr	r3, [pc, #24]	; (8009848 <xPortSysTickHandler+0x40>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	2300      	movs	r3, #0
 8009836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f383 8811 	msr	BASEPRI, r3
}
 800983e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009850:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009856:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <vPortSetupTimerInterrupt+0x38>)
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800985c:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <vPortSetupTimerInterrupt+0x3c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a0a      	ldr	r2, [pc, #40]	; (800988c <vPortSetupTimerInterrupt+0x40>)
 8009862:	fba2 2303 	umull	r2, r3, r2, r3
 8009866:	099b      	lsrs	r3, r3, #6
 8009868:	4a09      	ldr	r2, [pc, #36]	; (8009890 <vPortSetupTimerInterrupt+0x44>)
 800986a:	3b01      	subs	r3, #1
 800986c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800986e:	4b04      	ldr	r3, [pc, #16]	; (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009870:	2207      	movs	r2, #7
 8009872:	601a      	str	r2, [r3, #0]
}
 8009874:	bf00      	nop
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	e000e010 	.word	0xe000e010
 8009884:	e000e018 	.word	0xe000e018
 8009888:	20000004 	.word	0x20000004
 800988c:	10624dd3 	.word	0x10624dd3
 8009890:	e000e014 	.word	0xe000e014

08009894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098a4 <vPortEnableVFP+0x10>
 8009898:	6801      	ldr	r1, [r0, #0]
 800989a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800989e:	6001      	str	r1, [r0, #0]
 80098a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098a2:	bf00      	nop
 80098a4:	e000ed88 	.word	0xe000ed88

080098a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ae:	f3ef 8305 	mrs	r3, IPSR
 80098b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b0f      	cmp	r3, #15
 80098b8:	d914      	bls.n	80098e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098ba:	4a17      	ldr	r2, [pc, #92]	; (8009918 <vPortValidateInterruptPriority+0x70>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098c4:	4b15      	ldr	r3, [pc, #84]	; (800991c <vPortValidateInterruptPriority+0x74>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	7afa      	ldrb	r2, [r7, #11]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d20a      	bcs.n	80098e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	607b      	str	r3, [r7, #4]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <vPortValidateInterruptPriority+0x78>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098ec:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <vPortValidateInterruptPriority+0x7c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d90a      	bls.n	800990a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	603b      	str	r3, [r7, #0]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <vPortValidateInterruptPriority+0x60>
	}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	e000e3f0 	.word	0xe000e3f0
 800991c:	2000109c 	.word	0x2000109c
 8009920:	e000ed0c 	.word	0xe000ed0c
 8009924:	200010a0 	.word	0x200010a0

08009928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009934:	f7fe fc94 	bl	8008260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009938:	4b5b      	ldr	r3, [pc, #364]	; (8009aa8 <pvPortMalloc+0x180>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009940:	f000 f920 	bl	8009b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009944:	4b59      	ldr	r3, [pc, #356]	; (8009aac <pvPortMalloc+0x184>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4013      	ands	r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 8093 	bne.w	8009a78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01d      	beq.n	8009994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009958:	2208      	movs	r2, #8
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b00      	cmp	r3, #0
 8009968:	d014      	beq.n	8009994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f023 0307 	bic.w	r3, r3, #7
 8009970:	3308      	adds	r3, #8
 8009972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <pvPortMalloc+0x6c>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	617b      	str	r3, [r7, #20]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d06e      	beq.n	8009a78 <pvPortMalloc+0x150>
 800999a:	4b45      	ldr	r3, [pc, #276]	; (8009ab0 <pvPortMalloc+0x188>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d869      	bhi.n	8009a78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099a4:	4b43      	ldr	r3, [pc, #268]	; (8009ab4 <pvPortMalloc+0x18c>)
 80099a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099a8:	4b42      	ldr	r3, [pc, #264]	; (8009ab4 <pvPortMalloc+0x18c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ae:	e004      	b.n	80099ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d903      	bls.n	80099cc <pvPortMalloc+0xa4>
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1f1      	bne.n	80099b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099cc:	4b36      	ldr	r3, [pc, #216]	; (8009aa8 <pvPortMalloc+0x180>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d050      	beq.n	8009a78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2208      	movs	r2, #8
 80099dc:	4413      	add	r3, r2
 80099de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	2308      	movs	r3, #8
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d91f      	bls.n	8009a38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <pvPortMalloc+0xf8>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	613b      	str	r3, [r7, #16]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	1ad2      	subs	r2, r2, r3
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a32:	69b8      	ldr	r0, [r7, #24]
 8009a34:	f000 f908 	bl	8009c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a38:	4b1d      	ldr	r3, [pc, #116]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a46:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <pvPortMalloc+0x190>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d203      	bcs.n	8009a5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a52:	4b17      	ldr	r3, [pc, #92]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <pvPortMalloc+0x190>)
 8009a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <pvPortMalloc+0x184>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	431a      	orrs	r2, r3
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a6e:	4b13      	ldr	r3, [pc, #76]	; (8009abc <pvPortMalloc+0x194>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	4a11      	ldr	r2, [pc, #68]	; (8009abc <pvPortMalloc+0x194>)
 8009a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a78:	f7fe fc00 	bl	800827c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <pvPortMalloc+0x174>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60fb      	str	r3, [r7, #12]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <pvPortMalloc+0x172>
	return pvReturn;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3728      	adds	r7, #40	; 0x28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20001cac 	.word	0x20001cac
 8009aac:	20001cc0 	.word	0x20001cc0
 8009ab0:	20001cb0 	.word	0x20001cb0
 8009ab4:	20001ca4 	.word	0x20001ca4
 8009ab8:	20001cb4 	.word	0x20001cb4
 8009abc:	20001cb8 	.word	0x20001cb8

08009ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d04d      	beq.n	8009b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	425b      	negs	r3, r3
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4413      	add	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <vPortFree+0xb8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10a      	bne.n	8009b04 <vPortFree+0x44>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	60fb      	str	r3, [r7, #12]
}
 8009b00:	bf00      	nop
 8009b02:	e7fe      	b.n	8009b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <vPortFree+0x62>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60bb      	str	r3, [r7, #8]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <vPortFree+0xb8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01e      	beq.n	8009b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11a      	bne.n	8009b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <vPortFree+0xb8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	43db      	mvns	r3, r3
 8009b42:	401a      	ands	r2, r3
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b48:	f7fe fb8a 	bl	8008260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <vPortFree+0xbc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4413      	add	r3, r2
 8009b56:	4a09      	ldr	r2, [pc, #36]	; (8009b7c <vPortFree+0xbc>)
 8009b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f000 f874 	bl	8009c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <vPortFree+0xc0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a06      	ldr	r2, [pc, #24]	; (8009b80 <vPortFree+0xc0>)
 8009b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b6a:	f7fe fb87 	bl	800827c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b6e:	bf00      	nop
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20001cc0 	.word	0x20001cc0
 8009b7c:	20001cb0 	.word	0x20001cb0
 8009b80:	20001cbc 	.word	0x20001cbc

08009b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b90:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <prvHeapInit+0xac>)
 8009b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00c      	beq.n	8009bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3307      	adds	r3, #7
 8009ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	4a1f      	ldr	r2, [pc, #124]	; (8009c30 <prvHeapInit+0xac>)
 8009bb4:	4413      	add	r3, r2
 8009bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bbc:	4a1d      	ldr	r2, [pc, #116]	; (8009c34 <prvHeapInit+0xb0>)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bc2:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <prvHeapInit+0xb0>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	4413      	add	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1a9b      	subs	r3, r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4a15      	ldr	r2, [pc, #84]	; (8009c38 <prvHeapInit+0xb4>)
 8009be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009be6:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <prvHeapInit+0xb4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2200      	movs	r2, #0
 8009bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <prvHeapInit+0xb4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c04:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <prvHeapInit+0xb4>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <prvHeapInit+0xb8>)
 8009c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <prvHeapInit+0xbc>)
 8009c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c1c:	4b09      	ldr	r3, [pc, #36]	; (8009c44 <prvHeapInit+0xc0>)
 8009c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c22:	601a      	str	r2, [r3, #0]
}
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	200010a4 	.word	0x200010a4
 8009c34:	20001ca4 	.word	0x20001ca4
 8009c38:	20001cac 	.word	0x20001cac
 8009c3c:	20001cb4 	.word	0x20001cb4
 8009c40:	20001cb0 	.word	0x20001cb0
 8009c44:	20001cc0 	.word	0x20001cc0

08009c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c50:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <prvInsertBlockIntoFreeList+0xac>)
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	e002      	b.n	8009c5c <prvInsertBlockIntoFreeList+0x14>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d8f7      	bhi.n	8009c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	4413      	add	r3, r2
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d108      	bne.n	8009c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	441a      	add	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	441a      	add	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d118      	bne.n	8009cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d00d      	beq.n	8009cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e008      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cc6:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	e003      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d002      	beq.n	8009ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20001ca4 	.word	0x20001ca4
 8009cf8:	20001cac 	.word	0x20001cac

08009cfc <__errno>:
 8009cfc:	4b01      	ldr	r3, [pc, #4]	; (8009d04 <__errno+0x8>)
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20000014 	.word	0x20000014

08009d08 <__libc_init_array>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	4d0d      	ldr	r5, [pc, #52]	; (8009d40 <__libc_init_array+0x38>)
 8009d0c:	4c0d      	ldr	r4, [pc, #52]	; (8009d44 <__libc_init_array+0x3c>)
 8009d0e:	1b64      	subs	r4, r4, r5
 8009d10:	10a4      	asrs	r4, r4, #2
 8009d12:	2600      	movs	r6, #0
 8009d14:	42a6      	cmp	r6, r4
 8009d16:	d109      	bne.n	8009d2c <__libc_init_array+0x24>
 8009d18:	4d0b      	ldr	r5, [pc, #44]	; (8009d48 <__libc_init_array+0x40>)
 8009d1a:	4c0c      	ldr	r4, [pc, #48]	; (8009d4c <__libc_init_array+0x44>)
 8009d1c:	f000 fcf8 	bl	800a710 <_init>
 8009d20:	1b64      	subs	r4, r4, r5
 8009d22:	10a4      	asrs	r4, r4, #2
 8009d24:	2600      	movs	r6, #0
 8009d26:	42a6      	cmp	r6, r4
 8009d28:	d105      	bne.n	8009d36 <__libc_init_array+0x2e>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d30:	4798      	blx	r3
 8009d32:	3601      	adds	r6, #1
 8009d34:	e7ee      	b.n	8009d14 <__libc_init_array+0xc>
 8009d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d3a:	4798      	blx	r3
 8009d3c:	3601      	adds	r6, #1
 8009d3e:	e7f2      	b.n	8009d26 <__libc_init_array+0x1e>
 8009d40:	0800a90c 	.word	0x0800a90c
 8009d44:	0800a90c 	.word	0x0800a90c
 8009d48:	0800a90c 	.word	0x0800a90c
 8009d4c:	0800a910 	.word	0x0800a910

08009d50 <__retarget_lock_acquire_recursive>:
 8009d50:	4770      	bx	lr

08009d52 <__retarget_lock_release_recursive>:
 8009d52:	4770      	bx	lr

08009d54 <memcpy>:
 8009d54:	440a      	add	r2, r1
 8009d56:	4291      	cmp	r1, r2
 8009d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d5c:	d100      	bne.n	8009d60 <memcpy+0xc>
 8009d5e:	4770      	bx	lr
 8009d60:	b510      	push	{r4, lr}
 8009d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6a:	4291      	cmp	r1, r2
 8009d6c:	d1f9      	bne.n	8009d62 <memcpy+0xe>
 8009d6e:	bd10      	pop	{r4, pc}

08009d70 <memset>:
 8009d70:	4402      	add	r2, r0
 8009d72:	4603      	mov	r3, r0
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d100      	bne.n	8009d7a <memset+0xa>
 8009d78:	4770      	bx	lr
 8009d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d7e:	e7f9      	b.n	8009d74 <memset+0x4>

08009d80 <sbrk_aligned>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	4e0e      	ldr	r6, [pc, #56]	; (8009dbc <sbrk_aligned+0x3c>)
 8009d84:	460c      	mov	r4, r1
 8009d86:	6831      	ldr	r1, [r6, #0]
 8009d88:	4605      	mov	r5, r0
 8009d8a:	b911      	cbnz	r1, 8009d92 <sbrk_aligned+0x12>
 8009d8c:	f000 f8f6 	bl	8009f7c <_sbrk_r>
 8009d90:	6030      	str	r0, [r6, #0]
 8009d92:	4621      	mov	r1, r4
 8009d94:	4628      	mov	r0, r5
 8009d96:	f000 f8f1 	bl	8009f7c <_sbrk_r>
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	d00a      	beq.n	8009db4 <sbrk_aligned+0x34>
 8009d9e:	1cc4      	adds	r4, r0, #3
 8009da0:	f024 0403 	bic.w	r4, r4, #3
 8009da4:	42a0      	cmp	r0, r4
 8009da6:	d007      	beq.n	8009db8 <sbrk_aligned+0x38>
 8009da8:	1a21      	subs	r1, r4, r0
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 f8e6 	bl	8009f7c <_sbrk_r>
 8009db0:	3001      	adds	r0, #1
 8009db2:	d101      	bne.n	8009db8 <sbrk_aligned+0x38>
 8009db4:	f04f 34ff 	mov.w	r4, #4294967295
 8009db8:	4620      	mov	r0, r4
 8009dba:	bd70      	pop	{r4, r5, r6, pc}
 8009dbc:	20001ccc 	.word	0x20001ccc

08009dc0 <_malloc_r>:
 8009dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc4:	1ccd      	adds	r5, r1, #3
 8009dc6:	f025 0503 	bic.w	r5, r5, #3
 8009dca:	3508      	adds	r5, #8
 8009dcc:	2d0c      	cmp	r5, #12
 8009dce:	bf38      	it	cc
 8009dd0:	250c      	movcc	r5, #12
 8009dd2:	2d00      	cmp	r5, #0
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	db01      	blt.n	8009ddc <_malloc_r+0x1c>
 8009dd8:	42a9      	cmp	r1, r5
 8009dda:	d905      	bls.n	8009de8 <_malloc_r+0x28>
 8009ddc:	230c      	movs	r3, #12
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	2600      	movs	r6, #0
 8009de2:	4630      	mov	r0, r6
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	4e2e      	ldr	r6, [pc, #184]	; (8009ea4 <_malloc_r+0xe4>)
 8009dea:	f000 f8f7 	bl	8009fdc <__malloc_lock>
 8009dee:	6833      	ldr	r3, [r6, #0]
 8009df0:	461c      	mov	r4, r3
 8009df2:	bb34      	cbnz	r4, 8009e42 <_malloc_r+0x82>
 8009df4:	4629      	mov	r1, r5
 8009df6:	4638      	mov	r0, r7
 8009df8:	f7ff ffc2 	bl	8009d80 <sbrk_aligned>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	4604      	mov	r4, r0
 8009e00:	d14d      	bne.n	8009e9e <_malloc_r+0xde>
 8009e02:	6834      	ldr	r4, [r6, #0]
 8009e04:	4626      	mov	r6, r4
 8009e06:	2e00      	cmp	r6, #0
 8009e08:	d140      	bne.n	8009e8c <_malloc_r+0xcc>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4638      	mov	r0, r7
 8009e10:	eb04 0803 	add.w	r8, r4, r3
 8009e14:	f000 f8b2 	bl	8009f7c <_sbrk_r>
 8009e18:	4580      	cmp	r8, r0
 8009e1a:	d13a      	bne.n	8009e92 <_malloc_r+0xd2>
 8009e1c:	6821      	ldr	r1, [r4, #0]
 8009e1e:	3503      	adds	r5, #3
 8009e20:	1a6d      	subs	r5, r5, r1
 8009e22:	f025 0503 	bic.w	r5, r5, #3
 8009e26:	3508      	adds	r5, #8
 8009e28:	2d0c      	cmp	r5, #12
 8009e2a:	bf38      	it	cc
 8009e2c:	250c      	movcc	r5, #12
 8009e2e:	4629      	mov	r1, r5
 8009e30:	4638      	mov	r0, r7
 8009e32:	f7ff ffa5 	bl	8009d80 <sbrk_aligned>
 8009e36:	3001      	adds	r0, #1
 8009e38:	d02b      	beq.n	8009e92 <_malloc_r+0xd2>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	442b      	add	r3, r5
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	e00e      	b.n	8009e60 <_malloc_r+0xa0>
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	1b52      	subs	r2, r2, r5
 8009e46:	d41e      	bmi.n	8009e86 <_malloc_r+0xc6>
 8009e48:	2a0b      	cmp	r2, #11
 8009e4a:	d916      	bls.n	8009e7a <_malloc_r+0xba>
 8009e4c:	1961      	adds	r1, r4, r5
 8009e4e:	42a3      	cmp	r3, r4
 8009e50:	6025      	str	r5, [r4, #0]
 8009e52:	bf18      	it	ne
 8009e54:	6059      	strne	r1, [r3, #4]
 8009e56:	6863      	ldr	r3, [r4, #4]
 8009e58:	bf08      	it	eq
 8009e5a:	6031      	streq	r1, [r6, #0]
 8009e5c:	5162      	str	r2, [r4, r5]
 8009e5e:	604b      	str	r3, [r1, #4]
 8009e60:	4638      	mov	r0, r7
 8009e62:	f104 060b 	add.w	r6, r4, #11
 8009e66:	f000 f8bf 	bl	8009fe8 <__malloc_unlock>
 8009e6a:	f026 0607 	bic.w	r6, r6, #7
 8009e6e:	1d23      	adds	r3, r4, #4
 8009e70:	1af2      	subs	r2, r6, r3
 8009e72:	d0b6      	beq.n	8009de2 <_malloc_r+0x22>
 8009e74:	1b9b      	subs	r3, r3, r6
 8009e76:	50a3      	str	r3, [r4, r2]
 8009e78:	e7b3      	b.n	8009de2 <_malloc_r+0x22>
 8009e7a:	6862      	ldr	r2, [r4, #4]
 8009e7c:	42a3      	cmp	r3, r4
 8009e7e:	bf0c      	ite	eq
 8009e80:	6032      	streq	r2, [r6, #0]
 8009e82:	605a      	strne	r2, [r3, #4]
 8009e84:	e7ec      	b.n	8009e60 <_malloc_r+0xa0>
 8009e86:	4623      	mov	r3, r4
 8009e88:	6864      	ldr	r4, [r4, #4]
 8009e8a:	e7b2      	b.n	8009df2 <_malloc_r+0x32>
 8009e8c:	4634      	mov	r4, r6
 8009e8e:	6876      	ldr	r6, [r6, #4]
 8009e90:	e7b9      	b.n	8009e06 <_malloc_r+0x46>
 8009e92:	230c      	movs	r3, #12
 8009e94:	603b      	str	r3, [r7, #0]
 8009e96:	4638      	mov	r0, r7
 8009e98:	f000 f8a6 	bl	8009fe8 <__malloc_unlock>
 8009e9c:	e7a1      	b.n	8009de2 <_malloc_r+0x22>
 8009e9e:	6025      	str	r5, [r4, #0]
 8009ea0:	e7de      	b.n	8009e60 <_malloc_r+0xa0>
 8009ea2:	bf00      	nop
 8009ea4:	20001cc8 	.word	0x20001cc8

08009ea8 <cleanup_glue>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	460c      	mov	r4, r1
 8009eac:	6809      	ldr	r1, [r1, #0]
 8009eae:	4605      	mov	r5, r0
 8009eb0:	b109      	cbz	r1, 8009eb6 <cleanup_glue+0xe>
 8009eb2:	f7ff fff9 	bl	8009ea8 <cleanup_glue>
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4628      	mov	r0, r5
 8009eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ebe:	f000 b899 	b.w	8009ff4 <_free_r>
	...

08009ec4 <_reclaim_reent>:
 8009ec4:	4b2c      	ldr	r3, [pc, #176]	; (8009f78 <_reclaim_reent+0xb4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4283      	cmp	r3, r0
 8009eca:	b570      	push	{r4, r5, r6, lr}
 8009ecc:	4604      	mov	r4, r0
 8009ece:	d051      	beq.n	8009f74 <_reclaim_reent+0xb0>
 8009ed0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009ed2:	b143      	cbz	r3, 8009ee6 <_reclaim_reent+0x22>
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d14a      	bne.n	8009f70 <_reclaim_reent+0xac>
 8009eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009edc:	6819      	ldr	r1, [r3, #0]
 8009ede:	b111      	cbz	r1, 8009ee6 <_reclaim_reent+0x22>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 f887 	bl	8009ff4 <_free_r>
 8009ee6:	6961      	ldr	r1, [r4, #20]
 8009ee8:	b111      	cbz	r1, 8009ef0 <_reclaim_reent+0x2c>
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 f882 	bl	8009ff4 <_free_r>
 8009ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ef2:	b111      	cbz	r1, 8009efa <_reclaim_reent+0x36>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f87d 	bl	8009ff4 <_free_r>
 8009efa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009efc:	b111      	cbz	r1, 8009f04 <_reclaim_reent+0x40>
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f878 	bl	8009ff4 <_free_r>
 8009f04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009f06:	b111      	cbz	r1, 8009f0e <_reclaim_reent+0x4a>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 f873 	bl	8009ff4 <_free_r>
 8009f0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f10:	b111      	cbz	r1, 8009f18 <_reclaim_reent+0x54>
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f86e 	bl	8009ff4 <_free_r>
 8009f18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009f1a:	b111      	cbz	r1, 8009f22 <_reclaim_reent+0x5e>
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 f869 	bl	8009ff4 <_free_r>
 8009f22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f24:	b111      	cbz	r1, 8009f2c <_reclaim_reent+0x68>
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 f864 	bl	8009ff4 <_free_r>
 8009f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f2e:	b111      	cbz	r1, 8009f36 <_reclaim_reent+0x72>
 8009f30:	4620      	mov	r0, r4
 8009f32:	f000 f85f 	bl	8009ff4 <_free_r>
 8009f36:	69a3      	ldr	r3, [r4, #24]
 8009f38:	b1e3      	cbz	r3, 8009f74 <_reclaim_reent+0xb0>
 8009f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4798      	blx	r3
 8009f40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f42:	b1b9      	cbz	r1, 8009f74 <_reclaim_reent+0xb0>
 8009f44:	4620      	mov	r0, r4
 8009f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f4a:	f7ff bfad 	b.w	8009ea8 <cleanup_glue>
 8009f4e:	5949      	ldr	r1, [r1, r5]
 8009f50:	b941      	cbnz	r1, 8009f64 <_reclaim_reent+0xa0>
 8009f52:	3504      	adds	r5, #4
 8009f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f56:	2d80      	cmp	r5, #128	; 0x80
 8009f58:	68d9      	ldr	r1, [r3, #12]
 8009f5a:	d1f8      	bne.n	8009f4e <_reclaim_reent+0x8a>
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 f849 	bl	8009ff4 <_free_r>
 8009f62:	e7ba      	b.n	8009eda <_reclaim_reent+0x16>
 8009f64:	680e      	ldr	r6, [r1, #0]
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 f844 	bl	8009ff4 <_free_r>
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	e7ef      	b.n	8009f50 <_reclaim_reent+0x8c>
 8009f70:	2500      	movs	r5, #0
 8009f72:	e7ef      	b.n	8009f54 <_reclaim_reent+0x90>
 8009f74:	bd70      	pop	{r4, r5, r6, pc}
 8009f76:	bf00      	nop
 8009f78:	20000014 	.word	0x20000014

08009f7c <_sbrk_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_sbrk_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f7 fb0a 	bl	80015a0 <_sbrk>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_sbrk_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_sbrk_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20001cd0 	.word	0x20001cd0

08009f9c <siprintf>:
 8009f9c:	b40e      	push	{r1, r2, r3}
 8009f9e:	b500      	push	{lr}
 8009fa0:	b09c      	sub	sp, #112	; 0x70
 8009fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8009fa4:	9002      	str	r0, [sp, #8]
 8009fa6:	9006      	str	r0, [sp, #24]
 8009fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fac:	4809      	ldr	r0, [pc, #36]	; (8009fd4 <siprintf+0x38>)
 8009fae:	9107      	str	r1, [sp, #28]
 8009fb0:	9104      	str	r1, [sp, #16]
 8009fb2:	4909      	ldr	r1, [pc, #36]	; (8009fd8 <siprintf+0x3c>)
 8009fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb8:	9105      	str	r1, [sp, #20]
 8009fba:	6800      	ldr	r0, [r0, #0]
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	a902      	add	r1, sp, #8
 8009fc0:	f000 f8c0 	bl	800a144 <_svfiprintf_r>
 8009fc4:	9b02      	ldr	r3, [sp, #8]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
 8009fca:	b01c      	add	sp, #112	; 0x70
 8009fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fd0:	b003      	add	sp, #12
 8009fd2:	4770      	bx	lr
 8009fd4:	20000014 	.word	0x20000014
 8009fd8:	ffff0208 	.word	0xffff0208

08009fdc <__malloc_lock>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__malloc_lock+0x8>)
 8009fde:	f7ff beb7 	b.w	8009d50 <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	20001cc4 	.word	0x20001cc4

08009fe8 <__malloc_unlock>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__malloc_unlock+0x8>)
 8009fea:	f7ff beb2 	b.w	8009d52 <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	20001cc4 	.word	0x20001cc4

08009ff4 <_free_r>:
 8009ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d044      	beq.n	800a084 <_free_r+0x90>
 8009ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ffe:	9001      	str	r0, [sp, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f1a1 0404 	sub.w	r4, r1, #4
 800a006:	bfb8      	it	lt
 800a008:	18e4      	addlt	r4, r4, r3
 800a00a:	f7ff ffe7 	bl	8009fdc <__malloc_lock>
 800a00e:	4a1e      	ldr	r2, [pc, #120]	; (800a088 <_free_r+0x94>)
 800a010:	9801      	ldr	r0, [sp, #4]
 800a012:	6813      	ldr	r3, [r2, #0]
 800a014:	b933      	cbnz	r3, 800a024 <_free_r+0x30>
 800a016:	6063      	str	r3, [r4, #4]
 800a018:	6014      	str	r4, [r2, #0]
 800a01a:	b003      	add	sp, #12
 800a01c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a020:	f7ff bfe2 	b.w	8009fe8 <__malloc_unlock>
 800a024:	42a3      	cmp	r3, r4
 800a026:	d908      	bls.n	800a03a <_free_r+0x46>
 800a028:	6825      	ldr	r5, [r4, #0]
 800a02a:	1961      	adds	r1, r4, r5
 800a02c:	428b      	cmp	r3, r1
 800a02e:	bf01      	itttt	eq
 800a030:	6819      	ldreq	r1, [r3, #0]
 800a032:	685b      	ldreq	r3, [r3, #4]
 800a034:	1949      	addeq	r1, r1, r5
 800a036:	6021      	streq	r1, [r4, #0]
 800a038:	e7ed      	b.n	800a016 <_free_r+0x22>
 800a03a:	461a      	mov	r2, r3
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	b10b      	cbz	r3, 800a044 <_free_r+0x50>
 800a040:	42a3      	cmp	r3, r4
 800a042:	d9fa      	bls.n	800a03a <_free_r+0x46>
 800a044:	6811      	ldr	r1, [r2, #0]
 800a046:	1855      	adds	r5, r2, r1
 800a048:	42a5      	cmp	r5, r4
 800a04a:	d10b      	bne.n	800a064 <_free_r+0x70>
 800a04c:	6824      	ldr	r4, [r4, #0]
 800a04e:	4421      	add	r1, r4
 800a050:	1854      	adds	r4, r2, r1
 800a052:	42a3      	cmp	r3, r4
 800a054:	6011      	str	r1, [r2, #0]
 800a056:	d1e0      	bne.n	800a01a <_free_r+0x26>
 800a058:	681c      	ldr	r4, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	6053      	str	r3, [r2, #4]
 800a05e:	4421      	add	r1, r4
 800a060:	6011      	str	r1, [r2, #0]
 800a062:	e7da      	b.n	800a01a <_free_r+0x26>
 800a064:	d902      	bls.n	800a06c <_free_r+0x78>
 800a066:	230c      	movs	r3, #12
 800a068:	6003      	str	r3, [r0, #0]
 800a06a:	e7d6      	b.n	800a01a <_free_r+0x26>
 800a06c:	6825      	ldr	r5, [r4, #0]
 800a06e:	1961      	adds	r1, r4, r5
 800a070:	428b      	cmp	r3, r1
 800a072:	bf04      	itt	eq
 800a074:	6819      	ldreq	r1, [r3, #0]
 800a076:	685b      	ldreq	r3, [r3, #4]
 800a078:	6063      	str	r3, [r4, #4]
 800a07a:	bf04      	itt	eq
 800a07c:	1949      	addeq	r1, r1, r5
 800a07e:	6021      	streq	r1, [r4, #0]
 800a080:	6054      	str	r4, [r2, #4]
 800a082:	e7ca      	b.n	800a01a <_free_r+0x26>
 800a084:	b003      	add	sp, #12
 800a086:	bd30      	pop	{r4, r5, pc}
 800a088:	20001cc8 	.word	0x20001cc8

0800a08c <__ssputs_r>:
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	688e      	ldr	r6, [r1, #8]
 800a092:	429e      	cmp	r6, r3
 800a094:	4682      	mov	sl, r0
 800a096:	460c      	mov	r4, r1
 800a098:	4690      	mov	r8, r2
 800a09a:	461f      	mov	r7, r3
 800a09c:	d838      	bhi.n	800a110 <__ssputs_r+0x84>
 800a09e:	898a      	ldrh	r2, [r1, #12]
 800a0a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0a4:	d032      	beq.n	800a10c <__ssputs_r+0x80>
 800a0a6:	6825      	ldr	r5, [r4, #0]
 800a0a8:	6909      	ldr	r1, [r1, #16]
 800a0aa:	eba5 0901 	sub.w	r9, r5, r1
 800a0ae:	6965      	ldr	r5, [r4, #20]
 800a0b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	444b      	add	r3, r9
 800a0bc:	106d      	asrs	r5, r5, #1
 800a0be:	429d      	cmp	r5, r3
 800a0c0:	bf38      	it	cc
 800a0c2:	461d      	movcc	r5, r3
 800a0c4:	0553      	lsls	r3, r2, #21
 800a0c6:	d531      	bpl.n	800a12c <__ssputs_r+0xa0>
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	f7ff fe79 	bl	8009dc0 <_malloc_r>
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	b950      	cbnz	r0, 800a0e8 <__ssputs_r+0x5c>
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	f8ca 3000 	str.w	r3, [sl]
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e8:	6921      	ldr	r1, [r4, #16]
 800a0ea:	464a      	mov	r2, r9
 800a0ec:	f7ff fe32 	bl	8009d54 <memcpy>
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fa:	81a3      	strh	r3, [r4, #12]
 800a0fc:	6126      	str	r6, [r4, #16]
 800a0fe:	6165      	str	r5, [r4, #20]
 800a100:	444e      	add	r6, r9
 800a102:	eba5 0509 	sub.w	r5, r5, r9
 800a106:	6026      	str	r6, [r4, #0]
 800a108:	60a5      	str	r5, [r4, #8]
 800a10a:	463e      	mov	r6, r7
 800a10c:	42be      	cmp	r6, r7
 800a10e:	d900      	bls.n	800a112 <__ssputs_r+0x86>
 800a110:	463e      	mov	r6, r7
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	4632      	mov	r2, r6
 800a116:	4641      	mov	r1, r8
 800a118:	f000 faa8 	bl	800a66c <memmove>
 800a11c:	68a3      	ldr	r3, [r4, #8]
 800a11e:	1b9b      	subs	r3, r3, r6
 800a120:	60a3      	str	r3, [r4, #8]
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	4433      	add	r3, r6
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	2000      	movs	r0, #0
 800a12a:	e7db      	b.n	800a0e4 <__ssputs_r+0x58>
 800a12c:	462a      	mov	r2, r5
 800a12e:	f000 fab7 	bl	800a6a0 <_realloc_r>
 800a132:	4606      	mov	r6, r0
 800a134:	2800      	cmp	r0, #0
 800a136:	d1e1      	bne.n	800a0fc <__ssputs_r+0x70>
 800a138:	6921      	ldr	r1, [r4, #16]
 800a13a:	4650      	mov	r0, sl
 800a13c:	f7ff ff5a 	bl	8009ff4 <_free_r>
 800a140:	e7c7      	b.n	800a0d2 <__ssputs_r+0x46>
	...

0800a144 <_svfiprintf_r>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	4698      	mov	r8, r3
 800a14a:	898b      	ldrh	r3, [r1, #12]
 800a14c:	061b      	lsls	r3, r3, #24
 800a14e:	b09d      	sub	sp, #116	; 0x74
 800a150:	4607      	mov	r7, r0
 800a152:	460d      	mov	r5, r1
 800a154:	4614      	mov	r4, r2
 800a156:	d50e      	bpl.n	800a176 <_svfiprintf_r+0x32>
 800a158:	690b      	ldr	r3, [r1, #16]
 800a15a:	b963      	cbnz	r3, 800a176 <_svfiprintf_r+0x32>
 800a15c:	2140      	movs	r1, #64	; 0x40
 800a15e:	f7ff fe2f 	bl	8009dc0 <_malloc_r>
 800a162:	6028      	str	r0, [r5, #0]
 800a164:	6128      	str	r0, [r5, #16]
 800a166:	b920      	cbnz	r0, 800a172 <_svfiprintf_r+0x2e>
 800a168:	230c      	movs	r3, #12
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295
 800a170:	e0d1      	b.n	800a316 <_svfiprintf_r+0x1d2>
 800a172:	2340      	movs	r3, #64	; 0x40
 800a174:	616b      	str	r3, [r5, #20]
 800a176:	2300      	movs	r3, #0
 800a178:	9309      	str	r3, [sp, #36]	; 0x24
 800a17a:	2320      	movs	r3, #32
 800a17c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a180:	f8cd 800c 	str.w	r8, [sp, #12]
 800a184:	2330      	movs	r3, #48	; 0x30
 800a186:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a330 <_svfiprintf_r+0x1ec>
 800a18a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a18e:	f04f 0901 	mov.w	r9, #1
 800a192:	4623      	mov	r3, r4
 800a194:	469a      	mov	sl, r3
 800a196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a19a:	b10a      	cbz	r2, 800a1a0 <_svfiprintf_r+0x5c>
 800a19c:	2a25      	cmp	r2, #37	; 0x25
 800a19e:	d1f9      	bne.n	800a194 <_svfiprintf_r+0x50>
 800a1a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a1a4:	d00b      	beq.n	800a1be <_svfiprintf_r+0x7a>
 800a1a6:	465b      	mov	r3, fp
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f7ff ff6d 	bl	800a08c <__ssputs_r>
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	f000 80aa 	beq.w	800a30c <_svfiprintf_r+0x1c8>
 800a1b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ba:	445a      	add	r2, fp
 800a1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1be:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 80a2 	beq.w	800a30c <_svfiprintf_r+0x1c8>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1d2:	f10a 0a01 	add.w	sl, sl, #1
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	9307      	str	r3, [sp, #28]
 800a1da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1de:	931a      	str	r3, [sp, #104]	; 0x68
 800a1e0:	4654      	mov	r4, sl
 800a1e2:	2205      	movs	r2, #5
 800a1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e8:	4851      	ldr	r0, [pc, #324]	; (800a330 <_svfiprintf_r+0x1ec>)
 800a1ea:	f7f6 f819 	bl	8000220 <memchr>
 800a1ee:	9a04      	ldr	r2, [sp, #16]
 800a1f0:	b9d8      	cbnz	r0, 800a22a <_svfiprintf_r+0xe6>
 800a1f2:	06d0      	lsls	r0, r2, #27
 800a1f4:	bf44      	itt	mi
 800a1f6:	2320      	movmi	r3, #32
 800a1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1fc:	0711      	lsls	r1, r2, #28
 800a1fe:	bf44      	itt	mi
 800a200:	232b      	movmi	r3, #43	; 0x2b
 800a202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a206:	f89a 3000 	ldrb.w	r3, [sl]
 800a20a:	2b2a      	cmp	r3, #42	; 0x2a
 800a20c:	d015      	beq.n	800a23a <_svfiprintf_r+0xf6>
 800a20e:	9a07      	ldr	r2, [sp, #28]
 800a210:	4654      	mov	r4, sl
 800a212:	2000      	movs	r0, #0
 800a214:	f04f 0c0a 	mov.w	ip, #10
 800a218:	4621      	mov	r1, r4
 800a21a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a21e:	3b30      	subs	r3, #48	; 0x30
 800a220:	2b09      	cmp	r3, #9
 800a222:	d94e      	bls.n	800a2c2 <_svfiprintf_r+0x17e>
 800a224:	b1b0      	cbz	r0, 800a254 <_svfiprintf_r+0x110>
 800a226:	9207      	str	r2, [sp, #28]
 800a228:	e014      	b.n	800a254 <_svfiprintf_r+0x110>
 800a22a:	eba0 0308 	sub.w	r3, r0, r8
 800a22e:	fa09 f303 	lsl.w	r3, r9, r3
 800a232:	4313      	orrs	r3, r2
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	46a2      	mov	sl, r4
 800a238:	e7d2      	b.n	800a1e0 <_svfiprintf_r+0x9c>
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	1d19      	adds	r1, r3, #4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	9103      	str	r1, [sp, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	bfbb      	ittet	lt
 800a246:	425b      	neglt	r3, r3
 800a248:	f042 0202 	orrlt.w	r2, r2, #2
 800a24c:	9307      	strge	r3, [sp, #28]
 800a24e:	9307      	strlt	r3, [sp, #28]
 800a250:	bfb8      	it	lt
 800a252:	9204      	strlt	r2, [sp, #16]
 800a254:	7823      	ldrb	r3, [r4, #0]
 800a256:	2b2e      	cmp	r3, #46	; 0x2e
 800a258:	d10c      	bne.n	800a274 <_svfiprintf_r+0x130>
 800a25a:	7863      	ldrb	r3, [r4, #1]
 800a25c:	2b2a      	cmp	r3, #42	; 0x2a
 800a25e:	d135      	bne.n	800a2cc <_svfiprintf_r+0x188>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	9203      	str	r2, [sp, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfb8      	it	lt
 800a26c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a270:	3402      	adds	r4, #2
 800a272:	9305      	str	r3, [sp, #20]
 800a274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a340 <_svfiprintf_r+0x1fc>
 800a278:	7821      	ldrb	r1, [r4, #0]
 800a27a:	2203      	movs	r2, #3
 800a27c:	4650      	mov	r0, sl
 800a27e:	f7f5 ffcf 	bl	8000220 <memchr>
 800a282:	b140      	cbz	r0, 800a296 <_svfiprintf_r+0x152>
 800a284:	2340      	movs	r3, #64	; 0x40
 800a286:	eba0 000a 	sub.w	r0, r0, sl
 800a28a:	fa03 f000 	lsl.w	r0, r3, r0
 800a28e:	9b04      	ldr	r3, [sp, #16]
 800a290:	4303      	orrs	r3, r0
 800a292:	3401      	adds	r4, #1
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29a:	4826      	ldr	r0, [pc, #152]	; (800a334 <_svfiprintf_r+0x1f0>)
 800a29c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2a0:	2206      	movs	r2, #6
 800a2a2:	f7f5 ffbd 	bl	8000220 <memchr>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d038      	beq.n	800a31c <_svfiprintf_r+0x1d8>
 800a2aa:	4b23      	ldr	r3, [pc, #140]	; (800a338 <_svfiprintf_r+0x1f4>)
 800a2ac:	bb1b      	cbnz	r3, 800a2f6 <_svfiprintf_r+0x1b2>
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	3307      	adds	r3, #7
 800a2b2:	f023 0307 	bic.w	r3, r3, #7
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	9303      	str	r3, [sp, #12]
 800a2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2bc:	4433      	add	r3, r6
 800a2be:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c0:	e767      	b.n	800a192 <_svfiprintf_r+0x4e>
 800a2c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	2001      	movs	r0, #1
 800a2ca:	e7a5      	b.n	800a218 <_svfiprintf_r+0xd4>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	3401      	adds	r4, #1
 800a2d0:	9305      	str	r3, [sp, #20]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f04f 0c0a 	mov.w	ip, #10
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2de:	3a30      	subs	r2, #48	; 0x30
 800a2e0:	2a09      	cmp	r2, #9
 800a2e2:	d903      	bls.n	800a2ec <_svfiprintf_r+0x1a8>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0c5      	beq.n	800a274 <_svfiprintf_r+0x130>
 800a2e8:	9105      	str	r1, [sp, #20]
 800a2ea:	e7c3      	b.n	800a274 <_svfiprintf_r+0x130>
 800a2ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e7f0      	b.n	800a2d8 <_svfiprintf_r+0x194>
 800a2f6:	ab03      	add	r3, sp, #12
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	462a      	mov	r2, r5
 800a2fc:	4b0f      	ldr	r3, [pc, #60]	; (800a33c <_svfiprintf_r+0x1f8>)
 800a2fe:	a904      	add	r1, sp, #16
 800a300:	4638      	mov	r0, r7
 800a302:	f3af 8000 	nop.w
 800a306:	1c42      	adds	r2, r0, #1
 800a308:	4606      	mov	r6, r0
 800a30a:	d1d6      	bne.n	800a2ba <_svfiprintf_r+0x176>
 800a30c:	89ab      	ldrh	r3, [r5, #12]
 800a30e:	065b      	lsls	r3, r3, #25
 800a310:	f53f af2c 	bmi.w	800a16c <_svfiprintf_r+0x28>
 800a314:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a316:	b01d      	add	sp, #116	; 0x74
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	ab03      	add	r3, sp, #12
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	462a      	mov	r2, r5
 800a322:	4b06      	ldr	r3, [pc, #24]	; (800a33c <_svfiprintf_r+0x1f8>)
 800a324:	a904      	add	r1, sp, #16
 800a326:	4638      	mov	r0, r7
 800a328:	f000 f87a 	bl	800a420 <_printf_i>
 800a32c:	e7eb      	b.n	800a306 <_svfiprintf_r+0x1c2>
 800a32e:	bf00      	nop
 800a330:	0800a8d0 	.word	0x0800a8d0
 800a334:	0800a8da 	.word	0x0800a8da
 800a338:	00000000 	.word	0x00000000
 800a33c:	0800a08d 	.word	0x0800a08d
 800a340:	0800a8d6 	.word	0x0800a8d6

0800a344 <_printf_common>:
 800a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	4616      	mov	r6, r2
 800a34a:	4699      	mov	r9, r3
 800a34c:	688a      	ldr	r2, [r1, #8]
 800a34e:	690b      	ldr	r3, [r1, #16]
 800a350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a354:	4293      	cmp	r3, r2
 800a356:	bfb8      	it	lt
 800a358:	4613      	movlt	r3, r2
 800a35a:	6033      	str	r3, [r6, #0]
 800a35c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a360:	4607      	mov	r7, r0
 800a362:	460c      	mov	r4, r1
 800a364:	b10a      	cbz	r2, 800a36a <_printf_common+0x26>
 800a366:	3301      	adds	r3, #1
 800a368:	6033      	str	r3, [r6, #0]
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	0699      	lsls	r1, r3, #26
 800a36e:	bf42      	ittt	mi
 800a370:	6833      	ldrmi	r3, [r6, #0]
 800a372:	3302      	addmi	r3, #2
 800a374:	6033      	strmi	r3, [r6, #0]
 800a376:	6825      	ldr	r5, [r4, #0]
 800a378:	f015 0506 	ands.w	r5, r5, #6
 800a37c:	d106      	bne.n	800a38c <_printf_common+0x48>
 800a37e:	f104 0a19 	add.w	sl, r4, #25
 800a382:	68e3      	ldr	r3, [r4, #12]
 800a384:	6832      	ldr	r2, [r6, #0]
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	42ab      	cmp	r3, r5
 800a38a:	dc26      	bgt.n	800a3da <_printf_common+0x96>
 800a38c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a390:	1e13      	subs	r3, r2, #0
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	bf18      	it	ne
 800a396:	2301      	movne	r3, #1
 800a398:	0692      	lsls	r2, r2, #26
 800a39a:	d42b      	bmi.n	800a3f4 <_printf_common+0xb0>
 800a39c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	47c0      	blx	r8
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d01e      	beq.n	800a3e8 <_printf_common+0xa4>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	68e5      	ldr	r5, [r4, #12]
 800a3ae:	6832      	ldr	r2, [r6, #0]
 800a3b0:	f003 0306 	and.w	r3, r3, #6
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	bf08      	it	eq
 800a3b8:	1aad      	subeq	r5, r5, r2
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	6922      	ldr	r2, [r4, #16]
 800a3be:	bf0c      	ite	eq
 800a3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3c4:	2500      	movne	r5, #0
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	bfc4      	itt	gt
 800a3ca:	1a9b      	subgt	r3, r3, r2
 800a3cc:	18ed      	addgt	r5, r5, r3
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	341a      	adds	r4, #26
 800a3d2:	42b5      	cmp	r5, r6
 800a3d4:	d11a      	bne.n	800a40c <_printf_common+0xc8>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e008      	b.n	800a3ec <_printf_common+0xa8>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4652      	mov	r2, sl
 800a3de:	4649      	mov	r1, r9
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	47c0      	blx	r8
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d103      	bne.n	800a3f0 <_printf_common+0xac>
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f0:	3501      	adds	r5, #1
 800a3f2:	e7c6      	b.n	800a382 <_printf_common+0x3e>
 800a3f4:	18e1      	adds	r1, r4, r3
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	2030      	movs	r0, #48	; 0x30
 800a3fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3fe:	4422      	add	r2, r4
 800a400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a408:	3302      	adds	r3, #2
 800a40a:	e7c7      	b.n	800a39c <_printf_common+0x58>
 800a40c:	2301      	movs	r3, #1
 800a40e:	4622      	mov	r2, r4
 800a410:	4649      	mov	r1, r9
 800a412:	4638      	mov	r0, r7
 800a414:	47c0      	blx	r8
 800a416:	3001      	adds	r0, #1
 800a418:	d0e6      	beq.n	800a3e8 <_printf_common+0xa4>
 800a41a:	3601      	adds	r6, #1
 800a41c:	e7d9      	b.n	800a3d2 <_printf_common+0x8e>
	...

0800a420 <_printf_i>:
 800a420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	7e0f      	ldrb	r7, [r1, #24]
 800a426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a428:	2f78      	cmp	r7, #120	; 0x78
 800a42a:	4691      	mov	r9, r2
 800a42c:	4680      	mov	r8, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	469a      	mov	sl, r3
 800a432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a436:	d807      	bhi.n	800a448 <_printf_i+0x28>
 800a438:	2f62      	cmp	r7, #98	; 0x62
 800a43a:	d80a      	bhi.n	800a452 <_printf_i+0x32>
 800a43c:	2f00      	cmp	r7, #0
 800a43e:	f000 80d8 	beq.w	800a5f2 <_printf_i+0x1d2>
 800a442:	2f58      	cmp	r7, #88	; 0x58
 800a444:	f000 80a3 	beq.w	800a58e <_printf_i+0x16e>
 800a448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a44c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a450:	e03a      	b.n	800a4c8 <_printf_i+0xa8>
 800a452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a456:	2b15      	cmp	r3, #21
 800a458:	d8f6      	bhi.n	800a448 <_printf_i+0x28>
 800a45a:	a101      	add	r1, pc, #4	; (adr r1, 800a460 <_printf_i+0x40>)
 800a45c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a460:	0800a4b9 	.word	0x0800a4b9
 800a464:	0800a4cd 	.word	0x0800a4cd
 800a468:	0800a449 	.word	0x0800a449
 800a46c:	0800a449 	.word	0x0800a449
 800a470:	0800a449 	.word	0x0800a449
 800a474:	0800a449 	.word	0x0800a449
 800a478:	0800a4cd 	.word	0x0800a4cd
 800a47c:	0800a449 	.word	0x0800a449
 800a480:	0800a449 	.word	0x0800a449
 800a484:	0800a449 	.word	0x0800a449
 800a488:	0800a449 	.word	0x0800a449
 800a48c:	0800a5d9 	.word	0x0800a5d9
 800a490:	0800a4fd 	.word	0x0800a4fd
 800a494:	0800a5bb 	.word	0x0800a5bb
 800a498:	0800a449 	.word	0x0800a449
 800a49c:	0800a449 	.word	0x0800a449
 800a4a0:	0800a5fb 	.word	0x0800a5fb
 800a4a4:	0800a449 	.word	0x0800a449
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a449 	.word	0x0800a449
 800a4b0:	0800a449 	.word	0x0800a449
 800a4b4:	0800a5c3 	.word	0x0800a5c3
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	1d1a      	adds	r2, r3, #4
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	602a      	str	r2, [r5, #0]
 800a4c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e0a3      	b.n	800a614 <_printf_i+0x1f4>
 800a4cc:	6820      	ldr	r0, [r4, #0]
 800a4ce:	6829      	ldr	r1, [r5, #0]
 800a4d0:	0606      	lsls	r6, r0, #24
 800a4d2:	f101 0304 	add.w	r3, r1, #4
 800a4d6:	d50a      	bpl.n	800a4ee <_printf_i+0xce>
 800a4d8:	680e      	ldr	r6, [r1, #0]
 800a4da:	602b      	str	r3, [r5, #0]
 800a4dc:	2e00      	cmp	r6, #0
 800a4de:	da03      	bge.n	800a4e8 <_printf_i+0xc8>
 800a4e0:	232d      	movs	r3, #45	; 0x2d
 800a4e2:	4276      	negs	r6, r6
 800a4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e8:	485e      	ldr	r0, [pc, #376]	; (800a664 <_printf_i+0x244>)
 800a4ea:	230a      	movs	r3, #10
 800a4ec:	e019      	b.n	800a522 <_printf_i+0x102>
 800a4ee:	680e      	ldr	r6, [r1, #0]
 800a4f0:	602b      	str	r3, [r5, #0]
 800a4f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4f6:	bf18      	it	ne
 800a4f8:	b236      	sxthne	r6, r6
 800a4fa:	e7ef      	b.n	800a4dc <_printf_i+0xbc>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	6820      	ldr	r0, [r4, #0]
 800a500:	1d19      	adds	r1, r3, #4
 800a502:	6029      	str	r1, [r5, #0]
 800a504:	0601      	lsls	r1, r0, #24
 800a506:	d501      	bpl.n	800a50c <_printf_i+0xec>
 800a508:	681e      	ldr	r6, [r3, #0]
 800a50a:	e002      	b.n	800a512 <_printf_i+0xf2>
 800a50c:	0646      	lsls	r6, r0, #25
 800a50e:	d5fb      	bpl.n	800a508 <_printf_i+0xe8>
 800a510:	881e      	ldrh	r6, [r3, #0]
 800a512:	4854      	ldr	r0, [pc, #336]	; (800a664 <_printf_i+0x244>)
 800a514:	2f6f      	cmp	r7, #111	; 0x6f
 800a516:	bf0c      	ite	eq
 800a518:	2308      	moveq	r3, #8
 800a51a:	230a      	movne	r3, #10
 800a51c:	2100      	movs	r1, #0
 800a51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a522:	6865      	ldr	r5, [r4, #4]
 800a524:	60a5      	str	r5, [r4, #8]
 800a526:	2d00      	cmp	r5, #0
 800a528:	bfa2      	ittt	ge
 800a52a:	6821      	ldrge	r1, [r4, #0]
 800a52c:	f021 0104 	bicge.w	r1, r1, #4
 800a530:	6021      	strge	r1, [r4, #0]
 800a532:	b90e      	cbnz	r6, 800a538 <_printf_i+0x118>
 800a534:	2d00      	cmp	r5, #0
 800a536:	d04d      	beq.n	800a5d4 <_printf_i+0x1b4>
 800a538:	4615      	mov	r5, r2
 800a53a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a53e:	fb03 6711 	mls	r7, r3, r1, r6
 800a542:	5dc7      	ldrb	r7, [r0, r7]
 800a544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a548:	4637      	mov	r7, r6
 800a54a:	42bb      	cmp	r3, r7
 800a54c:	460e      	mov	r6, r1
 800a54e:	d9f4      	bls.n	800a53a <_printf_i+0x11a>
 800a550:	2b08      	cmp	r3, #8
 800a552:	d10b      	bne.n	800a56c <_printf_i+0x14c>
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	07de      	lsls	r6, r3, #31
 800a558:	d508      	bpl.n	800a56c <_printf_i+0x14c>
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	6861      	ldr	r1, [r4, #4]
 800a55e:	4299      	cmp	r1, r3
 800a560:	bfde      	ittt	le
 800a562:	2330      	movle	r3, #48	; 0x30
 800a564:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a56c:	1b52      	subs	r2, r2, r5
 800a56e:	6122      	str	r2, [r4, #16]
 800a570:	f8cd a000 	str.w	sl, [sp]
 800a574:	464b      	mov	r3, r9
 800a576:	aa03      	add	r2, sp, #12
 800a578:	4621      	mov	r1, r4
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7ff fee2 	bl	800a344 <_printf_common>
 800a580:	3001      	adds	r0, #1
 800a582:	d14c      	bne.n	800a61e <_printf_i+0x1fe>
 800a584:	f04f 30ff 	mov.w	r0, #4294967295
 800a588:	b004      	add	sp, #16
 800a58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58e:	4835      	ldr	r0, [pc, #212]	; (800a664 <_printf_i+0x244>)
 800a590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a594:	6829      	ldr	r1, [r5, #0]
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	f851 6b04 	ldr.w	r6, [r1], #4
 800a59c:	6029      	str	r1, [r5, #0]
 800a59e:	061d      	lsls	r5, r3, #24
 800a5a0:	d514      	bpl.n	800a5cc <_printf_i+0x1ac>
 800a5a2:	07df      	lsls	r7, r3, #31
 800a5a4:	bf44      	itt	mi
 800a5a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5aa:	6023      	strmi	r3, [r4, #0]
 800a5ac:	b91e      	cbnz	r6, 800a5b6 <_printf_i+0x196>
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	f023 0320 	bic.w	r3, r3, #32
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	2310      	movs	r3, #16
 800a5b8:	e7b0      	b.n	800a51c <_printf_i+0xfc>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	f043 0320 	orr.w	r3, r3, #32
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	2378      	movs	r3, #120	; 0x78
 800a5c4:	4828      	ldr	r0, [pc, #160]	; (800a668 <_printf_i+0x248>)
 800a5c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5ca:	e7e3      	b.n	800a594 <_printf_i+0x174>
 800a5cc:	0659      	lsls	r1, r3, #25
 800a5ce:	bf48      	it	mi
 800a5d0:	b2b6      	uxthmi	r6, r6
 800a5d2:	e7e6      	b.n	800a5a2 <_printf_i+0x182>
 800a5d4:	4615      	mov	r5, r2
 800a5d6:	e7bb      	b.n	800a550 <_printf_i+0x130>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	6826      	ldr	r6, [r4, #0]
 800a5dc:	6961      	ldr	r1, [r4, #20]
 800a5de:	1d18      	adds	r0, r3, #4
 800a5e0:	6028      	str	r0, [r5, #0]
 800a5e2:	0635      	lsls	r5, r6, #24
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	d501      	bpl.n	800a5ec <_printf_i+0x1cc>
 800a5e8:	6019      	str	r1, [r3, #0]
 800a5ea:	e002      	b.n	800a5f2 <_printf_i+0x1d2>
 800a5ec:	0670      	lsls	r0, r6, #25
 800a5ee:	d5fb      	bpl.n	800a5e8 <_printf_i+0x1c8>
 800a5f0:	8019      	strh	r1, [r3, #0]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6123      	str	r3, [r4, #16]
 800a5f6:	4615      	mov	r5, r2
 800a5f8:	e7ba      	b.n	800a570 <_printf_i+0x150>
 800a5fa:	682b      	ldr	r3, [r5, #0]
 800a5fc:	1d1a      	adds	r2, r3, #4
 800a5fe:	602a      	str	r2, [r5, #0]
 800a600:	681d      	ldr	r5, [r3, #0]
 800a602:	6862      	ldr	r2, [r4, #4]
 800a604:	2100      	movs	r1, #0
 800a606:	4628      	mov	r0, r5
 800a608:	f7f5 fe0a 	bl	8000220 <memchr>
 800a60c:	b108      	cbz	r0, 800a612 <_printf_i+0x1f2>
 800a60e:	1b40      	subs	r0, r0, r5
 800a610:	6060      	str	r0, [r4, #4]
 800a612:	6863      	ldr	r3, [r4, #4]
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	2300      	movs	r3, #0
 800a618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61c:	e7a8      	b.n	800a570 <_printf_i+0x150>
 800a61e:	6923      	ldr	r3, [r4, #16]
 800a620:	462a      	mov	r2, r5
 800a622:	4649      	mov	r1, r9
 800a624:	4640      	mov	r0, r8
 800a626:	47d0      	blx	sl
 800a628:	3001      	adds	r0, #1
 800a62a:	d0ab      	beq.n	800a584 <_printf_i+0x164>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	079b      	lsls	r3, r3, #30
 800a630:	d413      	bmi.n	800a65a <_printf_i+0x23a>
 800a632:	68e0      	ldr	r0, [r4, #12]
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	4298      	cmp	r0, r3
 800a638:	bfb8      	it	lt
 800a63a:	4618      	movlt	r0, r3
 800a63c:	e7a4      	b.n	800a588 <_printf_i+0x168>
 800a63e:	2301      	movs	r3, #1
 800a640:	4632      	mov	r2, r6
 800a642:	4649      	mov	r1, r9
 800a644:	4640      	mov	r0, r8
 800a646:	47d0      	blx	sl
 800a648:	3001      	adds	r0, #1
 800a64a:	d09b      	beq.n	800a584 <_printf_i+0x164>
 800a64c:	3501      	adds	r5, #1
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	9903      	ldr	r1, [sp, #12]
 800a652:	1a5b      	subs	r3, r3, r1
 800a654:	42ab      	cmp	r3, r5
 800a656:	dcf2      	bgt.n	800a63e <_printf_i+0x21e>
 800a658:	e7eb      	b.n	800a632 <_printf_i+0x212>
 800a65a:	2500      	movs	r5, #0
 800a65c:	f104 0619 	add.w	r6, r4, #25
 800a660:	e7f5      	b.n	800a64e <_printf_i+0x22e>
 800a662:	bf00      	nop
 800a664:	0800a8e1 	.word	0x0800a8e1
 800a668:	0800a8f2 	.word	0x0800a8f2

0800a66c <memmove>:
 800a66c:	4288      	cmp	r0, r1
 800a66e:	b510      	push	{r4, lr}
 800a670:	eb01 0402 	add.w	r4, r1, r2
 800a674:	d902      	bls.n	800a67c <memmove+0x10>
 800a676:	4284      	cmp	r4, r0
 800a678:	4623      	mov	r3, r4
 800a67a:	d807      	bhi.n	800a68c <memmove+0x20>
 800a67c:	1e43      	subs	r3, r0, #1
 800a67e:	42a1      	cmp	r1, r4
 800a680:	d008      	beq.n	800a694 <memmove+0x28>
 800a682:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a68a:	e7f8      	b.n	800a67e <memmove+0x12>
 800a68c:	4402      	add	r2, r0
 800a68e:	4601      	mov	r1, r0
 800a690:	428a      	cmp	r2, r1
 800a692:	d100      	bne.n	800a696 <memmove+0x2a>
 800a694:	bd10      	pop	{r4, pc}
 800a696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a69a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a69e:	e7f7      	b.n	800a690 <memmove+0x24>

0800a6a0 <_realloc_r>:
 800a6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	4614      	mov	r4, r2
 800a6a8:	460e      	mov	r6, r1
 800a6aa:	b921      	cbnz	r1, 800a6b6 <_realloc_r+0x16>
 800a6ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	f7ff bb85 	b.w	8009dc0 <_malloc_r>
 800a6b6:	b92a      	cbnz	r2, 800a6c4 <_realloc_r+0x24>
 800a6b8:	f7ff fc9c 	bl	8009ff4 <_free_r>
 800a6bc:	4625      	mov	r5, r4
 800a6be:	4628      	mov	r0, r5
 800a6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c4:	f000 f81b 	bl	800a6fe <_malloc_usable_size_r>
 800a6c8:	4284      	cmp	r4, r0
 800a6ca:	4607      	mov	r7, r0
 800a6cc:	d802      	bhi.n	800a6d4 <_realloc_r+0x34>
 800a6ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6d2:	d812      	bhi.n	800a6fa <_realloc_r+0x5a>
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f7ff fb72 	bl	8009dc0 <_malloc_r>
 800a6dc:	4605      	mov	r5, r0
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d0ed      	beq.n	800a6be <_realloc_r+0x1e>
 800a6e2:	42bc      	cmp	r4, r7
 800a6e4:	4622      	mov	r2, r4
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	bf28      	it	cs
 800a6ea:	463a      	movcs	r2, r7
 800a6ec:	f7ff fb32 	bl	8009d54 <memcpy>
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	f7ff fc7e 	bl	8009ff4 <_free_r>
 800a6f8:	e7e1      	b.n	800a6be <_realloc_r+0x1e>
 800a6fa:	4635      	mov	r5, r6
 800a6fc:	e7df      	b.n	800a6be <_realloc_r+0x1e>

0800a6fe <_malloc_usable_size_r>:
 800a6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a702:	1f18      	subs	r0, r3, #4
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfbc      	itt	lt
 800a708:	580b      	ldrlt	r3, [r1, r0]
 800a70a:	18c0      	addlt	r0, r0, r3
 800a70c:	4770      	bx	lr
	...

0800a710 <_init>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	bf00      	nop
 800a714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a716:	bc08      	pop	{r3}
 800a718:	469e      	mov	lr, r3
 800a71a:	4770      	bx	lr

0800a71c <_fini>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	bf00      	nop
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr
