
Seguidor_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b068  0800b068  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b070  0800b070  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800b078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002590  20000084  0800b0fc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002614  0800b0fc  00022614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021127  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fdd  00000000  00000000  000411db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  000451b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00046af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296ef  00000000  00000000  000482b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d47b  00000000  00000000  0007199f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001071a5  00000000  00000000  0008ee1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195fbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  00196010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae10 	.word	0x0800ae10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	0800ae10 	.word	0x0800ae10

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000e04:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_FREERTOS_Init+0x78>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f006 f934 	bl	8007076 <osSemaphoreNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <MX_FREERTOS_Init+0x7c>)
 8000e12:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <MX_FREERTOS_Init+0x80>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f006 f92c 	bl	8007076 <osSemaphoreNew>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_FREERTOS_Init+0x84>)
 8000e22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <MX_FREERTOS_Init+0x88>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4818      	ldr	r0, [pc, #96]	; (8000e8c <MX_FREERTOS_Init+0x8c>)
 8000e2a:	f006 f877 	bl	8006f1c <osThreadNew>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <MX_FREERTOS_Init+0x90>)
 8000e32:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <MX_FREERTOS_Init+0x94>)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <MX_FREERTOS_Init+0x98>)
 8000e3a:	f006 f86f 	bl	8006f1c <osThreadNew>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <MX_FREERTOS_Init+0x9c>)
 8000e42:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <MX_FREERTOS_Init+0xa0>)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <MX_FREERTOS_Init+0xa4>)
 8000e4a:	f006 f867 	bl	8006f1c <osThreadNew>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <MX_FREERTOS_Init+0xa8>)
 8000e52:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000e54:	4a15      	ldr	r2, [pc, #84]	; (8000eac <MX_FREERTOS_Init+0xac>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <MX_FREERTOS_Init+0xb0>)
 8000e5a:	f006 f85f 	bl	8006f1c <osThreadNew>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <MX_FREERTOS_Init+0xb4>)
 8000e62:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <MX_FREERTOS_Init+0xb8>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_FREERTOS_Init+0xbc>)
 8000e6a:	f006 f857 	bl	8006f1c <osThreadNew>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <MX_FREERTOS_Init+0xc0>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	0800af74 	.word	0x0800af74
 8000e7c:	20000148 	.word	0x20000148
 8000e80:	0800af84 	.word	0x0800af84
 8000e84:	2000014c 	.word	0x2000014c
 8000e88:	0800aec0 	.word	0x0800aec0
 8000e8c:	08000ec5 	.word	0x08000ec5
 8000e90:	20000134 	.word	0x20000134
 8000e94:	0800aee4 	.word	0x0800aee4
 8000e98:	08000f15 	.word	0x08000f15
 8000e9c:	20000138 	.word	0x20000138
 8000ea0:	0800af08 	.word	0x0800af08
 8000ea4:	08000ffd 	.word	0x08000ffd
 8000ea8:	2000013c 	.word	0x2000013c
 8000eac:	0800af2c 	.word	0x0800af2c
 8000eb0:	08001219 	.word	0x08001219
 8000eb4:	20000140 	.word	0x20000140
 8000eb8:	0800af50 	.word	0x0800af50
 8000ebc:	08001309 	.word	0x08001309
 8000ec0:	20000144 	.word	0x20000144

08000ec4 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000ed0:	f003 f87c 	bl	8003fcc <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
	for(;;)
	{
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0208 	orr.w	r2, r2, #8
 8000ee2:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f001 fd93 	bl	8002a18 <HAL_GPIO_WritePin>
		osDelay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f006 f8a4 	bl	8007040 <osDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f001 fd89 	bl	8002a18 <HAL_GPIO_WritePin>
		osDelay(200);
 8000f06:	20c8      	movs	r0, #200	; 0xc8
 8000f08:	f006 f89a 	bl	8007040 <osDelay>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8000f0c:	e7e2      	b.n	8000ed4 <FunctionUltrassom+0x10>
 8000f0e:	bf00      	nop
 8000f10:	20000154 	.word	0x20000154

08000f14 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
	//HAL_UART_Receive_IT(&huart1, &rxData, 100);
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(HC05_EN_GPIO_Port, HC05_EN_Pin, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	482e      	ldr	r0, [pc, #184]	; (8000fdc <FunctionComunica+0xc8>)
 8000f24:	f001 fd78 	bl	8002a18 <HAL_GPIO_WritePin>
	  //sprintf(mostrar,"D: %d, V1: %d, V2: %d, DIF: %d \r \n ",(int)distancia,(int)valor1,(int)valor2,(int)diferenca);
	  //sprintf(cMostrar,"S2: %d, S3: %d, S4: %d \r \n ",(int)uiS2,(int)uiS3,(int)uiS4);
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <FunctionComunica+0xcc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	21c8      	movs	r1, #200	; 0xc8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 f92a 	bl	8007188 <osSemaphoreAcquire>
	  int valor1 = (int)ulDistancia;
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <FunctionComunica+0xd0>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3e:	ee17 3a90 	vmov	r3, s15
 8000f42:	617b      	str	r3, [r7, #20]
	  int valor2 = (ulDistancia-(int)ulDistancia)*100;
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <FunctionComunica+0xd0>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <FunctionComunica+0xd0>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000fe8 <FunctionComunica+0xd4>
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f68:	ee17 3a90 	vmov	r3, s15
 8000f6c:	613b      	str	r3, [r7, #16]

	  int valor3 = (int)iDiferenca;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <FunctionComunica+0xd8>)
 8000f70:	edd3 7a00 	vldr	s15, [r3]
 8000f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f78:	ee17 3a90 	vmov	r3, s15
 8000f7c:	60fb      	str	r3, [r7, #12]
	  int valor4 = (iDiferenca-(int)iDiferenca)*100;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <FunctionComunica+0xd8>)
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <FunctionComunica+0xd8>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f96:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000fe8 <FunctionComunica+0xd4>
 8000f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa2:	ee17 3a90 	vmov	r3, s15
 8000fa6:	60bb      	str	r3, [r7, #8]

	  sprintf(cMostrar,"Dis: %d.%02d, Dif: %d.%02d \r \n ",valor1,valor2,valor3,valor4);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <FunctionComunica+0xdc>)
 8000fb6:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <FunctionComunica+0xe0>)
 8000fb8:	f009 fb70 	bl	800a69c <siprintf>

	  //sprintf(cMostrar, "motor_E/RPM: %d, motor_D/RPM: %d \r \n",(int)ulRpmE,(int)ulRpmD);

	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 8000fbc:	2364      	movs	r3, #100	; 0x64
 8000fbe:	2264      	movs	r2, #100	; 0x64
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <FunctionComunica+0xe0>)
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <FunctionComunica+0xe4>)
 8000fc4:	f004 fce4 	bl	8005990 <HAL_UART_Transmit>

	  //HAL_UART_Transmit(&hlpuart1, (uint8_t*)rxData, sizeof(rxData), 100);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);

	  osSemaphoreRelease(SemaphoreComunicaHandle);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <FunctionComunica+0xcc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 f92d 	bl	800722c <osSemaphoreRelease>
	  osDelay(500);
 8000fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd6:	f006 f833 	bl	8007040 <osDelay>
  {
 8000fda:	e79f      	b.n	8000f1c <FunctionComunica+0x8>
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	2000014c 	.word	0x2000014c
 8000fe4:	200000ac 	.word	0x200000ac
 8000fe8:	42c80000 	.word	0x42c80000
 8000fec:	200000a8 	.word	0x200000a8
 8000ff0:	0800ae88 	.word	0x0800ae88
 8000ff4:	200000d0 	.word	0x200000d0
 8000ff8:	200002d0 	.word	0x200002d0

08000ffc <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8001004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f001 fcec 	bl	80029e8 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8001014:	2120      	movs	r1, #32
 8001016:	4878      	ldr	r0, [pc, #480]	; (80011f8 <FunctionSeguidor+0x1fc>)
 8001018:	f001 fce6 	bl	80029e8 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8001020:	2140      	movs	r1, #64	; 0x40
 8001022:	4875      	ldr	r0, [pc, #468]	; (80011f8 <FunctionSeguidor+0x1fc>)
 8001024:	f001 fce0 	bl	80029e8 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	737b      	strb	r3, [r7, #13]

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	4871      	ldr	r0, [pc, #452]	; (80011f8 <FunctionSeguidor+0x1fc>)
 8001032:	f001 fcd9 	bl	80029e8 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800103a:	4b70      	ldr	r3, [pc, #448]	; (80011fc <FunctionSeguidor+0x200>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	21c8      	movs	r1, #200	; 0xc8
 8001040:	4618      	mov	r0, r3
 8001042:	f006 f8a1 	bl	8007188 <osSemaphoreAcquire>

    if(uiBTN){
 8001046:	7b3b      	ldrb	r3, [r7, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d022      	beq.n	8001092 <FunctionSeguidor+0x96>
    	uiVelocidadeRefD = 1;
 800104c:	4b6c      	ldr	r3, [pc, #432]	; (8001200 <FunctionSeguidor+0x204>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefE = 1;
 8001052:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <FunctionSeguidor+0x208>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
    	uiStart = uiStart?0:1;
 8001058:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <FunctionSeguidor+0x20c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	4b67      	ldr	r3, [pc, #412]	; (8001208 <FunctionSeguidor+0x20c>)
 800106a:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2104      	movs	r1, #4
 8001070:	4866      	ldr	r0, [pc, #408]	; (800120c <FunctionSeguidor+0x210>)
 8001072:	f001 fcd1 	bl	8002a18 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800107a:	f005 ffe1 	bl	8007040 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2104      	movs	r1, #4
 8001082:	4862      	ldr	r0, [pc, #392]	; (800120c <FunctionSeguidor+0x210>)
 8001084:	f001 fcc8 	bl	8002a18 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108c:	f005 ffd8 	bl	8007040 <osDelay>
 8001090:	e0a9      	b.n	80011e6 <FunctionSeguidor+0x1ea>
    }else if(uiS2 && !uiS3 && uiS4 && uiStart){
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d014      	beq.n	80010c2 <FunctionSeguidor+0xc6>
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d111      	bne.n	80010c2 <FunctionSeguidor+0xc6>
 800109e:	7b7b      	ldrb	r3, [r7, #13]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00e      	beq.n	80010c2 <FunctionSeguidor+0xc6>
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <FunctionSeguidor+0x20c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00a      	beq.n	80010c2 <FunctionSeguidor+0xc6>
    	uiVelocidadeRefD = uiVelocidade;
 80010ac:	4b58      	ldr	r3, [pc, #352]	; (8001210 <FunctionSeguidor+0x214>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <FunctionSeguidor+0x204>)
 80010b4:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefE = uiVelocidade;
 80010b6:	4b56      	ldr	r3, [pc, #344]	; (8001210 <FunctionSeguidor+0x214>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b51      	ldr	r3, [pc, #324]	; (8001204 <FunctionSeguidor+0x208>)
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e091      	b.n	80011e6 <FunctionSeguidor+0x1ea>
    }else if(uiS2 && uiS3 && !uiS4 && uiStart){
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d028      	beq.n	800111a <FunctionSeguidor+0x11e>
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d025      	beq.n	800111a <FunctionSeguidor+0x11e>
 80010ce:	7b7b      	ldrb	r3, [r7, #13]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d122      	bne.n	800111a <FunctionSeguidor+0x11e>
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <FunctionSeguidor+0x20c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01e      	beq.n	800111a <FunctionSeguidor+0x11e>
    	uiVelocidadeRefE = uiVelocidade;
 80010dc:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <FunctionSeguidor+0x214>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <FunctionSeguidor+0x208>)
 80010e4:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefD = uiVelocidade-(uiVelocidade*fReducao);
 80010e6:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <FunctionSeguidor+0x214>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f2:	4b47      	ldr	r3, [pc, #284]	; (8001210 <FunctionSeguidor+0x214>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010fe:	4b45      	ldr	r3, [pc, #276]	; (8001214 <FunctionSeguidor+0x218>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <FunctionSeguidor+0x204>)
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e065      	b.n	80011e6 <FunctionSeguidor+0x1ea>
    }else if(!uiS2 && uiS3 && uiS4 && uiStart){
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d128      	bne.n	8001172 <FunctionSeguidor+0x176>
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d025      	beq.n	8001172 <FunctionSeguidor+0x176>
 8001126:	7b7b      	ldrb	r3, [r7, #13]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d022      	beq.n	8001172 <FunctionSeguidor+0x176>
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <FunctionSeguidor+0x20c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d01e      	beq.n	8001172 <FunctionSeguidor+0x176>
    	uiVelocidadeRefE = uiVelocidade-(uiVelocidade*fReducao);
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <FunctionSeguidor+0x214>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <FunctionSeguidor+0x214>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <FunctionSeguidor+0x218>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115e:	ee17 2a90 	vmov	r2, s15
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <FunctionSeguidor+0x208>)
 8001164:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefD = uiVelocidade;
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <FunctionSeguidor+0x214>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <FunctionSeguidor+0x204>)
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e039      	b.n	80011e6 <FunctionSeguidor+0x1ea>
    }else if(((uiS2 && !uiS3 && uiS4)) && uiStart){
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d010      	beq.n	800119a <FunctionSeguidor+0x19e>
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10d      	bne.n	800119a <FunctionSeguidor+0x19e>
 800117e:	7b7b      	ldrb	r3, [r7, #13]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00a      	beq.n	800119a <FunctionSeguidor+0x19e>
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <FunctionSeguidor+0x20c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <FunctionSeguidor+0x19e>
    	uiVelocidadeRefD = 1;
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <FunctionSeguidor+0x204>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefE = 1;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <FunctionSeguidor+0x208>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e025      	b.n	80011e6 <FunctionSeguidor+0x1ea>
    } else if(!uiS2 && !uiS3 && !uiS4 && uiStart){
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d122      	bne.n	80011e6 <FunctionSeguidor+0x1ea>
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11f      	bne.n	80011e6 <FunctionSeguidor+0x1ea>
 80011a6:	7b7b      	ldrb	r3, [r7, #13]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d11c      	bne.n	80011e6 <FunctionSeguidor+0x1ea>
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <FunctionSeguidor+0x20c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d018      	beq.n	80011e6 <FunctionSeguidor+0x1ea>
    	uiVelocidadeRefD = 1;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <FunctionSeguidor+0x204>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
		uiVelocidadeRefE = 1;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <FunctionSeguidor+0x208>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]
		uiStart = 0;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <FunctionSeguidor+0x20c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2104      	movs	r1, #4
 80011ca:	4810      	ldr	r0, [pc, #64]	; (800120c <FunctionSeguidor+0x210>)
 80011cc:	f001 fc24 	bl	8002a18 <HAL_GPIO_WritePin>
    	osDelay(100);
 80011d0:	2064      	movs	r0, #100	; 0x64
 80011d2:	f005 ff35 	bl	8007040 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2104      	movs	r1, #4
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <FunctionSeguidor+0x210>)
 80011dc:	f001 fc1c 	bl	8002a18 <HAL_GPIO_WritePin>
    	osDelay(100);
 80011e0:	2064      	movs	r0, #100	; 0x64
 80011e2:	f005 ff2d 	bl	8007040 <osDelay>
    }
    osDelay(100);
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f005 ff2a 	bl	8007040 <osDelay>
    osSemaphoreRelease(SemaphoreMovimentaHandle);
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <FunctionSeguidor+0x200>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 f81b 	bl	800722c <osSemaphoreRelease>
  {
 80011f6:	e705      	b.n	8001004 <FunctionSeguidor+0x8>
 80011f8:	48000800 	.word	0x48000800
 80011fc:	20000148 	.word	0x20000148
 8001200:	200000b0 	.word	0x200000b0
 8001204:	200000b4 	.word	0x200000b4
 8001208:	200000cc 	.word	0x200000cc
 800120c:	48000c00 	.word	0x48000c00
 8001210:	20000004 	.word	0x20000004
 8001214:	2000000c 	.word	0x2000000c

08001218 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001220:	2100      	movs	r1, #0
 8001222:	4831      	ldr	r0, [pc, #196]	; (80012e8 <FunctionAtivarMotores+0xd0>)
 8001224:	f002 fd68 	bl	8003cf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001228:	2104      	movs	r1, #4
 800122a:	482f      	ldr	r0, [pc, #188]	; (80012e8 <FunctionAtivarMotores+0xd0>)
 800122c:	f002 fd64 	bl	8003cf8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <FunctionAtivarMotores+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	21c8      	movs	r1, #200	; 0xc8
 8001236:	4618      	mov	r0, r3
 8001238:	f005 ffa6 	bl	8007188 <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f001 fbe7 	bl	8002a18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f001 fbe0 	bl	8002a18 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4824      	ldr	r0, [pc, #144]	; (80012f0 <FunctionAtivarMotores+0xd8>)
 800125e:	f001 fbdb 	bl	8002a18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	2140      	movs	r1, #64	; 0x40
 8001266:	4823      	ldr	r0, [pc, #140]	; (80012f4 <FunctionAtivarMotores+0xdc>)
 8001268:	f001 fbd6 	bl	8002a18 <HAL_GPIO_WritePin>

	  // htim3.Instance->CCR1 = PID(uiVelocidadeRefE, ulRpmE);
	  // htim3.Instance->CCR2 = PID(uiVelocidadeRefD, ulRpmD);

	  htim3.Instance->CCR1 = uiVelocidadeRefE+(uiVelocidadeRefE*fCalibragemE);
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <FunctionAtivarMotores+0xe0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <FunctionAtivarMotores+0xe0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <FunctionAtivarMotores+0xe4>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <FunctionAtivarMotores+0xd0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129a:	ee17 2a90 	vmov	r2, s15
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = uiVelocidadeRefD+(uiVelocidadeRefD*fCalibragemD);
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <FunctionAtivarMotores+0xe8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <FunctionAtivarMotores+0xe8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <FunctionAtivarMotores+0xec>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <FunctionAtivarMotores+0xd0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ce:	ee17 2a90 	vmov	r2, s15
 80012d2:	639a      	str	r2, [r3, #56]	; 0x38
	  //htim3.Instance->CCR1 = 0;
	  //htim3.Instance->CCR2 = uiVelocidadeRefD+2;

	  //htim3.Instance->CCR1 = 85;
	  //htim3.Instance->CCR2 = 85;
	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <FunctionAtivarMotores+0xd4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 ffa7 	bl	800722c <osSemaphoreRelease>
	  osDelay(200);
 80012de:	20c8      	movs	r0, #200	; 0xc8
 80012e0:	f005 feae 	bl	8007040 <osDelay>
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80012e4:	e7a4      	b.n	8001230 <FunctionAtivarMotores+0x18>
 80012e6:	bf00      	nop
 80012e8:	200001ec 	.word	0x200001ec
 80012ec:	20000148 	.word	0x20000148
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000400 	.word	0x48000400
 80012f8:	200000b4 	.word	0x200000b4
 80012fc:	200000b8 	.word	0x200000b8
 8001300:	200000b0 	.word	0x200000b0
 8001304:	20000008 	.word	0x20000008

08001308 <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001310:	2100      	movs	r1, #0
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <FunctionOdometria+0x28>)
 8001314:	f002 fe5a 	bl	8003fcc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001318:	2104      	movs	r1, #4
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <FunctionOdometria+0x28>)
 800131c:	f002 fe56 	bl	8003fcc <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <FunctionOdometria+0x2c>)
 8001322:	f002 fc0f 	bl	8003b44 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001326:	2001      	movs	r0, #1
 8001328:	f005 fe8a 	bl	8007040 <osDelay>
 800132c:	e7fb      	b.n	8001326 <FunctionOdometria+0x1e>
 800132e:	bf00      	nop
 8001330:	20000238 	.word	0x20000238
 8001334:	20000284 	.word	0x20000284

08001338 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){//ultrassonico
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4d      	ldr	r2, [pc, #308]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d174      	bne.n	8001432 <HAL_TIM_IC_CaptureCallback+0xfa>
		if(uiIs_First){
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <HAL_TIM_IC_CaptureCallback+0x144>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01b      	beq.n	8001388 <HAL_TIM_IC_CaptureCallback+0x50>
			ulValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001350:	2108      	movs	r1, #8
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f003 fbd0 	bl	8004af8 <HAL_TIM_ReadCapturedValue>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b48      	ldr	r3, [pc, #288]	; (8001480 <HAL_TIM_IC_CaptureCallback+0x148>)
 800135e:	601a      	str	r2, [r3, #0]
			uiIs_First=0;
 8001360:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a1a      	ldr	r2, [r3, #32]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001374:	621a      	str	r2, [r3, #32]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001384:	621a      	str	r2, [r3, #32]
 8001386:	e054      	b.n	8001432 <HAL_TIM_IC_CaptureCallback+0xfa>
		}else{
			ulValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001388:	2108      	movs	r1, #8
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f003 fbb4 	bl	8004af8 <HAL_TIM_ReadCapturedValue>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001396:	601a      	str	r2, [r3, #0]
			uiIs_First=1;
 8001398:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_TIM_IC_CaptureCallback+0x144>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]

			iDiferenca = (float)((unsigned)ulValor2-(unsigned)ulValor1);
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_TIM_IC_CaptureCallback+0x148>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x150>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
			iDiferenca = (iDiferenca/2)*0.0001;
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x150>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013c6:	ee16 0a90 	vmov	r0, s13
 80013ca:	f7ff f8dd 	bl	8000588 <__aeabi_f2d>
 80013ce:	a328      	add	r3, pc, #160	; (adr r3, 8001470 <HAL_TIM_IC_CaptureCallback+0x138>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff f930 	bl	8000638 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fb3c 	bl	8000a5c <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a28      	ldr	r2, [pc, #160]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x150>)
 80013e8:	6013      	str	r3, [r2, #0]
			ulDistancia = (iDiferenca*340)/2;
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x150>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800148c <HAL_TIM_IC_CaptureCallback+0x154>
 80013f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001402:	edc3 7a00 	vstr	s15, [r3]

			//ulDistancia = ((((float)iDiferenca/100000)*340)/2);
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a1a      	ldr	r2, [r3, #32]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001414:	621a      	str	r2, [r3, #32]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6a12      	ldr	r2, [r2, #32]
 8001420:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){//encoder Esquerdo
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d108      	bne.n	800144c <HAL_TIM_IC_CaptureCallback+0x114>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7f1b      	ldrb	r3, [r3, #28]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d104      	bne.n	800144c <HAL_TIM_IC_CaptureCallback+0x114>
		ulPulsePerSecondE++;
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_TIM_IC_CaptureCallback+0x160>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_TIM_IC_CaptureCallback+0x160>)
 800144a:	6013      	str	r3, [r2, #0]
	}
	if(htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){//encoder Direito
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d108      	bne.n	8001466 <HAL_TIM_IC_CaptureCallback+0x12e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7f1b      	ldrb	r3, [r3, #28]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d104      	bne.n	8001466 <HAL_TIM_IC_CaptureCallback+0x12e>
		ulPulsePerSecondD++;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_TIM_IC_CaptureCallback+0x164>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_TIM_IC_CaptureCallback+0x164>)
 8001464:	6013      	str	r3, [r2, #0]
	}
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	eb1c432d 	.word	0xeb1c432d
 8001474:	3f1a36e2 	.word	0x3f1a36e2
 8001478:	20000154 	.word	0x20000154
 800147c:	20000000 	.word	0x20000000
 8001480:	200000a0 	.word	0x200000a0
 8001484:	200000a4 	.word	0x200000a4
 8001488:	200000a8 	.word	0x200000a8
 800148c:	43aa0000 	.word	0x43aa0000
 8001490:	200000ac 	.word	0x200000ac
 8001494:	20000238 	.word	0x20000238
 8001498:	200000bc 	.word	0x200000bc
 800149c:	200000c4 	.word	0x200000c4

080014a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d117      	bne.n	80014e0 <HAL_TIM_PeriodElapsedCallback+0x40>
		ulRpmE = ulPulsePerSecondE;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014be:	edc3 7a00 	vstr	s15, [r3]
		ulRpmD = ulPulsePerSecondD;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]
		//HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);

		ulPulsePerSecondE = 0;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
		ulPulsePerSecondD = 0;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
	}
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	20000284 	.word	0x20000284
 80014f0:	200000bc 	.word	0x200000bc
 80014f4:	200000c0 	.word	0x200000c0
 80014f8:	200000c4 	.word	0x200000c4
 80014fc:	200000c8 	.word	0x200000c8

08001500 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b50      	ldr	r3, [pc, #320]	; (8001658 <MX_GPIO_Init+0x158>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <MX_GPIO_Init+0x158>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <MX_GPIO_Init+0x158>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <MX_GPIO_Init+0x158>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a49      	ldr	r2, [pc, #292]	; (8001658 <MX_GPIO_Init+0x158>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <MX_GPIO_Init+0x158>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	4b44      	ldr	r3, [pc, #272]	; (8001658 <MX_GPIO_Init+0x158>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a43      	ldr	r2, [pc, #268]	; (8001658 <MX_GPIO_Init+0x158>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b41      	ldr	r3, [pc, #260]	; (8001658 <MX_GPIO_Init+0x158>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <MX_GPIO_Init+0x158>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a3d      	ldr	r2, [pc, #244]	; (8001658 <MX_GPIO_Init+0x158>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <MX_GPIO_Init+0x158>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f248 3120 	movw	r1, #33568	; 0x8320
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f001 fa4a 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	4834      	ldr	r0, [pc, #208]	; (800165c <MX_GPIO_Init+0x15c>)
 800158a:	f001 fa45 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2104      	movs	r1, #4
 8001592:	4833      	ldr	r0, [pc, #204]	; (8001660 <MX_GPIO_Init+0x160>)
 8001594:	f001 fa40 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800159e:	4831      	ldr	r0, [pc, #196]	; (8001664 <MX_GPIO_Init+0x164>)
 80015a0:	f001 fa3a 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|GPIO_PIN_8
 80015a4:	f242 3360 	movw	r3, #9056	; 0x2360
 80015a8:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4828      	ldr	r0, [pc, #160]	; (800165c <MX_GPIO_Init+0x15c>)
 80015ba:	f001 f893 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin;
 80015be:	f248 3320 	movw	r3, #33568	; 0x8320
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f001 f883 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4819      	ldr	r0, [pc, #100]	; (800165c <MX_GPIO_Init+0x15c>)
 80015f6:	f001 f875 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 80015fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f001 f867 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001616:	2304      	movs	r3, #4
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <MX_GPIO_Init+0x160>)
 800162e:	f001 f859 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin;
 8001632:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_GPIO_Init+0x164>)
 800164c:	f001 f84a 	bl	80026e4 <HAL_GPIO_Init>

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	48000800 	.word	0x48000800
 8001660:	48000c00 	.word	0x48000c00
 8001664:	48000400 	.word	0x48000400

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166c:	f000 fdf9 	bl	8002262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001670:	f000 f817 	bl	80016a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001674:	f7ff ff44 	bl	8001500 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001678:	f000 f936 	bl	80018e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800167c:	f000 f9aa 	bl	80019d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001680:	f000 f9f6 	bl	8001a70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001684:	f000 fa76 	bl	8001b74 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001688:	f000 fad4 	bl	8001c34 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800168c:	f000 fc92 	bl	8001fb4 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8001690:	f000 fc46 	bl	8001f20 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001694:	f005 fbf8 	bl	8006e88 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001698:	f7ff fbb2 	bl	8000e00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800169c:	f005 fc18 	bl	8006ed0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <main+0x38>

080016a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b094      	sub	sp, #80	; 0x50
 80016a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	2238      	movs	r2, #56	; 0x38
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 fedd 	bl	800a470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016c8:	f001 f9be 	bl	8002a48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d6:	2340      	movs	r3, #64	; 0x40
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016da:	2302      	movs	r3, #2
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016de:	2302      	movs	r3, #2
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80016e6:	2319      	movs	r3, #25
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fa48 	bl	8002b90 <HAL_RCC_OscConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001706:	f000 f819 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170a:	230f      	movs	r3, #15
 800170c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170e:	2303      	movs	r3, #3
 8001710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001716:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800171a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2103      	movs	r1, #3
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fd4b 	bl	80031c0 <HAL_RCC_ClockConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001730:	f000 f804 	bl	800173c <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3750      	adds	r7, #80	; 0x50
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>
	...

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_MspInit+0x4c>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <HAL_MspInit+0x4c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6613      	str	r3, [r2, #96]	; 0x60
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_MspInit+0x4c>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_MspInit+0x4c>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6593      	str	r3, [r2, #88]	; 0x58
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_MspInit+0x4c>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	210f      	movs	r1, #15
 8001782:	f06f 0001 	mvn.w	r0, #1
 8001786:	f000 feb8 	bl	80024fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 fd9e 	bl	8002308 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017cc:	f007 fcb0 	bl	8009130 <xTaskGetSchedulerState>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d001      	beq.n	80017da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017d6:	f008 fb97 	bl	8009f08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM1_CC_IRQHandler+0x10>)
 80017e6:	f002 fd41 	bl	800426c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000154 	.word	0x20000154

080017f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <TIM2_IRQHandler+0x10>)
 80017fa:	f002 fd37 	bl	800426c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200001a0 	.word	0x200001a0

08001808 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <TIM3_IRQHandler+0x10>)
 800180e:	f002 fd2d 	bl	800426c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001ec 	.word	0x200001ec

0800181c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <TIM4_IRQHandler+0x10>)
 8001822:	f002 fd23 	bl	800426c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000238 	.word	0x20000238

08001830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <USART1_IRQHandler+0x10>)
 8001836:	f004 f941 	bl	8005abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000360 	.word	0x20000360

08001844 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM6_DAC_IRQHandler+0x10>)
 800184a:	f002 fd0f 	bl	800426c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000284 	.word	0x20000284

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f008 fdb8 	bl	800a3fc <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20020000 	.word	0x20020000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000150 	.word	0x20000150
 80018c0:	20002618 	.word	0x20002618

080018c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <MX_TIM1_Init+0xe4>)
 8001916:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <MX_TIM1_Init+0xe8>)
 8001918:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <MX_TIM1_Init+0xe4>)
 800191c:	2231      	movs	r2, #49	; 0x31
 800191e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <MX_TIM1_Init+0xe4>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <MX_TIM1_Init+0xe4>)
 8001928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <MX_TIM1_Init+0xe4>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <MX_TIM1_Init+0xe4>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <MX_TIM1_Init+0xe4>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001940:	4822      	ldr	r0, [pc, #136]	; (80019cc <MX_TIM1_Init+0xe4>)
 8001942:	f002 f8a7 	bl	8003a94 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800194c:	f7ff fef6 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	4619      	mov	r1, r3
 800195c:	481b      	ldr	r0, [pc, #108]	; (80019cc <MX_TIM1_Init+0xe4>)
 800195e:	f002 ffb5 	bl	80048cc <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001968:	f7ff fee8 	bl	800173c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800196c:	4817      	ldr	r0, [pc, #92]	; (80019cc <MX_TIM1_Init+0xe4>)
 800196e:	f002 fad5 	bl	8003f1c <HAL_TIM_IC_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001978:	f7ff fee0 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	480f      	ldr	r0, [pc, #60]	; (80019cc <MX_TIM1_Init+0xe4>)
 8001990:	f003 fed2 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800199a:	f7ff fecf 	bl	800173c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019a2:	2301      	movs	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2208      	movs	r2, #8
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_TIM1_Init+0xe4>)
 80019b6:	f002 fdd8 	bl	800456a <HAL_TIM_IC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80019c0:	f7ff febc 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000154 	.word	0x20000154
 80019d0:	40012c00 	.word	0x40012c00

080019d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_TIM2_Init+0x98>)
 80019f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125-1;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <MX_TIM2_Init+0x98>)
 80019fc:	227c      	movs	r2, #124	; 0x7c
 80019fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_TIM2_Init+0x98>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_TIM2_Init+0x98>)
 8001a08:	f240 128f 	movw	r2, #399	; 0x18f
 8001a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_TIM2_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_TIM2_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a1a:	4814      	ldr	r0, [pc, #80]	; (8001a6c <MX_TIM2_Init+0x98>)
 8001a1c:	f002 f83a 	bl	8003a94 <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a26:	f7ff fe89 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4619      	mov	r1, r3
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_TIM2_Init+0x98>)
 8001a38:	f002 ff48 	bl	80048cc <HAL_TIM_ConfigClockSource>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a42:	f7ff fe7b 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_TIM2_Init+0x98>)
 8001a54:	f003 fe70 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a5e:	f7ff fe6d 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200001a0 	.word	0x200001a0

08001a70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001aa4:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <MX_TIM3_Init+0x100>)
 8001aa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001aaa:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001aae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001ab8:	2263      	movs	r2, #99	; 0x63
 8001aba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac8:	4828      	ldr	r0, [pc, #160]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001aca:	f001 ffe3 	bl	8003a94 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ad4:	f7ff fe32 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4821      	ldr	r0, [pc, #132]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001ae6:	f002 fef1 	bl	80048cc <HAL_TIM_ConfigClockSource>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001af0:	f7ff fe24 	bl	800173c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001af4:	481d      	ldr	r0, [pc, #116]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001af6:	f002 f89d 	bl	8003c34 <HAL_TIM_PWM_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b00:	f7ff fe1c 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	4816      	ldr	r0, [pc, #88]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001b14:	f003 fe10 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b1e:	f7ff fe0d 	bl	800173c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b22:	2360      	movs	r3, #96	; 0x60
 8001b24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b32:	463b      	mov	r3, r7
 8001b34:	2200      	movs	r2, #0
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001b3a:	f002 fdb3 	bl	80046a4 <HAL_TIM_PWM_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b44:	f7ff fdfa 	bl	800173c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4807      	ldr	r0, [pc, #28]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001b50:	f002 fda8 	bl	80046a4 <HAL_TIM_PWM_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b5a:	f7ff fdef 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b5e:	4803      	ldr	r0, [pc, #12]	; (8001b6c <MX_TIM3_Init+0xfc>)
 8001b60:	f000 f9a6 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 8001b64:	bf00      	nop
 8001b66:	3738      	adds	r7, #56	; 0x38
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200001ec 	.word	0x200001ec
 8001b70:	40000400 	.word	0x40000400

08001b74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001b94:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <MX_TIM4_Init+0xbc>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001b9a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001ba8:	22c7      	movs	r2, #199	; 0xc7
 8001baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001bb8:	481c      	ldr	r0, [pc, #112]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001bba:	f002 f9af 	bl	8003f1c <HAL_TIM_IC_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bc4:	f7ff fdba 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4815      	ldr	r0, [pc, #84]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001bd8:	f003 fdae 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001be2:	f7ff fdab 	bl	800173c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bea:	2301      	movs	r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001bfe:	f002 fcb4 	bl	800456a <HAL_TIM_IC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c08:	f7ff fd98 	bl	800173c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4806      	ldr	r0, [pc, #24]	; (8001c2c <MX_TIM4_Init+0xb8>)
 8001c14:	f002 fca9 	bl	800456a <HAL_TIM_IC_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001c1e:	f7ff fd8d 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000238 	.word	0x20000238
 8001c30:	40000800 	.word	0x40000800

08001c34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c46:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <MX_TIM6_Init+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50000-1;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c4c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c5a:	22f9      	movs	r2, #249	; 0xf9
 8001c5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c66:	f001 ff15 	bl	8003a94 <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c70:	f7ff fd64 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_TIM6_Init+0x64>)
 8001c82:	f003 fd59 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c8c:	f7ff fd56 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000284 	.word	0x20000284
 8001c9c:	40001000 	.word	0x40001000

08001ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a42      	ldr	r2, [pc, #264]	; (8001dc8 <HAL_TIM_Base_MspInit+0x128>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d130      	bne.n	8001d24 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc2:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	4a41      	ldr	r2, [pc, #260]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d02:	2302      	movs	r3, #2
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4830      	ldr	r0, [pc, #192]	; (8001dd0 <HAL_TIM_Base_MspInit+0x130>)
 8001d0e:	f000 fce9 	bl	80026e4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2105      	movs	r1, #5
 8001d16:	201b      	movs	r0, #27
 8001d18:	f000 fbef 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d1c:	201b      	movs	r0, #27
 8001d1e:	f000 fc06 	bl	800252e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d22:	e04c      	b.n	8001dbe <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2c:	d114      	bne.n	8001d58 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	201c      	movs	r0, #28
 8001d4c:	f000 fbd5 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d50:	201c      	movs	r0, #28
 8001d52:	f000 fbec 	bl	800252e <HAL_NVIC_EnableIRQ>
}
 8001d56:	e032      	b.n	8001dbe <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <HAL_TIM_Base_MspInit+0x134>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d114      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	201d      	movs	r0, #29
 8001d80:	f000 fbbb 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d84:	201d      	movs	r0, #29
 8001d86:	f000 fbd2 	bl	800252e <HAL_NVIC_EnableIRQ>
}
 8001d8a:	e018      	b.n	8001dbe <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM6)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_TIM_Base_MspInit+0x138>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d113      	bne.n	8001dbe <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001d9c:	f043 0310 	orr.w	r3, r3, #16
 8001da0:	6593      	str	r3, [r2, #88]	; 0x58
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_TIM_Base_MspInit+0x12c>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2105      	movs	r1, #5
 8001db2:	2036      	movs	r0, #54	; 0x36
 8001db4:	f000 fba1 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db8:	2036      	movs	r0, #54	; 0x36
 8001dba:	f000 fbb8 	bl	800252e <HAL_NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3730      	adds	r7, #48	; 0x30
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	48000800 	.word	0x48000800
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40001000 	.word	0x40001000

08001ddc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <HAL_TIM_IC_MspInit+0xc8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d14d      	bne.n	8001e9a <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_TIM_IC_MspInit+0xcc>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 8001e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001e58:	230a      	movs	r3, #10
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f000 fc3d 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_D_Pin;
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <HAL_TIM_IC_MspInit+0xd0>)
 8001e86:	f000 fc2d 	bl	80026e4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	201e      	movs	r0, #30
 8001e90:	f000 fb33 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e94:	201e      	movs	r0, #30
 8001e96:	f000 fb4a 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40000800 	.word	0x40000800
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000400 	.word	0x48000400

08001eb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_TIM_MspPostInit+0x64>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d11b      	bne.n	8001f0a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8001eea:	2330      	movs	r3, #48	; 0x30
 8001eec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_TIM_MspPostInit+0x6c>)
 8001f06:	f000 fbed 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	48000400 	.word	0x48000400

08001f20 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <MX_LPUART1_UART_Init+0x90>)
 8001f28:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f30:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f62:	4812      	ldr	r0, [pc, #72]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f64:	f003 fcc4 	bl	80058f0 <HAL_UART_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f6e:	f7ff fbe5 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f72:	2100      	movs	r1, #0
 8001f74:	480d      	ldr	r0, [pc, #52]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f76:	f004 fe88 	bl	8006c8a <HAL_UARTEx_SetTxFifoThreshold>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f80:	f7ff fbdc 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4809      	ldr	r0, [pc, #36]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f88:	f004 febd 	bl	8006d06 <HAL_UARTEx_SetRxFifoThreshold>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001f92:	f7ff fbd3 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_LPUART1_UART_Init+0x8c>)
 8001f98:	f004 fe3e 	bl	8006c18 <HAL_UARTEx_DisableFifoMode>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001fa2:	f7ff fbcb 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002d0 	.word	0x200002d0
 8001fb0:	40008000 	.word	0x40008000

08001fb4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fba:	4a23      	ldr	r2, [pc, #140]	; (8002048 <MX_USART1_UART_Init+0x94>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ffc:	4811      	ldr	r0, [pc, #68]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8001ffe:	f003 fc77 	bl	80058f0 <HAL_UART_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002008:	f7ff fb98 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800200c:	2100      	movs	r1, #0
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8002010:	f004 fe3b 	bl	8006c8a <HAL_UARTEx_SetTxFifoThreshold>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800201a:	f7ff fb8f 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201e:	2100      	movs	r1, #0
 8002020:	4808      	ldr	r0, [pc, #32]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8002022:	f004 fe70 	bl	8006d06 <HAL_UARTEx_SetRxFifoThreshold>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800202c:	f7ff fb86 	bl	800173c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MX_USART1_UART_Init+0x90>)
 8002032:	f004 fdf1 	bl	8006c18 <HAL_UARTEx_DisableFifoMode>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800203c:	f7ff fb7e 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000360 	.word	0x20000360
 8002048:	40013800 	.word	0x40013800

0800204c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0a2      	sub	sp, #136	; 0x88
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002064:	f107 0320 	add.w	r3, r7, #32
 8002068:	2254      	movs	r2, #84	; 0x54
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f008 f9ff 	bl	800a470 <memset>
  if(uartHandle->Instance==LPUART1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a62      	ldr	r2, [pc, #392]	; (8002200 <HAL_UART_MspInit+0x1b4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d157      	bne.n	800212c <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800207c:	2320      	movs	r3, #32
 800207e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002080:	2300      	movs	r3, #0
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	4618      	mov	r0, r3
 800208a:	f001 fab5 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002094:	f7ff fb52 	bl	800173c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002098:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	4a59      	ldr	r2, [pc, #356]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80020a4:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b0:	4b54      	ldr	r3, [pc, #336]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	4a53      	ldr	r2, [pc, #332]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020bc:	4b51      	ldr	r3, [pc, #324]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	4a4d      	ldr	r2, [pc, #308]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e0:	2301      	movs	r3, #1
 80020e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020f2:	2308      	movs	r3, #8
 80020f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020fc:	4619      	mov	r1, r3
 80020fe:	4842      	ldr	r0, [pc, #264]	; (8002208 <HAL_UART_MspInit+0x1bc>)
 8002100:	f000 faf0 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002104:	2304      	movs	r3, #4
 8002106:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002116:	230c      	movs	r3, #12
 8002118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f000 fadd 	bl	80026e4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800212a:	e064      	b.n	80021f6 <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a36      	ldr	r2, [pc, #216]	; (800220c <HAL_UART_MspInit+0x1c0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d15f      	bne.n	80021f6 <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002136:	2301      	movs	r3, #1
 8002138:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800213e:	f107 0320 	add.w	r3, r7, #32
 8002142:	4618      	mov	r0, r3
 8002144:	f001 fa58 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_UART_MspInit+0x106>
      Error_Handler();
 800214e:	f7ff faf5 	bl	800173c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002152:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6613      	str	r3, [r2, #96]	; 0x60
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a25      	ldr	r2, [pc, #148]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_UART_MspInit+0x1b8>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 800219a:	2310      	movs	r3, #16
 800219c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021ac:	2307      	movs	r3, #7
 80021ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021b6:	4619      	mov	r1, r3
 80021b8:	4813      	ldr	r0, [pc, #76]	; (8002208 <HAL_UART_MspInit+0x1bc>)
 80021ba:	f000 fa93 	bl	80026e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_RX_Pin;
 80021be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021d2:	2307      	movs	r3, #7
 80021d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021dc:	4619      	mov	r1, r3
 80021de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e2:	f000 fa7f 	bl	80026e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2105      	movs	r1, #5
 80021ea:	2025      	movs	r0, #37	; 0x25
 80021ec:	f000 f985 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021f0:	2025      	movs	r0, #37	; 0x25
 80021f2:	f000 f99c 	bl	800252e <HAL_NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3788      	adds	r7, #136	; 0x88
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40008000 	.word	0x40008000
 8002204:	40021000 	.word	0x40021000
 8002208:	48000800 	.word	0x48000800
 800220c:	40013800 	.word	0x40013800

08002210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002210:	480d      	ldr	r0, [pc, #52]	; (8002248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002212:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <LoopForever+0x6>)
  ldr r1, =_edata
 8002216:	490e      	ldr	r1, [pc, #56]	; (8002250 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <LoopForever+0xe>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <LoopForever+0x12>)
  ldr r4, =_ebss
 800222c:	4c0b      	ldr	r4, [pc, #44]	; (800225c <LoopForever+0x16>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223a:	f7ff fb43 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f008 f8e3 	bl	800a408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002242:	f7ff fa11 	bl	8001668 <main>

08002246 <LoopForever>:

LoopForever:
    b LoopForever
 8002246:	e7fe      	b.n	8002246 <LoopForever>
  ldr   r0, =_estack
 8002248:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002254:	0800b078 	.word	0x0800b078
  ldr r2, =_sbss
 8002258:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800225c:	20002614 	.word	0x20002614

08002260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC1_2_IRQHandler>

08002262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 f939 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002272:	200f      	movs	r0, #15
 8002274:	f000 f80e 	bl	8002294 <HAL_InitTick>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	e001      	b.n	8002288 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002284:	f7ff fa60 	bl	8001748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002288:	79fb      	ldrb	r3, [r7, #7]

}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_InitTick+0x68>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d022      	beq.n	80022ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_InitTick+0x6c>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_InitTick+0x68>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f944 	bl	800254a <HAL_SYSTICK_Config>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	d809      	bhi.n	80022e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ce:	2200      	movs	r2, #0
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	f04f 30ff 	mov.w	r0, #4294967295
 80022d6:	f000 f910 	bl	80024fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_InitTick+0x70>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e007      	b.n	80022f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e004      	b.n	80022f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e001      	b.n	80022f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000018 	.word	0x20000018
 8002300:	20000010 	.word	0x20000010
 8002304:	20000014 	.word	0x20000014

08002308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_IncTick+0x1c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_IncTick+0x20>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4413      	add	r3, r2
 8002316:	4a03      	ldr	r2, [pc, #12]	; (8002324 <HAL_IncTick+0x1c>)
 8002318:	6013      	str	r3, [r2, #0]
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	200003f0 	.word	0x200003f0
 8002328:	20000018 	.word	0x20000018

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_GetTick+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	200003f0 	.word	0x200003f0

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800236c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	; (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff40 	bl	800238c <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff90 	bl	8002438 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5f 	bl	80023e4 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff33 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa4 	bl	80024a0 <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d005      	beq.n	8002586 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2204      	movs	r2, #4
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e037      	b.n	80025f6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 020e 	bic.w	r2, r2, #14
 8002594:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f003 021f 	and.w	r2, r3, #31
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025d2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025f4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d00d      	beq.n	8002648 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2204      	movs	r2, #4
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e047      	b.n	80026d8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 020e 	bic.w	r2, r2, #14
 8002656:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	2101      	movs	r1, #1
 8002686:	fa01 f202 	lsl.w	r2, r1, r2
 800268a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002694:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
    }
  }
  return status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026f2:	e15a      	b.n	80029aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2101      	movs	r1, #1
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 814c 	beq.w	80029a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d005      	beq.n	8002724 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002720:	2b02      	cmp	r3, #2
 8002722:	d130      	bne.n	8002786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800275a:	2201      	movs	r2, #1
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 0201 	and.w	r2, r3, #1
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b03      	cmp	r3, #3
 8002790:	d017      	beq.n	80027c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d123      	bne.n	8002816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	08da      	lsrs	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3208      	adds	r2, #8
 80027d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	6939      	ldr	r1, [r7, #16]
 8002812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0203 	and.w	r2, r3, #3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80a6 	beq.w	80029a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002858:	4b5b      	ldr	r3, [pc, #364]	; (80029c8 <HAL_GPIO_Init+0x2e4>)
 800285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285c:	4a5a      	ldr	r2, [pc, #360]	; (80029c8 <HAL_GPIO_Init+0x2e4>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6613      	str	r3, [r2, #96]	; 0x60
 8002864:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_GPIO_Init+0x2e4>)
 8002866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002870:	4a56      	ldr	r2, [pc, #344]	; (80029cc <HAL_GPIO_Init+0x2e8>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	220f      	movs	r2, #15
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800289a:	d01f      	beq.n	80028dc <HAL_GPIO_Init+0x1f8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a4c      	ldr	r2, [pc, #304]	; (80029d0 <HAL_GPIO_Init+0x2ec>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d019      	beq.n	80028d8 <HAL_GPIO_Init+0x1f4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a4b      	ldr	r2, [pc, #300]	; (80029d4 <HAL_GPIO_Init+0x2f0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <HAL_GPIO_Init+0x1f0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a4a      	ldr	r2, [pc, #296]	; (80029d8 <HAL_GPIO_Init+0x2f4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <HAL_GPIO_Init+0x1ec>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a49      	ldr	r2, [pc, #292]	; (80029dc <HAL_GPIO_Init+0x2f8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <HAL_GPIO_Init+0x1e8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a48      	ldr	r2, [pc, #288]	; (80029e0 <HAL_GPIO_Init+0x2fc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_GPIO_Init+0x1e4>
 80028c4:	2305      	movs	r3, #5
 80028c6:	e00a      	b.n	80028de <HAL_GPIO_Init+0x1fa>
 80028c8:	2306      	movs	r3, #6
 80028ca:	e008      	b.n	80028de <HAL_GPIO_Init+0x1fa>
 80028cc:	2304      	movs	r3, #4
 80028ce:	e006      	b.n	80028de <HAL_GPIO_Init+0x1fa>
 80028d0:	2303      	movs	r3, #3
 80028d2:	e004      	b.n	80028de <HAL_GPIO_Init+0x1fa>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e002      	b.n	80028de <HAL_GPIO_Init+0x1fa>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_GPIO_Init+0x1fa>
 80028dc:	2300      	movs	r3, #0
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	f002 0203 	and.w	r2, r2, #3
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	4093      	lsls	r3, r2
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ee:	4937      	ldr	r1, [pc, #220]	; (80029cc <HAL_GPIO_Init+0x2e8>)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028fc:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_GPIO_Init+0x300>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002920:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <HAL_GPIO_Init+0x300>)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002926:	4b2f      	ldr	r3, [pc, #188]	; (80029e4 <HAL_GPIO_Init+0x300>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800294a:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <HAL_GPIO_Init+0x300>)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_GPIO_Init+0x300>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_GPIO_Init+0x300>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <HAL_GPIO_Init+0x300>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800299e:	4a11      	ldr	r2, [pc, #68]	; (80029e4 <HAL_GPIO_Init+0x300>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f ae9d 	bne.w	80026f4 <HAL_GPIO_Init+0x10>
  }
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40010000 	.word	0x40010000
 80029d0:	48000400 	.word	0x48000400
 80029d4:	48000800 	.word	0x48000800
 80029d8:	48000c00 	.word	0x48000c00
 80029dc:	48001000 	.word	0x48001000
 80029e0:	48001400 	.word	0x48001400
 80029e4:	40010400 	.word	0x40010400

080029e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e001      	b.n	8002a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
 8002a24:	4613      	mov	r3, r2
 8002a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a28:	787b      	ldrb	r3, [r7, #1]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d141      	bne.n	8002ada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a56:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d131      	bne.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a64:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6a:	4a46      	ldr	r2, [pc, #280]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a74:	4b43      	ldr	r3, [pc, #268]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a7c:	4a41      	ldr	r2, [pc, #260]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a84:	4b40      	ldr	r3, [pc, #256]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2232      	movs	r2, #50	; 0x32
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	4a3f      	ldr	r2, [pc, #252]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9b      	lsrs	r3, r3, #18
 8002a96:	3301      	adds	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a9a:	e002      	b.n	8002aa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa2:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aae:	d102      	bne.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f2      	bne.n	8002a9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ab6:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d158      	bne.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e057      	b.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ace:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ad8:	e04d      	b.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d141      	bne.n	8002b66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d131      	bne.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af6:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2232      	movs	r2, #50	; 0x32
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	0c9b      	lsrs	r3, r3, #18
 8002b22:	3301      	adds	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b26:	e002      	b.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d102      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f2      	bne.n	8002b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d112      	bne.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e011      	b.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b64:	e007      	b.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40007000 	.word	0x40007000
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e306      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d075      	beq.n	8002c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bae:	4b97      	ldr	r3, [pc, #604]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb8:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_OscConfig+0x3e>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d002      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x44>
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d10b      	bne.n	8002bec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	4b8d      	ldr	r3, [pc, #564]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d05b      	beq.n	8002c98 <HAL_RCC_OscConfig+0x108>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d157      	bne.n	8002c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e2e1      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x74>
 8002bf6:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a84      	ldr	r2, [pc, #528]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xb0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x98>
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7e      	ldr	r2, [pc, #504]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7b      	ldr	r2, [pc, #492]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xb0>
 8002c28:	4b78      	ldr	r3, [pc, #480]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a77      	ldr	r2, [pc, #476]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a74      	ldr	r2, [pc, #464]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7ff fb70 	bl	800232c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7ff fb6c 	bl	800232c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e2a6      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c62:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xc0>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7ff fb5c 	bl	800232c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7ff fb58 	bl	800232c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e292      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8a:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0xe8>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d075      	beq.n	8002d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca6:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb0:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x136>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_OscConfig+0x13c>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d11f      	bne.n	8002d0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x154>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e265      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	4946      	ldr	r1, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <HAL_RCC_OscConfig+0x280>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fac9 	bl	8002294 <HAL_InitTick>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d043      	beq.n	8002d90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e251      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d023      	beq.n	8002d5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fb04 	bl	800232c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d28:	f7ff fb00 	bl	800232c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e23a      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3a:	4b34      	ldr	r3, [pc, #208]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	061b      	lsls	r3, r3, #24
 8002d54:	492d      	ldr	r1, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
 8002d5a:	e01a      	b.n	8002d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2a      	ldr	r2, [pc, #168]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff fae0 	bl	800232c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7ff fadc 	bl	800232c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e216      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1e0>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d041      	beq.n	8002e22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01c      	beq.n	8002de0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7ff fab9 	bl	800232c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7ff fab5 	bl	800232c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1ef      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ef      	beq.n	8002dbe <HAL_RCC_OscConfig+0x22e>
 8002dde:	e020      	b.n	8002e22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7ff fa9c 	bl	800232c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df6:	e00d      	b.n	8002e14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7ff fa98 	bl	800232c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d906      	bls.n	8002e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1d2      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e14:	4b8c      	ldr	r3, [pc, #560]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ea      	bne.n	8002df8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80a6 	beq.w	8002f7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e34:	4b84      	ldr	r3, [pc, #528]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_OscConfig+0x2b4>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x2b6>
 8002e44:	2300      	movs	r3, #0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	4a7e      	ldr	r2, [pc, #504]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6593      	str	r3, [r2, #88]	; 0x58
 8002e56:	4b7c      	ldr	r3, [pc, #496]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e66:	4b79      	ldr	r3, [pc, #484]	; (800304c <HAL_RCC_OscConfig+0x4bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x4bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	; (800304c <HAL_RCC_OscConfig+0x4bc>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7ff fa55 	bl	800232c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7ff fa51 	bl	800232c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e18b      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e98:	4b6c      	ldr	r3, [pc, #432]	; (800304c <HAL_RCC_OscConfig+0x4bc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_RCC_OscConfig+0x32e>
 8002eac:	4b66      	ldr	r3, [pc, #408]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a65      	ldr	r2, [pc, #404]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebc:	e024      	b.n	8002f08 <HAL_RCC_OscConfig+0x378>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d110      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x358>
 8002ec6:	4b60      	ldr	r3, [pc, #384]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	4a5e      	ldr	r2, [pc, #376]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	4a5a      	ldr	r2, [pc, #360]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee6:	e00f      	b.n	8002f08 <HAL_RCC_OscConfig+0x378>
 8002ee8:	4b57      	ldr	r3, [pc, #348]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	4a56      	ldr	r2, [pc, #344]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef8:	4b53      	ldr	r3, [pc, #332]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	4a52      	ldr	r2, [pc, #328]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d016      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7ff fa0c 	bl	800232c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7ff fa08 	bl	800232c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e140      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2e:	4b46      	ldr	r3, [pc, #280]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ed      	beq.n	8002f18 <HAL_RCC_OscConfig+0x388>
 8002f3c:	e015      	b.n	8002f6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7ff f9f5 	bl	800232c <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7ff f9f1 	bl	800232c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e129      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f5c:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ed      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	4a34      	ldr	r2, [pc, #208]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d03c      	beq.n	8003002 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01c      	beq.n	8002fca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f96:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7ff f9c4 	bl	800232c <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa8:	f7ff f9c0 	bl	800232c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0fa      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ef      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x418>
 8002fc8:	e01b      	b.n	8003002 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fca:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd0:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fda:	f7ff f9a7 	bl	800232c <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fe2:	f7ff f9a3 	bl	800232c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0dd      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8002ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ef      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80d1 	beq.w	80031ae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b0c      	cmp	r3, #12
 8003016:	f000 808b 	beq.w	8003130 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d15e      	bne.n	80030e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a08      	ldr	r2, [pc, #32]	; (8003048 <HAL_RCC_OscConfig+0x4b8>)
 8003028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7ff f97d 	bl	800232c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	e00c      	b.n	8003050 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003036:	f7ff f979 	bl	800232c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d905      	bls.n	8003050 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0b3      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
 8003048:	40021000 	.word	0x40021000
 800304c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003050:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ec      	bne.n	8003036 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305c:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b56      	ldr	r3, [pc, #344]	; (80031bc <HAL_RCC_OscConfig+0x62c>)
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6a11      	ldr	r1, [r2, #32]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800306c:	3a01      	subs	r2, #1
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	4311      	orrs	r1, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003076:	0212      	lsls	r2, r2, #8
 8003078:	4311      	orrs	r1, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800307e:	0852      	lsrs	r2, r2, #1
 8003080:	3a01      	subs	r2, #1
 8003082:	0552      	lsls	r2, r2, #21
 8003084:	4311      	orrs	r1, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800308a:	0852      	lsrs	r2, r2, #1
 800308c:	3a01      	subs	r2, #1
 800308e:	0652      	lsls	r2, r2, #25
 8003090:	4311      	orrs	r1, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003096:	06d2      	lsls	r2, r2, #27
 8003098:	430a      	orrs	r2, r1
 800309a:	4947      	ldr	r1, [pc, #284]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 800309c:	4313      	orrs	r3, r2
 800309e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b45      	ldr	r3, [pc, #276]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a44      	ldr	r2, [pc, #272]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ac:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a41      	ldr	r2, [pc, #260]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7ff f938 	bl	800232c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7ff f934 	bl	800232c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e06e      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x530>
 80030de:	e066      	b.n	80031ae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a34      	ldr	r2, [pc, #208]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030ec:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a31      	ldr	r2, [pc, #196]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030f8:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a2e      	ldr	r2, [pc, #184]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 80030fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7ff f910 	bl	800232c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7ff f90c 	bl	800232c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e046      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x580>
 800312e:	e03e      	b.n	80031ae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e039      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800313c:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <HAL_RCC_OscConfig+0x628>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	429a      	cmp	r2, r3
 800314e:	d12c      	bne.n	80031aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	3b01      	subs	r3, #1
 800315c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d123      	bne.n	80031aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d11b      	bne.n	80031aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d113      	bne.n	80031aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	3b01      	subs	r3, #1
 8003190:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d109      	bne.n	80031aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	019f800c 	.word	0x019f800c

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e11e      	b.n	8003416 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b91      	ldr	r3, [pc, #580]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d910      	bls.n	8003208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b8e      	ldr	r3, [pc, #568]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 020f 	bic.w	r2, r3, #15
 80031ee:	498c      	ldr	r1, [pc, #560]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b8a      	ldr	r3, [pc, #552]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e106      	b.n	8003416 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d073      	beq.n	80032fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d129      	bne.n	8003270 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321c:	4b81      	ldr	r3, [pc, #516]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0f4      	b.n	8003416 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800322c:	f000 f99e 	bl	800356c <RCC_GetSysClockFreqFromPLLSource>
 8003230:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4a7c      	ldr	r2, [pc, #496]	; (8003428 <HAL_RCC_ClockConfig+0x268>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d93f      	bls.n	80032ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800323a:	4b7a      	ldr	r3, [pc, #488]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800324e:	2b00      	cmp	r3, #0
 8003250:	d033      	beq.n	80032ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d12f      	bne.n	80032ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800325a:	4b72      	ldr	r3, [pc, #456]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003262:	4a70      	ldr	r2, [pc, #448]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 8003264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003268:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e024      	b.n	80032ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d107      	bne.n	8003288 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003278:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0c6      	b.n	8003416 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003288:	4b66      	ldr	r3, [pc, #408]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0be      	b.n	8003416 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003298:	f000 f8ce 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 800329c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4a61      	ldr	r2, [pc, #388]	; (8003428 <HAL_RCC_ClockConfig+0x268>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d909      	bls.n	80032ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032a6:	4b5f      	ldr	r3, [pc, #380]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ae:	4a5d      	ldr	r2, [pc, #372]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b5a      	ldr	r3, [pc, #360]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4957      	ldr	r1, [pc, #348]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7ff f82e 	bl	800232c <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7ff f82a 	bl	800232c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e095      	b.n	8003416 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d023      	beq.n	8003350 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003314:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a42      	ldr	r2, [pc, #264]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800331a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800331e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800332c:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003334:	4a3b      	ldr	r2, [pc, #236]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 8003336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800333a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4936      	ldr	r1, [pc, #216]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
 800334e:	e008      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b80      	cmp	r3, #128	; 0x80
 8003354:	d105      	bne.n	8003362 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4a32      	ldr	r2, [pc, #200]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 800335c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003360:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003362:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d21d      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 020f 	bic.w	r2, r3, #15
 8003378:	4929      	ldr	r1, [pc, #164]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003380:	f7fe ffd4 	bl	800232c <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fe ffd0 	bl	800232c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e03b      	b.n	8003416 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_RCC_ClockConfig+0x260>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1ed      	bne.n	8003388 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4917      	ldr	r1, [pc, #92]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	490f      	ldr	r1, [pc, #60]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ea:	f000 f825 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033ee:	4602      	mov	r2, r0
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_RCC_ClockConfig+0x264>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	490c      	ldr	r1, [pc, #48]	; (800342c <HAL_RCC_ClockConfig+0x26c>)
 80033fc:	5ccb      	ldrb	r3, [r1, r3]
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <HAL_RCC_ClockConfig+0x270>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x274>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe ff40 	bl	8002294 <HAL_InitTick>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40022000 	.word	0x40022000
 8003424:	40021000 	.word	0x40021000
 8003428:	04c4b400 	.word	0x04c4b400
 800342c:	0800af94 	.word	0x0800af94
 8003430:	20000010 	.word	0x20000010
 8003434:	20000014 	.word	0x20000014

08003438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b04      	cmp	r3, #4
 8003448:	d102      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	e047      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d102      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800345c:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e03e      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d136      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3301      	adds	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d10c      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800348c:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003496:	68d2      	ldr	r2, [r2, #12]
 8003498:	0a12      	lsrs	r2, r2, #8
 800349a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	617b      	str	r3, [r7, #20]
      break;
 80034a4:	e00c      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034a6:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	0a12      	lsrs	r2, r2, #8
 80034b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	617b      	str	r3, [r7, #20]
      break;
 80034be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0e5b      	lsrs	r3, r3, #25
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	3301      	adds	r3, #1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	e001      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034e0:	693b      	ldr	r3, [r7, #16]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	00f42400 	.word	0x00f42400
 80034f8:	007a1200 	.word	0x007a1200

080034fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCC_GetHCLKFreq+0x14>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000010 	.word	0x20000010

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003518:	f7ff fff0 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4904      	ldr	r1, [pc, #16]	; (800353c <HAL_RCC_GetPCLK1Freq+0x28>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	0800afa4 	.word	0x0800afa4

08003540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003544:	f7ff ffda 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0adb      	lsrs	r3, r3, #11
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4904      	ldr	r1, [pc, #16]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	0800afa4 	.word	0x0800afa4

0800356c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d10c      	bne.n	80035aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800359a:	68d2      	ldr	r2, [r2, #12]
 800359c:	0a12      	lsrs	r2, r2, #8
 800359e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
    break;
 80035a8:	e00c      	b.n	80035c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035b4:	68d2      	ldr	r2, [r2, #12]
 80035b6:	0a12      	lsrs	r2, r2, #8
 80035b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    break;
 80035c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0e5b      	lsrs	r3, r3, #25
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	3301      	adds	r3, #1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035de:	687b      	ldr	r3, [r7, #4]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40021000 	.word	0x40021000
 80035f0:	007a1200 	.word	0x007a1200
 80035f4:	00f42400 	.word	0x00f42400

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003600:	2300      	movs	r3, #0
 8003602:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003604:	2300      	movs	r3, #0
 8003606:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8098 	beq.w	8003746 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003616:	2300      	movs	r3, #0
 8003618:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361a:	4b43      	ldr	r3, [pc, #268]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	4b40      	ldr	r3, [pc, #256]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	4a3f      	ldr	r2, [pc, #252]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	6593      	str	r3, [r2, #88]	; 0x58
 8003632:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003642:	4b3a      	ldr	r3, [pc, #232]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a39      	ldr	r2, [pc, #228]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800364e:	f7fe fe6d 	bl	800232c <HAL_GetTick>
 8003652:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003654:	e009      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fe fe69 	bl	800232c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d902      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	74fb      	strb	r3, [r7, #19]
        break;
 8003668:	e005      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800366a:	4b30      	ldr	r3, [pc, #192]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ef      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d159      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800367c:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01e      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d019      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003698:	4b23      	ldr	r3, [pc, #140]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fe29 	bl	800232c <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036dc:	e00b      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe fe25 	bl	800232c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d902      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	74fb      	strb	r3, [r7, #19]
            break;
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ec      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003720:	e008      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	74bb      	strb	r3, [r7, #18]
 8003726:	e005      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003734:	7c7b      	ldrb	r3, [r7, #17]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373a:	4ba7      	ldr	r3, [pc, #668]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	4aa6      	ldr	r2, [pc, #664]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003744:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003752:	4ba1      	ldr	r3, [pc, #644]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f023 0203 	bic.w	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	499d      	ldr	r1, [pc, #628]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003774:	4b98      	ldr	r3, [pc, #608]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 020c 	bic.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4995      	ldr	r1, [pc, #596]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003796:	4b90      	ldr	r3, [pc, #576]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	498c      	ldr	r1, [pc, #560]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b8:	4b87      	ldr	r3, [pc, #540]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	4984      	ldr	r1, [pc, #528]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	497b      	ldr	r1, [pc, #492]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037fc:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	4973      	ldr	r1, [pc, #460]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800381e:	4b6e      	ldr	r3, [pc, #440]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	496a      	ldr	r1, [pc, #424]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003840:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4962      	ldr	r1, [pc, #392]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003862:	4b5d      	ldr	r3, [pc, #372]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	4959      	ldr	r1, [pc, #356]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003884:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003886:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	4951      	ldr	r1, [pc, #324]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038a6:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	4948      	ldr	r1, [pc, #288]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4940      	ldr	r1, [pc, #256]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e6:	d105      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	4932      	ldr	r1, [pc, #200]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391e:	d105      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003920:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800392a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	4924      	ldr	r1, [pc, #144]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003956:	d105      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003962:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	4916      	ldr	r1, [pc, #88]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398e:	d105      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800399a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d019      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4908      	ldr	r1, [pc, #32]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c6:	d109      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4a02      	ldr	r2, [pc, #8]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d2:	60d3      	str	r3, [r2, #12]
 80039d4:	e002      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039e8:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	4926      	ldr	r1, [pc, #152]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a06:	d105      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a12:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	4918      	ldr	r1, [pc, #96]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	490a      	ldr	r1, [pc, #40]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a76:	d105      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e049      	b.n	8003b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe f8f0 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f001 f872 	bl	8004bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e054      	b.n	8003c06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d022      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x80>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d01d      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x80>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a22      	ldr	r2, [pc, #136]	; (8003c18 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d018      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x80>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <HAL_TIM_Base_Start_IT+0xd8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x80>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x80>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <HAL_TIM_Base_Start_IT+0xe0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d009      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x80>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <HAL_TIM_Base_Start_IT+0xe4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x80>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_TIM_Base_Start_IT+0xe8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d115      	bne.n	8003bf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <HAL_TIM_Base_Start_IT+0xec>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d015      	beq.n	8003c02 <HAL_TIM_Base_Start_IT+0xbe>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d011      	beq.n	8003c02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bee:	e008      	b.n	8003c02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e000      	b.n	8003c04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800
 8003c20:	40000c00 	.word	0x40000c00
 8003c24:	40013400 	.word	0x40013400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40015000 	.word	0x40015000
 8003c30:	00010007 	.word	0x00010007

08003c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e049      	b.n	8003cda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f841 	bl	8003ce2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 ffa2 	bl	8004bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_TIM_PWM_Start+0x24>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e03c      	b.n	8003d96 <HAL_TIM_PWM_Start+0x9e>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d109      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x3e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	bf14      	ite	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	2300      	moveq	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	e02f      	b.n	8003d96 <HAL_TIM_PWM_Start+0x9e>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d109      	bne.n	8003d50 <HAL_TIM_PWM_Start+0x58>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e022      	b.n	8003d96 <HAL_TIM_PWM_Start+0x9e>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d109      	bne.n	8003d6a <HAL_TIM_PWM_Start+0x72>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	e015      	b.n	8003d96 <HAL_TIM_PWM_Start+0x9e>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d109      	bne.n	8003d84 <HAL_TIM_PWM_Start+0x8c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e008      	b.n	8003d96 <HAL_TIM_PWM_Start+0x9e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0a6      	b.n	8003eec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_PWM_Start+0xb6>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dac:	e023      	b.n	8003df6 <HAL_TIM_PWM_Start+0xfe>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_PWM_Start+0xc6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dbc:	e01b      	b.n	8003df6 <HAL_TIM_PWM_Start+0xfe>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d104      	bne.n	8003dce <HAL_TIM_PWM_Start+0xd6>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dcc:	e013      	b.n	8003df6 <HAL_TIM_PWM_Start+0xfe>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_PWM_Start+0xe6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ddc:	e00b      	b.n	8003df6 <HAL_TIM_PWM_Start+0xfe>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d104      	bne.n	8003dee <HAL_TIM_PWM_Start+0xf6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dec:	e003      	b.n	8003df6 <HAL_TIM_PWM_Start+0xfe>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fc74 	bl	80056ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a3a      	ldr	r2, [pc, #232]	; (8003ef4 <HAL_TIM_PWM_Start+0x1fc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_TIM_PWM_Start+0x148>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a39      	ldr	r2, [pc, #228]	; (8003ef8 <HAL_TIM_PWM_Start+0x200>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_TIM_PWM_Start+0x148>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a37      	ldr	r2, [pc, #220]	; (8003efc <HAL_TIM_PWM_Start+0x204>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_TIM_PWM_Start+0x148>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a36      	ldr	r2, [pc, #216]	; (8003f00 <HAL_TIM_PWM_Start+0x208>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_TIM_PWM_Start+0x148>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a34      	ldr	r2, [pc, #208]	; (8003f04 <HAL_TIM_PWM_Start+0x20c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIM_PWM_Start+0x148>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a33      	ldr	r2, [pc, #204]	; (8003f08 <HAL_TIM_PWM_Start+0x210>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x14c>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_TIM_PWM_Start+0x14e>
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a25      	ldr	r2, [pc, #148]	; (8003ef4 <HAL_TIM_PWM_Start+0x1fc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d022      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x1b2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d01d      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x1b2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a26      	ldr	r2, [pc, #152]	; (8003f0c <HAL_TIM_PWM_Start+0x214>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d018      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x1b2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <HAL_TIM_PWM_Start+0x218>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x1b2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <HAL_TIM_PWM_Start+0x21c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00e      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x1b2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <HAL_TIM_PWM_Start+0x200>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x1b2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_TIM_PWM_Start+0x204>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x1b2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_TIM_PWM_Start+0x210>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d115      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_TIM_PWM_Start+0x220>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d015      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0x1f0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d011      	beq.n	8003ee8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	e008      	b.n	8003ee8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e000      	b.n	8003eea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40013400 	.word	0x40013400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800
 8003f08:	40015000 	.word	0x40015000
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	00010007 	.word	0x00010007

08003f1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e049      	b.n	8003fc2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fd ff4a 	bl	8001ddc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f000 fe2e 	bl	8004bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_IC_Start_IT+0x1e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	e023      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x66>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_IC_Start_IT+0x2e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e01b      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x66>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_IC_Start_IT+0x3e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004006:	b2db      	uxtb	r3, r3
 8004008:	e013      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x66>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d104      	bne.n	800401a <HAL_TIM_IC_Start_IT+0x4e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	e00b      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x66>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b10      	cmp	r3, #16
 800401e:	d104      	bne.n	800402a <HAL_TIM_IC_Start_IT+0x5e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e003      	b.n	8004032 <HAL_TIM_IC_Start_IT+0x66>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004030:	b2db      	uxtb	r3, r3
 8004032:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <HAL_TIM_IC_Start_IT+0x78>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e013      	b.n	800406c <HAL_TIM_IC_Start_IT+0xa0>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b04      	cmp	r3, #4
 8004048:	d104      	bne.n	8004054 <HAL_TIM_IC_Start_IT+0x88>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e00b      	b.n	800406c <HAL_TIM_IC_Start_IT+0xa0>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b08      	cmp	r3, #8
 8004058:	d104      	bne.n	8004064 <HAL_TIM_IC_Start_IT+0x98>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e003      	b.n	800406c <HAL_TIM_IC_Start_IT+0xa0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800406a:	b2db      	uxtb	r3, r3
 800406c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800406e:	7bbb      	ldrb	r3, [r7, #14]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004074:	7b7b      	ldrb	r3, [r7, #13]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0e2      	b.n	8004244 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <HAL_TIM_IC_Start_IT+0xc2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	e023      	b.n	80040d6 <HAL_TIM_IC_Start_IT+0x10a>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b04      	cmp	r3, #4
 8004092:	d104      	bne.n	800409e <HAL_TIM_IC_Start_IT+0xd2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800409c:	e01b      	b.n	80040d6 <HAL_TIM_IC_Start_IT+0x10a>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_IC_Start_IT+0xe2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	e013      	b.n	80040d6 <HAL_TIM_IC_Start_IT+0x10a>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	d104      	bne.n	80040be <HAL_TIM_IC_Start_IT+0xf2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040bc:	e00b      	b.n	80040d6 <HAL_TIM_IC_Start_IT+0x10a>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_IC_Start_IT+0x102>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040cc:	e003      	b.n	80040d6 <HAL_TIM_IC_Start_IT+0x10a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_IC_Start_IT+0x11a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	e013      	b.n	800410e <HAL_TIM_IC_Start_IT+0x142>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_IC_Start_IT+0x12a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f4:	e00b      	b.n	800410e <HAL_TIM_IC_Start_IT+0x142>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_IC_Start_IT+0x13a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004104:	e003      	b.n	800410e <HAL_TIM_IC_Start_IT+0x142>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b0c      	cmp	r3, #12
 8004112:	d841      	bhi.n	8004198 <HAL_TIM_IC_Start_IT+0x1cc>
 8004114:	a201      	add	r2, pc, #4	; (adr r2, 800411c <HAL_TIM_IC_Start_IT+0x150>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004151 	.word	0x08004151
 8004120:	08004199 	.word	0x08004199
 8004124:	08004199 	.word	0x08004199
 8004128:	08004199 	.word	0x08004199
 800412c:	08004163 	.word	0x08004163
 8004130:	08004199 	.word	0x08004199
 8004134:	08004199 	.word	0x08004199
 8004138:	08004199 	.word	0x08004199
 800413c:	08004175 	.word	0x08004175
 8004140:	08004199 	.word	0x08004199
 8004144:	08004199 	.word	0x08004199
 8004148:	08004199 	.word	0x08004199
 800414c:	08004187 	.word	0x08004187
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0202 	orr.w	r2, r2, #2
 800415e:	60da      	str	r2, [r3, #12]
      break;
 8004160:	e01d      	b.n	800419e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0204 	orr.w	r2, r2, #4
 8004170:	60da      	str	r2, [r3, #12]
      break;
 8004172:	e014      	b.n	800419e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0208 	orr.w	r2, r2, #8
 8004182:	60da      	str	r2, [r3, #12]
      break;
 8004184:	e00b      	b.n	800419e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0210 	orr.w	r2, r2, #16
 8004194:	60da      	str	r2, [r3, #12]
      break;
 8004196:	e002      	b.n	800419e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	bf00      	nop
  }

  if (status == HAL_OK)
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d14e      	bne.n	8004242 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 fa9d 	bl	80056ec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a25      	ldr	r2, [pc, #148]	; (800424c <HAL_TIM_IC_Start_IT+0x280>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d022      	beq.n	8004202 <HAL_TIM_IC_Start_IT+0x236>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d01d      	beq.n	8004202 <HAL_TIM_IC_Start_IT+0x236>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a21      	ldr	r2, [pc, #132]	; (8004250 <HAL_TIM_IC_Start_IT+0x284>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d018      	beq.n	8004202 <HAL_TIM_IC_Start_IT+0x236>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <HAL_TIM_IC_Start_IT+0x288>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_TIM_IC_Start_IT+0x236>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <HAL_TIM_IC_Start_IT+0x28c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_TIM_IC_Start_IT+0x236>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <HAL_TIM_IC_Start_IT+0x290>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_TIM_IC_Start_IT+0x236>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <HAL_TIM_IC_Start_IT+0x294>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_TIM_IC_Start_IT+0x236>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_TIM_IC_Start_IT+0x298>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d115      	bne.n	800422e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_TIM_IC_Start_IT+0x29c>)
 800420a:	4013      	ands	r3, r2
 800420c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b06      	cmp	r3, #6
 8004212:	d015      	beq.n	8004240 <HAL_TIM_IC_Start_IT+0x274>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421a:	d011      	beq.n	8004240 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	e008      	b.n	8004240 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e000      	b.n	8004242 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40013400 	.word	0x40013400
 8004260:	40014000 	.word	0x40014000
 8004264:	40015000 	.word	0x40015000
 8004268:	00010007 	.word	0x00010007

0800426c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b02      	cmp	r3, #2
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0202 	mvn.w	r2, #2
 8004298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd f842 	bl	8001338 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fc62 	bl	8004b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fc69 	bl	8004b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0204 	mvn.w	r2, #4
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd f818 	bl	8001338 <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fc38 	bl	8004b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fc3f 	bl	8004b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b08      	cmp	r3, #8
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b08      	cmp	r3, #8
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0208 	mvn.w	r2, #8
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2204      	movs	r2, #4
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fc ffee 	bl	8001338 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fc0e 	bl	8004b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fc15 	bl	8004b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b10      	cmp	r3, #16
 800437c:	d122      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b10      	cmp	r3, #16
 800438a:	d11b      	bne.n	80043c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0210 	mvn.w	r2, #16
 8004394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2208      	movs	r2, #8
 800439a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fc ffc4 	bl	8001338 <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fbe4 	bl	8004b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fbeb 	bl	8004b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d10e      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d107      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0201 	mvn.w	r2, #1
 80043e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd f858 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b80      	cmp	r3, #128	; 0x80
 80043fc:	d10e      	bne.n	800441c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d107      	bne.n	800441c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 fa2e 	bl	8005878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442a:	d10e      	bne.n	800444a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d107      	bne.n	800444a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f001 fa21 	bl	800588c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d10e      	bne.n	8004476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d107      	bne.n	8004476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800446e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fb99 	bl	8004ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b20      	cmp	r3, #32
 8004482:	d10e      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f06f 0220 	mvn.w	r2, #32
 800449a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f001 f9e1 	bl	8005864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b0:	d10f      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c0:	d107      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80044ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f001 f9e7 	bl	80058a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e0:	d10f      	bne.n	8004502 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f0:	d107      	bne.n	8004502 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80044fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f001 f9d9 	bl	80058b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004510:	d10f      	bne.n	8004532 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004520:	d107      	bne.n	8004532 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800452a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 f9cb 	bl	80058c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800453c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004540:	d10f      	bne.n	8004562 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800454c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004550:	d107      	bne.n	8004562 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f001 f9bd 	bl	80058dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004584:	2302      	movs	r3, #2
 8004586:	e088      	b.n	800469a <HAL_TIM_IC_ConfigChannel+0x130>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11b      	bne.n	80045ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f000 fedb 	bl	8005360 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699a      	ldr	r2, [r3, #24]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 020c 	bic.w	r2, r2, #12
 80045b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6999      	ldr	r1, [r3, #24]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	619a      	str	r2, [r3, #24]
 80045cc:	e060      	b.n	8004690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d11c      	bne.n	800460e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f000 ff5f 	bl	80054a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	021a      	lsls	r2, r3, #8
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	619a      	str	r2, [r3, #24]
 800460c:	e040      	b.n	8004690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d11b      	bne.n	800464c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f000 ffac 	bl	8005580 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 020c 	bic.w	r2, r2, #12
 8004636:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69d9      	ldr	r1, [r3, #28]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	61da      	str	r2, [r3, #28]
 800464a:	e021      	b.n	8004690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d11c      	bne.n	800468c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f000 ffc9 	bl	80055f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004674:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	021a      	lsls	r2, r3, #8
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	61da      	str	r2, [r3, #28]
 800468a:	e001      	b.n	8004690 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0ff      	b.n	80048c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b14      	cmp	r3, #20
 80046ce:	f200 80f0 	bhi.w	80048b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	0800472d 	.word	0x0800472d
 80046dc:	080048b3 	.word	0x080048b3
 80046e0:	080048b3 	.word	0x080048b3
 80046e4:	080048b3 	.word	0x080048b3
 80046e8:	0800476d 	.word	0x0800476d
 80046ec:	080048b3 	.word	0x080048b3
 80046f0:	080048b3 	.word	0x080048b3
 80046f4:	080048b3 	.word	0x080048b3
 80046f8:	080047af 	.word	0x080047af
 80046fc:	080048b3 	.word	0x080048b3
 8004700:	080048b3 	.word	0x080048b3
 8004704:	080048b3 	.word	0x080048b3
 8004708:	080047ef 	.word	0x080047ef
 800470c:	080048b3 	.word	0x080048b3
 8004710:	080048b3 	.word	0x080048b3
 8004714:	080048b3 	.word	0x080048b3
 8004718:	08004831 	.word	0x08004831
 800471c:	080048b3 	.word	0x080048b3
 8004720:	080048b3 	.word	0x080048b3
 8004724:	080048b3 	.word	0x080048b3
 8004728:	08004871 	.word	0x08004871
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 faea 	bl	8004d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6999      	ldr	r1, [r3, #24]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	619a      	str	r2, [r3, #24]
      break;
 800476a:	e0a5      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb64 	bl	8004e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	021a      	lsls	r2, r3, #8
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]
      break;
 80047ac:	e084      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fbd7 	bl	8004f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0208 	orr.w	r2, r2, #8
 80047c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0204 	bic.w	r2, r2, #4
 80047d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	61da      	str	r2, [r3, #28]
      break;
 80047ec:	e064      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fc49 	bl	800508c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	021a      	lsls	r2, r3, #8
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	61da      	str	r2, [r3, #28]
      break;
 800482e:	e043      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fcbc 	bl	80051b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800486e:	e023      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fd06 	bl	8005288 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80048b0:	e002      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
      break;
 80048b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop

080048cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIM_ConfigClockSource+0x1c>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e0f6      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x20a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800490a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a6f      	ldr	r2, [pc, #444]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x214>)
 8004922:	4293      	cmp	r3, r2
 8004924:	f000 80c1 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 8004928:	4a6d      	ldr	r2, [pc, #436]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x214>)
 800492a:	4293      	cmp	r3, r2
 800492c:	f200 80c6 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 8004930:	4a6c      	ldr	r2, [pc, #432]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x218>)
 8004932:	4293      	cmp	r3, r2
 8004934:	f000 80b9 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 8004938:	4a6a      	ldr	r2, [pc, #424]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x218>)
 800493a:	4293      	cmp	r3, r2
 800493c:	f200 80be 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 8004940:	4a69      	ldr	r2, [pc, #420]	; (8004ae8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	f000 80b1 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 8004948:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_TIM_ConfigClockSource+0x21c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	f200 80b6 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 8004950:	4a66      	ldr	r2, [pc, #408]	; (8004aec <HAL_TIM_ConfigClockSource+0x220>)
 8004952:	4293      	cmp	r3, r2
 8004954:	f000 80a9 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 8004958:	4a64      	ldr	r2, [pc, #400]	; (8004aec <HAL_TIM_ConfigClockSource+0x220>)
 800495a:	4293      	cmp	r3, r2
 800495c:	f200 80ae 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 8004960:	4a63      	ldr	r2, [pc, #396]	; (8004af0 <HAL_TIM_ConfigClockSource+0x224>)
 8004962:	4293      	cmp	r3, r2
 8004964:	f000 80a1 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 8004968:	4a61      	ldr	r2, [pc, #388]	; (8004af0 <HAL_TIM_ConfigClockSource+0x224>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f200 80a6 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 8004970:	4a60      	ldr	r2, [pc, #384]	; (8004af4 <HAL_TIM_ConfigClockSource+0x228>)
 8004972:	4293      	cmp	r3, r2
 8004974:	f000 8099 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 8004978:	4a5e      	ldr	r2, [pc, #376]	; (8004af4 <HAL_TIM_ConfigClockSource+0x228>)
 800497a:	4293      	cmp	r3, r2
 800497c:	f200 809e 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 8004980:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004984:	f000 8091 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 8004988:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800498c:	f200 8096 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	f000 8089 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 8004998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499c:	f200 808e 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a4:	d03e      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0x158>
 80049a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049aa:	f200 8087 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b2:	f000 8086 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x1f6>
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ba:	d87f      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049bc:	2b70      	cmp	r3, #112	; 0x70
 80049be:	d01a      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x12a>
 80049c0:	2b70      	cmp	r3, #112	; 0x70
 80049c2:	d87b      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049c4:	2b60      	cmp	r3, #96	; 0x60
 80049c6:	d050      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x19e>
 80049c8:	2b60      	cmp	r3, #96	; 0x60
 80049ca:	d877      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049cc:	2b50      	cmp	r3, #80	; 0x50
 80049ce:	d03c      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x17e>
 80049d0:	2b50      	cmp	r3, #80	; 0x50
 80049d2:	d873      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d058      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x1be>
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d86f      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049dc:	2b30      	cmp	r3, #48	; 0x30
 80049de:	d064      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 80049e0:	2b30      	cmp	r3, #48	; 0x30
 80049e2:	d86b      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d060      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d867      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d05c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d05a      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x1de>
 80049f4:	e062      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6899      	ldr	r1, [r3, #8]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f000 fe51 	bl	80056ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	609a      	str	r2, [r3, #8]
      break;
 8004a22:	e04f      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6899      	ldr	r1, [r3, #8]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f000 fe3a 	bl	80056ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a46:	609a      	str	r2, [r3, #8]
      break;
 8004a48:	e03c      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f000 fcf6 	bl	8005448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2150      	movs	r1, #80	; 0x50
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fe05 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8004a68:	e02c      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f000 fd52 	bl	8005520 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2160      	movs	r1, #96	; 0x60
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fdf5 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8004a88:	e01c      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6859      	ldr	r1, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f000 fcd6 	bl	8005448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2140      	movs	r1, #64	; 0x40
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fde5 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8004aa8:	e00c      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f000 fddc 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8004aba:	e003      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac0:	e000      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	00100070 	.word	0x00100070
 8004ae4:	00100060 	.word	0x00100060
 8004ae8:	00100050 	.word	0x00100050
 8004aec:	00100040 	.word	0x00100040
 8004af0:	00100030 	.word	0x00100030
 8004af4:	00100020 	.word	0x00100020

08004af8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d831      	bhi.n	8004b70 <HAL_TIM_ReadCapturedValue+0x78>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b71 	.word	0x08004b71
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004b71 	.word	0x08004b71
 8004b24:	08004b53 	.word	0x08004b53
 8004b28:	08004b71 	.word	0x08004b71
 8004b2c:	08004b71 	.word	0x08004b71
 8004b30:	08004b71 	.word	0x08004b71
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b71 	.word	0x08004b71
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004b71 	.word	0x08004b71
 8004b44:	08004b67 	.word	0x08004b67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	60fb      	str	r3, [r7, #12]

      break;
 8004b50:	e00f      	b.n	8004b72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	60fb      	str	r3, [r7, #12]

      break;
 8004b5a:	e00a      	b.n	8004b72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	60fb      	str	r3, [r7, #12]

      break;
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	60fb      	str	r3, [r7, #12]

      break;
 8004b6e:	e000      	b.n	8004b72 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004b70:	bf00      	nop
  }

  return tmpreg;
 8004b72:	68fb      	ldr	r3, [r7, #12]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a46      	ldr	r2, [pc, #280]	; (8004ce8 <TIM_Base_SetConfig+0x12c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d017      	beq.n	8004c04 <TIM_Base_SetConfig+0x48>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bda:	d013      	beq.n	8004c04 <TIM_Base_SetConfig+0x48>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a43      	ldr	r2, [pc, #268]	; (8004cec <TIM_Base_SetConfig+0x130>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00f      	beq.n	8004c04 <TIM_Base_SetConfig+0x48>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a42      	ldr	r2, [pc, #264]	; (8004cf0 <TIM_Base_SetConfig+0x134>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0x48>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a41      	ldr	r2, [pc, #260]	; (8004cf4 <TIM_Base_SetConfig+0x138>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0x48>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a40      	ldr	r2, [pc, #256]	; (8004cf8 <TIM_Base_SetConfig+0x13c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0x48>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3f      	ldr	r2, [pc, #252]	; (8004cfc <TIM_Base_SetConfig+0x140>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d108      	bne.n	8004c16 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a33      	ldr	r2, [pc, #204]	; (8004ce8 <TIM_Base_SetConfig+0x12c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d023      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d01f      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a30      	ldr	r2, [pc, #192]	; (8004cec <TIM_Base_SetConfig+0x130>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01b      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2f      	ldr	r2, [pc, #188]	; (8004cf0 <TIM_Base_SetConfig+0x134>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d017      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a2e      	ldr	r2, [pc, #184]	; (8004cf4 <TIM_Base_SetConfig+0x138>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2d      	ldr	r2, [pc, #180]	; (8004cf8 <TIM_Base_SetConfig+0x13c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00f      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2d      	ldr	r2, [pc, #180]	; (8004d00 <TIM_Base_SetConfig+0x144>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00b      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <TIM_Base_SetConfig+0x148>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <TIM_Base_SetConfig+0x14c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_Base_SetConfig+0xaa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <TIM_Base_SetConfig+0x140>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d108      	bne.n	8004c78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <TIM_Base_SetConfig+0x12c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <TIM_Base_SetConfig+0x110>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <TIM_Base_SetConfig+0x13c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00f      	beq.n	8004ccc <TIM_Base_SetConfig+0x110>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <TIM_Base_SetConfig+0x144>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_Base_SetConfig+0x110>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <TIM_Base_SetConfig+0x148>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_Base_SetConfig+0x110>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <TIM_Base_SetConfig+0x14c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0x110>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <TIM_Base_SetConfig+0x140>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d103      	bne.n	8004cd4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	615a      	str	r2, [r3, #20]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800
 8004cf4:	40000c00 	.word	0x40000c00
 8004cf8:	40013400 	.word	0x40013400
 8004cfc:	40015000 	.word	0x40015000
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40014400 	.word	0x40014400
 8004d08:	40014800 	.word	0x40014800

08004d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 0302 	bic.w	r3, r3, #2
 8004d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a30      	ldr	r2, [pc, #192]	; (8004e28 <TIM_OC1_SetConfig+0x11c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <TIM_OC1_SetConfig+0x88>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <TIM_OC1_SetConfig+0x120>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00f      	beq.n	8004d94 <TIM_OC1_SetConfig+0x88>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a2e      	ldr	r2, [pc, #184]	; (8004e30 <TIM_OC1_SetConfig+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_OC1_SetConfig+0x88>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2d      	ldr	r2, [pc, #180]	; (8004e34 <TIM_OC1_SetConfig+0x128>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_OC1_SetConfig+0x88>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a2c      	ldr	r2, [pc, #176]	; (8004e38 <TIM_OC1_SetConfig+0x12c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC1_SetConfig+0x88>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <TIM_OC1_SetConfig+0x130>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d10c      	bne.n	8004dae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0308 	bic.w	r3, r3, #8
 8004d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f023 0304 	bic.w	r3, r3, #4
 8004dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <TIM_OC1_SetConfig+0x11c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_OC1_SetConfig+0xd2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <TIM_OC1_SetConfig+0x120>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_OC1_SetConfig+0xd2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <TIM_OC1_SetConfig+0x124>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_OC1_SetConfig+0xd2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1a      	ldr	r2, [pc, #104]	; (8004e34 <TIM_OC1_SetConfig+0x128>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_OC1_SetConfig+0xd2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <TIM_OC1_SetConfig+0x12c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_OC1_SetConfig+0xd2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <TIM_OC1_SetConfig+0x130>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d111      	bne.n	8004e02 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800
 8004e3c:	40015000 	.word	0x40015000

08004e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0210 	bic.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0320 	bic.w	r3, r3, #32
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a2c      	ldr	r2, [pc, #176]	; (8004f50 <TIM_OC2_SetConfig+0x110>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_OC2_SetConfig+0x74>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a2b      	ldr	r2, [pc, #172]	; (8004f54 <TIM_OC2_SetConfig+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC2_SetConfig+0x74>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2a      	ldr	r2, [pc, #168]	; (8004f58 <TIM_OC2_SetConfig+0x118>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d10d      	bne.n	8004ed0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <TIM_OC2_SetConfig+0x110>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d013      	beq.n	8004f00 <TIM_OC2_SetConfig+0xc0>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <TIM_OC2_SetConfig+0x114>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00f      	beq.n	8004f00 <TIM_OC2_SetConfig+0xc0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a1e      	ldr	r2, [pc, #120]	; (8004f5c <TIM_OC2_SetConfig+0x11c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <TIM_OC2_SetConfig+0xc0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <TIM_OC2_SetConfig+0x120>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <TIM_OC2_SetConfig+0xc0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <TIM_OC2_SetConfig+0x124>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC2_SetConfig+0xc0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <TIM_OC2_SetConfig+0x118>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d113      	bne.n	8004f28 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40013400 	.word	0x40013400
 8004f58:	40015000 	.word	0x40015000
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800

08004f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2b      	ldr	r2, [pc, #172]	; (8005074 <TIM_OC3_SetConfig+0x10c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <TIM_OC3_SetConfig+0x72>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <TIM_OC3_SetConfig+0x110>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_OC3_SetConfig+0x72>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a29      	ldr	r2, [pc, #164]	; (800507c <TIM_OC3_SetConfig+0x114>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d10d      	bne.n	8004ff6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <TIM_OC3_SetConfig+0x10c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_OC3_SetConfig+0xbe>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <TIM_OC3_SetConfig+0x110>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_OC3_SetConfig+0xbe>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <TIM_OC3_SetConfig+0x118>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_OC3_SetConfig+0xbe>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1c      	ldr	r2, [pc, #112]	; (8005084 <TIM_OC3_SetConfig+0x11c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_OC3_SetConfig+0xbe>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <TIM_OC3_SetConfig+0x120>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_OC3_SetConfig+0xbe>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a16      	ldr	r2, [pc, #88]	; (800507c <TIM_OC3_SetConfig+0x114>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d113      	bne.n	800504e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800502c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	621a      	str	r2, [r3, #32]
}
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40013400 	.word	0x40013400
 800507c:	40015000 	.word	0x40015000
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400
 8005088:	40014800 	.word	0x40014800

0800508c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a2c      	ldr	r2, [pc, #176]	; (800519c <TIM_OC4_SetConfig+0x110>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_OC4_SetConfig+0x74>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <TIM_OC4_SetConfig+0x114>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_OC4_SetConfig+0x74>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <TIM_OC4_SetConfig+0x118>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10d      	bne.n	800511c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800511a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1f      	ldr	r2, [pc, #124]	; (800519c <TIM_OC4_SetConfig+0x110>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <TIM_OC4_SetConfig+0xc0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <TIM_OC4_SetConfig+0x114>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00f      	beq.n	800514c <TIM_OC4_SetConfig+0xc0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <TIM_OC4_SetConfig+0x11c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_OC4_SetConfig+0xc0>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <TIM_OC4_SetConfig+0x120>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_OC4_SetConfig+0xc0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <TIM_OC4_SetConfig+0x124>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_OC4_SetConfig+0xc0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <TIM_OC4_SetConfig+0x118>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d113      	bne.n	8005174 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005152:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800515a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	019b      	lsls	r3, r3, #6
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40013400 	.word	0x40013400
 80051a4:	40015000 	.word	0x40015000
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40014400 	.word	0x40014400
 80051b0:	40014800 	.word	0x40014800

080051b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a19      	ldr	r2, [pc, #100]	; (8005270 <TIM_OC5_SetConfig+0xbc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <TIM_OC5_SetConfig+0x82>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a18      	ldr	r2, [pc, #96]	; (8005274 <TIM_OC5_SetConfig+0xc0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00f      	beq.n	8005236 <TIM_OC5_SetConfig+0x82>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a17      	ldr	r2, [pc, #92]	; (8005278 <TIM_OC5_SetConfig+0xc4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00b      	beq.n	8005236 <TIM_OC5_SetConfig+0x82>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a16      	ldr	r2, [pc, #88]	; (800527c <TIM_OC5_SetConfig+0xc8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d007      	beq.n	8005236 <TIM_OC5_SetConfig+0x82>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a15      	ldr	r2, [pc, #84]	; (8005280 <TIM_OC5_SetConfig+0xcc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <TIM_OC5_SetConfig+0x82>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a14      	ldr	r2, [pc, #80]	; (8005284 <TIM_OC5_SetConfig+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d109      	bne.n	800524a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	621a      	str	r2, [r3, #32]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40013400 	.word	0x40013400
 8005278:	40014000 	.word	0x40014000
 800527c:	40014400 	.word	0x40014400
 8005280:	40014800 	.word	0x40014800
 8005284:	40015000 	.word	0x40015000

08005288 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	051b      	lsls	r3, r3, #20
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <TIM_OC6_SetConfig+0xc0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d013      	beq.n	800530c <TIM_OC6_SetConfig+0x84>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a19      	ldr	r2, [pc, #100]	; (800534c <TIM_OC6_SetConfig+0xc4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00f      	beq.n	800530c <TIM_OC6_SetConfig+0x84>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a18      	ldr	r2, [pc, #96]	; (8005350 <TIM_OC6_SetConfig+0xc8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00b      	beq.n	800530c <TIM_OC6_SetConfig+0x84>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a17      	ldr	r2, [pc, #92]	; (8005354 <TIM_OC6_SetConfig+0xcc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_OC6_SetConfig+0x84>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a16      	ldr	r2, [pc, #88]	; (8005358 <TIM_OC6_SetConfig+0xd0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_OC6_SetConfig+0x84>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a15      	ldr	r2, [pc, #84]	; (800535c <TIM_OC6_SetConfig+0xd4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d109      	bne.n	8005320 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40013400 	.word	0x40013400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800
 800535c:	40015000 	.word	0x40015000

08005360 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0201 	bic.w	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4a28      	ldr	r2, [pc, #160]	; (800542c <TIM_TI1_SetConfig+0xcc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01b      	beq.n	80053c6 <TIM_TI1_SetConfig+0x66>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005394:	d017      	beq.n	80053c6 <TIM_TI1_SetConfig+0x66>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4a25      	ldr	r2, [pc, #148]	; (8005430 <TIM_TI1_SetConfig+0xd0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <TIM_TI1_SetConfig+0x66>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a24      	ldr	r2, [pc, #144]	; (8005434 <TIM_TI1_SetConfig+0xd4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_TI1_SetConfig+0x66>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a23      	ldr	r2, [pc, #140]	; (8005438 <TIM_TI1_SetConfig+0xd8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_TI1_SetConfig+0x66>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a22      	ldr	r2, [pc, #136]	; (800543c <TIM_TI1_SetConfig+0xdc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_TI1_SetConfig+0x66>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a21      	ldr	r2, [pc, #132]	; (8005440 <TIM_TI1_SetConfig+0xe0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_TI1_SetConfig+0x66>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4a20      	ldr	r2, [pc, #128]	; (8005444 <TIM_TI1_SetConfig+0xe4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <TIM_TI1_SetConfig+0x6a>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <TIM_TI1_SetConfig+0x6c>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e003      	b.n	80053ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f023 030a 	bic.w	r3, r3, #10
 8005404:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f003 030a 	and.w	r3, r3, #10
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40000c00 	.word	0x40000c00
 800543c:	40013400 	.word	0x40013400
 8005440:	40014000 	.word	0x40014000
 8005444:	40015000 	.word	0x40015000

08005448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f023 0201 	bic.w	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 030a 	bic.w	r3, r3, #10
 8005484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b087      	sub	sp, #28
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f023 0210 	bic.w	r2, r3, #16
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f023 0210 	bic.w	r2, r3, #16
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800554a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	031b      	lsls	r3, r3, #12
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800555c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	621a      	str	r2, [r3, #32]
}
 8005574:	bf00      	nop
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 0303 	bic.w	r3, r3, #3
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80055d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005624:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005636:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	031b      	lsls	r3, r3, #12
 800563c:	b29b      	uxth	r3, r3
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800564a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	031b      	lsls	r3, r3, #12
 8005650:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	f043 0307 	orr.w	r3, r3, #7
 8005698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	021a      	lsls	r2, r3, #8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	609a      	str	r2, [r3, #8]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	2201      	movs	r2, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a1a      	ldr	r2, [r3, #32]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	43db      	mvns	r3, r3
 800570e:	401a      	ands	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1a      	ldr	r2, [r3, #32]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	fa01 f303 	lsl.w	r3, r1, r3
 8005724:	431a      	orrs	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800574c:	2302      	movs	r3, #2
 800574e:	e074      	b.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a34      	ldr	r2, [pc, #208]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a33      	ldr	r2, [pc, #204]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a31      	ldr	r2, [pc, #196]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005794:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a21      	ldr	r2, [pc, #132]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d0:	d01d      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a15      	ldr	r2, [pc, #84]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a18      	ldr	r2, [pc, #96]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a11      	ldr	r2, [pc, #68]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10c      	bne.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40013400 	.word	0x40013400
 8005850:	40015000 	.word	0x40015000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40014000 	.word	0x40014000

08005864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e042      	b.n	8005988 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fc fb99 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2224      	movs	r2, #36	; 0x24
 800591e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fbfa 	bl	800612c <UART_SetConfig>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e022      	b.n	8005988 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 feea 	bl	8006724 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800595e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800596e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 ff71 	bl	8006868 <UART_CheckIdleState>
 8005986:	4603      	mov	r3, r0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	; 0x28
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	f040 8083 	bne.w	8005ab2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_UART_Transmit+0x28>
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e07b      	b.n	8005ab4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Transmit+0x3a>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e074      	b.n	8005ab4 <HAL_UART_Transmit+0x124>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2221      	movs	r2, #33	; 0x21
 80059de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059e2:	f7fc fca3 	bl	800232c <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a00:	d108      	bne.n	8005a14 <HAL_UART_Transmit+0x84>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e003      	b.n	8005a1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005a24:	e02c      	b.n	8005a80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2180      	movs	r1, #128	; 0x80
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 ff64 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e039      	b.n	8005ab4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	3302      	adds	r3, #2
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	e007      	b.n	8005a6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1cc      	bne.n	8005a26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2200      	movs	r2, #0
 8005a94:	2140      	movs	r1, #64	; 0x40
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 ff31 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e006      	b.n	8005ab4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e000      	b.n	8005ab4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b0ba      	sub	sp, #232	; 0xe8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ae2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ae6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005aea:	4013      	ands	r3, r2
 8005aec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11b      	bne.n	8005b30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d015      	beq.n	8005b30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 82d6 	beq.w	80060d2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
      }
      return;
 8005b2e:	e2d0      	b.n	80060d2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 811f 	beq.w	8005d78 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b3e:	4b8b      	ldr	r3, [pc, #556]	; (8005d6c <HAL_UART_IRQHandler+0x2b0>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b4a:	4b89      	ldr	r3, [pc, #548]	; (8005d70 <HAL_UART_IRQHandler+0x2b4>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8112 	beq.w	8005d78 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d011      	beq.n	8005b84 <HAL_UART_IRQHandler+0xc8>
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2201      	movs	r2, #1
 8005b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b7a:	f043 0201 	orr.w	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d011      	beq.n	8005bb4 <HAL_UART_IRQHandler+0xf8>
 8005b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005baa:	f043 0204 	orr.w	r2, r3, #4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d011      	beq.n	8005be4 <HAL_UART_IRQHandler+0x128>
 8005bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bda:	f043 0202 	orr.w	r2, r3, #2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d017      	beq.n	8005c20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005bfc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c00:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <HAL_UART_IRQHandler+0x2b0>)
 8005c02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c16:	f043 0208 	orr.w	r2, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d012      	beq.n	8005c52 <HAL_UART_IRQHandler+0x196>
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00c      	beq.n	8005c52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 823c 	beq.w	80060d6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d013      	beq.n	8005c92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d105      	bne.n	8005c82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca6:	2b40      	cmp	r3, #64	; 0x40
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d04f      	beq.n	8005d56 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fee9 	bl	8006a8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d141      	bne.n	8005d4e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1d9      	bne.n	8005cca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d22:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <HAL_UART_IRQHandler+0x2b8>)
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fc fc72 	bl	8002614 <HAL_DMA_Abort_IT>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d017      	beq.n	8005d66 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	e00f      	b.n	8005d66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9da 	bl	8006100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	e00b      	b.n	8005d66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9d6 	bl	8006100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	e007      	b.n	8005d66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f9d2 	bl	8006100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005d64:	e1b7      	b.n	80060d6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d66:	bf00      	nop
    return;
 8005d68:	e1b5      	b.n	80060d6 <HAL_UART_IRQHandler+0x61a>
 8005d6a:	bf00      	nop
 8005d6c:	10000001 	.word	0x10000001
 8005d70:	04000120 	.word	0x04000120
 8005d74:	08006b5b 	.word	0x08006b5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	f040 814a 	bne.w	8006016 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d86:	f003 0310 	and.w	r3, r3, #16
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8143 	beq.w	8006016 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 813c 	beq.w	8006016 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2210      	movs	r2, #16
 8005da4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	f040 80b5 	bne.w	8005f20 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8187 	beq.w	80060da <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f080 817f 	bcs.w	80060da <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005de2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f040 8086 	bne.w	8005f04 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1da      	bne.n	8005df8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e1      	bne.n	8005e42 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3308      	adds	r3, #8
 8005e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e3      	bne.n	8005e7e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed4:	f023 0310 	bic.w	r3, r3, #16
 8005ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ee6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e4      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fc fb2f 	bl	8002562 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8fb 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f1e:	e0dc      	b.n	80060da <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80ce 	beq.w	80060de <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005f42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80c9 	beq.w	80060de <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e4      	bne.n	8005f4c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	623b      	str	r3, [r7, #32]
   return(result);
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f98:	f023 0301 	bic.w	r3, r3, #1
 8005f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005faa:	633a      	str	r2, [r7, #48]	; 0x30
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e1      	bne.n	8005f82 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0310 	bic.w	r3, r3, #16
 8005fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	69b9      	ldr	r1, [r7, #24]
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	617b      	str	r3, [r7, #20]
   return(result);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e4      	bne.n	8005fd2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f880 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006014:	e063      	b.n	80060de <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <HAL_UART_IRQHandler+0x584>
 8006022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006036:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fdcf 	bl	8006bdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800603e:	e051      	b.n	80060e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b00      	cmp	r3, #0
 800604a:	d014      	beq.n	8006076 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006068:	2b00      	cmp	r3, #0
 800606a:	d03a      	beq.n	80060e2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
    }
    return;
 8006074:	e035      	b.n	80060e2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_UART_IRQHandler+0x5da>
 8006082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fd79 	bl	8006b86 <UART_EndTransmit_IT>
    return;
 8006094:	e026      	b.n	80060e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <HAL_UART_IRQHandler+0x5fa>
 80060a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fda8 	bl	8006c04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060b4:	e016      	b.n	80060e4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d010      	beq.n	80060e4 <HAL_UART_IRQHandler+0x628>
 80060c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da0c      	bge.n	80060e4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fd90 	bl	8006bf0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060d0:	e008      	b.n	80060e4 <HAL_UART_IRQHandler+0x628>
      return;
 80060d2:	bf00      	nop
 80060d4:	e006      	b.n	80060e4 <HAL_UART_IRQHandler+0x628>
    return;
 80060d6:	bf00      	nop
 80060d8:	e004      	b.n	80060e4 <HAL_UART_IRQHandler+0x628>
      return;
 80060da:	bf00      	nop
 80060dc:	e002      	b.n	80060e4 <HAL_UART_IRQHandler+0x628>
      return;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HAL_UART_IRQHandler+0x628>
    return;
 80060e2:	bf00      	nop
  }
}
 80060e4:	37e8      	adds	r7, #232	; 0xe8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop

080060ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800612c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006130:	b08c      	sub	sp, #48	; 0x30
 8006132:	af00      	add	r7, sp, #0
 8006134:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	431a      	orrs	r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	431a      	orrs	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	4313      	orrs	r3, r2
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4baa      	ldr	r3, [pc, #680]	; (8006404 <UART_SetConfig+0x2d8>)
 800615c:	4013      	ands	r3, r2
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006164:	430b      	orrs	r3, r1
 8006166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a9f      	ldr	r2, [pc, #636]	; (8006408 <UART_SetConfig+0x2dc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006194:	4313      	orrs	r3, r2
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80061a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	f023 010f 	bic.w	r1, r3, #15
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a90      	ldr	r2, [pc, #576]	; (800640c <UART_SetConfig+0x2e0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d125      	bne.n	800621c <UART_SetConfig+0xf0>
 80061d0:	4b8f      	ldr	r3, [pc, #572]	; (8006410 <UART_SetConfig+0x2e4>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d81a      	bhi.n	8006214 <UART_SetConfig+0xe8>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0xb8>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	08006205 	.word	0x08006205
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	0800620d 	.word	0x0800620d
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fa:	e116      	b.n	800642a <UART_SetConfig+0x2fe>
 80061fc:	2302      	movs	r3, #2
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006202:	e112      	b.n	800642a <UART_SetConfig+0x2fe>
 8006204:	2304      	movs	r3, #4
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620a:	e10e      	b.n	800642a <UART_SetConfig+0x2fe>
 800620c:	2308      	movs	r3, #8
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006212:	e10a      	b.n	800642a <UART_SetConfig+0x2fe>
 8006214:	2310      	movs	r3, #16
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621a:	e106      	b.n	800642a <UART_SetConfig+0x2fe>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a7c      	ldr	r2, [pc, #496]	; (8006414 <UART_SetConfig+0x2e8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d138      	bne.n	8006298 <UART_SetConfig+0x16c>
 8006226:	4b7a      	ldr	r3, [pc, #488]	; (8006410 <UART_SetConfig+0x2e4>)
 8006228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622c:	f003 030c 	and.w	r3, r3, #12
 8006230:	2b0c      	cmp	r3, #12
 8006232:	d82d      	bhi.n	8006290 <UART_SetConfig+0x164>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0x110>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006271 	.word	0x08006271
 8006240:	08006291 	.word	0x08006291
 8006244:	08006291 	.word	0x08006291
 8006248:	08006291 	.word	0x08006291
 800624c:	08006281 	.word	0x08006281
 8006250:	08006291 	.word	0x08006291
 8006254:	08006291 	.word	0x08006291
 8006258:	08006291 	.word	0x08006291
 800625c:	08006279 	.word	0x08006279
 8006260:	08006291 	.word	0x08006291
 8006264:	08006291 	.word	0x08006291
 8006268:	08006291 	.word	0x08006291
 800626c:	08006289 	.word	0x08006289
 8006270:	2300      	movs	r3, #0
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006276:	e0d8      	b.n	800642a <UART_SetConfig+0x2fe>
 8006278:	2302      	movs	r3, #2
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627e:	e0d4      	b.n	800642a <UART_SetConfig+0x2fe>
 8006280:	2304      	movs	r3, #4
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006286:	e0d0      	b.n	800642a <UART_SetConfig+0x2fe>
 8006288:	2308      	movs	r3, #8
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628e:	e0cc      	b.n	800642a <UART_SetConfig+0x2fe>
 8006290:	2310      	movs	r3, #16
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006296:	e0c8      	b.n	800642a <UART_SetConfig+0x2fe>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a5e      	ldr	r2, [pc, #376]	; (8006418 <UART_SetConfig+0x2ec>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d125      	bne.n	80062ee <UART_SetConfig+0x1c2>
 80062a2:	4b5b      	ldr	r3, [pc, #364]	; (8006410 <UART_SetConfig+0x2e4>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062ac:	2b30      	cmp	r3, #48	; 0x30
 80062ae:	d016      	beq.n	80062de <UART_SetConfig+0x1b2>
 80062b0:	2b30      	cmp	r3, #48	; 0x30
 80062b2:	d818      	bhi.n	80062e6 <UART_SetConfig+0x1ba>
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d00a      	beq.n	80062ce <UART_SetConfig+0x1a2>
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d814      	bhi.n	80062e6 <UART_SetConfig+0x1ba>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <UART_SetConfig+0x19a>
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d008      	beq.n	80062d6 <UART_SetConfig+0x1aa>
 80062c4:	e00f      	b.n	80062e6 <UART_SetConfig+0x1ba>
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062cc:	e0ad      	b.n	800642a <UART_SetConfig+0x2fe>
 80062ce:	2302      	movs	r3, #2
 80062d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d4:	e0a9      	b.n	800642a <UART_SetConfig+0x2fe>
 80062d6:	2304      	movs	r3, #4
 80062d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062dc:	e0a5      	b.n	800642a <UART_SetConfig+0x2fe>
 80062de:	2308      	movs	r3, #8
 80062e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e4:	e0a1      	b.n	800642a <UART_SetConfig+0x2fe>
 80062e6:	2310      	movs	r3, #16
 80062e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ec:	e09d      	b.n	800642a <UART_SetConfig+0x2fe>
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4a      	ldr	r2, [pc, #296]	; (800641c <UART_SetConfig+0x2f0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d125      	bne.n	8006344 <UART_SetConfig+0x218>
 80062f8:	4b45      	ldr	r3, [pc, #276]	; (8006410 <UART_SetConfig+0x2e4>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006302:	2bc0      	cmp	r3, #192	; 0xc0
 8006304:	d016      	beq.n	8006334 <UART_SetConfig+0x208>
 8006306:	2bc0      	cmp	r3, #192	; 0xc0
 8006308:	d818      	bhi.n	800633c <UART_SetConfig+0x210>
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d00a      	beq.n	8006324 <UART_SetConfig+0x1f8>
 800630e:	2b80      	cmp	r3, #128	; 0x80
 8006310:	d814      	bhi.n	800633c <UART_SetConfig+0x210>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <UART_SetConfig+0x1f0>
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d008      	beq.n	800632c <UART_SetConfig+0x200>
 800631a:	e00f      	b.n	800633c <UART_SetConfig+0x210>
 800631c:	2300      	movs	r3, #0
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006322:	e082      	b.n	800642a <UART_SetConfig+0x2fe>
 8006324:	2302      	movs	r3, #2
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632a:	e07e      	b.n	800642a <UART_SetConfig+0x2fe>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006332:	e07a      	b.n	800642a <UART_SetConfig+0x2fe>
 8006334:	2308      	movs	r3, #8
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633a:	e076      	b.n	800642a <UART_SetConfig+0x2fe>
 800633c:	2310      	movs	r3, #16
 800633e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006342:	e072      	b.n	800642a <UART_SetConfig+0x2fe>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a35      	ldr	r2, [pc, #212]	; (8006420 <UART_SetConfig+0x2f4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d12a      	bne.n	80063a4 <UART_SetConfig+0x278>
 800634e:	4b30      	ldr	r3, [pc, #192]	; (8006410 <UART_SetConfig+0x2e4>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800635c:	d01a      	beq.n	8006394 <UART_SetConfig+0x268>
 800635e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006362:	d81b      	bhi.n	800639c <UART_SetConfig+0x270>
 8006364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006368:	d00c      	beq.n	8006384 <UART_SetConfig+0x258>
 800636a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636e:	d815      	bhi.n	800639c <UART_SetConfig+0x270>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <UART_SetConfig+0x250>
 8006374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006378:	d008      	beq.n	800638c <UART_SetConfig+0x260>
 800637a:	e00f      	b.n	800639c <UART_SetConfig+0x270>
 800637c:	2300      	movs	r3, #0
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006382:	e052      	b.n	800642a <UART_SetConfig+0x2fe>
 8006384:	2302      	movs	r3, #2
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638a:	e04e      	b.n	800642a <UART_SetConfig+0x2fe>
 800638c:	2304      	movs	r3, #4
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006392:	e04a      	b.n	800642a <UART_SetConfig+0x2fe>
 8006394:	2308      	movs	r3, #8
 8006396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639a:	e046      	b.n	800642a <UART_SetConfig+0x2fe>
 800639c:	2310      	movs	r3, #16
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a2:	e042      	b.n	800642a <UART_SetConfig+0x2fe>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a17      	ldr	r2, [pc, #92]	; (8006408 <UART_SetConfig+0x2dc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d13a      	bne.n	8006424 <UART_SetConfig+0x2f8>
 80063ae:	4b18      	ldr	r3, [pc, #96]	; (8006410 <UART_SetConfig+0x2e4>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063bc:	d01a      	beq.n	80063f4 <UART_SetConfig+0x2c8>
 80063be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063c2:	d81b      	bhi.n	80063fc <UART_SetConfig+0x2d0>
 80063c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c8:	d00c      	beq.n	80063e4 <UART_SetConfig+0x2b8>
 80063ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ce:	d815      	bhi.n	80063fc <UART_SetConfig+0x2d0>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <UART_SetConfig+0x2b0>
 80063d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d8:	d008      	beq.n	80063ec <UART_SetConfig+0x2c0>
 80063da:	e00f      	b.n	80063fc <UART_SetConfig+0x2d0>
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e2:	e022      	b.n	800642a <UART_SetConfig+0x2fe>
 80063e4:	2302      	movs	r3, #2
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e01e      	b.n	800642a <UART_SetConfig+0x2fe>
 80063ec:	2304      	movs	r3, #4
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f2:	e01a      	b.n	800642a <UART_SetConfig+0x2fe>
 80063f4:	2308      	movs	r3, #8
 80063f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063fa:	e016      	b.n	800642a <UART_SetConfig+0x2fe>
 80063fc:	2310      	movs	r3, #16
 80063fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006402:	e012      	b.n	800642a <UART_SetConfig+0x2fe>
 8006404:	cfff69f3 	.word	0xcfff69f3
 8006408:	40008000 	.word	0x40008000
 800640c:	40013800 	.word	0x40013800
 8006410:	40021000 	.word	0x40021000
 8006414:	40004400 	.word	0x40004400
 8006418:	40004800 	.word	0x40004800
 800641c:	40004c00 	.word	0x40004c00
 8006420:	40005000 	.word	0x40005000
 8006424:	2310      	movs	r3, #16
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4aae      	ldr	r2, [pc, #696]	; (80066e8 <UART_SetConfig+0x5bc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	f040 8097 	bne.w	8006564 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800643a:	2b08      	cmp	r3, #8
 800643c:	d823      	bhi.n	8006486 <UART_SetConfig+0x35a>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0x318>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006469 	.word	0x08006469
 8006448:	08006487 	.word	0x08006487
 800644c:	08006471 	.word	0x08006471
 8006450:	08006487 	.word	0x08006487
 8006454:	08006477 	.word	0x08006477
 8006458:	08006487 	.word	0x08006487
 800645c:	08006487 	.word	0x08006487
 8006460:	08006487 	.word	0x08006487
 8006464:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006468:	f7fd f854 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 800646c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800646e:	e010      	b.n	8006492 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b9e      	ldr	r3, [pc, #632]	; (80066ec <UART_SetConfig+0x5c0>)
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006474:	e00d      	b.n	8006492 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fc ffdf 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 800647a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800647c:	e009      	b.n	8006492 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006484:	e005      	b.n	8006492 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006490:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8130 	beq.w	80066fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	4a94      	ldr	r2, [pc, #592]	; (80066f0 <UART_SetConfig+0x5c4>)
 80064a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a4:	461a      	mov	r2, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d305      	bcc.n	80064ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d903      	bls.n	80064d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064d0:	e113      	b.n	80066fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	2200      	movs	r2, #0
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	60fa      	str	r2, [r7, #12]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	4a84      	ldr	r2, [pc, #528]	; (80066f0 <UART_SetConfig+0x5c4>)
 80064e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2200      	movs	r2, #0
 80064e8:	603b      	str	r3, [r7, #0]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064f4:	f7fa fb02 	bl	8000afc <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4610      	mov	r0, r2
 80064fe:	4619      	mov	r1, r3
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	020b      	lsls	r3, r1, #8
 800650a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800650e:	0202      	lsls	r2, r0, #8
 8006510:	6979      	ldr	r1, [r7, #20]
 8006512:	6849      	ldr	r1, [r1, #4]
 8006514:	0849      	lsrs	r1, r1, #1
 8006516:	2000      	movs	r0, #0
 8006518:	460c      	mov	r4, r1
 800651a:	4605      	mov	r5, r0
 800651c:	eb12 0804 	adds.w	r8, r2, r4
 8006520:	eb43 0905 	adc.w	r9, r3, r5
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	469a      	mov	sl, r3
 800652c:	4693      	mov	fp, r2
 800652e:	4652      	mov	r2, sl
 8006530:	465b      	mov	r3, fp
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7fa fae1 	bl	8000afc <__aeabi_uldivmod>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4613      	mov	r3, r2
 8006540:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006548:	d308      	bcc.n	800655c <UART_SetConfig+0x430>
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006550:	d204      	bcs.n	800655c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	60da      	str	r2, [r3, #12]
 800655a:	e0ce      	b.n	80066fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006562:	e0ca      	b.n	80066fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656c:	d166      	bne.n	800663c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800656e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006572:	2b08      	cmp	r3, #8
 8006574:	d827      	bhi.n	80065c6 <UART_SetConfig+0x49a>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x450>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065b1 	.word	0x080065b1
 8006588:	080065c7 	.word	0x080065c7
 800658c:	080065b7 	.word	0x080065b7
 8006590:	080065c7 	.word	0x080065c7
 8006594:	080065c7 	.word	0x080065c7
 8006598:	080065c7 	.word	0x080065c7
 800659c:	080065bf 	.word	0x080065bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7fc ffb8 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 80065a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065a6:	e014      	b.n	80065d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a8:	f7fc ffca 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065ae:	e010      	b.n	80065d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b0:	4b4e      	ldr	r3, [pc, #312]	; (80066ec <UART_SetConfig+0x5c0>)
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065b4:	e00d      	b.n	80065d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b6:	f7fc ff3f 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065bc:	e009      	b.n	80065d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065c4:	e005      	b.n	80065d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8090 	beq.w	80066fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	4a44      	ldr	r2, [pc, #272]	; (80066f0 <UART_SetConfig+0x5c4>)
 80065e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e4:	461a      	mov	r2, r3
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ec:	005a      	lsls	r2, r3, #1
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	441a      	add	r2, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2b0f      	cmp	r3, #15
 8006604:	d916      	bls.n	8006634 <UART_SetConfig+0x508>
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660c:	d212      	bcs.n	8006634 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f023 030f 	bic.w	r3, r3, #15
 8006616:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	b29b      	uxth	r3, r3
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	b29a      	uxth	r2, r3
 8006624:	8bfb      	ldrh	r3, [r7, #30]
 8006626:	4313      	orrs	r3, r2
 8006628:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	8bfa      	ldrh	r2, [r7, #30]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	e062      	b.n	80066fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800663a:	e05e      	b.n	80066fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800663c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006640:	2b08      	cmp	r3, #8
 8006642:	d828      	bhi.n	8006696 <UART_SetConfig+0x56a>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <UART_SetConfig+0x520>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	08006697 	.word	0x08006697
 800665c:	08006687 	.word	0x08006687
 8006660:	08006697 	.word	0x08006697
 8006664:	08006697 	.word	0x08006697
 8006668:	08006697 	.word	0x08006697
 800666c:	0800668f 	.word	0x0800668f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fc ff50 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8006674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006676:	e014      	b.n	80066a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006678:	f7fc ff62 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800667e:	e010      	b.n	80066a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <UART_SetConfig+0x5c0>)
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006684:	e00d      	b.n	80066a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006686:	f7fc fed7 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 800668a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800668c:	e009      	b.n	80066a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006694:	e005      	b.n	80066a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066a0:	bf00      	nop
    }

    if (pclk != 0U)
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d028      	beq.n	80066fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	4a10      	ldr	r2, [pc, #64]	; (80066f0 <UART_SetConfig+0x5c4>)
 80066ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	441a      	add	r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	d910      	bls.n	80066f4 <UART_SetConfig+0x5c8>
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d8:	d20c      	bcs.n	80066f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	b29a      	uxth	r2, r3
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60da      	str	r2, [r3, #12]
 80066e4:	e009      	b.n	80066fa <UART_SetConfig+0x5ce>
 80066e6:	bf00      	nop
 80066e8:	40008000 	.word	0x40008000
 80066ec:	00f42400 	.word	0x00f42400
 80066f0:	0800afac 	.word	0x0800afac
      }
      else
      {
        ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2201      	movs	r2, #1
 8006706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2200      	movs	r2, #0
 800670e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2200      	movs	r2, #0
 8006714:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006716:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800671a:	4618      	mov	r0, r3
 800671c:	3730      	adds	r7, #48	; 0x30
 800671e:	46bd      	mov	sp, r7
 8006720:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	f003 0310 	and.w	r3, r3, #16
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01a      	beq.n	800683a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006822:	d10a      	bne.n	800683a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	605a      	str	r2, [r3, #4]
  }
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af02      	add	r7, sp, #8
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006878:	f7fb fd58 	bl	800232c <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b08      	cmp	r3, #8
 800688a:	d10e      	bne.n	80068aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800688c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f82f 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e025      	b.n	80068f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d10e      	bne.n	80068d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f819 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e00f      	b.n	80068f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b09c      	sub	sp, #112	; 0x70
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	4613      	mov	r3, r2
 800690c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690e:	e0a9      	b.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	f000 80a5 	beq.w	8006a64 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691a:	f7fb fd07 	bl	800232c <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006926:	429a      	cmp	r2, r3
 8006928:	d302      	bcc.n	8006930 <UART_WaitOnFlagUntilTimeout+0x32>
 800692a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800692c:	2b00      	cmp	r3, #0
 800692e:	d140      	bne.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800693e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006944:	667b      	str	r3, [r7, #100]	; 0x64
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800694e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006950:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800695c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	663b      	str	r3, [r7, #96]	; 0x60
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006982:	64ba      	str	r2, [r7, #72]	; 0x48
 8006984:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e5      	bne.n	8006962 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e069      	b.n	8006a86 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d051      	beq.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ce:	d149      	bne.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	e853 3f00 	ldrex	r3, [r3]
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
 80069fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e6      	bne.n	80069da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f023 0301 	bic.w	r3, r3, #1
 8006a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a2c:	623a      	str	r2, [r7, #32]
 8006a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	69f9      	ldr	r1, [r7, #28]
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e5      	bne.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e010      	b.n	8006a86 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	69da      	ldr	r2, [r3, #28]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	bf0c      	ite	eq
 8006a74:	2301      	moveq	r3, #1
 8006a76:	2300      	movne	r3, #0
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	f43f af46 	beq.w	8006910 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3770      	adds	r7, #112	; 0x70
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b095      	sub	sp, #84	; 0x54
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ade:	f023 0301 	bic.w	r3, r3, #1
 8006ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e3      	bne.n	8006ac8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d118      	bne.n	8006b3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f023 0310 	bic.w	r3, r3, #16
 8006b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6979      	ldr	r1, [r7, #20]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	613b      	str	r3, [r7, #16]
   return(result);
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e6      	bne.n	8006b08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b4e:	bf00      	nop
 8006b50:	3754      	adds	r7, #84	; 0x54
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff fac1 	bl	8006100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b088      	sub	sp, #32
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e6      	bne.n	8006b8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff fa8c 	bl	80060ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd4:	bf00      	nop
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e027      	b.n	8006c7e <HAL_UARTEx_DisableFifoMode+0x66>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2224      	movs	r2, #36	; 0x24
 8006c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e02d      	b.n	8006cfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2224      	movs	r2, #36	; 0x24
 8006cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0201 	bic.w	r2, r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f850 	bl	8006d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e02d      	b.n	8006d7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2224      	movs	r2, #36	; 0x24
 8006d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f812 	bl	8006d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d108      	bne.n	8006da6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006da4:	e031      	b.n	8006e0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006da6:	2308      	movs	r3, #8
 8006da8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006daa:	2308      	movs	r3, #8
 8006dac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	0e5b      	lsrs	r3, r3, #25
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	0f5b      	lsrs	r3, r3, #29
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	7b3a      	ldrb	r2, [r7, #12]
 8006dd2:	4911      	ldr	r1, [pc, #68]	; (8006e18 <UARTEx_SetNbDataToProcess+0x94>)
 8006dd4:	5c8a      	ldrb	r2, [r1, r2]
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dda:	7b3a      	ldrb	r2, [r7, #12]
 8006ddc:	490f      	ldr	r1, [pc, #60]	; (8006e1c <UARTEx_SetNbDataToProcess+0x98>)
 8006dde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006de0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	7b7a      	ldrb	r2, [r7, #13]
 8006df0:	4909      	ldr	r1, [pc, #36]	; (8006e18 <UARTEx_SetNbDataToProcess+0x94>)
 8006df2:	5c8a      	ldrb	r2, [r1, r2]
 8006df4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006df8:	7b7a      	ldrb	r2, [r7, #13]
 8006dfa:	4908      	ldr	r1, [pc, #32]	; (8006e1c <UARTEx_SetNbDataToProcess+0x98>)
 8006dfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	0800afc4 	.word	0x0800afc4
 8006e1c:	0800afcc 	.word	0x0800afcc

08006e20 <__NVIC_SetPriority>:
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	db0a      	blt.n	8006e4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	490c      	ldr	r1, [pc, #48]	; (8006e6c <__NVIC_SetPriority+0x4c>)
 8006e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3e:	0112      	lsls	r2, r2, #4
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	440b      	add	r3, r1
 8006e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e48:	e00a      	b.n	8006e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	4908      	ldr	r1, [pc, #32]	; (8006e70 <__NVIC_SetPriority+0x50>)
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	3b04      	subs	r3, #4
 8006e58:	0112      	lsls	r2, r2, #4
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	761a      	strb	r2, [r3, #24]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	e000e100 	.word	0xe000e100
 8006e70:	e000ed00 	.word	0xe000ed00

08006e74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f06f 0004 	mvn.w	r0, #4
 8006e7e:	f7ff ffcf 	bl	8006e20 <__NVIC_SetPriority>
#endif
}
 8006e82:	bf00      	nop
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e8e:	f3ef 8305 	mrs	r3, IPSR
 8006e92:	603b      	str	r3, [r7, #0]
  return(result);
 8006e94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e9a:	f06f 0305 	mvn.w	r3, #5
 8006e9e:	607b      	str	r3, [r7, #4]
 8006ea0:	e00c      	b.n	8006ebc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ea2:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <osKernelInitialize+0x44>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d105      	bne.n	8006eb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <osKernelInitialize+0x44>)
 8006eac:	2201      	movs	r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	607b      	str	r3, [r7, #4]
 8006eb4:	e002      	b.n	8006ebc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ebc:	687b      	ldr	r3, [r7, #4]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	200003f4 	.word	0x200003f4

08006ed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed6:	f3ef 8305 	mrs	r3, IPSR
 8006eda:	603b      	str	r3, [r7, #0]
  return(result);
 8006edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ee2:	f06f 0305 	mvn.w	r3, #5
 8006ee6:	607b      	str	r3, [r7, #4]
 8006ee8:	e010      	b.n	8006f0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <osKernelStart+0x48>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d109      	bne.n	8006f06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ef2:	f7ff ffbf 	bl	8006e74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ef6:	4b08      	ldr	r3, [pc, #32]	; (8006f18 <osKernelStart+0x48>)
 8006ef8:	2202      	movs	r2, #2
 8006efa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006efc:	f001 fcbc 	bl	8008878 <vTaskStartScheduler>
      stat = osOK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	607b      	str	r3, [r7, #4]
 8006f04:	e002      	b.n	8006f0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006f06:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f0c:	687b      	ldr	r3, [r7, #4]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	200003f4 	.word	0x200003f4

08006f1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08e      	sub	sp, #56	; 0x38
 8006f20:	af04      	add	r7, sp, #16
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f2c:	f3ef 8305 	mrs	r3, IPSR
 8006f30:	617b      	str	r3, [r7, #20]
  return(result);
 8006f32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d17e      	bne.n	8007036 <osThreadNew+0x11a>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d07b      	beq.n	8007036 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f42:	2318      	movs	r3, #24
 8006f44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d045      	beq.n	8006fe2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <osThreadNew+0x48>
        name = attr->name;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <osThreadNew+0x6e>
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b38      	cmp	r3, #56	; 0x38
 8006f7c:	d805      	bhi.n	8006f8a <osThreadNew+0x6e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <osThreadNew+0x72>
        return (NULL);
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e054      	b.n	8007038 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00e      	beq.n	8006fc4 <osThreadNew+0xa8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2bbb      	cmp	r3, #187	; 0xbb
 8006fac:	d90a      	bls.n	8006fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <osThreadNew+0xa8>
        mem = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	e010      	b.n	8006fe6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10c      	bne.n	8006fe6 <osThreadNew+0xca>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d108      	bne.n	8006fe6 <osThreadNew+0xca>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <osThreadNew+0xca>
          mem = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	e001      	b.n	8006fe6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d110      	bne.n	800700e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ff4:	9202      	str	r2, [sp, #8]
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6a3a      	ldr	r2, [r7, #32]
 8007000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f001 fa4c 	bl	80084a0 <xTaskCreateStatic>
 8007008:	4603      	mov	r3, r0
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	e013      	b.n	8007036 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d110      	bne.n	8007036 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	b29a      	uxth	r2, r3
 8007018:	f107 0310 	add.w	r3, r7, #16
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f001 fa97 	bl	800855a <xTaskCreate>
 800702c:	4603      	mov	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d001      	beq.n	8007036 <osThreadNew+0x11a>
            hTask = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007036:	693b      	ldr	r3, [r7, #16]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3728      	adds	r7, #40	; 0x28
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007048:	f3ef 8305 	mrs	r3, IPSR
 800704c:	60bb      	str	r3, [r7, #8]
  return(result);
 800704e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <osDelay+0x1c>
    stat = osErrorISR;
 8007054:	f06f 0305 	mvn.w	r3, #5
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	e007      	b.n	800706c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fbd2 	bl	8008810 <vTaskDelay>
    }
  }

  return (stat);
 800706c:	68fb      	ldr	r3, [r7, #12]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007076:	b580      	push	{r7, lr}
 8007078:	b08a      	sub	sp, #40	; 0x28
 800707a:	af02      	add	r7, sp, #8
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007082:	2300      	movs	r3, #0
 8007084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007086:	f3ef 8305 	mrs	r3, IPSR
 800708a:	613b      	str	r3, [r7, #16]
  return(result);
 800708c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800708e:	2b00      	cmp	r3, #0
 8007090:	d175      	bne.n	800717e <osSemaphoreNew+0x108>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d072      	beq.n	800717e <osSemaphoreNew+0x108>
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	429a      	cmp	r2, r3
 800709e:	d86e      	bhi.n	800717e <osSemaphoreNew+0x108>
    mem = -1;
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295
 80070a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d015      	beq.n	80070d8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <osSemaphoreNew+0x4c>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b4f      	cmp	r3, #79	; 0x4f
 80070ba:	d902      	bls.n	80070c2 <osSemaphoreNew+0x4c>
        mem = 1;
 80070bc:	2301      	movs	r3, #1
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	e00c      	b.n	80070dc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d108      	bne.n	80070dc <osSemaphoreNew+0x66>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <osSemaphoreNew+0x66>
          mem = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61bb      	str	r3, [r7, #24]
 80070d6:	e001      	b.n	80070dc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	d04c      	beq.n	800717e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d128      	bne.n	800713c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d10a      	bne.n	8007106 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	2203      	movs	r2, #3
 80070f6:	9200      	str	r2, [sp, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	2001      	movs	r0, #1
 80070fe:	f000 fa29 	bl	8007554 <xQueueGenericCreateStatic>
 8007102:	61f8      	str	r0, [r7, #28]
 8007104:	e005      	b.n	8007112 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007106:	2203      	movs	r2, #3
 8007108:	2100      	movs	r1, #0
 800710a:	2001      	movs	r0, #1
 800710c:	f000 fa9a 	bl	8007644 <xQueueGenericCreate>
 8007110:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d022      	beq.n	800715e <osSemaphoreNew+0xe8>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01f      	beq.n	800715e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800711e:	2300      	movs	r3, #0
 8007120:	2200      	movs	r2, #0
 8007122:	2100      	movs	r1, #0
 8007124:	69f8      	ldr	r0, [r7, #28]
 8007126:	f000 fb55 	bl	80077d4 <xQueueGenericSend>
 800712a:	4603      	mov	r3, r0
 800712c:	2b01      	cmp	r3, #1
 800712e:	d016      	beq.n	800715e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007130:	69f8      	ldr	r0, [r7, #28]
 8007132:	f000 ffe1 	bl	80080f8 <vQueueDelete>
            hSemaphore = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	e010      	b.n	800715e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d108      	bne.n	8007154 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	461a      	mov	r2, r3
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fad7 	bl	80076fe <xQueueCreateCountingSemaphoreStatic>
 8007150:	61f8      	str	r0, [r7, #28]
 8007152:	e004      	b.n	800715e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fb08 	bl	800776c <xQueueCreateCountingSemaphore>
 800715c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00c      	beq.n	800717e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <osSemaphoreNew+0xfc>
          name = attr->name;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	e001      	b.n	8007176 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	69f8      	ldr	r0, [r7, #28]
 800717a:	f001 f909 	bl	8008390 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800717e:	69fb      	ldr	r3, [r7, #28]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007196:	2300      	movs	r3, #0
 8007198:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d103      	bne.n	80071a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80071a0:	f06f 0303 	mvn.w	r3, #3
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	e039      	b.n	800721c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a8:	f3ef 8305 	mrs	r3, IPSR
 80071ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80071ae:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80071ba:	f06f 0303 	mvn.w	r3, #3
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	e02c      	b.n	800721c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80071c6:	f107 0308 	add.w	r3, r7, #8
 80071ca:	461a      	mov	r2, r3
 80071cc:	2100      	movs	r1, #0
 80071ce:	6938      	ldr	r0, [r7, #16]
 80071d0:	f000 ff12 	bl	8007ff8 <xQueueReceiveFromISR>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d003      	beq.n	80071e2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80071da:	f06f 0302 	mvn.w	r3, #2
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	e01c      	b.n	800721c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d019      	beq.n	800721c <osSemaphoreAcquire+0x94>
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <osSemaphoreAcquire+0xa0>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	e010      	b.n	800721c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6938      	ldr	r0, [r7, #16]
 80071fe:	f000 fdef 	bl	8007de0 <xQueueSemaphoreTake>
 8007202:	4603      	mov	r3, r0
 8007204:	2b01      	cmp	r3, #1
 8007206:	d009      	beq.n	800721c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800720e:	f06f 0301 	mvn.w	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	e002      	b.n	800721c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007216:	f06f 0302 	mvn.w	r3, #2
 800721a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800721c:	697b      	ldr	r3, [r7, #20]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007242:	f06f 0303 	mvn.w	r3, #3
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	e02c      	b.n	80072a4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800724a:	f3ef 8305 	mrs	r3, IPSR
 800724e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007250:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01a      	beq.n	800728c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800725a:	f107 0308 	add.w	r3, r7, #8
 800725e:	4619      	mov	r1, r3
 8007260:	6938      	ldr	r0, [r7, #16]
 8007262:	f000 fc50 	bl	8007b06 <xQueueGiveFromISR>
 8007266:	4603      	mov	r3, r0
 8007268:	2b01      	cmp	r3, #1
 800726a:	d003      	beq.n	8007274 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800726c:	f06f 0302 	mvn.w	r3, #2
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	e017      	b.n	80072a4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d014      	beq.n	80072a4 <osSemaphoreRelease+0x78>
 800727a:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <osSemaphoreRelease+0x84>)
 800727c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	e00b      	b.n	80072a4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800728c:	2300      	movs	r3, #0
 800728e:	2200      	movs	r2, #0
 8007290:	2100      	movs	r1, #0
 8007292:	6938      	ldr	r0, [r7, #16]
 8007294:	f000 fa9e 	bl	80077d4 <xQueueGenericSend>
 8007298:	4603      	mov	r3, r0
 800729a:	2b01      	cmp	r3, #1
 800729c:	d002      	beq.n	80072a4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800729e:	f06f 0302 	mvn.w	r3, #2
 80072a2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80072a4:	697b      	ldr	r3, [r7, #20]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	e000ed04 	.word	0xe000ed04

080072b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a07      	ldr	r2, [pc, #28]	; (80072e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80072c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	4a06      	ldr	r2, [pc, #24]	; (80072e4 <vApplicationGetIdleTaskMemory+0x30>)
 80072ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2280      	movs	r2, #128	; 0x80
 80072d0:	601a      	str	r2, [r3, #0]
}
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	200003f8 	.word	0x200003f8
 80072e4:	200004b4 	.word	0x200004b4

080072e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a07      	ldr	r2, [pc, #28]	; (8007314 <vApplicationGetTimerTaskMemory+0x2c>)
 80072f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4a06      	ldr	r2, [pc, #24]	; (8007318 <vApplicationGetTimerTaskMemory+0x30>)
 80072fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007306:	601a      	str	r2, [r3, #0]
}
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	200006b4 	.word	0x200006b4
 8007318:	20000770 	.word	0x20000770

0800731c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f103 0208 	add.w	r2, r3, #8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f103 0208 	add.w	r2, r3, #8
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f103 0208 	add.w	r2, r3, #8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	601a      	str	r2, [r3, #0]
}
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d103      	bne.n	80073de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	e00c      	b.n	80073f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3308      	adds	r3, #8
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e002      	b.n	80073ec <vListInsert+0x2e>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d2f6      	bcs.n	80073e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	601a      	str	r2, [r3, #0]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6892      	ldr	r2, [r2, #8]
 8007446:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6852      	ldr	r2, [r2, #4]
 8007450:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	429a      	cmp	r2, r3
 800745a:	d103      	bne.n	8007464 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	1e5a      	subs	r2, r3, #1
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074ae:	f002 fc99 	bl	8009de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	441a      	add	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074de:	3b01      	subs	r3, #1
 80074e0:	68f9      	ldr	r1, [r7, #12]
 80074e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	441a      	add	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	22ff      	movs	r2, #255	; 0xff
 80074f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	22ff      	movs	r2, #255	; 0xff
 80074fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d114      	bne.n	800752e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01a      	beq.n	8007542 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3310      	adds	r3, #16
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fc4b 	bl	8008dac <xTaskRemoveFromEventList>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d012      	beq.n	8007542 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <xQueueGenericReset+0xcc>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	e009      	b.n	8007542 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3310      	adds	r3, #16
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fef2 	bl	800731c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3324      	adds	r3, #36	; 0x24
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff feed 	bl	800731c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007542:	f002 fc7f 	bl	8009e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007546:	2301      	movs	r3, #1
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08e      	sub	sp, #56	; 0x38
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007596:	bf00      	nop
 8007598:	e7fe      	b.n	8007598 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <xQueueGenericCreateStatic+0x52>
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <xQueueGenericCreateStatic+0x56>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <xQueueGenericCreateStatic+0x58>
 80075aa:	2300      	movs	r3, #0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	623b      	str	r3, [r7, #32]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <xQueueGenericCreateStatic+0x7e>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <xQueueGenericCreateStatic+0x82>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <xQueueGenericCreateStatic+0x84>
 80075d6:	2300      	movs	r3, #0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	61fb      	str	r3, [r7, #28]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075f2:	2350      	movs	r3, #80	; 0x50
 80075f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b50      	cmp	r3, #80	; 0x50
 80075fa:	d00a      	beq.n	8007612 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	61bb      	str	r3, [r7, #24]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007612:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00d      	beq.n	800763a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007626:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	4613      	mov	r3, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f83f 	bl	80076b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800763c:	4618      	mov	r0, r3
 800763e:	3730      	adds	r7, #48	; 0x30
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007644:	b580      	push	{r7, lr}
 8007646:	b08a      	sub	sp, #40	; 0x28
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	613b      	str	r3, [r7, #16]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3350      	adds	r3, #80	; 0x50
 800767c:	4618      	mov	r0, r3
 800767e:	f002 fcd3 	bl	800a028 <pvPortMalloc>
 8007682:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d011      	beq.n	80076ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	3350      	adds	r3, #80	; 0x50
 8007692:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800769c:	79fa      	ldrb	r2, [r7, #7]
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	4613      	mov	r3, r2
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f805 	bl	80076b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076ae:	69bb      	ldr	r3, [r7, #24]
	}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e002      	b.n	80076da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076e6:	2101      	movs	r1, #1
 80076e8:	69b8      	ldr	r0, [r7, #24]
 80076ea:	f7ff fecb 	bl	8007484 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076f6:	bf00      	nop
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b08a      	sub	sp, #40	; 0x28
 8007702:	af02      	add	r7, sp, #8
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	61bb      	str	r3, [r7, #24]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	429a      	cmp	r2, r3
 800772c:	d90a      	bls.n	8007744 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	617b      	str	r3, [r7, #20]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007744:	2302      	movs	r3, #2
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7ff ff00 	bl	8007554 <xQueueGenericCreateStatic>
 8007754:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007762:	69fb      	ldr	r3, [r7, #28]
	}
 8007764:	4618      	mov	r0, r3
 8007766:	3720      	adds	r7, #32
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	613b      	str	r3, [r7, #16]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d90a      	bls.n	80077b0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	60fb      	str	r3, [r7, #12]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80077b0:	2202      	movs	r2, #2
 80077b2:	2100      	movs	r1, #0
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff ff45 	bl	8007644 <xQueueGenericCreate>
 80077ba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80077c8:	697b      	ldr	r3, [r7, #20]
	}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08e      	sub	sp, #56	; 0x38
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077e2:	2300      	movs	r3, #0
 80077e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xQueueGenericSend+0x32>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <xQueueGenericSend+0x40>
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <xQueueGenericSend+0x44>
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <xQueueGenericSend+0x46>
 8007818:	2300      	movs	r3, #0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <xQueueGenericSend+0x60>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d103      	bne.n	8007842 <xQueueGenericSend+0x6e>
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <xQueueGenericSend+0x72>
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <xQueueGenericSend+0x74>
 8007846:	2300      	movs	r3, #0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <xQueueGenericSend+0x8e>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	623b      	str	r3, [r7, #32]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007862:	f001 fc65 	bl	8009130 <xTaskGetSchedulerState>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d102      	bne.n	8007872 <xQueueGenericSend+0x9e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <xQueueGenericSend+0xa2>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <xQueueGenericSend+0xa4>
 8007876:	2300      	movs	r3, #0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <xQueueGenericSend+0xbe>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	61fb      	str	r3, [r7, #28]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007892:	f002 faa7 	bl	8009de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	429a      	cmp	r2, r3
 80078a0:	d302      	bcc.n	80078a8 <xQueueGenericSend+0xd4>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d129      	bne.n	80078fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ae:	f000 fc5e 	bl	800816e <prvCopyDataToQueue>
 80078b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d010      	beq.n	80078de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078be:	3324      	adds	r3, #36	; 0x24
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fa73 	bl	8008dac <xTaskRemoveFromEventList>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d013      	beq.n	80078f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078cc:	4b3f      	ldr	r3, [pc, #252]	; (80079cc <xQueueGenericSend+0x1f8>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	e00a      	b.n	80078f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d007      	beq.n	80078f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078e4:	4b39      	ldr	r3, [pc, #228]	; (80079cc <xQueueGenericSend+0x1f8>)
 80078e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078f4:	f002 faa6 	bl	8009e44 <vPortExitCritical>
				return pdPASS;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e063      	b.n	80079c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007902:	f002 fa9f 	bl	8009e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007906:	2300      	movs	r3, #0
 8007908:	e05c      	b.n	80079c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	2b00      	cmp	r3, #0
 800790e:	d106      	bne.n	800791e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007910:	f107 0314 	add.w	r3, r7, #20
 8007914:	4618      	mov	r0, r3
 8007916:	f001 faad 	bl	8008e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800791a:	2301      	movs	r3, #1
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800791e:	f002 fa91 	bl	8009e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007922:	f001 f819 	bl	8008958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007926:	f002 fa5d 	bl	8009de4 <vPortEnterCritical>
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007930:	b25b      	sxtb	r3, r3
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d103      	bne.n	8007940 <xQueueGenericSend+0x16c>
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007946:	b25b      	sxtb	r3, r3
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794c:	d103      	bne.n	8007956 <xQueueGenericSend+0x182>
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007956:	f002 fa75 	bl	8009e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800795a:	1d3a      	adds	r2, r7, #4
 800795c:	f107 0314 	add.w	r3, r7, #20
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f001 fa9c 	bl	8008ea0 <xTaskCheckForTimeOut>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d124      	bne.n	80079b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800796e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007970:	f000 fcf5 	bl	800835e <prvIsQueueFull>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d018      	beq.n	80079ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	3310      	adds	r3, #16
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f001 f9c2 	bl	8008d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800798a:	f000 fc80 	bl	800828e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800798e:	f000 fff1 	bl	8008974 <xTaskResumeAll>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	f47f af7c 	bne.w	8007892 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800799a:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <xQueueGenericSend+0x1f8>)
 800799c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	e772      	b.n	8007892 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ae:	f000 fc6e 	bl	800828e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079b2:	f000 ffdf 	bl	8008974 <xTaskResumeAll>
 80079b6:	e76c      	b.n	8007892 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ba:	f000 fc68 	bl	800828e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079be:	f000 ffd9 	bl	8008974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3738      	adds	r7, #56	; 0x38
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b090      	sub	sp, #64	; 0x40
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <xQueueGenericSendFromISR+0x3c>
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <xQueueGenericSendFromISR+0x40>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e000      	b.n	8007a12 <xQueueGenericSendFromISR+0x42>
 8007a10:	2300      	movs	r3, #0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10a      	bne.n	8007a2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a28:	bf00      	nop
 8007a2a:	e7fe      	b.n	8007a2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d103      	bne.n	8007a3a <xQueueGenericSendFromISR+0x6a>
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <xQueueGenericSendFromISR+0x6e>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <xQueueGenericSendFromISR+0x70>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	623b      	str	r3, [r7, #32]
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a5a:	f002 faa5 	bl	8009fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	61fa      	str	r2, [r7, #28]
 8007a74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d302      	bcc.n	8007a8c <xQueueGenericSendFromISR+0xbc>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d12f      	bne.n	8007aec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007aa2:	f000 fb64 	bl	800816e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aa6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aae:	d112      	bne.n	8007ad6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d016      	beq.n	8007ae6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	3324      	adds	r3, #36	; 0x24
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 f975 	bl	8008dac <xTaskRemoveFromEventList>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00e      	beq.n	8007ae6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e007      	b.n	8007ae6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ad6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ada:	3301      	adds	r3, #1
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	b25a      	sxtb	r2, r3
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007aea:	e001      	b.n	8007af0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007afa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3740      	adds	r7, #64	; 0x40
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b08e      	sub	sp, #56	; 0x38
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	623b      	str	r3, [r7, #32]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	61fb      	str	r3, [r7, #28]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <xQueueGiveFromISR+0x58>
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <xQueueGiveFromISR+0x5c>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <xQueueGiveFromISR+0x5e>
 8007b62:	2300      	movs	r3, #0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	61bb      	str	r3, [r7, #24]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b7e:	f002 fa13 	bl	8009fa8 <vPortValidateInterruptPriority>
	__asm volatile
 8007b82:	f3ef 8211 	mrs	r2, BASEPRI
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	617a      	str	r2, [r7, #20]
 8007b98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d22b      	bcs.n	8007c06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc8:	d112      	bne.n	8007bf0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d016      	beq.n	8007c00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	3324      	adds	r3, #36	; 0x24
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 f8e8 	bl	8008dac <xTaskRemoveFromEventList>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00e      	beq.n	8007c00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2201      	movs	r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e007      	b.n	8007c00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	b25a      	sxtb	r2, r3
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c00:	2301      	movs	r3, #1
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
 8007c04:	e001      	b.n	8007c0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f383 8811 	msr	BASEPRI, r3
}
 8007c14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3738      	adds	r7, #56	; 0x38
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08c      	sub	sp, #48	; 0x30
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <xQueueReceive+0x30>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	623b      	str	r3, [r7, #32]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d103      	bne.n	8007c5e <xQueueReceive+0x3e>
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <xQueueReceive+0x42>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <xQueueReceive+0x44>
 8007c62:	2300      	movs	r3, #0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <xQueueReceive+0x5e>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	61fb      	str	r3, [r7, #28]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c7e:	f001 fa57 	bl	8009130 <xTaskGetSchedulerState>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d102      	bne.n	8007c8e <xQueueReceive+0x6e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <xQueueReceive+0x72>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <xQueueReceive+0x74>
 8007c92:	2300      	movs	r3, #0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <xQueueReceive+0x8e>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	61bb      	str	r3, [r7, #24]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cae:	f002 f899 	bl	8009de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01f      	beq.n	8007cfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc2:	f000 fabe 	bl	8008242 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	1e5a      	subs	r2, r3, #1
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00f      	beq.n	8007cf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	3310      	adds	r3, #16
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 f866 	bl	8008dac <xTaskRemoveFromEventList>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ce6:	4b3d      	ldr	r3, [pc, #244]	; (8007ddc <xQueueReceive+0x1bc>)
 8007ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cf6:	f002 f8a5 	bl	8009e44 <vPortExitCritical>
				return pdPASS;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e069      	b.n	8007dd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d04:	f002 f89e 	bl	8009e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e062      	b.n	8007dd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d12:	f107 0310 	add.w	r3, r7, #16
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 f8ac 	bl	8008e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d20:	f002 f890 	bl	8009e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d24:	f000 fe18 	bl	8008958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d28:	f002 f85c 	bl	8009de4 <vPortEnterCritical>
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d32:	b25b      	sxtb	r3, r3
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d103      	bne.n	8007d42 <xQueueReceive+0x122>
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d48:	b25b      	sxtb	r3, r3
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d103      	bne.n	8007d58 <xQueueReceive+0x138>
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d58:	f002 f874 	bl	8009e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d5c:	1d3a      	adds	r2, r7, #4
 8007d5e:	f107 0310 	add.w	r3, r7, #16
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 f89b 	bl	8008ea0 <xTaskCheckForTimeOut>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d123      	bne.n	8007db8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d72:	f000 fade 	bl	8008332 <prvIsQueueEmpty>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d017      	beq.n	8007dac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	3324      	adds	r3, #36	; 0x24
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 ffc1 	bl	8008d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d8c:	f000 fa7f 	bl	800828e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d90:	f000 fdf0 	bl	8008974 <xTaskResumeAll>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d189      	bne.n	8007cae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d9a:	4b10      	ldr	r3, [pc, #64]	; (8007ddc <xQueueReceive+0x1bc>)
 8007d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	e780      	b.n	8007cae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dae:	f000 fa6e 	bl	800828e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007db2:	f000 fddf 	bl	8008974 <xTaskResumeAll>
 8007db6:	e77a      	b.n	8007cae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dba:	f000 fa68 	bl	800828e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dbe:	f000 fdd9 	bl	8008974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc4:	f000 fab5 	bl	8008332 <prvIsQueueEmpty>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f43f af6f 	beq.w	8007cae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3730      	adds	r7, #48	; 0x30
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08e      	sub	sp, #56	; 0x38
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10a      	bne.n	8007e12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	623b      	str	r3, [r7, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	61fb      	str	r3, [r7, #28]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e30:	f001 f97e 	bl	8009130 <xTaskGetSchedulerState>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <xQueueSemaphoreTake+0x60>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <xQueueSemaphoreTake+0x64>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e000      	b.n	8007e46 <xQueueSemaphoreTake+0x66>
 8007e44:	2300      	movs	r3, #0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	61bb      	str	r3, [r7, #24]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e60:	f001 ffc0 	bl	8009de4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d024      	beq.n	8007eba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	1e5a      	subs	r2, r3, #1
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e80:	f001 facc 	bl	800941c <pvTaskIncrementMutexHeldCount>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00f      	beq.n	8007eb2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	3310      	adds	r3, #16
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 ff88 	bl	8008dac <xTaskRemoveFromEventList>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ea2:	4b54      	ldr	r3, [pc, #336]	; (8007ff4 <xQueueSemaphoreTake+0x214>)
 8007ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007eb2:	f001 ffc7 	bl	8009e44 <vPortExitCritical>
				return pdPASS;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e097      	b.n	8007fea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d111      	bne.n	8007ee4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	617b      	str	r3, [r7, #20]
}
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007edc:	f001 ffb2 	bl	8009e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e082      	b.n	8007fea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eea:	f107 030c 	add.w	r3, r7, #12
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 ffc0 	bl	8008e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ef8:	f001 ffa4 	bl	8009e44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007efc:	f000 fd2c 	bl	8008958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f00:	f001 ff70 	bl	8009de4 <vPortEnterCritical>
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d103      	bne.n	8007f1a <xQueueSemaphoreTake+0x13a>
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f20:	b25b      	sxtb	r3, r3
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d103      	bne.n	8007f30 <xQueueSemaphoreTake+0x150>
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f30:	f001 ff88 	bl	8009e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f34:	463a      	mov	r2, r7
 8007f36:	f107 030c 	add.w	r3, r7, #12
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 ffaf 	bl	8008ea0 <xTaskCheckForTimeOut>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d132      	bne.n	8007fae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f4a:	f000 f9f2 	bl	8008332 <prvIsQueueEmpty>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d026      	beq.n	8007fa2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d109      	bne.n	8007f70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007f5c:	f001 ff42 	bl	8009de4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 f901 	bl	800916c <xTaskPriorityInherit>
 8007f6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f6c:	f001 ff6a 	bl	8009e44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	3324      	adds	r3, #36	; 0x24
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fec7 	bl	8008d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f80:	f000 f985 	bl	800828e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f84:	f000 fcf6 	bl	8008974 <xTaskResumeAll>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f47f af68 	bne.w	8007e60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007f90:	4b18      	ldr	r3, [pc, #96]	; (8007ff4 <xQueueSemaphoreTake+0x214>)
 8007f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	e75e      	b.n	8007e60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fa4:	f000 f973 	bl	800828e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fa8:	f000 fce4 	bl	8008974 <xTaskResumeAll>
 8007fac:	e758      	b.n	8007e60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fb0:	f000 f96d 	bl	800828e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fb4:	f000 fcde 	bl	8008974 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fba:	f000 f9ba 	bl	8008332 <prvIsQueueEmpty>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f43f af4d 	beq.w	8007e60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00d      	beq.n	8007fe8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007fcc:	f001 ff0a 	bl	8009de4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fd2:	f000 f8b4 	bl	800813e <prvGetDisinheritPriorityAfterTimeout>
 8007fd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 f99a 	bl	8009318 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007fe4:	f001 ff2e 	bl	8009e44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3738      	adds	r7, #56	; 0x38
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08e      	sub	sp, #56	; 0x38
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	623b      	str	r3, [r7, #32]
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d103      	bne.n	8008032 <xQueueReceiveFromISR+0x3a>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <xQueueReceiveFromISR+0x3e>
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <xQueueReceiveFromISR+0x40>
 8008036:	2300      	movs	r3, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	61fb      	str	r3, [r7, #28]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008052:	f001 ffa9 	bl	8009fa8 <vPortValidateInterruptPriority>
	__asm volatile
 8008056:	f3ef 8211 	mrs	r2, BASEPRI
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	61ba      	str	r2, [r7, #24]
 800806c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800806e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	d02f      	beq.n	80080de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808c:	f000 f8d9 	bl	8008242 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	1e5a      	subs	r2, r3, #1
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008098:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d112      	bne.n	80080c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d016      	beq.n	80080d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	3310      	adds	r3, #16
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fe7c 	bl	8008dac <xTaskRemoveFromEventList>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00e      	beq.n	80080d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	e007      	b.n	80080d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080cc:	3301      	adds	r3, #1
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	b25a      	sxtb	r2, r3
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80080d8:	2301      	movs	r3, #1
 80080da:	637b      	str	r3, [r7, #52]	; 0x34
 80080dc:	e001      	b.n	80080e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80080de:	2300      	movs	r3, #0
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
 80080e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f383 8811 	msr	BASEPRI, r3
}
 80080ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3738      	adds	r7, #56	; 0x38
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10a      	bne.n	8008120 <vQueueDelete+0x28>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	60bb      	str	r3, [r7, #8]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f95f 	bl	80083e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800812c:	2b00      	cmp	r3, #0
 800812e:	d102      	bne.n	8008136 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f002 f845 	bl	800a1c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008136:	bf00      	nop
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800813e:	b480      	push	{r7}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008158:	60fb      	str	r3, [r7, #12]
 800815a:	e001      	b.n	8008160 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008160:	68fb      	ldr	r3, [r7, #12]
	}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10d      	bne.n	80081a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d14d      	bne.n	8008230 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	4618      	mov	r0, r3
 800819a:	f001 f84f 	bl	800923c <xTaskPriorityDisinherit>
 800819e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	609a      	str	r2, [r3, #8]
 80081a6:	e043      	b.n	8008230 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d119      	bne.n	80081e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6858      	ldr	r0, [r3, #4]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	461a      	mov	r2, r3
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	f002 f94b 	bl	800a454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	441a      	add	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d32b      	bcc.n	8008230 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	605a      	str	r2, [r3, #4]
 80081e0:	e026      	b.n	8008230 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	68d8      	ldr	r0, [r3, #12]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	461a      	mov	r2, r3
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	f002 f931 	bl	800a454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	425b      	negs	r3, r3
 80081fc:	441a      	add	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d207      	bcs.n	800821e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689a      	ldr	r2, [r3, #8]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	425b      	negs	r3, r3
 8008218:	441a      	add	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b02      	cmp	r3, #2
 8008222:	d105      	bne.n	8008230 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3b01      	subs	r3, #1
 800822e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008238:	697b      	ldr	r3, [r7, #20]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	d018      	beq.n	8008286 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	441a      	add	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	429a      	cmp	r2, r3
 800826c:	d303      	bcc.n	8008276 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68d9      	ldr	r1, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	461a      	mov	r2, r3
 8008280:	6838      	ldr	r0, [r7, #0]
 8008282:	f002 f8e7 	bl	800a454 <memcpy>
	}
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008296:	f001 fda5 	bl	8009de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082a2:	e011      	b.n	80082c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d012      	beq.n	80082d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3324      	adds	r3, #36	; 0x24
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fd7b 	bl	8008dac <xTaskRemoveFromEventList>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082bc:	f000 fe52 	bl	8008f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dce9      	bgt.n	80082a4 <prvUnlockQueue+0x16>
 80082d0:	e000      	b.n	80082d4 <prvUnlockQueue+0x46>
					break;
 80082d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	22ff      	movs	r2, #255	; 0xff
 80082d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082dc:	f001 fdb2 	bl	8009e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082e0:	f001 fd80 	bl	8009de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ec:	e011      	b.n	8008312 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d012      	beq.n	800831c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3310      	adds	r3, #16
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fd56 	bl	8008dac <xTaskRemoveFromEventList>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008306:	f000 fe2d 	bl	8008f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	3b01      	subs	r3, #1
 800830e:	b2db      	uxtb	r3, r3
 8008310:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008316:	2b00      	cmp	r3, #0
 8008318:	dce9      	bgt.n	80082ee <prvUnlockQueue+0x60>
 800831a:	e000      	b.n	800831e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800831c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	22ff      	movs	r2, #255	; 0xff
 8008322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008326:	f001 fd8d 	bl	8009e44 <vPortExitCritical>
}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800833a:	f001 fd53 	bl	8009de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d102      	bne.n	800834c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	e001      	b.n	8008350 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008350:	f001 fd78 	bl	8009e44 <vPortExitCritical>

	return xReturn;
 8008354:	68fb      	ldr	r3, [r7, #12]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008366:	f001 fd3d 	bl	8009de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	429a      	cmp	r2, r3
 8008374:	d102      	bne.n	800837c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008376:	2301      	movs	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e001      	b.n	8008380 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008380:	f001 fd60 	bl	8009e44 <vPortExitCritical>

	return xReturn;
 8008384:	68fb      	ldr	r3, [r7, #12]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e014      	b.n	80083ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083a0:	4a0f      	ldr	r2, [pc, #60]	; (80083e0 <vQueueAddToRegistry+0x50>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083ac:	490c      	ldr	r1, [pc, #48]	; (80083e0 <vQueueAddToRegistry+0x50>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083b6:	4a0a      	ldr	r2, [pc, #40]	; (80083e0 <vQueueAddToRegistry+0x50>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083c2:	e006      	b.n	80083d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b07      	cmp	r3, #7
 80083ce:	d9e7      	bls.n	80083a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000b70 	.word	0x20000b70

080083e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e016      	b.n	8008420 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80083f2:	4a10      	ldr	r2, [pc, #64]	; (8008434 <vQueueUnregisterQueue+0x50>)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	4413      	add	r3, r2
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d10b      	bne.n	800841a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008402:	4a0c      	ldr	r2, [pc, #48]	; (8008434 <vQueueUnregisterQueue+0x50>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2100      	movs	r1, #0
 8008408:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800840c:	4a09      	ldr	r2, [pc, #36]	; (8008434 <vQueueUnregisterQueue+0x50>)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	4413      	add	r3, r2
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]
				break;
 8008418:	e006      	b.n	8008428 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b07      	cmp	r3, #7
 8008424:	d9e5      	bls.n	80083f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008426:	bf00      	nop
 8008428:	bf00      	nop
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	20000b70 	.word	0x20000b70

08008438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008448:	f001 fccc 	bl	8009de4 <vPortEnterCritical>
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008452:	b25b      	sxtb	r3, r3
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d103      	bne.n	8008462 <vQueueWaitForMessageRestricted+0x2a>
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008468:	b25b      	sxtb	r3, r3
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846e:	d103      	bne.n	8008478 <vQueueWaitForMessageRestricted+0x40>
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008478:	f001 fce4 	bl	8009e44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	2b00      	cmp	r3, #0
 8008482:	d106      	bne.n	8008492 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	3324      	adds	r3, #36	; 0x24
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fc61 	bl	8008d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008492:	6978      	ldr	r0, [r7, #20]
 8008494:	f7ff fefb 	bl	800828e <prvUnlockQueue>
	}
 8008498:	bf00      	nop
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08e      	sub	sp, #56	; 0x38
 80084a4:	af04      	add	r7, sp, #16
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	623b      	str	r3, [r7, #32]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	61fb      	str	r3, [r7, #28]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084e6:	23bc      	movs	r3, #188	; 0xbc
 80084e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2bbc      	cmp	r3, #188	; 0xbc
 80084ee:	d00a      	beq.n	8008506 <xTaskCreateStatic+0x66>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	61bb      	str	r3, [r7, #24]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008506:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01e      	beq.n	800854c <xTaskCreateStatic+0xac>
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01b      	beq.n	800854c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800851c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	2202      	movs	r2, #2
 8008522:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008526:	2300      	movs	r3, #0
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	9302      	str	r3, [sp, #8]
 800852e:	f107 0314 	add.w	r3, r7, #20
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f850 	bl	80085e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008546:	f000 f8f3 	bl	8008730 <prvAddNewTaskToReadyList>
 800854a:	e001      	b.n	8008550 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008550:	697b      	ldr	r3, [r7, #20]
	}
 8008552:	4618      	mov	r0, r3
 8008554:	3728      	adds	r7, #40	; 0x28
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800855a:	b580      	push	{r7, lr}
 800855c:	b08c      	sub	sp, #48	; 0x30
 800855e:	af04      	add	r7, sp, #16
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	603b      	str	r3, [r7, #0]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fd5a 	bl	800a028 <pvPortMalloc>
 8008574:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00e      	beq.n	800859a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800857c:	20bc      	movs	r0, #188	; 0xbc
 800857e:	f001 fd53 	bl	800a028 <pvPortMalloc>
 8008582:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	631a      	str	r2, [r3, #48]	; 0x30
 8008590:	e005      	b.n	800859e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	f001 fe14 	bl	800a1c0 <vPortFree>
 8008598:	e001      	b.n	800859e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d017      	beq.n	80085d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	2300      	movs	r3, #0
 80085b0:	9303      	str	r3, [sp, #12]
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	9302      	str	r3, [sp, #8]
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f80e 	bl	80085e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085c8:	69f8      	ldr	r0, [r7, #28]
 80085ca:	f000 f8b1 	bl	8008730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085ce:	2301      	movs	r3, #1
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	e002      	b.n	80085da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085d4:	f04f 33ff 	mov.w	r3, #4294967295
 80085d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085da:	69bb      	ldr	r3, [r7, #24]
	}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	461a      	mov	r2, r3
 80085fc:	21a5      	movs	r1, #165	; 0xa5
 80085fe:	f001 ff37 	bl	800a470 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800860c:	3b01      	subs	r3, #1
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	f023 0307 	bic.w	r3, r3, #7
 800861a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	617b      	str	r3, [r7, #20]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01f      	beq.n	8008682 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	e012      	b.n	800866e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4413      	add	r3, r2
 800864e:	7819      	ldrb	r1, [r3, #0]
 8008650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	3334      	adds	r3, #52	; 0x34
 8008658:	460a      	mov	r2, r1
 800865a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d006      	beq.n	8008676 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	3301      	adds	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	2b0f      	cmp	r3, #15
 8008672:	d9e9      	bls.n	8008648 <prvInitialiseNewTask+0x64>
 8008674:	e000      	b.n	8008678 <prvInitialiseNewTask+0x94>
			{
				break;
 8008676:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008680:	e003      	b.n	800868a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	2b37      	cmp	r3, #55	; 0x37
 800868e:	d901      	bls.n	8008694 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008690:	2337      	movs	r3, #55	; 0x37
 8008692:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008698:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	2200      	movs	r2, #0
 80086a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fe fe56 	bl	800735c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	3318      	adds	r3, #24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fe fe51 	bl	800735c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	3354      	adds	r3, #84	; 0x54
 80086e4:	2260      	movs	r2, #96	; 0x60
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fec1 	bl	800a470 <memset>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <prvInitialiseNewTask+0x140>)
 80086f2:	659a      	str	r2, [r3, #88]	; 0x58
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	4a0c      	ldr	r2, [pc, #48]	; (8008728 <prvInitialiseNewTask+0x144>)
 80086f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	4a0b      	ldr	r2, [pc, #44]	; (800872c <prvInitialiseNewTask+0x148>)
 80086fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	69b8      	ldr	r0, [r7, #24]
 8008706:	f001 fa3f 	bl	8009b88 <pxPortInitialiseStack>
 800870a:	4602      	mov	r2, r0
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800871c:	bf00      	nop
 800871e:	3720      	adds	r7, #32
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	0800aff4 	.word	0x0800aff4
 8008728:	0800b014 	.word	0x0800b014
 800872c:	0800afd4 	.word	0x0800afd4

08008730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008738:	f001 fb54 	bl	8009de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800873c:	4b2d      	ldr	r3, [pc, #180]	; (80087f4 <prvAddNewTaskToReadyList+0xc4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3301      	adds	r3, #1
 8008742:	4a2c      	ldr	r2, [pc, #176]	; (80087f4 <prvAddNewTaskToReadyList+0xc4>)
 8008744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008746:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800874e:	4a2a      	ldr	r2, [pc, #168]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008754:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <prvAddNewTaskToReadyList+0xc4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d110      	bne.n	800877e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800875c:	f000 fc26 	bl	8008fac <prvInitialiseTaskLists>
 8008760:	e00d      	b.n	800877e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008762:	4b26      	ldr	r3, [pc, #152]	; (80087fc <prvAddNewTaskToReadyList+0xcc>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800876a:	4b23      	ldr	r3, [pc, #140]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	429a      	cmp	r2, r3
 8008776:	d802      	bhi.n	800877e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008778:	4a1f      	ldr	r2, [pc, #124]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800877e:	4b20      	ldr	r3, [pc, #128]	; (8008800 <prvAddNewTaskToReadyList+0xd0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3301      	adds	r3, #1
 8008784:	4a1e      	ldr	r2, [pc, #120]	; (8008800 <prvAddNewTaskToReadyList+0xd0>)
 8008786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <prvAddNewTaskToReadyList+0xd0>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008794:	4b1b      	ldr	r3, [pc, #108]	; (8008804 <prvAddNewTaskToReadyList+0xd4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d903      	bls.n	80087a4 <prvAddNewTaskToReadyList+0x74>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	4a18      	ldr	r2, [pc, #96]	; (8008804 <prvAddNewTaskToReadyList+0xd4>)
 80087a2:	6013      	str	r3, [r2, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4a15      	ldr	r2, [pc, #84]	; (8008808 <prvAddNewTaskToReadyList+0xd8>)
 80087b2:	441a      	add	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f7fe fddb 	bl	8007376 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087c0:	f001 fb40 	bl	8009e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087c4:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <prvAddNewTaskToReadyList+0xcc>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00e      	beq.n	80087ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <prvAddNewTaskToReadyList+0xc8>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d207      	bcs.n	80087ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087da:	4b0c      	ldr	r3, [pc, #48]	; (800880c <prvAddNewTaskToReadyList+0xdc>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20001084 	.word	0x20001084
 80087f8:	20000bb0 	.word	0x20000bb0
 80087fc:	20001090 	.word	0x20001090
 8008800:	200010a0 	.word	0x200010a0
 8008804:	2000108c 	.word	0x2000108c
 8008808:	20000bb4 	.word	0x20000bb4
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d017      	beq.n	8008852 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008822:	4b13      	ldr	r3, [pc, #76]	; (8008870 <vTaskDelay+0x60>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <vTaskDelay+0x30>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	60bb      	str	r3, [r7, #8]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008840:	f000 f88a 	bl	8008958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008844:	2100      	movs	r1, #0
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fdfc 	bl	8009444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800884c:	f000 f892 	bl	8008974 <xTaskResumeAll>
 8008850:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d107      	bne.n	8008868 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008858:	4b06      	ldr	r3, [pc, #24]	; (8008874 <vTaskDelay+0x64>)
 800885a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008868:	bf00      	nop
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	200010ac 	.word	0x200010ac
 8008874:	e000ed04 	.word	0xe000ed04

08008878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008886:	463a      	mov	r2, r7
 8008888:	1d39      	adds	r1, r7, #4
 800888a:	f107 0308 	add.w	r3, r7, #8
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fd10 	bl	80072b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	9202      	str	r2, [sp, #8]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	2300      	movs	r3, #0
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	2300      	movs	r3, #0
 80088a4:	460a      	mov	r2, r1
 80088a6:	4924      	ldr	r1, [pc, #144]	; (8008938 <vTaskStartScheduler+0xc0>)
 80088a8:	4824      	ldr	r0, [pc, #144]	; (800893c <vTaskStartScheduler+0xc4>)
 80088aa:	f7ff fdf9 	bl	80084a0 <xTaskCreateStatic>
 80088ae:	4603      	mov	r3, r0
 80088b0:	4a23      	ldr	r2, [pc, #140]	; (8008940 <vTaskStartScheduler+0xc8>)
 80088b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088b4:	4b22      	ldr	r3, [pc, #136]	; (8008940 <vTaskStartScheduler+0xc8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088bc:	2301      	movs	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e001      	b.n	80088c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d102      	bne.n	80088d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088cc:	f000 fe0e 	bl	80094ec <xTimerCreateTimerTask>
 80088d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d11b      	bne.n	8008910 <vTaskStartScheduler+0x98>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	613b      	str	r3, [r7, #16]
}
 80088ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088ec:	4b15      	ldr	r3, [pc, #84]	; (8008944 <vTaskStartScheduler+0xcc>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3354      	adds	r3, #84	; 0x54
 80088f2:	4a15      	ldr	r2, [pc, #84]	; (8008948 <vTaskStartScheduler+0xd0>)
 80088f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088f6:	4b15      	ldr	r3, [pc, #84]	; (800894c <vTaskStartScheduler+0xd4>)
 80088f8:	f04f 32ff 	mov.w	r2, #4294967295
 80088fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <vTaskStartScheduler+0xd8>)
 8008900:	2201      	movs	r2, #1
 8008902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008904:	4b13      	ldr	r3, [pc, #76]	; (8008954 <vTaskStartScheduler+0xdc>)
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800890a:	f001 f9c9 	bl	8009ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800890e:	e00e      	b.n	800892e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d10a      	bne.n	800892e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	60fb      	str	r3, [r7, #12]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <vTaskStartScheduler+0xb4>
}
 800892e:	bf00      	nop
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	0800aea8 	.word	0x0800aea8
 800893c:	08008f7d 	.word	0x08008f7d
 8008940:	200010a8 	.word	0x200010a8
 8008944:	20000bb0 	.word	0x20000bb0
 8008948:	20000020 	.word	0x20000020
 800894c:	200010a4 	.word	0x200010a4
 8008950:	20001090 	.word	0x20001090
 8008954:	20001088 	.word	0x20001088

08008958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008958:	b480      	push	{r7}
 800895a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <vTaskSuspendAll+0x18>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3301      	adds	r3, #1
 8008962:	4a03      	ldr	r2, [pc, #12]	; (8008970 <vTaskSuspendAll+0x18>)
 8008964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008966:	bf00      	nop
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	200010ac 	.word	0x200010ac

08008974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008982:	4b42      	ldr	r3, [pc, #264]	; (8008a8c <xTaskResumeAll+0x118>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	603b      	str	r3, [r7, #0]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089a0:	f001 fa20 	bl	8009de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089a4:	4b39      	ldr	r3, [pc, #228]	; (8008a8c <xTaskResumeAll+0x118>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	4a38      	ldr	r2, [pc, #224]	; (8008a8c <xTaskResumeAll+0x118>)
 80089ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ae:	4b37      	ldr	r3, [pc, #220]	; (8008a8c <xTaskResumeAll+0x118>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d162      	bne.n	8008a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089b6:	4b36      	ldr	r3, [pc, #216]	; (8008a90 <xTaskResumeAll+0x11c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d05e      	beq.n	8008a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089be:	e02f      	b.n	8008a20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c0:	4b34      	ldr	r3, [pc, #208]	; (8008a94 <xTaskResumeAll+0x120>)
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3318      	adds	r3, #24
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe fd2f 	bl	8007430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fd2a 	bl	8007430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	4b2d      	ldr	r3, [pc, #180]	; (8008a98 <xTaskResumeAll+0x124>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d903      	bls.n	80089f0 <xTaskResumeAll+0x7c>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	4a2a      	ldr	r2, [pc, #168]	; (8008a98 <xTaskResumeAll+0x124>)
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4a27      	ldr	r2, [pc, #156]	; (8008a9c <xTaskResumeAll+0x128>)
 80089fe:	441a      	add	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f7fe fcb5 	bl	8007376 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a10:	4b23      	ldr	r3, [pc, #140]	; (8008aa0 <xTaskResumeAll+0x12c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d302      	bcc.n	8008a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a1a:	4b22      	ldr	r3, [pc, #136]	; (8008aa4 <xTaskResumeAll+0x130>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a20:	4b1c      	ldr	r3, [pc, #112]	; (8008a94 <xTaskResumeAll+0x120>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1cb      	bne.n	80089c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a2e:	f000 fb5f 	bl	80090f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a32:	4b1d      	ldr	r3, [pc, #116]	; (8008aa8 <xTaskResumeAll+0x134>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d010      	beq.n	8008a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a3e:	f000 f847 	bl	8008ad0 <xTaskIncrementTick>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a48:	4b16      	ldr	r3, [pc, #88]	; (8008aa4 <xTaskResumeAll+0x130>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f1      	bne.n	8008a3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a5a:	4b13      	ldr	r3, [pc, #76]	; (8008aa8 <xTaskResumeAll+0x134>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a60:	4b10      	ldr	r3, [pc, #64]	; (8008aa4 <xTaskResumeAll+0x130>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d009      	beq.n	8008a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a6c:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <xTaskResumeAll+0x138>)
 8008a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a7c:	f001 f9e2 	bl	8009e44 <vPortExitCritical>

	return xAlreadyYielded;
 8008a80:	68bb      	ldr	r3, [r7, #8]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200010ac 	.word	0x200010ac
 8008a90:	20001084 	.word	0x20001084
 8008a94:	20001044 	.word	0x20001044
 8008a98:	2000108c 	.word	0x2000108c
 8008a9c:	20000bb4 	.word	0x20000bb4
 8008aa0:	20000bb0 	.word	0x20000bb0
 8008aa4:	20001098 	.word	0x20001098
 8008aa8:	20001094 	.word	0x20001094
 8008aac:	e000ed04 	.word	0xe000ed04

08008ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <xTaskGetTickCount+0x1c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008abc:	687b      	ldr	r3, [r7, #4]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20001088 	.word	0x20001088

08008ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ada:	4b4f      	ldr	r3, [pc, #316]	; (8008c18 <xTaskIncrementTick+0x148>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f040 808f 	bne.w	8008c02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ae4:	4b4d      	ldr	r3, [pc, #308]	; (8008c1c <xTaskIncrementTick+0x14c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008aec:	4a4b      	ldr	r2, [pc, #300]	; (8008c1c <xTaskIncrementTick+0x14c>)
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d120      	bne.n	8008b3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008af8:	4b49      	ldr	r3, [pc, #292]	; (8008c20 <xTaskIncrementTick+0x150>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <xTaskIncrementTick+0x48>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	603b      	str	r3, [r7, #0]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xTaskIncrementTick+0x46>
 8008b18:	4b41      	ldr	r3, [pc, #260]	; (8008c20 <xTaskIncrementTick+0x150>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	4b41      	ldr	r3, [pc, #260]	; (8008c24 <xTaskIncrementTick+0x154>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a3f      	ldr	r2, [pc, #252]	; (8008c20 <xTaskIncrementTick+0x150>)
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	4a3f      	ldr	r2, [pc, #252]	; (8008c24 <xTaskIncrementTick+0x154>)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	4b3e      	ldr	r3, [pc, #248]	; (8008c28 <xTaskIncrementTick+0x158>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3301      	adds	r3, #1
 8008b32:	4a3d      	ldr	r2, [pc, #244]	; (8008c28 <xTaskIncrementTick+0x158>)
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	f000 fadb 	bl	80090f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b3a:	4b3c      	ldr	r3, [pc, #240]	; (8008c2c <xTaskIncrementTick+0x15c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d349      	bcc.n	8008bd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b44:	4b36      	ldr	r3, [pc, #216]	; (8008c20 <xTaskIncrementTick+0x150>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d104      	bne.n	8008b58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b4e:	4b37      	ldr	r3, [pc, #220]	; (8008c2c <xTaskIncrementTick+0x15c>)
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	601a      	str	r2, [r3, #0]
					break;
 8008b56:	e03f      	b.n	8008bd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b58:	4b31      	ldr	r3, [pc, #196]	; (8008c20 <xTaskIncrementTick+0x150>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d203      	bcs.n	8008b78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b70:	4a2e      	ldr	r2, [pc, #184]	; (8008c2c <xTaskIncrementTick+0x15c>)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b76:	e02f      	b.n	8008bd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fc57 	bl	8007430 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d004      	beq.n	8008b94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3318      	adds	r3, #24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fc4e 	bl	8007430 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	4b25      	ldr	r3, [pc, #148]	; (8008c30 <xTaskIncrementTick+0x160>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d903      	bls.n	8008ba8 <xTaskIncrementTick+0xd8>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	4a22      	ldr	r2, [pc, #136]	; (8008c30 <xTaskIncrementTick+0x160>)
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4a1f      	ldr	r2, [pc, #124]	; (8008c34 <xTaskIncrementTick+0x164>)
 8008bb6:	441a      	add	r2, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7fe fbd9 	bl	8007376 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	4b1b      	ldr	r3, [pc, #108]	; (8008c38 <xTaskIncrementTick+0x168>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d3b8      	bcc.n	8008b44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bd6:	e7b5      	b.n	8008b44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bd8:	4b17      	ldr	r3, [pc, #92]	; (8008c38 <xTaskIncrementTick+0x168>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bde:	4915      	ldr	r1, [pc, #84]	; (8008c34 <xTaskIncrementTick+0x164>)
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d901      	bls.n	8008bf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bf4:	4b11      	ldr	r3, [pc, #68]	; (8008c3c <xTaskIncrementTick+0x16c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d007      	beq.n	8008c0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	e004      	b.n	8008c0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c02:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <xTaskIncrementTick+0x170>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3301      	adds	r3, #1
 8008c08:	4a0d      	ldr	r2, [pc, #52]	; (8008c40 <xTaskIncrementTick+0x170>)
 8008c0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c0c:	697b      	ldr	r3, [r7, #20]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	200010ac 	.word	0x200010ac
 8008c1c:	20001088 	.word	0x20001088
 8008c20:	2000103c 	.word	0x2000103c
 8008c24:	20001040 	.word	0x20001040
 8008c28:	2000109c 	.word	0x2000109c
 8008c2c:	200010a4 	.word	0x200010a4
 8008c30:	2000108c 	.word	0x2000108c
 8008c34:	20000bb4 	.word	0x20000bb4
 8008c38:	20000bb0 	.word	0x20000bb0
 8008c3c:	20001098 	.word	0x20001098
 8008c40:	20001094 	.word	0x20001094

08008c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c4a:	4b2a      	ldr	r3, [pc, #168]	; (8008cf4 <vTaskSwitchContext+0xb0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c52:	4b29      	ldr	r3, [pc, #164]	; (8008cf8 <vTaskSwitchContext+0xb4>)
 8008c54:	2201      	movs	r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c58:	e046      	b.n	8008ce8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c5a:	4b27      	ldr	r3, [pc, #156]	; (8008cf8 <vTaskSwitchContext+0xb4>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c60:	4b26      	ldr	r3, [pc, #152]	; (8008cfc <vTaskSwitchContext+0xb8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	e010      	b.n	8008c8a <vTaskSwitchContext+0x46>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10a      	bne.n	8008c84 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	607b      	str	r3, [r7, #4]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <vTaskSwitchContext+0x3e>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	491d      	ldr	r1, [pc, #116]	; (8008d00 <vTaskSwitchContext+0xbc>)
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0e4      	beq.n	8008c68 <vTaskSwitchContext+0x24>
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4a15      	ldr	r2, [pc, #84]	; (8008d00 <vTaskSwitchContext+0xbc>)
 8008caa:	4413      	add	r3, r2
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	605a      	str	r2, [r3, #4]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d104      	bne.n	8008cce <vTaskSwitchContext+0x8a>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	605a      	str	r2, [r3, #4]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	4a0b      	ldr	r2, [pc, #44]	; (8008d04 <vTaskSwitchContext+0xc0>)
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	4a08      	ldr	r2, [pc, #32]	; (8008cfc <vTaskSwitchContext+0xb8>)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cde:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <vTaskSwitchContext+0xc0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3354      	adds	r3, #84	; 0x54
 8008ce4:	4a08      	ldr	r2, [pc, #32]	; (8008d08 <vTaskSwitchContext+0xc4>)
 8008ce6:	6013      	str	r3, [r2, #0]
}
 8008ce8:	bf00      	nop
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	200010ac 	.word	0x200010ac
 8008cf8:	20001098 	.word	0x20001098
 8008cfc:	2000108c 	.word	0x2000108c
 8008d00:	20000bb4 	.word	0x20000bb4
 8008d04:	20000bb0 	.word	0x20000bb0
 8008d08:	20000020 	.word	0x20000020

08008d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	60fb      	str	r3, [r7, #12]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <vTaskPlaceOnEventList+0x44>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3318      	adds	r3, #24
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7fe fb3f 	bl	80073be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d40:	2101      	movs	r1, #1
 8008d42:	6838      	ldr	r0, [r7, #0]
 8008d44:	f000 fb7e 	bl	8009444 <prvAddCurrentTaskToDelayedList>
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000bb0 	.word	0x20000bb0

08008d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10a      	bne.n	8008d7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	617b      	str	r3, [r7, #20]
}
 8008d78:	bf00      	nop
 8008d7a:	e7fe      	b.n	8008d7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d7c:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3318      	adds	r3, #24
 8008d82:	4619      	mov	r1, r3
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7fe faf6 	bl	8007376 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
 8008d94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	68b8      	ldr	r0, [r7, #8]
 8008d9a:	f000 fb53 	bl	8009444 <prvAddCurrentTaskToDelayedList>
	}
 8008d9e:	bf00      	nop
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000bb0 	.word	0x20000bb0

08008dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	60fb      	str	r3, [r7, #12]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	3318      	adds	r3, #24
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe fb27 	bl	8007430 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008de2:	4b1e      	ldr	r3, [pc, #120]	; (8008e5c <xTaskRemoveFromEventList+0xb0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d11d      	bne.n	8008e26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	3304      	adds	r3, #4
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fe fb1e 	bl	8007430 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df8:	4b19      	ldr	r3, [pc, #100]	; (8008e60 <xTaskRemoveFromEventList+0xb4>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d903      	bls.n	8008e08 <xTaskRemoveFromEventList+0x5c>
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	4a16      	ldr	r2, [pc, #88]	; (8008e60 <xTaskRemoveFromEventList+0xb4>)
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4a13      	ldr	r2, [pc, #76]	; (8008e64 <xTaskRemoveFromEventList+0xb8>)
 8008e16:	441a      	add	r2, r3
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	f7fe faa9 	bl	8007376 <vListInsertEnd>
 8008e24:	e005      	b.n	8008e32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3318      	adds	r3, #24
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	480e      	ldr	r0, [pc, #56]	; (8008e68 <xTaskRemoveFromEventList+0xbc>)
 8008e2e:	f7fe faa2 	bl	8007376 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <xTaskRemoveFromEventList+0xc0>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d905      	bls.n	8008e4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e40:	2301      	movs	r3, #1
 8008e42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e44:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <xTaskRemoveFromEventList+0xc4>)
 8008e46:	2201      	movs	r2, #1
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	e001      	b.n	8008e50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e50:	697b      	ldr	r3, [r7, #20]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200010ac 	.word	0x200010ac
 8008e60:	2000108c 	.word	0x2000108c
 8008e64:	20000bb4 	.word	0x20000bb4
 8008e68:	20001044 	.word	0x20001044
 8008e6c:	20000bb0 	.word	0x20000bb0
 8008e70:	20001098 	.word	0x20001098

08008e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <vTaskInternalSetTimeOutState+0x24>)
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e84:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <vTaskInternalSetTimeOutState+0x28>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	605a      	str	r2, [r3, #4]
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	2000109c 	.word	0x2000109c
 8008e9c:	20001088 	.word	0x20001088

08008ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	613b      	str	r3, [r7, #16]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	60fb      	str	r3, [r7, #12]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ee2:	f000 ff7f 	bl	8009de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ee6:	4b1d      	ldr	r3, [pc, #116]	; (8008f5c <xTaskCheckForTimeOut+0xbc>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efe:	d102      	bne.n	8008f06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	e023      	b.n	8008f4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4b15      	ldr	r3, [pc, #84]	; (8008f60 <xTaskCheckForTimeOut+0xc0>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d007      	beq.n	8008f22 <xTaskCheckForTimeOut+0x82>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d302      	bcc.n	8008f22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	e015      	b.n	8008f4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d20b      	bcs.n	8008f44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	1ad2      	subs	r2, r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff ff9b 	bl	8008e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61fb      	str	r3, [r7, #28]
 8008f42:	e004      	b.n	8008f4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2200      	movs	r2, #0
 8008f48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f4e:	f000 ff79 	bl	8009e44 <vPortExitCritical>

	return xReturn;
 8008f52:	69fb      	ldr	r3, [r7, #28]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3720      	adds	r7, #32
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20001088 	.word	0x20001088
 8008f60:	2000109c 	.word	0x2000109c

08008f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f68:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <vTaskMissedYield+0x14>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]
}
 8008f6e:	bf00      	nop
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	20001098 	.word	0x20001098

08008f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f84:	f000 f852 	bl	800902c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f88:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <prvIdleTask+0x28>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d9f9      	bls.n	8008f84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <prvIdleTask+0x2c>)
 8008f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fa0:	e7f0      	b.n	8008f84 <prvIdleTask+0x8>
 8008fa2:	bf00      	nop
 8008fa4:	20000bb4 	.word	0x20000bb4
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	607b      	str	r3, [r7, #4]
 8008fb6:	e00c      	b.n	8008fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4a12      	ldr	r2, [pc, #72]	; (800900c <prvInitialiseTaskLists+0x60>)
 8008fc4:	4413      	add	r3, r2
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe f9a8 	bl	800731c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	607b      	str	r3, [r7, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b37      	cmp	r3, #55	; 0x37
 8008fd6:	d9ef      	bls.n	8008fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fd8:	480d      	ldr	r0, [pc, #52]	; (8009010 <prvInitialiseTaskLists+0x64>)
 8008fda:	f7fe f99f 	bl	800731c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fde:	480d      	ldr	r0, [pc, #52]	; (8009014 <prvInitialiseTaskLists+0x68>)
 8008fe0:	f7fe f99c 	bl	800731c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fe4:	480c      	ldr	r0, [pc, #48]	; (8009018 <prvInitialiseTaskLists+0x6c>)
 8008fe6:	f7fe f999 	bl	800731c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fea:	480c      	ldr	r0, [pc, #48]	; (800901c <prvInitialiseTaskLists+0x70>)
 8008fec:	f7fe f996 	bl	800731c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ff0:	480b      	ldr	r0, [pc, #44]	; (8009020 <prvInitialiseTaskLists+0x74>)
 8008ff2:	f7fe f993 	bl	800731c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <prvInitialiseTaskLists+0x78>)
 8008ff8:	4a05      	ldr	r2, [pc, #20]	; (8009010 <prvInitialiseTaskLists+0x64>)
 8008ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ffc:	4b0a      	ldr	r3, [pc, #40]	; (8009028 <prvInitialiseTaskLists+0x7c>)
 8008ffe:	4a05      	ldr	r2, [pc, #20]	; (8009014 <prvInitialiseTaskLists+0x68>)
 8009000:	601a      	str	r2, [r3, #0]
}
 8009002:	bf00      	nop
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20000bb4 	.word	0x20000bb4
 8009010:	20001014 	.word	0x20001014
 8009014:	20001028 	.word	0x20001028
 8009018:	20001044 	.word	0x20001044
 800901c:	20001058 	.word	0x20001058
 8009020:	20001070 	.word	0x20001070
 8009024:	2000103c 	.word	0x2000103c
 8009028:	20001040 	.word	0x20001040

0800902c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009032:	e019      	b.n	8009068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009034:	f000 fed6 	bl	8009de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009038:	4b10      	ldr	r3, [pc, #64]	; (800907c <prvCheckTasksWaitingTermination+0x50>)
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3304      	adds	r3, #4
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe f9f3 	bl	8007430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800904a:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <prvCheckTasksWaitingTermination+0x54>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3b01      	subs	r3, #1
 8009050:	4a0b      	ldr	r2, [pc, #44]	; (8009080 <prvCheckTasksWaitingTermination+0x54>)
 8009052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009054:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <prvCheckTasksWaitingTermination+0x58>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3b01      	subs	r3, #1
 800905a:	4a0a      	ldr	r2, [pc, #40]	; (8009084 <prvCheckTasksWaitingTermination+0x58>)
 800905c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800905e:	f000 fef1 	bl	8009e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f810 	bl	8009088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009068:	4b06      	ldr	r3, [pc, #24]	; (8009084 <prvCheckTasksWaitingTermination+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e1      	bne.n	8009034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20001058 	.word	0x20001058
 8009080:	20001084 	.word	0x20001084
 8009084:	2000106c 	.word	0x2000106c

08009088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	3354      	adds	r3, #84	; 0x54
 8009094:	4618      	mov	r0, r3
 8009096:	f001 fa95 	bl	800a5c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d108      	bne.n	80090b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 f889 	bl	800a1c0 <vPortFree>
				vPortFree( pxTCB );
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 f886 	bl	800a1c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090b4:	e018      	b.n	80090e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d103      	bne.n	80090c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 f87d 	bl	800a1c0 <vPortFree>
	}
 80090c6:	e00f      	b.n	80090e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d00a      	beq.n	80090e8 <prvDeleteTCB+0x60>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	60fb      	str	r3, [r7, #12]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <prvDeleteTCB+0x5e>
	}
 80090e8:	bf00      	nop
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090f6:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <prvResetNextTaskUnblockTime+0x38>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d104      	bne.n	800910a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009100:	4b0a      	ldr	r3, [pc, #40]	; (800912c <prvResetNextTaskUnblockTime+0x3c>)
 8009102:	f04f 32ff 	mov.w	r2, #4294967295
 8009106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009108:	e008      	b.n	800911c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <prvResetNextTaskUnblockTime+0x38>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a04      	ldr	r2, [pc, #16]	; (800912c <prvResetNextTaskUnblockTime+0x3c>)
 800911a:	6013      	str	r3, [r2, #0]
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	2000103c 	.word	0x2000103c
 800912c:	200010a4 	.word	0x200010a4

08009130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009136:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <xTaskGetSchedulerState+0x34>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d102      	bne.n	8009144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800913e:	2301      	movs	r3, #1
 8009140:	607b      	str	r3, [r7, #4]
 8009142:	e008      	b.n	8009156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009144:	4b08      	ldr	r3, [pc, #32]	; (8009168 <xTaskGetSchedulerState+0x38>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800914c:	2302      	movs	r3, #2
 800914e:	607b      	str	r3, [r7, #4]
 8009150:	e001      	b.n	8009156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009152:	2300      	movs	r3, #0
 8009154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009156:	687b      	ldr	r3, [r7, #4]
	}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	20001090 	.word	0x20001090
 8009168:	200010ac 	.word	0x200010ac

0800916c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d051      	beq.n	8009226 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	4b2a      	ldr	r3, [pc, #168]	; (8009230 <xTaskPriorityInherit+0xc4>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	429a      	cmp	r2, r3
 800918e:	d241      	bcs.n	8009214 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	2b00      	cmp	r3, #0
 8009196:	db06      	blt.n	80091a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009198:	4b25      	ldr	r3, [pc, #148]	; (8009230 <xTaskPriorityInherit+0xc4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6959      	ldr	r1, [r3, #20]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4a1f      	ldr	r2, [pc, #124]	; (8009234 <xTaskPriorityInherit+0xc8>)
 80091b8:	4413      	add	r3, r2
 80091ba:	4299      	cmp	r1, r3
 80091bc:	d122      	bne.n	8009204 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe f934 	bl	8007430 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091c8:	4b19      	ldr	r3, [pc, #100]	; (8009230 <xTaskPriorityInherit+0xc4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d6:	4b18      	ldr	r3, [pc, #96]	; (8009238 <xTaskPriorityInherit+0xcc>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d903      	bls.n	80091e6 <xTaskPriorityInherit+0x7a>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	4a15      	ldr	r2, [pc, #84]	; (8009238 <xTaskPriorityInherit+0xcc>)
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4a10      	ldr	r2, [pc, #64]	; (8009234 <xTaskPriorityInherit+0xc8>)
 80091f4:	441a      	add	r2, r3
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4619      	mov	r1, r3
 80091fc:	4610      	mov	r0, r2
 80091fe:	f7fe f8ba 	bl	8007376 <vListInsertEnd>
 8009202:	e004      	b.n	800920e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009204:	4b0a      	ldr	r3, [pc, #40]	; (8009230 <xTaskPriorityInherit+0xc4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800920e:	2301      	movs	r3, #1
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	e008      	b.n	8009226 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009218:	4b05      	ldr	r3, [pc, #20]	; (8009230 <xTaskPriorityInherit+0xc4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	429a      	cmp	r2, r3
 8009220:	d201      	bcs.n	8009226 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009222:	2301      	movs	r3, #1
 8009224:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009226:	68fb      	ldr	r3, [r7, #12]
	}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20000bb0 	.word	0x20000bb0
 8009234:	20000bb4 	.word	0x20000bb4
 8009238:	2000108c 	.word	0x2000108c

0800923c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d056      	beq.n	8009300 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009252:	4b2e      	ldr	r3, [pc, #184]	; (800930c <xTaskPriorityDisinherit+0xd0>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	429a      	cmp	r2, r3
 800925a:	d00a      	beq.n	8009272 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60fb      	str	r3, [r7, #12]
}
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	60bb      	str	r3, [r7, #8]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009294:	1e5a      	subs	r2, r3, #1
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d02c      	beq.n	8009300 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d128      	bne.n	8009300 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3304      	adds	r3, #4
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe f8bc 	bl	8007430 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d0:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <xTaskPriorityDisinherit+0xd4>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d903      	bls.n	80092e0 <xTaskPriorityDisinherit+0xa4>
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	4a0c      	ldr	r2, [pc, #48]	; (8009310 <xTaskPriorityDisinherit+0xd4>)
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4a09      	ldr	r2, [pc, #36]	; (8009314 <xTaskPriorityDisinherit+0xd8>)
 80092ee:	441a      	add	r2, r3
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	3304      	adds	r3, #4
 80092f4:	4619      	mov	r1, r3
 80092f6:	4610      	mov	r0, r2
 80092f8:	f7fe f83d 	bl	8007376 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009300:	697b      	ldr	r3, [r7, #20]
	}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000bb0 	.word	0x20000bb0
 8009310:	2000108c 	.word	0x2000108c
 8009314:	20000bb4 	.word	0x20000bb4

08009318 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009326:	2301      	movs	r3, #1
 8009328:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d06a      	beq.n	8009406 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	60fb      	str	r3, [r7, #12]
}
 800934a:	bf00      	nop
 800934c:	e7fe      	b.n	800934c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d902      	bls.n	800935e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	61fb      	str	r3, [r7, #28]
 800935c:	e002      	b.n	8009364 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009362:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	69fa      	ldr	r2, [r7, #28]
 800936a:	429a      	cmp	r2, r3
 800936c:	d04b      	beq.n	8009406 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	429a      	cmp	r2, r3
 8009376:	d146      	bne.n	8009406 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009378:	4b25      	ldr	r3, [pc, #148]	; (8009410 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	429a      	cmp	r2, r3
 8009380:	d10a      	bne.n	8009398 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	60bb      	str	r3, [r7, #8]
}
 8009394:	bf00      	nop
 8009396:	e7fe      	b.n	8009396 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	69fa      	ldr	r2, [r7, #28]
 80093a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	db04      	blt.n	80093b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	6959      	ldr	r1, [r3, #20]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4a13      	ldr	r2, [pc, #76]	; (8009414 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093c6:	4413      	add	r3, r2
 80093c8:	4299      	cmp	r1, r3
 80093ca:	d11c      	bne.n	8009406 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe f82d 	bl	8007430 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093da:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d903      	bls.n	80093ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	4a0c      	ldr	r2, [pc, #48]	; (8009418 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ee:	4613      	mov	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4a07      	ldr	r2, [pc, #28]	; (8009414 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093f8:	441a      	add	r2, r3
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4619      	mov	r1, r3
 8009400:	4610      	mov	r0, r2
 8009402:	f7fd ffb8 	bl	8007376 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009406:	bf00      	nop
 8009408:	3720      	adds	r7, #32
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20000bb0 	.word	0x20000bb0
 8009414:	20000bb4 	.word	0x20000bb4
 8009418:	2000108c 	.word	0x2000108c

0800941c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <pvTaskIncrementMutexHeldCount+0x24>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009428:	4b05      	ldr	r3, [pc, #20]	; (8009440 <pvTaskIncrementMutexHeldCount+0x24>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800942e:	3201      	adds	r2, #1
 8009430:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009432:	4b03      	ldr	r3, [pc, #12]	; (8009440 <pvTaskIncrementMutexHeldCount+0x24>)
 8009434:	681b      	ldr	r3, [r3, #0]
	}
 8009436:	4618      	mov	r0, r3
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	20000bb0 	.word	0x20000bb0

08009444 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800944e:	4b21      	ldr	r3, [pc, #132]	; (80094d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009454:	4b20      	ldr	r3, [pc, #128]	; (80094d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3304      	adds	r3, #4
 800945a:	4618      	mov	r0, r3
 800945c:	f7fd ffe8 	bl	8007430 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009466:	d10a      	bne.n	800947e <prvAddCurrentTaskToDelayedList+0x3a>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d007      	beq.n	800947e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800946e:	4b1a      	ldr	r3, [pc, #104]	; (80094d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3304      	adds	r3, #4
 8009474:	4619      	mov	r1, r3
 8009476:	4819      	ldr	r0, [pc, #100]	; (80094dc <prvAddCurrentTaskToDelayedList+0x98>)
 8009478:	f7fd ff7d 	bl	8007376 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800947c:	e026      	b.n	80094cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4413      	add	r3, r2
 8009484:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009486:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	429a      	cmp	r2, r3
 8009494:	d209      	bcs.n	80094aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009496:	4b12      	ldr	r3, [pc, #72]	; (80094e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	4b0f      	ldr	r3, [pc, #60]	; (80094d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3304      	adds	r3, #4
 80094a0:	4619      	mov	r1, r3
 80094a2:	4610      	mov	r0, r2
 80094a4:	f7fd ff8b 	bl	80073be <vListInsert>
}
 80094a8:	e010      	b.n	80094cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094aa:	4b0e      	ldr	r3, [pc, #56]	; (80094e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3304      	adds	r3, #4
 80094b4:	4619      	mov	r1, r3
 80094b6:	4610      	mov	r0, r2
 80094b8:	f7fd ff81 	bl	80073be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d202      	bcs.n	80094cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094c6:	4a08      	ldr	r2, [pc, #32]	; (80094e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	6013      	str	r3, [r2, #0]
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20001088 	.word	0x20001088
 80094d8:	20000bb0 	.word	0x20000bb0
 80094dc:	20001070 	.word	0x20001070
 80094e0:	20001040 	.word	0x20001040
 80094e4:	2000103c 	.word	0x2000103c
 80094e8:	200010a4 	.word	0x200010a4

080094ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	; 0x28
 80094f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094f6:	f000 fb07 	bl	8009b08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094fa:	4b1c      	ldr	r3, [pc, #112]	; (800956c <xTimerCreateTimerTask+0x80>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d021      	beq.n	8009546 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009506:	2300      	movs	r3, #0
 8009508:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800950a:	1d3a      	adds	r2, r7, #4
 800950c:	f107 0108 	add.w	r1, r7, #8
 8009510:	f107 030c 	add.w	r3, r7, #12
 8009514:	4618      	mov	r0, r3
 8009516:	f7fd fee7 	bl	80072e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	9202      	str	r2, [sp, #8]
 8009522:	9301      	str	r3, [sp, #4]
 8009524:	2302      	movs	r3, #2
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	2300      	movs	r3, #0
 800952a:	460a      	mov	r2, r1
 800952c:	4910      	ldr	r1, [pc, #64]	; (8009570 <xTimerCreateTimerTask+0x84>)
 800952e:	4811      	ldr	r0, [pc, #68]	; (8009574 <xTimerCreateTimerTask+0x88>)
 8009530:	f7fe ffb6 	bl	80084a0 <xTaskCreateStatic>
 8009534:	4603      	mov	r3, r0
 8009536:	4a10      	ldr	r2, [pc, #64]	; (8009578 <xTimerCreateTimerTask+0x8c>)
 8009538:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800953a:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <xTimerCreateTimerTask+0x8c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009542:	2301      	movs	r3, #1
 8009544:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	613b      	str	r3, [r7, #16]
}
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009562:	697b      	ldr	r3, [r7, #20]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	200010e0 	.word	0x200010e0
 8009570:	0800aeb0 	.word	0x0800aeb0
 8009574:	080096b1 	.word	0x080096b1
 8009578:	200010e4 	.word	0x200010e4

0800957c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08a      	sub	sp, #40	; 0x28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800958a:	2300      	movs	r3, #0
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	623b      	str	r3, [r7, #32]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095aa:	4b1a      	ldr	r3, [pc, #104]	; (8009614 <xTimerGenericCommand+0x98>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d02a      	beq.n	8009608 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b05      	cmp	r3, #5
 80095c2:	dc18      	bgt.n	80095f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095c4:	f7ff fdb4 	bl	8009130 <xTaskGetSchedulerState>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d109      	bne.n	80095e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095ce:	4b11      	ldr	r3, [pc, #68]	; (8009614 <xTimerGenericCommand+0x98>)
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	f107 0110 	add.w	r1, r7, #16
 80095d6:	2300      	movs	r3, #0
 80095d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095da:	f7fe f8fb 	bl	80077d4 <xQueueGenericSend>
 80095de:	6278      	str	r0, [r7, #36]	; 0x24
 80095e0:	e012      	b.n	8009608 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095e2:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <xTimerGenericCommand+0x98>)
 80095e4:	6818      	ldr	r0, [r3, #0]
 80095e6:	f107 0110 	add.w	r1, r7, #16
 80095ea:	2300      	movs	r3, #0
 80095ec:	2200      	movs	r2, #0
 80095ee:	f7fe f8f1 	bl	80077d4 <xQueueGenericSend>
 80095f2:	6278      	str	r0, [r7, #36]	; 0x24
 80095f4:	e008      	b.n	8009608 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095f6:	4b07      	ldr	r3, [pc, #28]	; (8009614 <xTimerGenericCommand+0x98>)
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	f107 0110 	add.w	r1, r7, #16
 80095fe:	2300      	movs	r3, #0
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	f7fe f9e5 	bl	80079d0 <xQueueGenericSendFromISR>
 8009606:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800960a:	4618      	mov	r0, r3
 800960c:	3728      	adds	r7, #40	; 0x28
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	200010e0 	.word	0x200010e0

08009618 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af02      	add	r7, sp, #8
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009622:	4b22      	ldr	r3, [pc, #136]	; (80096ac <prvProcessExpiredTimer+0x94>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	3304      	adds	r3, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f7fd fefd 	bl	8007430 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d022      	beq.n	800968a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	699a      	ldr	r2, [r3, #24]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	18d1      	adds	r1, r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	6978      	ldr	r0, [r7, #20]
 8009652:	f000 f8d1 	bl	80097f8 <prvInsertTimerInActiveList>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01f      	beq.n	800969c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800965c:	2300      	movs	r3, #0
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	2300      	movs	r3, #0
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	2100      	movs	r1, #0
 8009666:	6978      	ldr	r0, [r7, #20]
 8009668:	f7ff ff88 	bl	800957c <xTimerGenericCommand>
 800966c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d113      	bne.n	800969c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	b2da      	uxtb	r2, r3
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	6978      	ldr	r0, [r7, #20]
 80096a2:	4798      	blx	r3
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	200010d8 	.word	0x200010d8

080096b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096b8:	f107 0308 	add.w	r3, r7, #8
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f857 	bl	8009770 <prvGetNextExpireTime>
 80096c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	4619      	mov	r1, r3
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f803 	bl	80096d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096ce:	f000 f8d5 	bl	800987c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096d2:	e7f1      	b.n	80096b8 <prvTimerTask+0x8>

080096d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096de:	f7ff f93b 	bl	8008958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096e2:	f107 0308 	add.w	r3, r7, #8
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f866 	bl	80097b8 <prvSampleTimeNow>
 80096ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d130      	bne.n	8009756 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <prvProcessTimerOrBlockTask+0x3c>
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d806      	bhi.n	8009710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009702:	f7ff f937 	bl	8008974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009706:	68f9      	ldr	r1, [r7, #12]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff ff85 	bl	8009618 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800970e:	e024      	b.n	800975a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d008      	beq.n	8009728 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009716:	4b13      	ldr	r3, [pc, #76]	; (8009764 <prvProcessTimerOrBlockTask+0x90>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <prvProcessTimerOrBlockTask+0x50>
 8009720:	2301      	movs	r3, #1
 8009722:	e000      	b.n	8009726 <prvProcessTimerOrBlockTask+0x52>
 8009724:	2300      	movs	r3, #0
 8009726:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009728:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <prvProcessTimerOrBlockTask+0x94>)
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	4619      	mov	r1, r3
 8009736:	f7fe fe7f 	bl	8008438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800973a:	f7ff f91b 	bl	8008974 <xTaskResumeAll>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10a      	bne.n	800975a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009744:	4b09      	ldr	r3, [pc, #36]	; (800976c <prvProcessTimerOrBlockTask+0x98>)
 8009746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	f3bf 8f6f 	isb	sy
}
 8009754:	e001      	b.n	800975a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009756:	f7ff f90d 	bl	8008974 <xTaskResumeAll>
}
 800975a:	bf00      	nop
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	200010dc 	.word	0x200010dc
 8009768:	200010e0 	.word	0x200010e0
 800976c:	e000ed04 	.word	0xe000ed04

08009770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009778:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <prvGetNextExpireTime+0x44>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <prvGetNextExpireTime+0x16>
 8009782:	2201      	movs	r2, #1
 8009784:	e000      	b.n	8009788 <prvGetNextExpireTime+0x18>
 8009786:	2200      	movs	r2, #0
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d105      	bne.n	80097a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <prvGetNextExpireTime+0x44>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	e001      	b.n	80097a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	200010d8 	.word	0x200010d8

080097b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097c0:	f7ff f976 	bl	8008ab0 <xTaskGetTickCount>
 80097c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097c6:	4b0b      	ldr	r3, [pc, #44]	; (80097f4 <prvSampleTimeNow+0x3c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d205      	bcs.n	80097dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097d0:	f000 f936 	bl	8009a40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	e002      	b.n	80097e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097e2:	4a04      	ldr	r2, [pc, #16]	; (80097f4 <prvSampleTimeNow+0x3c>)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097e8:	68fb      	ldr	r3, [r7, #12]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200010e8 	.word	0x200010e8

080097f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	429a      	cmp	r2, r3
 800981c:	d812      	bhi.n	8009844 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	1ad2      	subs	r2, r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e01b      	b.n	800986a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009832:	4b10      	ldr	r3, [pc, #64]	; (8009874 <prvInsertTimerInActiveList+0x7c>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3304      	adds	r3, #4
 800983a:	4619      	mov	r1, r3
 800983c:	4610      	mov	r0, r2
 800983e:	f7fd fdbe 	bl	80073be <vListInsert>
 8009842:	e012      	b.n	800986a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d206      	bcs.n	800985a <prvInsertTimerInActiveList+0x62>
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d302      	bcc.n	800985a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009854:	2301      	movs	r3, #1
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	e007      	b.n	800986a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800985a:	4b07      	ldr	r3, [pc, #28]	; (8009878 <prvInsertTimerInActiveList+0x80>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fd fdaa 	bl	80073be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800986a:	697b      	ldr	r3, [r7, #20]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	200010dc 	.word	0x200010dc
 8009878:	200010d8 	.word	0x200010d8

0800987c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08e      	sub	sp, #56	; 0x38
 8009880:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009882:	e0ca      	b.n	8009a1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	da18      	bge.n	80098bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800988a:	1d3b      	adds	r3, r7, #4
 800988c:	3304      	adds	r3, #4
 800988e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	61fb      	str	r3, [r7, #28]
}
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098b2:	6850      	ldr	r0, [r2, #4]
 80098b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098b6:	6892      	ldr	r2, [r2, #8]
 80098b8:	4611      	mov	r1, r2
 80098ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f2c0 80aa 	blt.w	8009a18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d004      	beq.n	80098da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	3304      	adds	r3, #4
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fd fdab 	bl	8007430 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098da:	463b      	mov	r3, r7
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff ff6b 	bl	80097b8 <prvSampleTimeNow>
 80098e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	f200 8097 	bhi.w	8009a1a <prvProcessReceivedCommands+0x19e>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <prvProcessReceivedCommands+0x78>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	0800991d 	.word	0x0800991d
 80098f8:	0800991d 	.word	0x0800991d
 80098fc:	0800991d 	.word	0x0800991d
 8009900:	08009991 	.word	0x08009991
 8009904:	080099a5 	.word	0x080099a5
 8009908:	080099ef 	.word	0x080099ef
 800990c:	0800991d 	.word	0x0800991d
 8009910:	0800991d 	.word	0x0800991d
 8009914:	08009991 	.word	0x08009991
 8009918:	080099a5 	.word	0x080099a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009922:	f043 0301 	orr.w	r3, r3, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	18d1      	adds	r1, r2, r3
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800993c:	f7ff ff5c 	bl	80097f8 <prvInsertTimerInActiveList>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d069      	beq.n	8009a1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800994c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d05e      	beq.n	8009a1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	441a      	add	r2, r3
 8009964:	2300      	movs	r3, #0
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2300      	movs	r3, #0
 800996a:	2100      	movs	r1, #0
 800996c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996e:	f7ff fe05 	bl	800957c <xTimerGenericCommand>
 8009972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d14f      	bne.n	8009a1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	61bb      	str	r3, [r7, #24]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009996:	f023 0301 	bic.w	r3, r3, #1
 800999a:	b2da      	uxtb	r2, r3
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80099a2:	e03a      	b.n	8009a1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099aa:	f043 0301 	orr.w	r3, r3, #1
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	617b      	str	r3, [r7, #20]
}
 80099d6:	bf00      	nop
 80099d8:	e7fe      	b.n	80099d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	18d1      	adds	r1, r2, r3
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099e8:	f7ff ff06 	bl	80097f8 <prvInsertTimerInActiveList>
					break;
 80099ec:	e015      	b.n	8009a1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d103      	bne.n	8009a04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80099fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099fe:	f000 fbdf 	bl	800a1c0 <vPortFree>
 8009a02:	e00a      	b.n	8009a1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0a:	f023 0301 	bic.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a16:	e000      	b.n	8009a1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a1a:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <prvProcessReceivedCommands+0x1c0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	1d39      	adds	r1, r7, #4
 8009a20:	2200      	movs	r2, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe f8fc 	bl	8007c20 <xQueueReceive>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f47f af2a 	bne.w	8009884 <prvProcessReceivedCommands+0x8>
	}
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	3730      	adds	r7, #48	; 0x30
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	200010e0 	.word	0x200010e0

08009a40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a46:	e048      	b.n	8009ada <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a48:	4b2d      	ldr	r3, [pc, #180]	; (8009b00 <prvSwitchTimerLists+0xc0>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a52:	4b2b      	ldr	r3, [pc, #172]	; (8009b00 <prvSwitchTimerLists+0xc0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fd fce5 	bl	8007430 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a74:	f003 0304 	and.w	r3, r3, #4
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d02e      	beq.n	8009ada <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	4413      	add	r3, r2
 8009a84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d90e      	bls.n	8009aac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a9a:	4b19      	ldr	r3, [pc, #100]	; (8009b00 <prvSwitchTimerLists+0xc0>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fd fc8a 	bl	80073be <vListInsert>
 8009aaa:	e016      	b.n	8009ada <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aac:	2300      	movs	r3, #0
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7ff fd60 	bl	800957c <xTimerGenericCommand>
 8009abc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	603b      	str	r3, [r7, #0]
}
 8009ad6:	bf00      	nop
 8009ad8:	e7fe      	b.n	8009ad8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <prvSwitchTimerLists+0xc0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1b1      	bne.n	8009a48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <prvSwitchTimerLists+0xc0>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009aea:	4b06      	ldr	r3, [pc, #24]	; (8009b04 <prvSwitchTimerLists+0xc4>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a04      	ldr	r2, [pc, #16]	; (8009b00 <prvSwitchTimerLists+0xc0>)
 8009af0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009af2:	4a04      	ldr	r2, [pc, #16]	; (8009b04 <prvSwitchTimerLists+0xc4>)
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	6013      	str	r3, [r2, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200010d8 	.word	0x200010d8
 8009b04:	200010dc 	.word	0x200010dc

08009b08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b0e:	f000 f969 	bl	8009de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b12:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <prvCheckForValidListAndQueue+0x60>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d120      	bne.n	8009b5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b1a:	4814      	ldr	r0, [pc, #80]	; (8009b6c <prvCheckForValidListAndQueue+0x64>)
 8009b1c:	f7fd fbfe 	bl	800731c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b20:	4813      	ldr	r0, [pc, #76]	; (8009b70 <prvCheckForValidListAndQueue+0x68>)
 8009b22:	f7fd fbfb 	bl	800731c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b26:	4b13      	ldr	r3, [pc, #76]	; (8009b74 <prvCheckForValidListAndQueue+0x6c>)
 8009b28:	4a10      	ldr	r2, [pc, #64]	; (8009b6c <prvCheckForValidListAndQueue+0x64>)
 8009b2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b2c:	4b12      	ldr	r3, [pc, #72]	; (8009b78 <prvCheckForValidListAndQueue+0x70>)
 8009b2e:	4a10      	ldr	r2, [pc, #64]	; (8009b70 <prvCheckForValidListAndQueue+0x68>)
 8009b30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b32:	2300      	movs	r3, #0
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <prvCheckForValidListAndQueue+0x74>)
 8009b38:	4a11      	ldr	r2, [pc, #68]	; (8009b80 <prvCheckForValidListAndQueue+0x78>)
 8009b3a:	2110      	movs	r1, #16
 8009b3c:	200a      	movs	r0, #10
 8009b3e:	f7fd fd09 	bl	8007554 <xQueueGenericCreateStatic>
 8009b42:	4603      	mov	r3, r0
 8009b44:	4a08      	ldr	r2, [pc, #32]	; (8009b68 <prvCheckForValidListAndQueue+0x60>)
 8009b46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b48:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <prvCheckForValidListAndQueue+0x60>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <prvCheckForValidListAndQueue+0x60>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	490b      	ldr	r1, [pc, #44]	; (8009b84 <prvCheckForValidListAndQueue+0x7c>)
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fc1a 	bl	8008390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b5c:	f000 f972 	bl	8009e44 <vPortExitCritical>
}
 8009b60:	bf00      	nop
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	200010e0 	.word	0x200010e0
 8009b6c:	200010b0 	.word	0x200010b0
 8009b70:	200010c4 	.word	0x200010c4
 8009b74:	200010d8 	.word	0x200010d8
 8009b78:	200010dc 	.word	0x200010dc
 8009b7c:	2000118c 	.word	0x2000118c
 8009b80:	200010ec 	.word	0x200010ec
 8009b84:	0800aeb8 	.word	0x0800aeb8

08009b88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	3b04      	subs	r3, #4
 8009b98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3b04      	subs	r3, #4
 8009ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f023 0201 	bic.w	r2, r3, #1
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3b04      	subs	r3, #4
 8009bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bb8:	4a0c      	ldr	r2, [pc, #48]	; (8009bec <pxPortInitialiseStack+0x64>)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3b14      	subs	r3, #20
 8009bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3b04      	subs	r3, #4
 8009bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f06f 0202 	mvn.w	r2, #2
 8009bd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	3b20      	subs	r3, #32
 8009bdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bde:	68fb      	ldr	r3, [r7, #12]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	08009bf1 	.word	0x08009bf1

08009bf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <prvTaskExitError+0x54>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c02:	d00a      	beq.n	8009c1a <prvTaskExitError+0x2a>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	60fb      	str	r3, [r7, #12]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <prvTaskExitError+0x28>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	60bb      	str	r3, [r7, #8]
}
 8009c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c2e:	bf00      	nop
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0fc      	beq.n	8009c30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	2000001c 	.word	0x2000001c
	...

08009c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c50:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <pxCurrentTCBConst2>)
 8009c52:	6819      	ldr	r1, [r3, #0]
 8009c54:	6808      	ldr	r0, [r1, #0]
 8009c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	f380 8809 	msr	PSP, r0
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	f380 8811 	msr	BASEPRI, r0
 8009c6a:	4770      	bx	lr
 8009c6c:	f3af 8000 	nop.w

08009c70 <pxCurrentTCBConst2>:
 8009c70:	20000bb0 	.word	0x20000bb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop

08009c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c78:	4808      	ldr	r0, [pc, #32]	; (8009c9c <prvPortStartFirstTask+0x24>)
 8009c7a:	6800      	ldr	r0, [r0, #0]
 8009c7c:	6800      	ldr	r0, [r0, #0]
 8009c7e:	f380 8808 	msr	MSP, r0
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f380 8814 	msr	CONTROL, r0
 8009c8a:	b662      	cpsie	i
 8009c8c:	b661      	cpsie	f
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	df00      	svc	0
 8009c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c9a:	bf00      	nop
 8009c9c:	e000ed08 	.word	0xe000ed08

08009ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ca6:	4b46      	ldr	r3, [pc, #280]	; (8009dc0 <xPortStartScheduler+0x120>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a46      	ldr	r2, [pc, #280]	; (8009dc4 <xPortStartScheduler+0x124>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d10a      	bne.n	8009cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	613b      	str	r3, [r7, #16]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cc6:	4b3e      	ldr	r3, [pc, #248]	; (8009dc0 <xPortStartScheduler+0x120>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a3f      	ldr	r2, [pc, #252]	; (8009dc8 <xPortStartScheduler+0x128>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d10a      	bne.n	8009ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	60fb      	str	r3, [r7, #12]
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ce6:	4b39      	ldr	r3, [pc, #228]	; (8009dcc <xPortStartScheduler+0x12c>)
 8009ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	22ff      	movs	r2, #255	; 0xff
 8009cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	4b31      	ldr	r3, [pc, #196]	; (8009dd0 <xPortStartScheduler+0x130>)
 8009d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d0e:	4b31      	ldr	r3, [pc, #196]	; (8009dd4 <xPortStartScheduler+0x134>)
 8009d10:	2207      	movs	r2, #7
 8009d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d14:	e009      	b.n	8009d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d16:	4b2f      	ldr	r3, [pc, #188]	; (8009dd4 <xPortStartScheduler+0x134>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	4a2d      	ldr	r2, [pc, #180]	; (8009dd4 <xPortStartScheduler+0x134>)
 8009d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d2a:	78fb      	ldrb	r3, [r7, #3]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d32:	2b80      	cmp	r3, #128	; 0x80
 8009d34:	d0ef      	beq.n	8009d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d36:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <xPortStartScheduler+0x134>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1c3 0307 	rsb	r3, r3, #7
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d00a      	beq.n	8009d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	60bb      	str	r3, [r7, #8]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d58:	4b1e      	ldr	r3, [pc, #120]	; (8009dd4 <xPortStartScheduler+0x134>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	021b      	lsls	r3, r3, #8
 8009d5e:	4a1d      	ldr	r2, [pc, #116]	; (8009dd4 <xPortStartScheduler+0x134>)
 8009d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d62:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <xPortStartScheduler+0x134>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d6a:	4a1a      	ldr	r2, [pc, #104]	; (8009dd4 <xPortStartScheduler+0x134>)
 8009d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d76:	4b18      	ldr	r3, [pc, #96]	; (8009dd8 <xPortStartScheduler+0x138>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a17      	ldr	r2, [pc, #92]	; (8009dd8 <xPortStartScheduler+0x138>)
 8009d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d82:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <xPortStartScheduler+0x138>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a14      	ldr	r2, [pc, #80]	; (8009dd8 <xPortStartScheduler+0x138>)
 8009d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d8e:	f000 f8dd 	bl	8009f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d92:	4b12      	ldr	r3, [pc, #72]	; (8009ddc <xPortStartScheduler+0x13c>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d98:	f000 f8fc 	bl	8009f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d9c:	4b10      	ldr	r3, [pc, #64]	; (8009de0 <xPortStartScheduler+0x140>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a0f      	ldr	r2, [pc, #60]	; (8009de0 <xPortStartScheduler+0x140>)
 8009da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009da8:	f7ff ff66 	bl	8009c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009dac:	f7fe ff4a 	bl	8008c44 <vTaskSwitchContext>
	prvTaskExitError();
 8009db0:	f7ff ff1e 	bl	8009bf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	e000ed00 	.word	0xe000ed00
 8009dc4:	410fc271 	.word	0x410fc271
 8009dc8:	410fc270 	.word	0x410fc270
 8009dcc:	e000e400 	.word	0xe000e400
 8009dd0:	200011dc 	.word	0x200011dc
 8009dd4:	200011e0 	.word	0x200011e0
 8009dd8:	e000ed20 	.word	0xe000ed20
 8009ddc:	2000001c 	.word	0x2000001c
 8009de0:	e000ef34 	.word	0xe000ef34

08009de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	607b      	str	r3, [r7, #4]
}
 8009dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dfe:	4b0f      	ldr	r3, [pc, #60]	; (8009e3c <vPortEnterCritical+0x58>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3301      	adds	r3, #1
 8009e04:	4a0d      	ldr	r2, [pc, #52]	; (8009e3c <vPortEnterCritical+0x58>)
 8009e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e08:	4b0c      	ldr	r3, [pc, #48]	; (8009e3c <vPortEnterCritical+0x58>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d10f      	bne.n	8009e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e10:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <vPortEnterCritical+0x5c>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	603b      	str	r3, [r7, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <vPortEnterCritical+0x4a>
	}
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	2000001c 	.word	0x2000001c
 8009e40:	e000ed04 	.word	0xe000ed04

08009e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e4a:	4b12      	ldr	r3, [pc, #72]	; (8009e94 <vPortExitCritical+0x50>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <vPortExitCritical+0x24>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	607b      	str	r3, [r7, #4]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e68:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <vPortExitCritical+0x50>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	4a09      	ldr	r2, [pc, #36]	; (8009e94 <vPortExitCritical+0x50>)
 8009e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e72:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <vPortExitCritical+0x50>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d105      	bne.n	8009e86 <vPortExitCritical+0x42>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	f383 8811 	msr	BASEPRI, r3
}
 8009e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	2000001c 	.word	0x2000001c
	...

08009ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ea0:	f3ef 8009 	mrs	r0, PSP
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <pxCurrentTCBConst>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	f01e 0f10 	tst.w	lr, #16
 8009eb0:	bf08      	it	eq
 8009eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eba:	6010      	str	r0, [r2, #0]
 8009ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ec4:	f380 8811 	msr	BASEPRI, r0
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f7fe feb8 	bl	8008c44 <vTaskSwitchContext>
 8009ed4:	f04f 0000 	mov.w	r0, #0
 8009ed8:	f380 8811 	msr	BASEPRI, r0
 8009edc:	bc09      	pop	{r0, r3}
 8009ede:	6819      	ldr	r1, [r3, #0]
 8009ee0:	6808      	ldr	r0, [r1, #0]
 8009ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee6:	f01e 0f10 	tst.w	lr, #16
 8009eea:	bf08      	it	eq
 8009eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ef0:	f380 8809 	msr	PSP, r0
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst>:
 8009f00:	20000bb0 	.word	0x20000bb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	607b      	str	r3, [r7, #4]
}
 8009f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f22:	f7fe fdd5 	bl	8008ad0 <xTaskIncrementTick>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f2c:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <xPortSysTickHandler+0x40>)
 8009f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	2300      	movs	r3, #0
 8009f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	f383 8811 	msr	BASEPRI, r3
}
 8009f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f50:	4b0b      	ldr	r3, [pc, #44]	; (8009f80 <vPortSetupTimerInterrupt+0x34>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f56:	4b0b      	ldr	r3, [pc, #44]	; (8009f84 <vPortSetupTimerInterrupt+0x38>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <vPortSetupTimerInterrupt+0x3c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a0a      	ldr	r2, [pc, #40]	; (8009f8c <vPortSetupTimerInterrupt+0x40>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	099b      	lsrs	r3, r3, #6
 8009f68:	4a09      	ldr	r2, [pc, #36]	; (8009f90 <vPortSetupTimerInterrupt+0x44>)
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f6e:	4b04      	ldr	r3, [pc, #16]	; (8009f80 <vPortSetupTimerInterrupt+0x34>)
 8009f70:	2207      	movs	r2, #7
 8009f72:	601a      	str	r2, [r3, #0]
}
 8009f74:	bf00      	nop
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	e000e010 	.word	0xe000e010
 8009f84:	e000e018 	.word	0xe000e018
 8009f88:	20000010 	.word	0x20000010
 8009f8c:	10624dd3 	.word	0x10624dd3
 8009f90:	e000e014 	.word	0xe000e014

08009f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009fa4 <vPortEnableVFP+0x10>
 8009f98:	6801      	ldr	r1, [r0, #0]
 8009f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f9e:	6001      	str	r1, [r0, #0]
 8009fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fa2:	bf00      	nop
 8009fa4:	e000ed88 	.word	0xe000ed88

08009fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fae:	f3ef 8305 	mrs	r3, IPSR
 8009fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b0f      	cmp	r3, #15
 8009fb8:	d914      	bls.n	8009fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fba:	4a17      	ldr	r2, [pc, #92]	; (800a018 <vPortValidateInterruptPriority+0x70>)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fc4:	4b15      	ldr	r3, [pc, #84]	; (800a01c <vPortValidateInterruptPriority+0x74>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	7afa      	ldrb	r2, [r7, #11]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d20a      	bcs.n	8009fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	607b      	str	r3, [r7, #4]
}
 8009fe0:	bf00      	nop
 8009fe2:	e7fe      	b.n	8009fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fe4:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <vPortValidateInterruptPriority+0x78>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fec:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <vPortValidateInterruptPriority+0x7c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d90a      	bls.n	800a00a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	603b      	str	r3, [r7, #0]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <vPortValidateInterruptPriority+0x60>
	}
 800a00a:	bf00      	nop
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	e000e3f0 	.word	0xe000e3f0
 800a01c:	200011dc 	.word	0x200011dc
 800a020:	e000ed0c 	.word	0xe000ed0c
 800a024:	200011e0 	.word	0x200011e0

0800a028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08a      	sub	sp, #40	; 0x28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a030:	2300      	movs	r3, #0
 800a032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a034:	f7fe fc90 	bl	8008958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a038:	4b5b      	ldr	r3, [pc, #364]	; (800a1a8 <pvPortMalloc+0x180>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a040:	f000 f920 	bl	800a284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a044:	4b59      	ldr	r3, [pc, #356]	; (800a1ac <pvPortMalloc+0x184>)
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4013      	ands	r3, r2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f040 8093 	bne.w	800a178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d01d      	beq.n	800a094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a058:	2208      	movs	r2, #8
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4413      	add	r3, r2
 800a05e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	2b00      	cmp	r3, #0
 800a068:	d014      	beq.n	800a094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f023 0307 	bic.w	r3, r3, #7
 800a070:	3308      	adds	r3, #8
 800a072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f003 0307 	and.w	r3, r3, #7
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00a      	beq.n	800a094 <pvPortMalloc+0x6c>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	617b      	str	r3, [r7, #20]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d06e      	beq.n	800a178 <pvPortMalloc+0x150>
 800a09a:	4b45      	ldr	r3, [pc, #276]	; (800a1b0 <pvPortMalloc+0x188>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d869      	bhi.n	800a178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0a4:	4b43      	ldr	r3, [pc, #268]	; (800a1b4 <pvPortMalloc+0x18c>)
 800a0a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0a8:	4b42      	ldr	r3, [pc, #264]	; (800a1b4 <pvPortMalloc+0x18c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0ae:	e004      	b.n	800a0ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d903      	bls.n	800a0cc <pvPortMalloc+0xa4>
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1f1      	bne.n	800a0b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0cc:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <pvPortMalloc+0x180>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d050      	beq.n	800a178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2208      	movs	r2, #8
 800a0dc:	4413      	add	r3, r2
 800a0de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	1ad2      	subs	r2, r2, r3
 800a0f0:	2308      	movs	r3, #8
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d91f      	bls.n	800a138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00a      	beq.n	800a120 <pvPortMalloc+0xf8>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	613b      	str	r3, [r7, #16]
}
 800a11c:	bf00      	nop
 800a11e:	e7fe      	b.n	800a11e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	1ad2      	subs	r2, r2, r3
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a132:	69b8      	ldr	r0, [r7, #24]
 800a134:	f000 f908 	bl	800a348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a138:	4b1d      	ldr	r3, [pc, #116]	; (800a1b0 <pvPortMalloc+0x188>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	4a1b      	ldr	r2, [pc, #108]	; (800a1b0 <pvPortMalloc+0x188>)
 800a144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a146:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <pvPortMalloc+0x188>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	4b1b      	ldr	r3, [pc, #108]	; (800a1b8 <pvPortMalloc+0x190>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d203      	bcs.n	800a15a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a152:	4b17      	ldr	r3, [pc, #92]	; (800a1b0 <pvPortMalloc+0x188>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a18      	ldr	r2, [pc, #96]	; (800a1b8 <pvPortMalloc+0x190>)
 800a158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <pvPortMalloc+0x184>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	431a      	orrs	r2, r3
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	2200      	movs	r2, #0
 800a16c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a16e:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <pvPortMalloc+0x194>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	4a11      	ldr	r2, [pc, #68]	; (800a1bc <pvPortMalloc+0x194>)
 800a176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a178:	f7fe fbfc 	bl	8008974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	f003 0307 	and.w	r3, r3, #7
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <pvPortMalloc+0x174>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	60fb      	str	r3, [r7, #12]
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <pvPortMalloc+0x172>
	return pvReturn;
 800a19c:	69fb      	ldr	r3, [r7, #28]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3728      	adds	r7, #40	; 0x28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200025ec 	.word	0x200025ec
 800a1ac:	20002600 	.word	0x20002600
 800a1b0:	200025f0 	.word	0x200025f0
 800a1b4:	200025e4 	.word	0x200025e4
 800a1b8:	200025f4 	.word	0x200025f4
 800a1bc:	200025f8 	.word	0x200025f8

0800a1c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d04d      	beq.n	800a26e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1d2:	2308      	movs	r3, #8
 800a1d4:	425b      	negs	r3, r3
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	4413      	add	r3, r2
 800a1da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	4b24      	ldr	r3, [pc, #144]	; (800a278 <vPortFree+0xb8>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10a      	bne.n	800a204 <vPortFree+0x44>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	60fb      	str	r3, [r7, #12]
}
 800a200:	bf00      	nop
 800a202:	e7fe      	b.n	800a202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00a      	beq.n	800a222 <vPortFree+0x62>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	60bb      	str	r3, [r7, #8]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	4b14      	ldr	r3, [pc, #80]	; (800a278 <vPortFree+0xb8>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4013      	ands	r3, r2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01e      	beq.n	800a26e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d11a      	bne.n	800a26e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <vPortFree+0xb8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	43db      	mvns	r3, r3
 800a242:	401a      	ands	r2, r3
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a248:	f7fe fb86 	bl	8008958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <vPortFree+0xbc>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4413      	add	r3, r2
 800a256:	4a09      	ldr	r2, [pc, #36]	; (800a27c <vPortFree+0xbc>)
 800a258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a25a:	6938      	ldr	r0, [r7, #16]
 800a25c:	f000 f874 	bl	800a348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a260:	4b07      	ldr	r3, [pc, #28]	; (800a280 <vPortFree+0xc0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3301      	adds	r3, #1
 800a266:	4a06      	ldr	r2, [pc, #24]	; (800a280 <vPortFree+0xc0>)
 800a268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a26a:	f7fe fb83 	bl	8008974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a26e:	bf00      	nop
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20002600 	.word	0x20002600
 800a27c:	200025f0 	.word	0x200025f0
 800a280:	200025fc 	.word	0x200025fc

0800a284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a28a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a28e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a290:	4b27      	ldr	r3, [pc, #156]	; (800a330 <prvHeapInit+0xac>)
 800a292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00c      	beq.n	800a2b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3307      	adds	r3, #7
 800a2a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0307 	bic.w	r3, r3, #7
 800a2aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	4a1f      	ldr	r2, [pc, #124]	; (800a330 <prvHeapInit+0xac>)
 800a2b4:	4413      	add	r3, r2
 800a2b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2bc:	4a1d      	ldr	r2, [pc, #116]	; (800a334 <prvHeapInit+0xb0>)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2c2:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <prvHeapInit+0xb0>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2d0:	2208      	movs	r2, #8
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	1a9b      	subs	r3, r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f023 0307 	bic.w	r3, r3, #7
 800a2de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4a15      	ldr	r2, [pc, #84]	; (800a338 <prvHeapInit+0xb4>)
 800a2e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2e6:	4b14      	ldr	r3, [pc, #80]	; (800a338 <prvHeapInit+0xb4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2ee:	4b12      	ldr	r3, [pc, #72]	; (800a338 <prvHeapInit+0xb4>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	1ad2      	subs	r2, r2, r3
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a304:	4b0c      	ldr	r3, [pc, #48]	; (800a338 <prvHeapInit+0xb4>)
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	4a0a      	ldr	r2, [pc, #40]	; (800a33c <prvHeapInit+0xb8>)
 800a312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	4a09      	ldr	r2, [pc, #36]	; (800a340 <prvHeapInit+0xbc>)
 800a31a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a31c:	4b09      	ldr	r3, [pc, #36]	; (800a344 <prvHeapInit+0xc0>)
 800a31e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a322:	601a      	str	r2, [r3, #0]
}
 800a324:	bf00      	nop
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	200011e4 	.word	0x200011e4
 800a334:	200025e4 	.word	0x200025e4
 800a338:	200025ec 	.word	0x200025ec
 800a33c:	200025f4 	.word	0x200025f4
 800a340:	200025f0 	.word	0x200025f0
 800a344:	20002600 	.word	0x20002600

0800a348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a350:	4b28      	ldr	r3, [pc, #160]	; (800a3f4 <prvInsertBlockIntoFreeList+0xac>)
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	e002      	b.n	800a35c <prvInsertBlockIntoFreeList+0x14>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	429a      	cmp	r2, r3
 800a364:	d8f7      	bhi.n	800a356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	4413      	add	r3, r2
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	429a      	cmp	r2, r3
 800a376:	d108      	bne.n	800a38a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	441a      	add	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	441a      	add	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d118      	bne.n	800a3d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b15      	ldr	r3, [pc, #84]	; (800a3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d00d      	beq.n	800a3c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	441a      	add	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	e008      	b.n	800a3d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3c6:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	e003      	b.n	800a3d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d002      	beq.n	800a3e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3e6:	bf00      	nop
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	200025e4 	.word	0x200025e4
 800a3f8:	200025ec 	.word	0x200025ec

0800a3fc <__errno>:
 800a3fc:	4b01      	ldr	r3, [pc, #4]	; (800a404 <__errno+0x8>)
 800a3fe:	6818      	ldr	r0, [r3, #0]
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20000020 	.word	0x20000020

0800a408 <__libc_init_array>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	4d0d      	ldr	r5, [pc, #52]	; (800a440 <__libc_init_array+0x38>)
 800a40c:	4c0d      	ldr	r4, [pc, #52]	; (800a444 <__libc_init_array+0x3c>)
 800a40e:	1b64      	subs	r4, r4, r5
 800a410:	10a4      	asrs	r4, r4, #2
 800a412:	2600      	movs	r6, #0
 800a414:	42a6      	cmp	r6, r4
 800a416:	d109      	bne.n	800a42c <__libc_init_array+0x24>
 800a418:	4d0b      	ldr	r5, [pc, #44]	; (800a448 <__libc_init_array+0x40>)
 800a41a:	4c0c      	ldr	r4, [pc, #48]	; (800a44c <__libc_init_array+0x44>)
 800a41c:	f000 fcf8 	bl	800ae10 <_init>
 800a420:	1b64      	subs	r4, r4, r5
 800a422:	10a4      	asrs	r4, r4, #2
 800a424:	2600      	movs	r6, #0
 800a426:	42a6      	cmp	r6, r4
 800a428:	d105      	bne.n	800a436 <__libc_init_array+0x2e>
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a430:	4798      	blx	r3
 800a432:	3601      	adds	r6, #1
 800a434:	e7ee      	b.n	800a414 <__libc_init_array+0xc>
 800a436:	f855 3b04 	ldr.w	r3, [r5], #4
 800a43a:	4798      	blx	r3
 800a43c:	3601      	adds	r6, #1
 800a43e:	e7f2      	b.n	800a426 <__libc_init_array+0x1e>
 800a440:	0800b070 	.word	0x0800b070
 800a444:	0800b070 	.word	0x0800b070
 800a448:	0800b070 	.word	0x0800b070
 800a44c:	0800b074 	.word	0x0800b074

0800a450 <__retarget_lock_acquire_recursive>:
 800a450:	4770      	bx	lr

0800a452 <__retarget_lock_release_recursive>:
 800a452:	4770      	bx	lr

0800a454 <memcpy>:
 800a454:	440a      	add	r2, r1
 800a456:	4291      	cmp	r1, r2
 800a458:	f100 33ff 	add.w	r3, r0, #4294967295
 800a45c:	d100      	bne.n	800a460 <memcpy+0xc>
 800a45e:	4770      	bx	lr
 800a460:	b510      	push	{r4, lr}
 800a462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a46a:	4291      	cmp	r1, r2
 800a46c:	d1f9      	bne.n	800a462 <memcpy+0xe>
 800a46e:	bd10      	pop	{r4, pc}

0800a470 <memset>:
 800a470:	4402      	add	r2, r0
 800a472:	4603      	mov	r3, r0
 800a474:	4293      	cmp	r3, r2
 800a476:	d100      	bne.n	800a47a <memset+0xa>
 800a478:	4770      	bx	lr
 800a47a:	f803 1b01 	strb.w	r1, [r3], #1
 800a47e:	e7f9      	b.n	800a474 <memset+0x4>

0800a480 <sbrk_aligned>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	4e0e      	ldr	r6, [pc, #56]	; (800a4bc <sbrk_aligned+0x3c>)
 800a484:	460c      	mov	r4, r1
 800a486:	6831      	ldr	r1, [r6, #0]
 800a488:	4605      	mov	r5, r0
 800a48a:	b911      	cbnz	r1, 800a492 <sbrk_aligned+0x12>
 800a48c:	f000 f8f6 	bl	800a67c <_sbrk_r>
 800a490:	6030      	str	r0, [r6, #0]
 800a492:	4621      	mov	r1, r4
 800a494:	4628      	mov	r0, r5
 800a496:	f000 f8f1 	bl	800a67c <_sbrk_r>
 800a49a:	1c43      	adds	r3, r0, #1
 800a49c:	d00a      	beq.n	800a4b4 <sbrk_aligned+0x34>
 800a49e:	1cc4      	adds	r4, r0, #3
 800a4a0:	f024 0403 	bic.w	r4, r4, #3
 800a4a4:	42a0      	cmp	r0, r4
 800a4a6:	d007      	beq.n	800a4b8 <sbrk_aligned+0x38>
 800a4a8:	1a21      	subs	r1, r4, r0
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f000 f8e6 	bl	800a67c <_sbrk_r>
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d101      	bne.n	800a4b8 <sbrk_aligned+0x38>
 800a4b4:	f04f 34ff 	mov.w	r4, #4294967295
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	2000260c 	.word	0x2000260c

0800a4c0 <_malloc_r>:
 800a4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c4:	1ccd      	adds	r5, r1, #3
 800a4c6:	f025 0503 	bic.w	r5, r5, #3
 800a4ca:	3508      	adds	r5, #8
 800a4cc:	2d0c      	cmp	r5, #12
 800a4ce:	bf38      	it	cc
 800a4d0:	250c      	movcc	r5, #12
 800a4d2:	2d00      	cmp	r5, #0
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	db01      	blt.n	800a4dc <_malloc_r+0x1c>
 800a4d8:	42a9      	cmp	r1, r5
 800a4da:	d905      	bls.n	800a4e8 <_malloc_r+0x28>
 800a4dc:	230c      	movs	r3, #12
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	2600      	movs	r6, #0
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e8:	4e2e      	ldr	r6, [pc, #184]	; (800a5a4 <_malloc_r+0xe4>)
 800a4ea:	f000 f8f7 	bl	800a6dc <__malloc_lock>
 800a4ee:	6833      	ldr	r3, [r6, #0]
 800a4f0:	461c      	mov	r4, r3
 800a4f2:	bb34      	cbnz	r4, 800a542 <_malloc_r+0x82>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f7ff ffc2 	bl	800a480 <sbrk_aligned>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	4604      	mov	r4, r0
 800a500:	d14d      	bne.n	800a59e <_malloc_r+0xde>
 800a502:	6834      	ldr	r4, [r6, #0]
 800a504:	4626      	mov	r6, r4
 800a506:	2e00      	cmp	r6, #0
 800a508:	d140      	bne.n	800a58c <_malloc_r+0xcc>
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	4631      	mov	r1, r6
 800a50e:	4638      	mov	r0, r7
 800a510:	eb04 0803 	add.w	r8, r4, r3
 800a514:	f000 f8b2 	bl	800a67c <_sbrk_r>
 800a518:	4580      	cmp	r8, r0
 800a51a:	d13a      	bne.n	800a592 <_malloc_r+0xd2>
 800a51c:	6821      	ldr	r1, [r4, #0]
 800a51e:	3503      	adds	r5, #3
 800a520:	1a6d      	subs	r5, r5, r1
 800a522:	f025 0503 	bic.w	r5, r5, #3
 800a526:	3508      	adds	r5, #8
 800a528:	2d0c      	cmp	r5, #12
 800a52a:	bf38      	it	cc
 800a52c:	250c      	movcc	r5, #12
 800a52e:	4629      	mov	r1, r5
 800a530:	4638      	mov	r0, r7
 800a532:	f7ff ffa5 	bl	800a480 <sbrk_aligned>
 800a536:	3001      	adds	r0, #1
 800a538:	d02b      	beq.n	800a592 <_malloc_r+0xd2>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	442b      	add	r3, r5
 800a53e:	6023      	str	r3, [r4, #0]
 800a540:	e00e      	b.n	800a560 <_malloc_r+0xa0>
 800a542:	6822      	ldr	r2, [r4, #0]
 800a544:	1b52      	subs	r2, r2, r5
 800a546:	d41e      	bmi.n	800a586 <_malloc_r+0xc6>
 800a548:	2a0b      	cmp	r2, #11
 800a54a:	d916      	bls.n	800a57a <_malloc_r+0xba>
 800a54c:	1961      	adds	r1, r4, r5
 800a54e:	42a3      	cmp	r3, r4
 800a550:	6025      	str	r5, [r4, #0]
 800a552:	bf18      	it	ne
 800a554:	6059      	strne	r1, [r3, #4]
 800a556:	6863      	ldr	r3, [r4, #4]
 800a558:	bf08      	it	eq
 800a55a:	6031      	streq	r1, [r6, #0]
 800a55c:	5162      	str	r2, [r4, r5]
 800a55e:	604b      	str	r3, [r1, #4]
 800a560:	4638      	mov	r0, r7
 800a562:	f104 060b 	add.w	r6, r4, #11
 800a566:	f000 f8bf 	bl	800a6e8 <__malloc_unlock>
 800a56a:	f026 0607 	bic.w	r6, r6, #7
 800a56e:	1d23      	adds	r3, r4, #4
 800a570:	1af2      	subs	r2, r6, r3
 800a572:	d0b6      	beq.n	800a4e2 <_malloc_r+0x22>
 800a574:	1b9b      	subs	r3, r3, r6
 800a576:	50a3      	str	r3, [r4, r2]
 800a578:	e7b3      	b.n	800a4e2 <_malloc_r+0x22>
 800a57a:	6862      	ldr	r2, [r4, #4]
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	bf0c      	ite	eq
 800a580:	6032      	streq	r2, [r6, #0]
 800a582:	605a      	strne	r2, [r3, #4]
 800a584:	e7ec      	b.n	800a560 <_malloc_r+0xa0>
 800a586:	4623      	mov	r3, r4
 800a588:	6864      	ldr	r4, [r4, #4]
 800a58a:	e7b2      	b.n	800a4f2 <_malloc_r+0x32>
 800a58c:	4634      	mov	r4, r6
 800a58e:	6876      	ldr	r6, [r6, #4]
 800a590:	e7b9      	b.n	800a506 <_malloc_r+0x46>
 800a592:	230c      	movs	r3, #12
 800a594:	603b      	str	r3, [r7, #0]
 800a596:	4638      	mov	r0, r7
 800a598:	f000 f8a6 	bl	800a6e8 <__malloc_unlock>
 800a59c:	e7a1      	b.n	800a4e2 <_malloc_r+0x22>
 800a59e:	6025      	str	r5, [r4, #0]
 800a5a0:	e7de      	b.n	800a560 <_malloc_r+0xa0>
 800a5a2:	bf00      	nop
 800a5a4:	20002608 	.word	0x20002608

0800a5a8 <cleanup_glue>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	6809      	ldr	r1, [r1, #0]
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	b109      	cbz	r1, 800a5b6 <cleanup_glue+0xe>
 800a5b2:	f7ff fff9 	bl	800a5a8 <cleanup_glue>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5be:	f000 b899 	b.w	800a6f4 <_free_r>
	...

0800a5c4 <_reclaim_reent>:
 800a5c4:	4b2c      	ldr	r3, [pc, #176]	; (800a678 <_reclaim_reent+0xb4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4283      	cmp	r3, r0
 800a5ca:	b570      	push	{r4, r5, r6, lr}
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	d051      	beq.n	800a674 <_reclaim_reent+0xb0>
 800a5d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a5d2:	b143      	cbz	r3, 800a5e6 <_reclaim_reent+0x22>
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d14a      	bne.n	800a670 <_reclaim_reent+0xac>
 800a5da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5dc:	6819      	ldr	r1, [r3, #0]
 800a5de:	b111      	cbz	r1, 800a5e6 <_reclaim_reent+0x22>
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f000 f887 	bl	800a6f4 <_free_r>
 800a5e6:	6961      	ldr	r1, [r4, #20]
 800a5e8:	b111      	cbz	r1, 800a5f0 <_reclaim_reent+0x2c>
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 f882 	bl	800a6f4 <_free_r>
 800a5f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a5f2:	b111      	cbz	r1, 800a5fa <_reclaim_reent+0x36>
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f000 f87d 	bl	800a6f4 <_free_r>
 800a5fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5fc:	b111      	cbz	r1, 800a604 <_reclaim_reent+0x40>
 800a5fe:	4620      	mov	r0, r4
 800a600:	f000 f878 	bl	800a6f4 <_free_r>
 800a604:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a606:	b111      	cbz	r1, 800a60e <_reclaim_reent+0x4a>
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 f873 	bl	800a6f4 <_free_r>
 800a60e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a610:	b111      	cbz	r1, 800a618 <_reclaim_reent+0x54>
 800a612:	4620      	mov	r0, r4
 800a614:	f000 f86e 	bl	800a6f4 <_free_r>
 800a618:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a61a:	b111      	cbz	r1, 800a622 <_reclaim_reent+0x5e>
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 f869 	bl	800a6f4 <_free_r>
 800a622:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a624:	b111      	cbz	r1, 800a62c <_reclaim_reent+0x68>
 800a626:	4620      	mov	r0, r4
 800a628:	f000 f864 	bl	800a6f4 <_free_r>
 800a62c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a62e:	b111      	cbz	r1, 800a636 <_reclaim_reent+0x72>
 800a630:	4620      	mov	r0, r4
 800a632:	f000 f85f 	bl	800a6f4 <_free_r>
 800a636:	69a3      	ldr	r3, [r4, #24]
 800a638:	b1e3      	cbz	r3, 800a674 <_reclaim_reent+0xb0>
 800a63a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a63c:	4620      	mov	r0, r4
 800a63e:	4798      	blx	r3
 800a640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a642:	b1b9      	cbz	r1, 800a674 <_reclaim_reent+0xb0>
 800a644:	4620      	mov	r0, r4
 800a646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a64a:	f7ff bfad 	b.w	800a5a8 <cleanup_glue>
 800a64e:	5949      	ldr	r1, [r1, r5]
 800a650:	b941      	cbnz	r1, 800a664 <_reclaim_reent+0xa0>
 800a652:	3504      	adds	r5, #4
 800a654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a656:	2d80      	cmp	r5, #128	; 0x80
 800a658:	68d9      	ldr	r1, [r3, #12]
 800a65a:	d1f8      	bne.n	800a64e <_reclaim_reent+0x8a>
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 f849 	bl	800a6f4 <_free_r>
 800a662:	e7ba      	b.n	800a5da <_reclaim_reent+0x16>
 800a664:	680e      	ldr	r6, [r1, #0]
 800a666:	4620      	mov	r0, r4
 800a668:	f000 f844 	bl	800a6f4 <_free_r>
 800a66c:	4631      	mov	r1, r6
 800a66e:	e7ef      	b.n	800a650 <_reclaim_reent+0x8c>
 800a670:	2500      	movs	r5, #0
 800a672:	e7ef      	b.n	800a654 <_reclaim_reent+0x90>
 800a674:	bd70      	pop	{r4, r5, r6, pc}
 800a676:	bf00      	nop
 800a678:	20000020 	.word	0x20000020

0800a67c <_sbrk_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4d06      	ldr	r5, [pc, #24]	; (800a698 <_sbrk_r+0x1c>)
 800a680:	2300      	movs	r3, #0
 800a682:	4604      	mov	r4, r0
 800a684:	4608      	mov	r0, r1
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	f7f7 f8e6 	bl	8001858 <_sbrk>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_sbrk_r+0x1a>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_sbrk_r+0x1a>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	20002610 	.word	0x20002610

0800a69c <siprintf>:
 800a69c:	b40e      	push	{r1, r2, r3}
 800a69e:	b500      	push	{lr}
 800a6a0:	b09c      	sub	sp, #112	; 0x70
 800a6a2:	ab1d      	add	r3, sp, #116	; 0x74
 800a6a4:	9002      	str	r0, [sp, #8]
 800a6a6:	9006      	str	r0, [sp, #24]
 800a6a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6ac:	4809      	ldr	r0, [pc, #36]	; (800a6d4 <siprintf+0x38>)
 800a6ae:	9107      	str	r1, [sp, #28]
 800a6b0:	9104      	str	r1, [sp, #16]
 800a6b2:	4909      	ldr	r1, [pc, #36]	; (800a6d8 <siprintf+0x3c>)
 800a6b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b8:	9105      	str	r1, [sp, #20]
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	9301      	str	r3, [sp, #4]
 800a6be:	a902      	add	r1, sp, #8
 800a6c0:	f000 f8c0 	bl	800a844 <_svfiprintf_r>
 800a6c4:	9b02      	ldr	r3, [sp, #8]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	701a      	strb	r2, [r3, #0]
 800a6ca:	b01c      	add	sp, #112	; 0x70
 800a6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6d0:	b003      	add	sp, #12
 800a6d2:	4770      	bx	lr
 800a6d4:	20000020 	.word	0x20000020
 800a6d8:	ffff0208 	.word	0xffff0208

0800a6dc <__malloc_lock>:
 800a6dc:	4801      	ldr	r0, [pc, #4]	; (800a6e4 <__malloc_lock+0x8>)
 800a6de:	f7ff beb7 	b.w	800a450 <__retarget_lock_acquire_recursive>
 800a6e2:	bf00      	nop
 800a6e4:	20002604 	.word	0x20002604

0800a6e8 <__malloc_unlock>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__malloc_unlock+0x8>)
 800a6ea:	f7ff beb2 	b.w	800a452 <__retarget_lock_release_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	20002604 	.word	0x20002604

0800a6f4 <_free_r>:
 800a6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	d044      	beq.n	800a784 <_free_r+0x90>
 800a6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6fe:	9001      	str	r0, [sp, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	f1a1 0404 	sub.w	r4, r1, #4
 800a706:	bfb8      	it	lt
 800a708:	18e4      	addlt	r4, r4, r3
 800a70a:	f7ff ffe7 	bl	800a6dc <__malloc_lock>
 800a70e:	4a1e      	ldr	r2, [pc, #120]	; (800a788 <_free_r+0x94>)
 800a710:	9801      	ldr	r0, [sp, #4]
 800a712:	6813      	ldr	r3, [r2, #0]
 800a714:	b933      	cbnz	r3, 800a724 <_free_r+0x30>
 800a716:	6063      	str	r3, [r4, #4]
 800a718:	6014      	str	r4, [r2, #0]
 800a71a:	b003      	add	sp, #12
 800a71c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a720:	f7ff bfe2 	b.w	800a6e8 <__malloc_unlock>
 800a724:	42a3      	cmp	r3, r4
 800a726:	d908      	bls.n	800a73a <_free_r+0x46>
 800a728:	6825      	ldr	r5, [r4, #0]
 800a72a:	1961      	adds	r1, r4, r5
 800a72c:	428b      	cmp	r3, r1
 800a72e:	bf01      	itttt	eq
 800a730:	6819      	ldreq	r1, [r3, #0]
 800a732:	685b      	ldreq	r3, [r3, #4]
 800a734:	1949      	addeq	r1, r1, r5
 800a736:	6021      	streq	r1, [r4, #0]
 800a738:	e7ed      	b.n	800a716 <_free_r+0x22>
 800a73a:	461a      	mov	r2, r3
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	b10b      	cbz	r3, 800a744 <_free_r+0x50>
 800a740:	42a3      	cmp	r3, r4
 800a742:	d9fa      	bls.n	800a73a <_free_r+0x46>
 800a744:	6811      	ldr	r1, [r2, #0]
 800a746:	1855      	adds	r5, r2, r1
 800a748:	42a5      	cmp	r5, r4
 800a74a:	d10b      	bne.n	800a764 <_free_r+0x70>
 800a74c:	6824      	ldr	r4, [r4, #0]
 800a74e:	4421      	add	r1, r4
 800a750:	1854      	adds	r4, r2, r1
 800a752:	42a3      	cmp	r3, r4
 800a754:	6011      	str	r1, [r2, #0]
 800a756:	d1e0      	bne.n	800a71a <_free_r+0x26>
 800a758:	681c      	ldr	r4, [r3, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	6053      	str	r3, [r2, #4]
 800a75e:	4421      	add	r1, r4
 800a760:	6011      	str	r1, [r2, #0]
 800a762:	e7da      	b.n	800a71a <_free_r+0x26>
 800a764:	d902      	bls.n	800a76c <_free_r+0x78>
 800a766:	230c      	movs	r3, #12
 800a768:	6003      	str	r3, [r0, #0]
 800a76a:	e7d6      	b.n	800a71a <_free_r+0x26>
 800a76c:	6825      	ldr	r5, [r4, #0]
 800a76e:	1961      	adds	r1, r4, r5
 800a770:	428b      	cmp	r3, r1
 800a772:	bf04      	itt	eq
 800a774:	6819      	ldreq	r1, [r3, #0]
 800a776:	685b      	ldreq	r3, [r3, #4]
 800a778:	6063      	str	r3, [r4, #4]
 800a77a:	bf04      	itt	eq
 800a77c:	1949      	addeq	r1, r1, r5
 800a77e:	6021      	streq	r1, [r4, #0]
 800a780:	6054      	str	r4, [r2, #4]
 800a782:	e7ca      	b.n	800a71a <_free_r+0x26>
 800a784:	b003      	add	sp, #12
 800a786:	bd30      	pop	{r4, r5, pc}
 800a788:	20002608 	.word	0x20002608

0800a78c <__ssputs_r>:
 800a78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a790:	688e      	ldr	r6, [r1, #8]
 800a792:	429e      	cmp	r6, r3
 800a794:	4682      	mov	sl, r0
 800a796:	460c      	mov	r4, r1
 800a798:	4690      	mov	r8, r2
 800a79a:	461f      	mov	r7, r3
 800a79c:	d838      	bhi.n	800a810 <__ssputs_r+0x84>
 800a79e:	898a      	ldrh	r2, [r1, #12]
 800a7a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7a4:	d032      	beq.n	800a80c <__ssputs_r+0x80>
 800a7a6:	6825      	ldr	r5, [r4, #0]
 800a7a8:	6909      	ldr	r1, [r1, #16]
 800a7aa:	eba5 0901 	sub.w	r9, r5, r1
 800a7ae:	6965      	ldr	r5, [r4, #20]
 800a7b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	444b      	add	r3, r9
 800a7bc:	106d      	asrs	r5, r5, #1
 800a7be:	429d      	cmp	r5, r3
 800a7c0:	bf38      	it	cc
 800a7c2:	461d      	movcc	r5, r3
 800a7c4:	0553      	lsls	r3, r2, #21
 800a7c6:	d531      	bpl.n	800a82c <__ssputs_r+0xa0>
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7ff fe79 	bl	800a4c0 <_malloc_r>
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	b950      	cbnz	r0, 800a7e8 <__ssputs_r+0x5c>
 800a7d2:	230c      	movs	r3, #12
 800a7d4:	f8ca 3000 	str.w	r3, [sl]
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7de:	81a3      	strh	r3, [r4, #12]
 800a7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e8:	6921      	ldr	r1, [r4, #16]
 800a7ea:	464a      	mov	r2, r9
 800a7ec:	f7ff fe32 	bl	800a454 <memcpy>
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7fa:	81a3      	strh	r3, [r4, #12]
 800a7fc:	6126      	str	r6, [r4, #16]
 800a7fe:	6165      	str	r5, [r4, #20]
 800a800:	444e      	add	r6, r9
 800a802:	eba5 0509 	sub.w	r5, r5, r9
 800a806:	6026      	str	r6, [r4, #0]
 800a808:	60a5      	str	r5, [r4, #8]
 800a80a:	463e      	mov	r6, r7
 800a80c:	42be      	cmp	r6, r7
 800a80e:	d900      	bls.n	800a812 <__ssputs_r+0x86>
 800a810:	463e      	mov	r6, r7
 800a812:	6820      	ldr	r0, [r4, #0]
 800a814:	4632      	mov	r2, r6
 800a816:	4641      	mov	r1, r8
 800a818:	f000 faa8 	bl	800ad6c <memmove>
 800a81c:	68a3      	ldr	r3, [r4, #8]
 800a81e:	1b9b      	subs	r3, r3, r6
 800a820:	60a3      	str	r3, [r4, #8]
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	4433      	add	r3, r6
 800a826:	6023      	str	r3, [r4, #0]
 800a828:	2000      	movs	r0, #0
 800a82a:	e7db      	b.n	800a7e4 <__ssputs_r+0x58>
 800a82c:	462a      	mov	r2, r5
 800a82e:	f000 fab7 	bl	800ada0 <_realloc_r>
 800a832:	4606      	mov	r6, r0
 800a834:	2800      	cmp	r0, #0
 800a836:	d1e1      	bne.n	800a7fc <__ssputs_r+0x70>
 800a838:	6921      	ldr	r1, [r4, #16]
 800a83a:	4650      	mov	r0, sl
 800a83c:	f7ff ff5a 	bl	800a6f4 <_free_r>
 800a840:	e7c7      	b.n	800a7d2 <__ssputs_r+0x46>
	...

0800a844 <_svfiprintf_r>:
 800a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a848:	4698      	mov	r8, r3
 800a84a:	898b      	ldrh	r3, [r1, #12]
 800a84c:	061b      	lsls	r3, r3, #24
 800a84e:	b09d      	sub	sp, #116	; 0x74
 800a850:	4607      	mov	r7, r0
 800a852:	460d      	mov	r5, r1
 800a854:	4614      	mov	r4, r2
 800a856:	d50e      	bpl.n	800a876 <_svfiprintf_r+0x32>
 800a858:	690b      	ldr	r3, [r1, #16]
 800a85a:	b963      	cbnz	r3, 800a876 <_svfiprintf_r+0x32>
 800a85c:	2140      	movs	r1, #64	; 0x40
 800a85e:	f7ff fe2f 	bl	800a4c0 <_malloc_r>
 800a862:	6028      	str	r0, [r5, #0]
 800a864:	6128      	str	r0, [r5, #16]
 800a866:	b920      	cbnz	r0, 800a872 <_svfiprintf_r+0x2e>
 800a868:	230c      	movs	r3, #12
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	e0d1      	b.n	800aa16 <_svfiprintf_r+0x1d2>
 800a872:	2340      	movs	r3, #64	; 0x40
 800a874:	616b      	str	r3, [r5, #20]
 800a876:	2300      	movs	r3, #0
 800a878:	9309      	str	r3, [sp, #36]	; 0x24
 800a87a:	2320      	movs	r3, #32
 800a87c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a880:	f8cd 800c 	str.w	r8, [sp, #12]
 800a884:	2330      	movs	r3, #48	; 0x30
 800a886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa30 <_svfiprintf_r+0x1ec>
 800a88a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a88e:	f04f 0901 	mov.w	r9, #1
 800a892:	4623      	mov	r3, r4
 800a894:	469a      	mov	sl, r3
 800a896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89a:	b10a      	cbz	r2, 800a8a0 <_svfiprintf_r+0x5c>
 800a89c:	2a25      	cmp	r2, #37	; 0x25
 800a89e:	d1f9      	bne.n	800a894 <_svfiprintf_r+0x50>
 800a8a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a4:	d00b      	beq.n	800a8be <_svfiprintf_r+0x7a>
 800a8a6:	465b      	mov	r3, fp
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	f7ff ff6d 	bl	800a78c <__ssputs_r>
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	f000 80aa 	beq.w	800aa0c <_svfiprintf_r+0x1c8>
 800a8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ba:	445a      	add	r2, fp
 800a8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a8be:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 80a2 	beq.w	800aa0c <_svfiprintf_r+0x1c8>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d2:	f10a 0a01 	add.w	sl, sl, #1
 800a8d6:	9304      	str	r3, [sp, #16]
 800a8d8:	9307      	str	r3, [sp, #28]
 800a8da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8de:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e0:	4654      	mov	r4, sl
 800a8e2:	2205      	movs	r2, #5
 800a8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e8:	4851      	ldr	r0, [pc, #324]	; (800aa30 <_svfiprintf_r+0x1ec>)
 800a8ea:	f7f5 fc99 	bl	8000220 <memchr>
 800a8ee:	9a04      	ldr	r2, [sp, #16]
 800a8f0:	b9d8      	cbnz	r0, 800a92a <_svfiprintf_r+0xe6>
 800a8f2:	06d0      	lsls	r0, r2, #27
 800a8f4:	bf44      	itt	mi
 800a8f6:	2320      	movmi	r3, #32
 800a8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8fc:	0711      	lsls	r1, r2, #28
 800a8fe:	bf44      	itt	mi
 800a900:	232b      	movmi	r3, #43	; 0x2b
 800a902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a906:	f89a 3000 	ldrb.w	r3, [sl]
 800a90a:	2b2a      	cmp	r3, #42	; 0x2a
 800a90c:	d015      	beq.n	800a93a <_svfiprintf_r+0xf6>
 800a90e:	9a07      	ldr	r2, [sp, #28]
 800a910:	4654      	mov	r4, sl
 800a912:	2000      	movs	r0, #0
 800a914:	f04f 0c0a 	mov.w	ip, #10
 800a918:	4621      	mov	r1, r4
 800a91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a91e:	3b30      	subs	r3, #48	; 0x30
 800a920:	2b09      	cmp	r3, #9
 800a922:	d94e      	bls.n	800a9c2 <_svfiprintf_r+0x17e>
 800a924:	b1b0      	cbz	r0, 800a954 <_svfiprintf_r+0x110>
 800a926:	9207      	str	r2, [sp, #28]
 800a928:	e014      	b.n	800a954 <_svfiprintf_r+0x110>
 800a92a:	eba0 0308 	sub.w	r3, r0, r8
 800a92e:	fa09 f303 	lsl.w	r3, r9, r3
 800a932:	4313      	orrs	r3, r2
 800a934:	9304      	str	r3, [sp, #16]
 800a936:	46a2      	mov	sl, r4
 800a938:	e7d2      	b.n	800a8e0 <_svfiprintf_r+0x9c>
 800a93a:	9b03      	ldr	r3, [sp, #12]
 800a93c:	1d19      	adds	r1, r3, #4
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	9103      	str	r1, [sp, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	bfbb      	ittet	lt
 800a946:	425b      	neglt	r3, r3
 800a948:	f042 0202 	orrlt.w	r2, r2, #2
 800a94c:	9307      	strge	r3, [sp, #28]
 800a94e:	9307      	strlt	r3, [sp, #28]
 800a950:	bfb8      	it	lt
 800a952:	9204      	strlt	r2, [sp, #16]
 800a954:	7823      	ldrb	r3, [r4, #0]
 800a956:	2b2e      	cmp	r3, #46	; 0x2e
 800a958:	d10c      	bne.n	800a974 <_svfiprintf_r+0x130>
 800a95a:	7863      	ldrb	r3, [r4, #1]
 800a95c:	2b2a      	cmp	r3, #42	; 0x2a
 800a95e:	d135      	bne.n	800a9cc <_svfiprintf_r+0x188>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	1d1a      	adds	r2, r3, #4
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	9203      	str	r2, [sp, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bfb8      	it	lt
 800a96c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a970:	3402      	adds	r4, #2
 800a972:	9305      	str	r3, [sp, #20]
 800a974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa40 <_svfiprintf_r+0x1fc>
 800a978:	7821      	ldrb	r1, [r4, #0]
 800a97a:	2203      	movs	r2, #3
 800a97c:	4650      	mov	r0, sl
 800a97e:	f7f5 fc4f 	bl	8000220 <memchr>
 800a982:	b140      	cbz	r0, 800a996 <_svfiprintf_r+0x152>
 800a984:	2340      	movs	r3, #64	; 0x40
 800a986:	eba0 000a 	sub.w	r0, r0, sl
 800a98a:	fa03 f000 	lsl.w	r0, r3, r0
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	4303      	orrs	r3, r0
 800a992:	3401      	adds	r4, #1
 800a994:	9304      	str	r3, [sp, #16]
 800a996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99a:	4826      	ldr	r0, [pc, #152]	; (800aa34 <_svfiprintf_r+0x1f0>)
 800a99c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9a0:	2206      	movs	r2, #6
 800a9a2:	f7f5 fc3d 	bl	8000220 <memchr>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d038      	beq.n	800aa1c <_svfiprintf_r+0x1d8>
 800a9aa:	4b23      	ldr	r3, [pc, #140]	; (800aa38 <_svfiprintf_r+0x1f4>)
 800a9ac:	bb1b      	cbnz	r3, 800a9f6 <_svfiprintf_r+0x1b2>
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9bc:	4433      	add	r3, r6
 800a9be:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c0:	e767      	b.n	800a892 <_svfiprintf_r+0x4e>
 800a9c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	e7a5      	b.n	800a918 <_svfiprintf_r+0xd4>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	3401      	adds	r4, #1
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	f04f 0c0a 	mov.w	ip, #10
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9de:	3a30      	subs	r2, #48	; 0x30
 800a9e0:	2a09      	cmp	r2, #9
 800a9e2:	d903      	bls.n	800a9ec <_svfiprintf_r+0x1a8>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0c5      	beq.n	800a974 <_svfiprintf_r+0x130>
 800a9e8:	9105      	str	r1, [sp, #20]
 800a9ea:	e7c3      	b.n	800a974 <_svfiprintf_r+0x130>
 800a9ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e7f0      	b.n	800a9d8 <_svfiprintf_r+0x194>
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <_svfiprintf_r+0x1f8>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	4638      	mov	r0, r7
 800aa02:	f3af 8000 	nop.w
 800aa06:	1c42      	adds	r2, r0, #1
 800aa08:	4606      	mov	r6, r0
 800aa0a:	d1d6      	bne.n	800a9ba <_svfiprintf_r+0x176>
 800aa0c:	89ab      	ldrh	r3, [r5, #12]
 800aa0e:	065b      	lsls	r3, r3, #25
 800aa10:	f53f af2c 	bmi.w	800a86c <_svfiprintf_r+0x28>
 800aa14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa16:	b01d      	add	sp, #116	; 0x74
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	ab03      	add	r3, sp, #12
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	462a      	mov	r2, r5
 800aa22:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <_svfiprintf_r+0x1f8>)
 800aa24:	a904      	add	r1, sp, #16
 800aa26:	4638      	mov	r0, r7
 800aa28:	f000 f87a 	bl	800ab20 <_printf_i>
 800aa2c:	e7eb      	b.n	800aa06 <_svfiprintf_r+0x1c2>
 800aa2e:	bf00      	nop
 800aa30:	0800b034 	.word	0x0800b034
 800aa34:	0800b03e 	.word	0x0800b03e
 800aa38:	00000000 	.word	0x00000000
 800aa3c:	0800a78d 	.word	0x0800a78d
 800aa40:	0800b03a 	.word	0x0800b03a

0800aa44 <_printf_common>:
 800aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	4616      	mov	r6, r2
 800aa4a:	4699      	mov	r9, r3
 800aa4c:	688a      	ldr	r2, [r1, #8]
 800aa4e:	690b      	ldr	r3, [r1, #16]
 800aa50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	bfb8      	it	lt
 800aa58:	4613      	movlt	r3, r2
 800aa5a:	6033      	str	r3, [r6, #0]
 800aa5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa60:	4607      	mov	r7, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	b10a      	cbz	r2, 800aa6a <_printf_common+0x26>
 800aa66:	3301      	adds	r3, #1
 800aa68:	6033      	str	r3, [r6, #0]
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	0699      	lsls	r1, r3, #26
 800aa6e:	bf42      	ittt	mi
 800aa70:	6833      	ldrmi	r3, [r6, #0]
 800aa72:	3302      	addmi	r3, #2
 800aa74:	6033      	strmi	r3, [r6, #0]
 800aa76:	6825      	ldr	r5, [r4, #0]
 800aa78:	f015 0506 	ands.w	r5, r5, #6
 800aa7c:	d106      	bne.n	800aa8c <_printf_common+0x48>
 800aa7e:	f104 0a19 	add.w	sl, r4, #25
 800aa82:	68e3      	ldr	r3, [r4, #12]
 800aa84:	6832      	ldr	r2, [r6, #0]
 800aa86:	1a9b      	subs	r3, r3, r2
 800aa88:	42ab      	cmp	r3, r5
 800aa8a:	dc26      	bgt.n	800aada <_printf_common+0x96>
 800aa8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa90:	1e13      	subs	r3, r2, #0
 800aa92:	6822      	ldr	r2, [r4, #0]
 800aa94:	bf18      	it	ne
 800aa96:	2301      	movne	r3, #1
 800aa98:	0692      	lsls	r2, r2, #26
 800aa9a:	d42b      	bmi.n	800aaf4 <_printf_common+0xb0>
 800aa9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c0      	blx	r8
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d01e      	beq.n	800aae8 <_printf_common+0xa4>
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	68e5      	ldr	r5, [r4, #12]
 800aaae:	6832      	ldr	r2, [r6, #0]
 800aab0:	f003 0306 	and.w	r3, r3, #6
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	bf08      	it	eq
 800aab8:	1aad      	subeq	r5, r5, r2
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	6922      	ldr	r2, [r4, #16]
 800aabe:	bf0c      	ite	eq
 800aac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aac4:	2500      	movne	r5, #0
 800aac6:	4293      	cmp	r3, r2
 800aac8:	bfc4      	itt	gt
 800aaca:	1a9b      	subgt	r3, r3, r2
 800aacc:	18ed      	addgt	r5, r5, r3
 800aace:	2600      	movs	r6, #0
 800aad0:	341a      	adds	r4, #26
 800aad2:	42b5      	cmp	r5, r6
 800aad4:	d11a      	bne.n	800ab0c <_printf_common+0xc8>
 800aad6:	2000      	movs	r0, #0
 800aad8:	e008      	b.n	800aaec <_printf_common+0xa8>
 800aada:	2301      	movs	r3, #1
 800aadc:	4652      	mov	r2, sl
 800aade:	4649      	mov	r1, r9
 800aae0:	4638      	mov	r0, r7
 800aae2:	47c0      	blx	r8
 800aae4:	3001      	adds	r0, #1
 800aae6:	d103      	bne.n	800aaf0 <_printf_common+0xac>
 800aae8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf0:	3501      	adds	r5, #1
 800aaf2:	e7c6      	b.n	800aa82 <_printf_common+0x3e>
 800aaf4:	18e1      	adds	r1, r4, r3
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	2030      	movs	r0, #48	; 0x30
 800aafa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aafe:	4422      	add	r2, r4
 800ab00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab08:	3302      	adds	r3, #2
 800ab0a:	e7c7      	b.n	800aa9c <_printf_common+0x58>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	4622      	mov	r2, r4
 800ab10:	4649      	mov	r1, r9
 800ab12:	4638      	mov	r0, r7
 800ab14:	47c0      	blx	r8
 800ab16:	3001      	adds	r0, #1
 800ab18:	d0e6      	beq.n	800aae8 <_printf_common+0xa4>
 800ab1a:	3601      	adds	r6, #1
 800ab1c:	e7d9      	b.n	800aad2 <_printf_common+0x8e>
	...

0800ab20 <_printf_i>:
 800ab20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab24:	7e0f      	ldrb	r7, [r1, #24]
 800ab26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab28:	2f78      	cmp	r7, #120	; 0x78
 800ab2a:	4691      	mov	r9, r2
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	469a      	mov	sl, r3
 800ab32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab36:	d807      	bhi.n	800ab48 <_printf_i+0x28>
 800ab38:	2f62      	cmp	r7, #98	; 0x62
 800ab3a:	d80a      	bhi.n	800ab52 <_printf_i+0x32>
 800ab3c:	2f00      	cmp	r7, #0
 800ab3e:	f000 80d8 	beq.w	800acf2 <_printf_i+0x1d2>
 800ab42:	2f58      	cmp	r7, #88	; 0x58
 800ab44:	f000 80a3 	beq.w	800ac8e <_printf_i+0x16e>
 800ab48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab50:	e03a      	b.n	800abc8 <_printf_i+0xa8>
 800ab52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab56:	2b15      	cmp	r3, #21
 800ab58:	d8f6      	bhi.n	800ab48 <_printf_i+0x28>
 800ab5a:	a101      	add	r1, pc, #4	; (adr r1, 800ab60 <_printf_i+0x40>)
 800ab5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab60:	0800abb9 	.word	0x0800abb9
 800ab64:	0800abcd 	.word	0x0800abcd
 800ab68:	0800ab49 	.word	0x0800ab49
 800ab6c:	0800ab49 	.word	0x0800ab49
 800ab70:	0800ab49 	.word	0x0800ab49
 800ab74:	0800ab49 	.word	0x0800ab49
 800ab78:	0800abcd 	.word	0x0800abcd
 800ab7c:	0800ab49 	.word	0x0800ab49
 800ab80:	0800ab49 	.word	0x0800ab49
 800ab84:	0800ab49 	.word	0x0800ab49
 800ab88:	0800ab49 	.word	0x0800ab49
 800ab8c:	0800acd9 	.word	0x0800acd9
 800ab90:	0800abfd 	.word	0x0800abfd
 800ab94:	0800acbb 	.word	0x0800acbb
 800ab98:	0800ab49 	.word	0x0800ab49
 800ab9c:	0800ab49 	.word	0x0800ab49
 800aba0:	0800acfb 	.word	0x0800acfb
 800aba4:	0800ab49 	.word	0x0800ab49
 800aba8:	0800abfd 	.word	0x0800abfd
 800abac:	0800ab49 	.word	0x0800ab49
 800abb0:	0800ab49 	.word	0x0800ab49
 800abb4:	0800acc3 	.word	0x0800acc3
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	1d1a      	adds	r2, r3, #4
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	602a      	str	r2, [r5, #0]
 800abc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abc8:	2301      	movs	r3, #1
 800abca:	e0a3      	b.n	800ad14 <_printf_i+0x1f4>
 800abcc:	6820      	ldr	r0, [r4, #0]
 800abce:	6829      	ldr	r1, [r5, #0]
 800abd0:	0606      	lsls	r6, r0, #24
 800abd2:	f101 0304 	add.w	r3, r1, #4
 800abd6:	d50a      	bpl.n	800abee <_printf_i+0xce>
 800abd8:	680e      	ldr	r6, [r1, #0]
 800abda:	602b      	str	r3, [r5, #0]
 800abdc:	2e00      	cmp	r6, #0
 800abde:	da03      	bge.n	800abe8 <_printf_i+0xc8>
 800abe0:	232d      	movs	r3, #45	; 0x2d
 800abe2:	4276      	negs	r6, r6
 800abe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abe8:	485e      	ldr	r0, [pc, #376]	; (800ad64 <_printf_i+0x244>)
 800abea:	230a      	movs	r3, #10
 800abec:	e019      	b.n	800ac22 <_printf_i+0x102>
 800abee:	680e      	ldr	r6, [r1, #0]
 800abf0:	602b      	str	r3, [r5, #0]
 800abf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abf6:	bf18      	it	ne
 800abf8:	b236      	sxthne	r6, r6
 800abfa:	e7ef      	b.n	800abdc <_printf_i+0xbc>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	6820      	ldr	r0, [r4, #0]
 800ac00:	1d19      	adds	r1, r3, #4
 800ac02:	6029      	str	r1, [r5, #0]
 800ac04:	0601      	lsls	r1, r0, #24
 800ac06:	d501      	bpl.n	800ac0c <_printf_i+0xec>
 800ac08:	681e      	ldr	r6, [r3, #0]
 800ac0a:	e002      	b.n	800ac12 <_printf_i+0xf2>
 800ac0c:	0646      	lsls	r6, r0, #25
 800ac0e:	d5fb      	bpl.n	800ac08 <_printf_i+0xe8>
 800ac10:	881e      	ldrh	r6, [r3, #0]
 800ac12:	4854      	ldr	r0, [pc, #336]	; (800ad64 <_printf_i+0x244>)
 800ac14:	2f6f      	cmp	r7, #111	; 0x6f
 800ac16:	bf0c      	ite	eq
 800ac18:	2308      	moveq	r3, #8
 800ac1a:	230a      	movne	r3, #10
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac22:	6865      	ldr	r5, [r4, #4]
 800ac24:	60a5      	str	r5, [r4, #8]
 800ac26:	2d00      	cmp	r5, #0
 800ac28:	bfa2      	ittt	ge
 800ac2a:	6821      	ldrge	r1, [r4, #0]
 800ac2c:	f021 0104 	bicge.w	r1, r1, #4
 800ac30:	6021      	strge	r1, [r4, #0]
 800ac32:	b90e      	cbnz	r6, 800ac38 <_printf_i+0x118>
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	d04d      	beq.n	800acd4 <_printf_i+0x1b4>
 800ac38:	4615      	mov	r5, r2
 800ac3a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac3e:	fb03 6711 	mls	r7, r3, r1, r6
 800ac42:	5dc7      	ldrb	r7, [r0, r7]
 800ac44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac48:	4637      	mov	r7, r6
 800ac4a:	42bb      	cmp	r3, r7
 800ac4c:	460e      	mov	r6, r1
 800ac4e:	d9f4      	bls.n	800ac3a <_printf_i+0x11a>
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d10b      	bne.n	800ac6c <_printf_i+0x14c>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	07de      	lsls	r6, r3, #31
 800ac58:	d508      	bpl.n	800ac6c <_printf_i+0x14c>
 800ac5a:	6923      	ldr	r3, [r4, #16]
 800ac5c:	6861      	ldr	r1, [r4, #4]
 800ac5e:	4299      	cmp	r1, r3
 800ac60:	bfde      	ittt	le
 800ac62:	2330      	movle	r3, #48	; 0x30
 800ac64:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac68:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac6c:	1b52      	subs	r2, r2, r5
 800ac6e:	6122      	str	r2, [r4, #16]
 800ac70:	f8cd a000 	str.w	sl, [sp]
 800ac74:	464b      	mov	r3, r9
 800ac76:	aa03      	add	r2, sp, #12
 800ac78:	4621      	mov	r1, r4
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	f7ff fee2 	bl	800aa44 <_printf_common>
 800ac80:	3001      	adds	r0, #1
 800ac82:	d14c      	bne.n	800ad1e <_printf_i+0x1fe>
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295
 800ac88:	b004      	add	sp, #16
 800ac8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8e:	4835      	ldr	r0, [pc, #212]	; (800ad64 <_printf_i+0x244>)
 800ac90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac94:	6829      	ldr	r1, [r5, #0]
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac9c:	6029      	str	r1, [r5, #0]
 800ac9e:	061d      	lsls	r5, r3, #24
 800aca0:	d514      	bpl.n	800accc <_printf_i+0x1ac>
 800aca2:	07df      	lsls	r7, r3, #31
 800aca4:	bf44      	itt	mi
 800aca6:	f043 0320 	orrmi.w	r3, r3, #32
 800acaa:	6023      	strmi	r3, [r4, #0]
 800acac:	b91e      	cbnz	r6, 800acb6 <_printf_i+0x196>
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	f023 0320 	bic.w	r3, r3, #32
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	2310      	movs	r3, #16
 800acb8:	e7b0      	b.n	800ac1c <_printf_i+0xfc>
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	f043 0320 	orr.w	r3, r3, #32
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	2378      	movs	r3, #120	; 0x78
 800acc4:	4828      	ldr	r0, [pc, #160]	; (800ad68 <_printf_i+0x248>)
 800acc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acca:	e7e3      	b.n	800ac94 <_printf_i+0x174>
 800accc:	0659      	lsls	r1, r3, #25
 800acce:	bf48      	it	mi
 800acd0:	b2b6      	uxthmi	r6, r6
 800acd2:	e7e6      	b.n	800aca2 <_printf_i+0x182>
 800acd4:	4615      	mov	r5, r2
 800acd6:	e7bb      	b.n	800ac50 <_printf_i+0x130>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	6826      	ldr	r6, [r4, #0]
 800acdc:	6961      	ldr	r1, [r4, #20]
 800acde:	1d18      	adds	r0, r3, #4
 800ace0:	6028      	str	r0, [r5, #0]
 800ace2:	0635      	lsls	r5, r6, #24
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	d501      	bpl.n	800acec <_printf_i+0x1cc>
 800ace8:	6019      	str	r1, [r3, #0]
 800acea:	e002      	b.n	800acf2 <_printf_i+0x1d2>
 800acec:	0670      	lsls	r0, r6, #25
 800acee:	d5fb      	bpl.n	800ace8 <_printf_i+0x1c8>
 800acf0:	8019      	strh	r1, [r3, #0]
 800acf2:	2300      	movs	r3, #0
 800acf4:	6123      	str	r3, [r4, #16]
 800acf6:	4615      	mov	r5, r2
 800acf8:	e7ba      	b.n	800ac70 <_printf_i+0x150>
 800acfa:	682b      	ldr	r3, [r5, #0]
 800acfc:	1d1a      	adds	r2, r3, #4
 800acfe:	602a      	str	r2, [r5, #0]
 800ad00:	681d      	ldr	r5, [r3, #0]
 800ad02:	6862      	ldr	r2, [r4, #4]
 800ad04:	2100      	movs	r1, #0
 800ad06:	4628      	mov	r0, r5
 800ad08:	f7f5 fa8a 	bl	8000220 <memchr>
 800ad0c:	b108      	cbz	r0, 800ad12 <_printf_i+0x1f2>
 800ad0e:	1b40      	subs	r0, r0, r5
 800ad10:	6060      	str	r0, [r4, #4]
 800ad12:	6863      	ldr	r3, [r4, #4]
 800ad14:	6123      	str	r3, [r4, #16]
 800ad16:	2300      	movs	r3, #0
 800ad18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad1c:	e7a8      	b.n	800ac70 <_printf_i+0x150>
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	462a      	mov	r2, r5
 800ad22:	4649      	mov	r1, r9
 800ad24:	4640      	mov	r0, r8
 800ad26:	47d0      	blx	sl
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d0ab      	beq.n	800ac84 <_printf_i+0x164>
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	079b      	lsls	r3, r3, #30
 800ad30:	d413      	bmi.n	800ad5a <_printf_i+0x23a>
 800ad32:	68e0      	ldr	r0, [r4, #12]
 800ad34:	9b03      	ldr	r3, [sp, #12]
 800ad36:	4298      	cmp	r0, r3
 800ad38:	bfb8      	it	lt
 800ad3a:	4618      	movlt	r0, r3
 800ad3c:	e7a4      	b.n	800ac88 <_printf_i+0x168>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4632      	mov	r2, r6
 800ad42:	4649      	mov	r1, r9
 800ad44:	4640      	mov	r0, r8
 800ad46:	47d0      	blx	sl
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d09b      	beq.n	800ac84 <_printf_i+0x164>
 800ad4c:	3501      	adds	r5, #1
 800ad4e:	68e3      	ldr	r3, [r4, #12]
 800ad50:	9903      	ldr	r1, [sp, #12]
 800ad52:	1a5b      	subs	r3, r3, r1
 800ad54:	42ab      	cmp	r3, r5
 800ad56:	dcf2      	bgt.n	800ad3e <_printf_i+0x21e>
 800ad58:	e7eb      	b.n	800ad32 <_printf_i+0x212>
 800ad5a:	2500      	movs	r5, #0
 800ad5c:	f104 0619 	add.w	r6, r4, #25
 800ad60:	e7f5      	b.n	800ad4e <_printf_i+0x22e>
 800ad62:	bf00      	nop
 800ad64:	0800b045 	.word	0x0800b045
 800ad68:	0800b056 	.word	0x0800b056

0800ad6c <memmove>:
 800ad6c:	4288      	cmp	r0, r1
 800ad6e:	b510      	push	{r4, lr}
 800ad70:	eb01 0402 	add.w	r4, r1, r2
 800ad74:	d902      	bls.n	800ad7c <memmove+0x10>
 800ad76:	4284      	cmp	r4, r0
 800ad78:	4623      	mov	r3, r4
 800ad7a:	d807      	bhi.n	800ad8c <memmove+0x20>
 800ad7c:	1e43      	subs	r3, r0, #1
 800ad7e:	42a1      	cmp	r1, r4
 800ad80:	d008      	beq.n	800ad94 <memmove+0x28>
 800ad82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad8a:	e7f8      	b.n	800ad7e <memmove+0x12>
 800ad8c:	4402      	add	r2, r0
 800ad8e:	4601      	mov	r1, r0
 800ad90:	428a      	cmp	r2, r1
 800ad92:	d100      	bne.n	800ad96 <memmove+0x2a>
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad9e:	e7f7      	b.n	800ad90 <memmove+0x24>

0800ada0 <_realloc_r>:
 800ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada4:	4680      	mov	r8, r0
 800ada6:	4614      	mov	r4, r2
 800ada8:	460e      	mov	r6, r1
 800adaa:	b921      	cbnz	r1, 800adb6 <_realloc_r+0x16>
 800adac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb0:	4611      	mov	r1, r2
 800adb2:	f7ff bb85 	b.w	800a4c0 <_malloc_r>
 800adb6:	b92a      	cbnz	r2, 800adc4 <_realloc_r+0x24>
 800adb8:	f7ff fc9c 	bl	800a6f4 <_free_r>
 800adbc:	4625      	mov	r5, r4
 800adbe:	4628      	mov	r0, r5
 800adc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc4:	f000 f81b 	bl	800adfe <_malloc_usable_size_r>
 800adc8:	4284      	cmp	r4, r0
 800adca:	4607      	mov	r7, r0
 800adcc:	d802      	bhi.n	800add4 <_realloc_r+0x34>
 800adce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800add2:	d812      	bhi.n	800adfa <_realloc_r+0x5a>
 800add4:	4621      	mov	r1, r4
 800add6:	4640      	mov	r0, r8
 800add8:	f7ff fb72 	bl	800a4c0 <_malloc_r>
 800addc:	4605      	mov	r5, r0
 800adde:	2800      	cmp	r0, #0
 800ade0:	d0ed      	beq.n	800adbe <_realloc_r+0x1e>
 800ade2:	42bc      	cmp	r4, r7
 800ade4:	4622      	mov	r2, r4
 800ade6:	4631      	mov	r1, r6
 800ade8:	bf28      	it	cs
 800adea:	463a      	movcs	r2, r7
 800adec:	f7ff fb32 	bl	800a454 <memcpy>
 800adf0:	4631      	mov	r1, r6
 800adf2:	4640      	mov	r0, r8
 800adf4:	f7ff fc7e 	bl	800a6f4 <_free_r>
 800adf8:	e7e1      	b.n	800adbe <_realloc_r+0x1e>
 800adfa:	4635      	mov	r5, r6
 800adfc:	e7df      	b.n	800adbe <_realloc_r+0x1e>

0800adfe <_malloc_usable_size_r>:
 800adfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae02:	1f18      	subs	r0, r3, #4
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bfbc      	itt	lt
 800ae08:	580b      	ldrlt	r3, [r1, r0]
 800ae0a:	18c0      	addlt	r0, r0, r3
 800ae0c:	4770      	bx	lr
	...

0800ae10 <_init>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr

0800ae1c <_fini>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr
