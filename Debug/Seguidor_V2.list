
Seguidor_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800d7a8  0800d7a8  0001d7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbe8  0800dbe8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbe8  0800dbe8  0001dbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbf0  0800dbf0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbf0  0800dbf0  0001dbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbf4  0800dbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800dbf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002698  20000080  0800dc78  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002718  0800dc78  00022718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207a6  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe0  00000000  00000000  00040856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00044838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00046188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029af8  00000000  00000000  00047940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce34  00000000  00000000  00071438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107998  00000000  00000000  0008e26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195c04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007620  00000000  00000000  00195c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d78c 	.word	0x0800d78c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0800d78c 	.word	0x0800d78c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <MX_FREERTOS_Init+0x78>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	2001      	movs	r0, #1
 8000f96:	f007 fad6 	bl	8008546 <osSemaphoreNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <MX_FREERTOS_Init+0x7c>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	; (800100c <MX_FREERTOS_Init+0x80>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f007 face 	bl	8008546 <osSemaphoreNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_FREERTOS_Init+0x84>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MX_FREERTOS_Init+0x88>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_FREERTOS_Init+0x8c>)
 8000fb6:	f007 fa19 	bl	80083ec <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_FREERTOS_Init+0x90>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <MX_FREERTOS_Init+0x94>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_FREERTOS_Init+0x98>)
 8000fc6:	f007 fa11 	bl	80083ec <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a16      	ldr	r2, [pc, #88]	; (8001028 <MX_FREERTOS_Init+0x9c>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <MX_FREERTOS_Init+0xa0>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <MX_FREERTOS_Init+0xa4>)
 8000fd6:	f007 fa09 	bl	80083ec <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a15      	ldr	r2, [pc, #84]	; (8001034 <MX_FREERTOS_Init+0xa8>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <MX_FREERTOS_Init+0xac>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <MX_FREERTOS_Init+0xb0>)
 8000fe6:	f007 fa01 	bl	80083ec <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <MX_FREERTOS_Init+0xb4>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <MX_FREERTOS_Init+0xb8>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_FREERTOS_Init+0xbc>)
 8000ff6:	f007 f9f9 	bl	80083ec <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <MX_FREERTOS_Init+0xc0>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	0800d8ec 	.word	0x0800d8ec
 8001008:	2000021c 	.word	0x2000021c
 800100c:	0800d8fc 	.word	0x0800d8fc
 8001010:	20000220 	.word	0x20000220
 8001014:	0800d838 	.word	0x0800d838
 8001018:	08001051 	.word	0x08001051
 800101c:	20000208 	.word	0x20000208
 8001020:	0800d85c 	.word	0x0800d85c
 8001024:	080010a1 	.word	0x080010a1
 8001028:	2000020c 	.word	0x2000020c
 800102c:	0800d880 	.word	0x0800d880
 8001030:	08001161 	.word	0x08001161
 8001034:	20000210 	.word	0x20000210
 8001038:	0800d8a4 	.word	0x0800d8a4
 800103c:	08001361 	.word	0x08001361
 8001040:	20000214 	.word	0x20000214
 8001044:	0800d8c8 	.word	0x0800d8c8
 8001048:	08001571 	.word	0x08001571
 800104c:	20000218 	.word	0x20000218

08001050 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001058:	2108      	movs	r1, #8
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <FunctionUltrassom+0x4c>)
 800105c:	f003 fb6c 	bl	8004738 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
	for(;;)
	{
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <FunctionUltrassom+0x4c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <FunctionUltrassom+0x4c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0208 	orr.w	r2, r2, #8
 800106e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f002 f813 	bl	80030a4 <HAL_GPIO_WritePin>
		osDelay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f007 fa46 	bl	8008510 <osDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f002 f809 	bl	80030a4 <HAL_GPIO_WritePin>
		osDelay(200);
 8001092:	20c8      	movs	r0, #200	; 0xc8
 8001094:	f007 fa3c 	bl	8008510 <osDelay>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8001098:	e7e2      	b.n	8001060 <FunctionUltrassom+0x10>
 800109a:	bf00      	nop
 800109c:	20000260 	.word	0x20000260

080010a0 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
	HAL_UART_Receive_IT(&huart1, RX_BUFFER, 100);
 80010a8:	2264      	movs	r2, #100	; 0x64
 80010aa:	4924      	ldr	r1, [pc, #144]	; (800113c <FunctionComunica+0x9c>)
 80010ac:	4824      	ldr	r0, [pc, #144]	; (8001140 <FunctionComunica+0xa0>)
 80010ae:	f005 f98f 	bl	80063d0 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(HC05_EN_GPIO_Port, HC05_EN_Pin, 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b8:	4822      	ldr	r0, [pc, #136]	; (8001144 <FunctionComunica+0xa4>)
 80010ba:	f001 fff3 	bl	80030a4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <FunctionComunica+0xa8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	21c8      	movs	r1, #200	; 0xc8
 80010c4:	4618      	mov	r0, r3
 80010c6:	f007 fac7 	bl	8008658 <osSemaphoreAcquire>
	  int valor3 = (int)RPS_D;
	  int valor4 = (RPS_D-(int)RPS_D)*100;

	  sprintf(cMostrar,"ME: %d.%02d -- MD: %d.%02d \r \n ",valor1,valor2,valor3,valor4);*/

	  int valor1 = (int)fDistancia;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <FunctionComunica+0xac>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d4:	ee17 3a90 	vmov	r3, s15
 80010d8:	60fb      	str	r3, [r7, #12]
	  int valor2 = (fDistancia-(int)fDistancia)*100;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <FunctionComunica+0xac>)
 80010dc:	ed93 7a00 	vldr	s14, [r3]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <FunctionComunica+0xac>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001150 <FunctionComunica+0xb0>
 80010f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fe:	ee17 3a90 	vmov	r3, s15
 8001102:	60bb      	str	r3, [r7, #8]

	  sprintf(cMostrar,"Distancia: %d.%02d \r \n ",valor1,valor2);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4912      	ldr	r1, [pc, #72]	; (8001154 <FunctionComunica+0xb4>)
 800110a:	4813      	ldr	r0, [pc, #76]	; (8001158 <FunctionComunica+0xb8>)
 800110c:	f00a f82a 	bl	800b164 <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 8001110:	2364      	movs	r3, #100	; 0x64
 8001112:	2264      	movs	r2, #100	; 0x64
 8001114:	4910      	ldr	r1, [pc, #64]	; (8001158 <FunctionComunica+0xb8>)
 8001116:	480a      	ldr	r0, [pc, #40]	; (8001140 <FunctionComunica+0xa0>)
 8001118:	f004 fff0 	bl	80060fc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	2264      	movs	r2, #100	; 0x64
 8001120:	490d      	ldr	r1, [pc, #52]	; (8001158 <FunctionComunica+0xb8>)
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <FunctionComunica+0xbc>)
 8001124:	f004 ffea 	bl	80060fc <HAL_UART_Transmit>

	  osSemaphoreRelease(SemaphoreComunicaHandle);
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <FunctionComunica+0xa8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fae5 	bl	80086fc <osSemaphoreRelease>
	  osDelay(100);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f007 f9ec 	bl	8008510 <osDelay>
  {
 8001138:	e7c1      	b.n	80010be <FunctionComunica+0x1e>
 800113a:	bf00      	nop
 800113c:	200001a4 	.word	0x200001a4
 8001140:	2000046c 	.word	0x2000046c
 8001144:	48000400 	.word	0x48000400
 8001148:	20000220 	.word	0x20000220
 800114c:	200000a8 	.word	0x200000a8
 8001150:	42c80000 	.word	0x42c80000
 8001154:	0800d808 	.word	0x0800d808
 8001158:	200000dc 	.word	0x200000dc
 800115c:	200003dc 	.word	0x200003dc

08001160 <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f001 ff80 	bl	8003074 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8001178:	2120      	movs	r1, #32
 800117a:	4870      	ldr	r0, [pc, #448]	; (800133c <FunctionSeguidor+0x1dc>)
 800117c:	f001 ff7a 	bl	8003074 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8001184:	2140      	movs	r1, #64	; 0x40
 8001186:	486d      	ldr	r0, [pc, #436]	; (800133c <FunctionSeguidor+0x1dc>)
 8001188:	f001 ff74 	bl	8003074 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	737b      	strb	r3, [r7, #13]
    //sprintf(cMostrar,"%d -- %d -- %d\r\n",uiS2,uiS3,uiS4);

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8001190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001194:	4869      	ldr	r0, [pc, #420]	; (800133c <FunctionSeguidor+0x1dc>)
 8001196:	f001 ff6d 	bl	8003074 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800119e:	4b68      	ldr	r3, [pc, #416]	; (8001340 <FunctionSeguidor+0x1e0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	21c8      	movs	r1, #200	; 0xc8
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 fa57 	bl	8008658 <osSemaphoreAcquire>

    if(uiBTN){
 80011aa:	7b3b      	ldrb	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d024      	beq.n	80011fa <FunctionSeguidor+0x9a>
    	fVelocidadeRefD = 0;
 80011b0:	4b64      	ldr	r3, [pc, #400]	; (8001344 <FunctionSeguidor+0x1e4>)
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
    	fVelocidadeRefE = 0;
 80011b8:	4b63      	ldr	r3, [pc, #396]	; (8001348 <FunctionSeguidor+0x1e8>)
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
    	uiStart = uiStart?0:1;
 80011c0:	4b62      	ldr	r3, [pc, #392]	; (800134c <FunctionSeguidor+0x1ec>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b5e      	ldr	r3, [pc, #376]	; (800134c <FunctionSeguidor+0x1ec>)
 80011d2:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2104      	movs	r1, #4
 80011d8:	485d      	ldr	r0, [pc, #372]	; (8001350 <FunctionSeguidor+0x1f0>)
 80011da:	f001 ff63 	bl	80030a4 <HAL_GPIO_WritePin>
    	osDelay(500);
 80011de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e2:	f007 f995 	bl	8008510 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2104      	movs	r1, #4
 80011ea:	4859      	ldr	r0, [pc, #356]	; (8001350 <FunctionSeguidor+0x1f0>)
 80011ec:	f001 ff5a 	bl	80030a4 <HAL_GPIO_WritePin>
    	osDelay(500);
 80011f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f4:	f007 f98c 	bl	8008510 <osDelay>
 80011f8:	e097      	b.n	800132a <FunctionSeguidor+0x1ca>
    }else if(uiS2 && !uiS3 && uiS4 && uiStart){
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d012      	beq.n	8001226 <FunctionSeguidor+0xc6>
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10f      	bne.n	8001226 <FunctionSeguidor+0xc6>
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <FunctionSeguidor+0xc6>
 800120c:	4b4f      	ldr	r3, [pc, #316]	; (800134c <FunctionSeguidor+0x1ec>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <FunctionSeguidor+0xc6>
    	fVelocidadeRefD = uiVelocidade;
 8001214:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <FunctionSeguidor+0x1f4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a4a      	ldr	r2, [pc, #296]	; (8001344 <FunctionSeguidor+0x1e4>)
 800121a:	6013      	str	r3, [r2, #0]
    	fVelocidadeRefE = uiVelocidade;
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <FunctionSeguidor+0x1f4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a49      	ldr	r2, [pc, #292]	; (8001348 <FunctionSeguidor+0x1e8>)
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e081      	b.n	800132a <FunctionSeguidor+0x1ca>
    }else if(uiS2 && uiS3 && !uiS4 && uiStart){
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01e      	beq.n	800126a <FunctionSeguidor+0x10a>
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01b      	beq.n	800126a <FunctionSeguidor+0x10a>
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d118      	bne.n	800126a <FunctionSeguidor+0x10a>
 8001238:	4b44      	ldr	r3, [pc, #272]	; (800134c <FunctionSeguidor+0x1ec>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d014      	beq.n	800126a <FunctionSeguidor+0x10a>
    	fVelocidadeRefE = uiVelocidade;
 8001240:	4b44      	ldr	r3, [pc, #272]	; (8001354 <FunctionSeguidor+0x1f4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a40      	ldr	r2, [pc, #256]	; (8001348 <FunctionSeguidor+0x1e8>)
 8001246:	6013      	str	r3, [r2, #0]
    	fVelocidadeRefD = uiVelocidade-(uiVelocidade*fReducao);
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <FunctionSeguidor+0x1f4>)
 800124a:	ed93 7a00 	vldr	s14, [r3]
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <FunctionSeguidor+0x1f4>)
 8001250:	edd3 6a00 	vldr	s13, [r3]
 8001254:	4b40      	ldr	r3, [pc, #256]	; (8001358 <FunctionSeguidor+0x1f8>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800125e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <FunctionSeguidor+0x1e4>)
 8001264:	edc3 7a00 	vstr	s15, [r3]
 8001268:	e05f      	b.n	800132a <FunctionSeguidor+0x1ca>
    }else if(!uiS2 && uiS3 && uiS4 && uiStart){
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d11e      	bne.n	80012ae <FunctionSeguidor+0x14e>
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d01b      	beq.n	80012ae <FunctionSeguidor+0x14e>
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d018      	beq.n	80012ae <FunctionSeguidor+0x14e>
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <FunctionSeguidor+0x1ec>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d014      	beq.n	80012ae <FunctionSeguidor+0x14e>
    	fVelocidadeRefE = uiVelocidade-(uiVelocidade*fReducao);
 8001284:	4b33      	ldr	r3, [pc, #204]	; (8001354 <FunctionSeguidor+0x1f4>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <FunctionSeguidor+0x1f4>)
 800128c:	edd3 6a00 	vldr	s13, [r3]
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <FunctionSeguidor+0x1f8>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <FunctionSeguidor+0x1e8>)
 80012a0:	edc3 7a00 	vstr	s15, [r3]
    	fVelocidadeRefD = uiVelocidade;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <FunctionSeguidor+0x1f4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <FunctionSeguidor+0x1e4>)
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	e03d      	b.n	800132a <FunctionSeguidor+0x1ca>
    }else if(((uiS2 && !uiS3 && uiS4)) && uiStart){
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d012      	beq.n	80012da <FunctionSeguidor+0x17a>
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <FunctionSeguidor+0x17a>
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00c      	beq.n	80012da <FunctionSeguidor+0x17a>
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <FunctionSeguidor+0x1ec>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <FunctionSeguidor+0x17a>
    	fVelocidadeRefD = 0;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <FunctionSeguidor+0x1e4>)
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
    	fVelocidadeRefE = 0;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <FunctionSeguidor+0x1e8>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e027      	b.n	800132a <FunctionSeguidor+0x1ca>
    } else if(!uiS2 && !uiS3 && !uiS4 && uiStart){
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d124      	bne.n	800132a <FunctionSeguidor+0x1ca>
 80012e0:	7bbb      	ldrb	r3, [r7, #14]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d121      	bne.n	800132a <FunctionSeguidor+0x1ca>
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d11e      	bne.n	800132a <FunctionSeguidor+0x1ca>
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <FunctionSeguidor+0x1ec>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01a      	beq.n	800132a <FunctionSeguidor+0x1ca>
    	fVelocidadeRefD = 0;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <FunctionSeguidor+0x1e4>)
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
		fVelocidadeRefE = 0;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <FunctionSeguidor+0x1e8>)
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
		uiStart = 0;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <FunctionSeguidor+0x1ec>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2104      	movs	r1, #4
 800130e:	4810      	ldr	r0, [pc, #64]	; (8001350 <FunctionSeguidor+0x1f0>)
 8001310:	f001 fec8 	bl	80030a4 <HAL_GPIO_WritePin>
    	osDelay(100);
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f007 f8fb 	bl	8008510 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2104      	movs	r1, #4
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <FunctionSeguidor+0x1f0>)
 8001320:	f001 fec0 	bl	80030a4 <HAL_GPIO_WritePin>
    	osDelay(100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f007 f8f3 	bl	8008510 <osDelay>
    }
    osDelay(100);
 800132a:	2064      	movs	r0, #100	; 0x64
 800132c:	f007 f8f0 	bl	8008510 <osDelay>
    osSemaphoreRelease(SemaphoreMovimentaHandle);
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <FunctionSeguidor+0x1e0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f007 f9e1 	bl	80086fc <osSemaphoreRelease>
  {
 800133a:	e715      	b.n	8001168 <FunctionSeguidor+0x8>
 800133c:	48000800 	.word	0x48000800
 8001340:	2000021c 	.word	0x2000021c
 8001344:	200000b4 	.word	0x200000b4
 8001348:	200000b8 	.word	0x200000b8
 800134c:	200000d8 	.word	0x200000d8
 8001350:	48000c00 	.word	0x48000c00
 8001354:	20000004 	.word	0x20000004
 8001358:	20000008 	.word	0x20000008
 800135c:	00000000 	.word	0x00000000

08001360 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001368:	2100      	movs	r1, #0
 800136a:	4871      	ldr	r0, [pc, #452]	; (8001530 <FunctionAtivarMotores+0x1d0>)
 800136c:	f003 f870 	bl	8004450 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001370:	2104      	movs	r1, #4
 8001372:	486f      	ldr	r0, [pc, #444]	; (8001530 <FunctionAtivarMotores+0x1d0>)
 8001374:	f003 f86c 	bl	8004450 <HAL_TIM_PWM_Start>

	sPID_D pid_D;
	sPID_E pid_E;

	pid_D.fKpD = 90;
 8001378:	4b6e      	ldr	r3, [pc, #440]	; (8001534 <FunctionAtivarMotores+0x1d4>)
 800137a:	623b      	str	r3, [r7, #32]
	pid_D.fKiD = 0.0;
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
	pid_D.fKdD = 0.0;
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
	pid_D.fTsD = 1;
 8001388:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
	pid_D.fOutminD = 50;
 800138e:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <FunctionAtivarMotores+0x1d8>)
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
	pid_D.fOutmaxD = 200;
 8001392:	4b6a      	ldr	r3, [pc, #424]	; (800153c <FunctionAtivarMotores+0x1dc>)
 8001394:	637b      	str	r3, [r7, #52]	; 0x34

	pid_E.fKpE = 200;
 8001396:	4b69      	ldr	r3, [pc, #420]	; (800153c <FunctionAtivarMotores+0x1dc>)
 8001398:	60bb      	str	r3, [r7, #8]
	pid_E.fKiE = 0.5;
 800139a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800139e:	60fb      	str	r3, [r7, #12]
	pid_E.fKdE = 0.1;
 80013a0:	4b67      	ldr	r3, [pc, #412]	; (8001540 <FunctionAtivarMotores+0x1e0>)
 80013a2:	613b      	str	r3, [r7, #16]
	pid_E.fTsE = 1000;
 80013a4:	4b67      	ldr	r3, [pc, #412]	; (8001544 <FunctionAtivarMotores+0x1e4>)
 80013a6:	617b      	str	r3, [r7, #20]
	pid_E.fOutminE = 50;
 80013a8:	4b63      	ldr	r3, [pc, #396]	; (8001538 <FunctionAtivarMotores+0x1d8>)
 80013aa:	61bb      	str	r3, [r7, #24]
	pid_E.fOutmaxE = 200;
 80013ac:	4b63      	ldr	r3, [pc, #396]	; (800153c <FunctionAtivarMotores+0x1dc>)
 80013ae:	61fb      	str	r3, [r7, #28]

	PID_init_D(&pid_D);
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fc73 	bl	8001ca0 <PID_init_D>
	PID_init_E(&pid_E);
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fca4 	bl	8001d0c <PID_init_E>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80013c4:	4b60      	ldr	r3, [pc, #384]	; (8001548 <FunctionAtivarMotores+0x1e8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	21c8      	movs	r1, #200	; 0xc8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f007 f944 	bl	8008658 <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f001 fe63 	bl	80030a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f001 fe5c 	bl	80030a4 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	4856      	ldr	r0, [pc, #344]	; (800154c <FunctionAtivarMotores+0x1ec>)
 80013f2:	f001 fe57 	bl	80030a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	4855      	ldr	r0, [pc, #340]	; (8001550 <FunctionAtivarMotores+0x1f0>)
 80013fc:	f001 fe52 	bl	80030a4 <HAL_GPIO_WritePin>

	  RPS_E = ((float)ulPulsePerSecondE/FUROS);
 8001400:	4b54      	ldr	r3, [pc, #336]	; (8001554 <FunctionAtivarMotores+0x1f4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800140c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <FunctionAtivarMotores+0x1f8>)
 8001416:	edc3 7a00 	vstr	s15, [r3]
	  RPS_D = ((float)ulPulsePerSecondD/FUROS);
 800141a:	4b50      	ldr	r3, [pc, #320]	; (800155c <FunctionAtivarMotores+0x1fc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001426:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800142a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <FunctionAtivarMotores+0x200>)
 8001430:	edc3 7a00 	vstr	s15, [r3]

	  //float VE = (((ulPulsePerSecondE*2*3.14)/20)*RAIO);
	  float VD = ((((float)ulPulsePerSecondD*2*3.14)/20)*RAIO);
 8001434:	4b49      	ldr	r3, [pc, #292]	; (800155c <FunctionAtivarMotores+0x1fc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001440:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001444:	ee17 0a90 	vmov	r0, s15
 8001448:	f7ff f89e 	bl	8000588 <__aeabi_f2d>
 800144c:	a334      	add	r3, pc, #208	; (adr r3, 8001520 <FunctionAtivarMotores+0x1c0>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff f8f1 	bl	8000638 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b40      	ldr	r3, [pc, #256]	; (8001564 <FunctionAtivarMotores+0x204>)
 8001464:	f7ff fa12 	bl	800088c <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	a32d      	add	r3, pc, #180	; (adr r3, 8001528 <FunctionAtivarMotores+0x1c8>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f8df 	bl	8000638 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fbb1 	bl	8000be8 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //htim3.Instance->CCR1 = PID_E(RPS_E, fVelocidadeRefE);
	  //htim3.Instance->CCR2 = PID_D(VD, fVelocidadeRefD);

	  float PID_VAL = PID_D(VD, fVelocidadeRefD);
 800148a:	4b37      	ldr	r3, [pc, #220]	; (8001568 <FunctionAtivarMotores+0x208>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	eef0 0a67 	vmov.f32	s1, s15
 8001494:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001498:	f000 fc6e 	bl	8001d78 <PID_D>
 800149c:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

	  int val1 = (int)VD;
 80014a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80014a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a8:	ee17 3a90 	vmov	r3, s15
 80014ac:	647b      	str	r3, [r7, #68]	; 0x44
	  int val2 = (VD-(int)VD)*100;
 80014ae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80014b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80014be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800156c <FunctionAtivarMotores+0x20c>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 3a90 	vmov	r3, s15
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
	  int val3 = (int)PID_VAL;
 80014d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 3a90 	vmov	r3, s15
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	  int val4 = (PID_VAL-(int)PID_VAL)*100;
 80014e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80014f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800156c <FunctionAtivarMotores+0x20c>
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001502:	ee17 3a90 	vmov	r3, s15
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38

	  //sprintf(cMostrar,"RD: %d.%02d, PID: %d.%02d \r\n",val1,val2,val3,val4);

	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <FunctionAtivarMotores+0x1e8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f007 f8f5 	bl	80086fc <osSemaphoreRelease>
	  osDelay(100);
 8001512:	2064      	movs	r0, #100	; 0x64
 8001514:	f006 fffc 	bl	8008510 <osDelay>
  {
 8001518:	e754      	b.n	80013c4 <FunctionAtivarMotores+0x64>
 800151a:	bf00      	nop
 800151c:	f3af 8000 	nop.w
 8001520:	51eb851f 	.word	0x51eb851f
 8001524:	40091eb8 	.word	0x40091eb8
 8001528:	76c8b439 	.word	0x76c8b439
 800152c:	3f6a9fbe 	.word	0x3f6a9fbe
 8001530:	200002f8 	.word	0x200002f8
 8001534:	42b40000 	.word	0x42b40000
 8001538:	42480000 	.word	0x42480000
 800153c:	43480000 	.word	0x43480000
 8001540:	3dcccccd 	.word	0x3dcccccd
 8001544:	447a0000 	.word	0x447a0000
 8001548:	2000021c 	.word	0x2000021c
 800154c:	48000800 	.word	0x48000800
 8001550:	48000400 	.word	0x48000400
 8001554:	200000bc 	.word	0x200000bc
 8001558:	200000ac 	.word	0x200000ac
 800155c:	200000c8 	.word	0x200000c8
 8001560:	200000b0 	.word	0x200000b0
 8001564:	40340000 	.word	0x40340000
 8001568:	200000b4 	.word	0x200000b4
 800156c:	42c80000 	.word	0x42c80000

08001570 <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 8001570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_Base_Start_IT(&htim6);
 800157a:	4871      	ldr	r0, [pc, #452]	; (8001740 <FunctionOdometria+0x1d0>)
 800157c:	f002 fe98 	bl	80042b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8001580:	4870      	ldr	r0, [pc, #448]	; (8001744 <FunctionOdometria+0x1d4>)
 8001582:	f002 fe25 	bl	80041d0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);
 8001586:	4870      	ldr	r0, [pc, #448]	; (8001748 <FunctionOdometria+0x1d8>)
 8001588:	f002 fe22 	bl	80041d0 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  teta = teta + (((fVelocidadeD-fVelocidadeE)/(COMPRIMENTO+LARGURA))*1);
 800158c:	4b6f      	ldr	r3, [pc, #444]	; (800174c <FunctionOdometria+0x1dc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fff9 	bl	8000588 <__aeabi_f2d>
 8001596:	4604      	mov	r4, r0
 8001598:	460d      	mov	r5, r1
 800159a:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <FunctionOdometria+0x1e0>)
 800159c:	ed93 7a00 	vldr	s14, [r3]
 80015a0:	4b6c      	ldr	r3, [pc, #432]	; (8001754 <FunctionOdometria+0x1e4>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ee17 0a90 	vmov	r0, s15
 80015ae:	f7fe ffeb 	bl	8000588 <__aeabi_f2d>
 80015b2:	a35f      	add	r3, pc, #380	; (adr r3, 8001730 <FunctionOdometria+0x1c0>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f968 	bl	800088c <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7fe fe82 	bl	80002cc <__adddf3>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb0a 	bl	8000be8 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a5d      	ldr	r2, [pc, #372]	; (800174c <FunctionOdometria+0x1dc>)
 80015d8:	6013      	str	r3, [r2, #0]

	  fSD = fSD + ((fVelocidadeD+fVelocidadeE)/2)*cos(teta);
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <FunctionOdometria+0x1e8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffd2 	bl	8000588 <__aeabi_f2d>
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
 80015e8:	4b59      	ldr	r3, [pc, #356]	; (8001750 <FunctionOdometria+0x1e0>)
 80015ea:	ed93 7a00 	vldr	s14, [r3]
 80015ee:	4b59      	ldr	r3, [pc, #356]	; (8001754 <FunctionOdometria+0x1e4>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80015fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001600:	ee16 0a90 	vmov	r0, s13
 8001604:	f7fe ffc0 	bl	8000588 <__aeabi_f2d>
 8001608:	4680      	mov	r8, r0
 800160a:	4689      	mov	r9, r1
 800160c:	4b4f      	ldr	r3, [pc, #316]	; (800174c <FunctionOdometria+0x1dc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffb9 	bl	8000588 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ec43 2b10 	vmov	d0, r2, r3
 800161e:	f00a f95b 	bl	800b8d8 <cos>
 8001622:	ec53 2b10 	vmov	r2, r3, d0
 8001626:	4640      	mov	r0, r8
 8001628:	4649      	mov	r1, r9
 800162a:	f7ff f805 	bl	8000638 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fe49 	bl	80002cc <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fad1 	bl	8000be8 <__aeabi_d2f>
 8001646:	4603      	mov	r3, r0
 8001648:	4a43      	ldr	r2, [pc, #268]	; (8001758 <FunctionOdometria+0x1e8>)
 800164a:	6013      	str	r3, [r2, #0]
	  fSE = fSE + ((fVelocidadeD+fVelocidadeE)/2)*sin(teta);
 800164c:	4b43      	ldr	r3, [pc, #268]	; (800175c <FunctionOdometria+0x1ec>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff99 	bl	8000588 <__aeabi_f2d>
 8001656:	4604      	mov	r4, r0
 8001658:	460d      	mov	r5, r1
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <FunctionOdometria+0x1e0>)
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <FunctionOdometria+0x1e4>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800166e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001672:	ee16 0a90 	vmov	r0, s13
 8001676:	f7fe ff87 	bl	8000588 <__aeabi_f2d>
 800167a:	4680      	mov	r8, r0
 800167c:	4689      	mov	r9, r1
 800167e:	4b33      	ldr	r3, [pc, #204]	; (800174c <FunctionOdometria+0x1dc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff80 	bl	8000588 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b10 	vmov	d0, r2, r3
 8001690:	f00a f976 	bl	800b980 <sin>
 8001694:	ec53 2b10 	vmov	r2, r3, d0
 8001698:	4640      	mov	r0, r8
 800169a:	4649      	mov	r1, r9
 800169c:	f7fe ffcc 	bl	8000638 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7fe fe10 	bl	80002cc <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa98 	bl	8000be8 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a28      	ldr	r2, [pc, #160]	; (800175c <FunctionOdometria+0x1ec>)
 80016bc:	6013      	str	r3, [r2, #0]

	  fDistancia = sqrt(pow(fSD,2) + pow(fSE,2));
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <FunctionOdometria+0x1e8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff60 	bl	8000588 <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001738 <FunctionOdometria+0x1c8>
 80016d0:	ec43 2b10 	vmov	d0, r2, r3
 80016d4:	f00a f9ac 	bl	800ba30 <pow>
 80016d8:	ec55 4b10 	vmov	r4, r5, d0
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <FunctionOdometria+0x1ec>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff51 	bl	8000588 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001738 <FunctionOdometria+0x1c8>
 80016ee:	ec43 2b10 	vmov	d0, r2, r3
 80016f2:	f00a f99d 	bl	800ba30 <pow>
 80016f6:	ec53 2b10 	vmov	r2, r3, d0
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7fe fde5 	bl	80002cc <__adddf3>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	ec43 2b17 	vmov	d7, r2, r3
 800170a:	eeb0 0a47 	vmov.f32	s0, s14
 800170e:	eef0 0a67 	vmov.f32	s1, s15
 8001712:	f00a f9fd 	bl	800bb10 <sqrt>
 8001716:	ec53 2b10 	vmov	r2, r3, d0
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa63 	bl	8000be8 <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <FunctionOdometria+0x1f0>)
 8001726:	6013      	str	r3, [r2, #0]
	  osDelay(100);
 8001728:	2064      	movs	r0, #100	; 0x64
 800172a:	f006 fef1 	bl	8008510 <osDelay>
	  teta = teta + (((fVelocidadeD-fVelocidadeE)/(COMPRIMENTO+LARGURA))*1);
 800172e:	e72d      	b.n	800158c <FunctionOdometria+0x1c>
 8001730:	fbe76c8b 	.word	0xfbe76c8b
 8001734:	3fc2f1a9 	.word	0x3fc2f1a9
 8001738:	00000000 	.word	0x00000000
 800173c:	40000000 	.word	0x40000000
 8001740:	20000390 	.word	0x20000390
 8001744:	200002ac 	.word	0x200002ac
 8001748:	20000344 	.word	0x20000344
 800174c:	200000d4 	.word	0x200000d4
 8001750:	200000cc 	.word	0x200000cc
 8001754:	200000c0 	.word	0x200000c0
 8001758:	200000d0 	.word	0x200000d0
 800175c:	200000c4 	.word	0x200000c4
 8001760:	200000a8 	.word	0x200000a8
 8001764:	00000000 	.word	0x00000000

08001768 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){//ultrassonico
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a5d      	ldr	r2, [pc, #372]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001774:	4293      	cmp	r3, r2
 8001776:	f040 80ac 	bne.w	80018d2 <HAL_TIM_IC_CaptureCallback+0x16a>
		if(uiIs_First){
 800177a:	4b5c      	ldr	r3, [pc, #368]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x184>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01b      	beq.n	80017ba <HAL_TIM_IC_CaptureCallback+0x52>
			lValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001782:	2108      	movs	r1, #8
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f003 fd6d 	bl	8005264 <HAL_TIM_ReadCapturedValue>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001790:	601a      	str	r2, [r3, #0]
			uiIs_First=0;
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x184>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80017a6:	621a      	str	r2, [r3, #32]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a1a      	ldr	r2, [r3, #32]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b6:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
		}
	}
}
 80017b8:	e08b      	b.n	80018d2 <HAL_TIM_IC_CaptureCallback+0x16a>
			lValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80017ba:	2108      	movs	r1, #8
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f003 fd51 	bl	8005264 <HAL_TIM_ReadCapturedValue>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80017c8:	601a      	str	r2, [r3, #0]
			uiIs_First=1;
 80017ca:	4b48      	ldr	r3, [pc, #288]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x184>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
			fDiferenca = (float)((unsigned)lValor2-(unsigned)lValor1);
 80017d0:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x190>)
 80017e6:	edc3 7a00 	vstr	s15, [r3]
			fDistancia = ((fDiferenca/2)*0.0001)*340/2 < 100?((fDiferenca/2)*0.0001)*340/2 : fDistancia;
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x190>)
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017f8:	ee16 0a90 	vmov	r0, s13
 80017fc:	f7fe fec4 	bl	8000588 <__aeabi_f2d>
 8001800:	a337      	add	r3, pc, #220	; (adr r3, 80018e0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe ff17 	bl	8000638 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x194>)
 8001818:	f7fe ff0e 	bl	8000638 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182c:	f7ff f82e 	bl	800088c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_TIM_IC_CaptureCallback+0x198>)
 800183e:	f7ff f96d 	bl	8000b1c <__aeabi_dcmplt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d02a      	beq.n	800189e <HAL_TIM_IC_CaptureCallback+0x136>
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_TIM_IC_CaptureCallback+0x190>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001852:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001856:	ee16 0a90 	vmov	r0, s13
 800185a:	f7fe fe95 	bl	8000588 <__aeabi_f2d>
 800185e:	a320      	add	r3, pc, #128	; (adr r3, 80018e0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fee8 	bl	8000638 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_TIM_IC_CaptureCallback+0x194>)
 8001876:	f7fe fedf 	bl	8000638 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188a:	f7fe ffff 	bl	800088c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f9a7 	bl	8000be8 <__aeabi_d2f>
 800189a:	4603      	mov	r3, r0
 800189c:	e001      	b.n	80018a2 <HAL_TIM_IC_CaptureCallback+0x13a>
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x19c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_TIM_IC_CaptureCallback+0x19c>)
 80018a4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a1a      	ldr	r2, [r3, #32]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a12      	ldr	r2, [r2, #32]
 80018c0:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0208 	bic.w	r2, r2, #8
 80018d0:	60da      	str	r2, [r3, #12]
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	f3af 8000 	nop.w
 80018e0:	eb1c432d 	.word	0xeb1c432d
 80018e4:	3f1a36e2 	.word	0x3f1a36e2
 80018e8:	20000260 	.word	0x20000260
 80018ec:	20000000 	.word	0x20000000
 80018f0:	2000009c 	.word	0x2000009c
 80018f4:	200000a0 	.word	0x200000a0
 80018f8:	200000a4 	.word	0x200000a4
 80018fc:	40754000 	.word	0x40754000
 8001900:	40590000 	.word	0x40590000
 8001904:	200000a8 	.word	0x200000a8

08001908 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d15f      	bne.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0xd0>
		ulPulsePerSecondE = __HAL_TIM_GET_COUNTER(&htim2);
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	4a36      	ldr	r2, [pc, #216]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001920:	6013      	str	r3, [r2, #0]
		ulPulsePerSecondD = __HAL_TIM_GET_COUNTER(&htim5);
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	4a35      	ldr	r2, [pc, #212]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800192a:	6013      	str	r3, [r2, #0]

		//sprintf(cMostrar,"RD: %d \r\n",(int)ulPulsePerSecondE);

		fVelocidadeE = ((float)ulPulsePerSecondE/FUROS)*2*3.1415*RAIO;
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001938:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800193c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001940:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001944:	ee17 0a90 	vmov	r0, s15
 8001948:	f7fe fe1e 	bl	8000588 <__aeabi_f2d>
 800194c:	a324      	add	r3, pc, #144	; (adr r3, 80019e0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fe71 	bl	8000638 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	a322      	add	r3, pc, #136	; (adr r3, 80019e8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fe68 	bl	8000638 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f93a 	bl	8000be8 <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001978:	6013      	str	r3, [r2, #0]
		fVelocidadeD = ((float)ulPulsePerSecondD/FUROS)*2*3.1415*RAIO;
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001986:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800198a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001992:	ee17 0a90 	vmov	r0, s15
 8001996:	f7fe fdf7 	bl	8000588 <__aeabi_f2d>
 800199a:	a311      	add	r3, pc, #68	; (adr r3, 80019e0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fe4a 	bl	8000638 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	a30e      	add	r3, pc, #56	; (adr r3, 80019e8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fe41 	bl	8000638 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f913 	bl	8000be8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019c6:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SET_COUNTER(&htim2,0);
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim5,0);
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	c083126f 	.word	0xc083126f
 80019e4:	400921ca 	.word	0x400921ca
 80019e8:	76c8b439 	.word	0x76c8b439
 80019ec:	3f6a9fbe 	.word	0x3f6a9fbe
 80019f0:	20000390 	.word	0x20000390
 80019f4:	200002ac 	.word	0x200002ac
 80019f8:	200000bc 	.word	0x200000bc
 80019fc:	20000344 	.word	0x20000344
 8001a00:	200000c8 	.word	0x200000c8
 8001a04:	200000c0 	.word	0x200000c0
 8001a08:	200000cc 	.word	0x200000cc

08001a0c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_UART_RxCpltCallback+0x40>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d113      	bne.n	8001a44 <HAL_UART_RxCpltCallback+0x38>
  {
	  HAL_UART_Receive(&huart1, (uint8_t *)cData, 100, 100);
 8001a1c:	2364      	movs	r3, #100	; 0x64
 8001a1e:	2264      	movs	r2, #100	; 0x64
 8001a20:	490b      	ldr	r1, [pc, #44]	; (8001a50 <HAL_UART_RxCpltCallback+0x44>)
 8001a22:	480a      	ldr	r0, [pc, #40]	; (8001a4c <HAL_UART_RxCpltCallback+0x40>)
 8001a24:	f004 fc00 	bl	8006228 <HAL_UART_Receive>
	  HAL_GPIO_WritePin(HC05_STATE_GPIO_Port, HC05_STATE_Pin, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <HAL_UART_RxCpltCallback+0x48>)
 8001a2e:	f001 fb39 	bl	80030a4 <HAL_GPIO_WritePin>
	  osDelay(500);
 8001a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a36:	f006 fd6b 	bl	8008510 <osDelay>
	  HAL_GPIO_WritePin(HC05_STATE_GPIO_Port, HC05_STATE_Pin, 1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_UART_RxCpltCallback+0x48>)
 8001a40:	f001 fb30 	bl	80030a4 <HAL_GPIO_WritePin>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000046c 	.word	0x2000046c
 8001a50:	20000140 	.word	0x20000140
 8001a54:	48000400 	.word	0x48000400

08001a58 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a43      	ldr	r2, [pc, #268]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a3d      	ldr	r2, [pc, #244]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <MX_GPIO_Init+0x158>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f248 3120 	movw	r1, #33568	; 0x8320
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad8:	f001 fae4 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	4834      	ldr	r0, [pc, #208]	; (8001bb4 <MX_GPIO_Init+0x15c>)
 8001ae2:	f001 fadf 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2104      	movs	r1, #4
 8001aea:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <MX_GPIO_Init+0x160>)
 8001aec:	f001 fada 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001af6:	4831      	ldr	r0, [pc, #196]	; (8001bbc <MX_GPIO_Init+0x164>)
 8001af8:	f001 fad4 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|GPIO_PIN_8
 8001afc:	f242 3360 	movw	r3, #9056	; 0x2360
 8001b00:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4828      	ldr	r0, [pc, #160]	; (8001bb4 <MX_GPIO_Init+0x15c>)
 8001b12:	f001 f92d 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin;
 8001b16:	f248 3320 	movw	r3, #33568	; 0x8320
 8001b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b32:	f001 f91d 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4819      	ldr	r0, [pc, #100]	; (8001bb4 <MX_GPIO_Init+0x15c>)
 8001b4e:	f001 f90f 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6a:	f001 f901 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <MX_GPIO_Init+0x160>)
 8001b86:	f001 f8f3 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin;
 8001b8a:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8001b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_GPIO_Init+0x164>)
 8001ba4:	f001 f8e4 	bl	8002d70 <HAL_GPIO_Init>

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	48000c00 	.word	0x48000c00
 8001bbc:	48000400 	.word	0x48000400

08001bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc4:	f000 fe93 	bl	80028ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc8:	f000 f817 	bl	8001bfa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bcc:	f7ff ff44 	bl	8001a58 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001bd0:	f000 fa10 	bl	8001ff4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bd4:	f000 fa84 	bl	80020e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bd8:	f000 fad6 	bl	8002188 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001bdc:	f000 fb8c 	bl	80022f8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001be0:	f000 fd2e 	bl	8002640 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8001be4:	f000 fce2 	bl	80025ac <MX_LPUART1_UART_Init>
  MX_TIM5_Init();
 8001be8:	f000 fb32 	bl	8002250 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001bec:	f006 fbb4 	bl	8008358 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001bf0:	f7ff f9cc 	bl	8000f8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bf4:	f006 fbd4 	bl	80083a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <main+0x38>

08001bfa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b094      	sub	sp, #80	; 0x50
 8001bfe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c00:	f107 0318 	add.w	r3, r7, #24
 8001c04:	2238      	movs	r2, #56	; 0x38
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f009 f995 	bl	800af38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c20:	f001 fa58 	bl	80030d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c2e:	2340      	movs	r3, #64	; 0x40
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c32:	2302      	movs	r3, #2
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c36:	2302      	movs	r3, #2
 8001c38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001c3e:	2319      	movs	r3, #25
 8001c40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c42:	2302      	movs	r3, #2
 8001c44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fae2 	bl	800321c <HAL_RCC_OscConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001c5e:	f000 f819 	bl	8001c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c62:	230f      	movs	r3, #15
 8001c64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c66:	2303      	movs	r3, #3
 8001c68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c6e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fde5 	bl	800384c <HAL_RCC_ClockConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c88:	f000 f804 	bl	8001c94 <Error_Handler>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3750      	adds	r7, #80	; 0x50
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <Error_Handler+0x8>
	...

08001ca0 <PID_init_D>:
float fKpD, fKiD, fKdD, fTsD, fOutminD, fOutmaxD;

float fErrorP_E, fErrorI_E, fErrorD_E;
float fErrorP_D,fErrorI_D,fErrorD_D;

void PID_init_D(sPID_D *par) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	fKpD = par->fKpD;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <PID_init_D+0x50>)
 8001cae:	6013      	str	r3, [r2, #0]
	fKiD = par->fKiD;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <PID_init_D+0x54>)
 8001cb6:	6013      	str	r3, [r2, #0]
	fKdD = par->fKdD;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <PID_init_D+0x58>)
 8001cbe:	6013      	str	r3, [r2, #0]
	fTsD = (par->fTsD) / 1000;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cc6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001cfc <PID_init_D+0x5c>
 8001cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <PID_init_D+0x60>)
 8001cd0:	edc3 7a00 	vstr	s15, [r3]
	fOutminD = par->fOutminD;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <PID_init_D+0x64>)
 8001cda:	6013      	str	r3, [r2, #0]
	fOutmaxD = par->fOutmaxD;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <PID_init_D+0x68>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	2000023c 	.word	0x2000023c
 8001cf4:	20000240 	.word	0x20000240
 8001cf8:	20000244 	.word	0x20000244
 8001cfc:	447a0000 	.word	0x447a0000
 8001d00:	20000248 	.word	0x20000248
 8001d04:	2000024c 	.word	0x2000024c
 8001d08:	20000250 	.word	0x20000250

08001d0c <PID_init_E>:
void PID_init_E(sPID_E *par) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	fKpE = par->fKpE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <PID_init_E+0x50>)
 8001d1a:	6013      	str	r3, [r2, #0]
	fKiE = par->fKiE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <PID_init_E+0x54>)
 8001d22:	6013      	str	r3, [r2, #0]
	fKdE = par->fKdE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <PID_init_E+0x58>)
 8001d2a:	6013      	str	r3, [r2, #0]
	fTsE = (par->fTsE) / 1000;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d32:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001d68 <PID_init_E+0x5c>
 8001d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <PID_init_E+0x60>)
 8001d3c:	edc3 7a00 	vstr	s15, [r3]
	fOutminE = par->fOutminE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <PID_init_E+0x64>)
 8001d46:	6013      	str	r3, [r2, #0]
	fOutmaxE = par->fOutmaxE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <PID_init_E+0x68>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	20000224 	.word	0x20000224
 8001d60:	20000228 	.word	0x20000228
 8001d64:	2000022c 	.word	0x2000022c
 8001d68:	447a0000 	.word	0x447a0000
 8001d6c:	20000230 	.word	0x20000230
 8001d70:	20000234 	.word	0x20000234
 8001d74:	20000238 	.word	0x20000238

08001d78 <PID_D>:
	if (fOut < fOutminE) {
		fOut = fOutminE;
	}
	return fOut;
}
float PID_D(float input, float set_point) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d82:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_D;

	fErrorP_D = (set_point - input);
 8001d86:	ed97 7a00 	vldr	s14, [r7]
 8001d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d92:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpD * fErrorP_D;
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <PID_D+0xf8>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da4:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_D += fErrorP_D * fTsD;
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <PID_D+0xfc>)
 8001daa:	ed93 7a00 	vldr	s14, [r3]
 8001dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <PID_D+0x100>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <PID_D+0x100>)
 8001dc2:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiD * fErrorI_D;
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <PID_D+0x104>)
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <PID_D+0x100>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_D = (fErrorP_D-fErrorD_D)/fTsD;
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <PID_D+0x108>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001de4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <PID_D+0xfc>)
 8001dea:	ed93 7a00 	vldr	s14, [r3]
 8001dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <PID_D+0x108>)
 8001df4:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdD * fErrorD_D;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <PID_D+0x10c>)
 8001dfa:	ed93 7a00 	vldr	s14, [r3]
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <PID_D+0x108>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e08:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 8001e0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e20:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxD) {
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <PID_D+0x110>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	dd03      	ble.n	8001e40 <PID_D+0xc8>
		fOut = fOutmaxD;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <PID_D+0x110>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e00c      	b.n	8001e5a <PID_D+0xe2>
	}else if (fOut < fOutminD) {
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <PID_D+0x114>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	d502      	bpl.n	8001e5a <PID_D+0xe2>
		fOut = fOutminD;
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <PID_D+0x114>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	ee07 3a90 	vmov	s15, r3
}
 8001e60:	eeb0 0a67 	vmov.f32	s0, s15
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	2000023c 	.word	0x2000023c
 8001e74:	20000248 	.word	0x20000248
 8001e78:	20000254 	.word	0x20000254
 8001e7c:	20000240 	.word	0x20000240
 8001e80:	20000258 	.word	0x20000258
 8001e84:	20000244 	.word	0x20000244
 8001e88:	20000250 	.word	0x20000250
 8001e8c:	2000024c 	.word	0x2000024c

08001e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_MspInit+0x4c>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_MspInit+0x4c>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_MspInit+0x4c>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_MspInit+0x4c>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_MspInit+0x4c>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_MspInit+0x4c>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	210f      	movs	r1, #15
 8001eca:	f06f 0001 	mvn.w	r0, #1
 8001ece:	f000 fe5a 	bl	8002b86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000

08001ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <NMI_Handler+0x4>

08001ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <UsageFault_Handler+0x4>

08001efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f10:	f000 fd40 	bl	8002994 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f14:	f008 f85e 	bl	8009fd4 <xTaskGetSchedulerState>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f1e:	f008 fdeb 	bl	800aaf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <TIM1_CC_IRQHandler+0x10>)
 8001f2e:	f002 fd53 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000260 	.word	0x20000260

08001f3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <USART1_IRQHandler+0x10>)
 8001f42:	f004 fa9b 	bl	800647c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000046c 	.word	0x2000046c

08001f50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM6_DAC_IRQHandler+0x10>)
 8001f56:	f002 fd3f 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000390 	.word	0x20000390

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f008 ff96 	bl	800aec4 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20020000 	.word	0x20020000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	2000025c 	.word	0x2000025c
 8001fcc:	20002718 	.word	0x20002718

08001fd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <SystemInit+0x20>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <SystemInit+0x20>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <MX_TIM1_Init+0xe4>)
 8002022:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <MX_TIM1_Init+0xe8>)
 8002024:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8002026:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <MX_TIM1_Init+0xe4>)
 8002028:	2231      	movs	r2, #49	; 0x31
 800202a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <MX_TIM1_Init+0xe4>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <MX_TIM1_Init+0xe4>)
 8002034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002038:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <MX_TIM1_Init+0xe4>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <MX_TIM1_Init+0xe4>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <MX_TIM1_Init+0xe4>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800204c:	4822      	ldr	r0, [pc, #136]	; (80020d8 <MX_TIM1_Init+0xe4>)
 800204e:	f002 f867 	bl	8004120 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002058:	f7ff fe1c 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002060:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002062:	f107 0320 	add.w	r3, r7, #32
 8002066:	4619      	mov	r1, r3
 8002068:	481b      	ldr	r0, [pc, #108]	; (80020d8 <MX_TIM1_Init+0xe4>)
 800206a:	f002 ffe5 	bl	8005038 <HAL_TIM_ConfigClockSource>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002074:	f7ff fe0e 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002078:	4817      	ldr	r0, [pc, #92]	; (80020d8 <MX_TIM1_Init+0xe4>)
 800207a:	f002 fafb 	bl	8004674 <HAL_TIM_IC_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002084:	f7ff fe06 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <MX_TIM1_Init+0xe4>)
 800209c:	f003 ff02 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80020a6:	f7ff fdf5 	bl	8001c94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020ae:	2301      	movs	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2208      	movs	r2, #8
 80020be:	4619      	mov	r1, r3
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_TIM1_Init+0xe4>)
 80020c2:	f002 fe08 	bl	8004cd6 <HAL_TIM_IC_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80020cc:	f7ff fde2 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020d0:	bf00      	nop
 80020d2:	3730      	adds	r7, #48	; 0x30
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000260 	.word	0x20000260
 80020dc:	40012c00 	.word	0x40012c00

080020e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020fe:	4b21      	ldr	r3, [pc, #132]	; (8002184 <MX_TIM2_Init+0xa4>)
 8002100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002104:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002106:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <MX_TIM2_Init+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <MX_TIM2_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <MX_TIM2_Init+0xa4>)
 8002114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002118:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_TIM2_Init+0xa4>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_TIM2_Init+0xa4>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002126:	4817      	ldr	r0, [pc, #92]	; (8002184 <MX_TIM2_Init+0xa4>)
 8002128:	f001 fffa 	bl	8004120 <HAL_TIM_Base_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002132:	f7ff fdaf 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213a:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	480d      	ldr	r0, [pc, #52]	; (8002184 <MX_TIM2_Init+0xa4>)
 8002150:	f002 ff72 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800215a:	f7ff fd9b 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4806      	ldr	r0, [pc, #24]	; (8002184 <MX_TIM2_Init+0xa4>)
 800216c:	f003 fe9a 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002176:	f7ff fd8d 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200002ac 	.word	0x200002ac

08002188 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ac:	4b26      	ldr	r3, [pc, #152]	; (8002248 <MX_TIM3_Init+0xc0>)
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <MX_TIM3_Init+0xc4>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 80021b2:	4b25      	ldr	r3, [pc, #148]	; (8002248 <MX_TIM3_Init+0xc0>)
 80021b4:	2231      	movs	r2, #49	; 0x31
 80021b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <MX_TIM3_Init+0xc0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <MX_TIM3_Init+0xc0>)
 80021c0:	2263      	movs	r2, #99	; 0x63
 80021c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <MX_TIM3_Init+0xc0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <MX_TIM3_Init+0xc0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021d0:	481d      	ldr	r0, [pc, #116]	; (8002248 <MX_TIM3_Init+0xc0>)
 80021d2:	f002 f8e5 	bl	80043a0 <HAL_TIM_PWM_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021dc:	f7ff fd5a 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4816      	ldr	r0, [pc, #88]	; (8002248 <MX_TIM3_Init+0xc0>)
 80021f0:	f003 fe58 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021fa:	f7ff fd4b 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fe:	2360      	movs	r3, #96	; 0x60
 8002200:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <MX_TIM3_Init+0xc0>)
 8002216:	f002 fdfb 	bl	8004e10 <HAL_TIM_PWM_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002220:	f7ff fd38 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	2204      	movs	r2, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4807      	ldr	r0, [pc, #28]	; (8002248 <MX_TIM3_Init+0xc0>)
 800222c:	f002 fdf0 	bl	8004e10 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002236:	f7ff fd2d 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800223a:	4803      	ldr	r0, [pc, #12]	; (8002248 <MX_TIM3_Init+0xc0>)
 800223c:	f000 f97e 	bl	800253c <HAL_TIM_MspPostInit>

}
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200002f8 	.word	0x200002f8
 800224c:	40000400 	.word	0x40000400

08002250 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <MX_TIM5_Init+0xa0>)
 8002270:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <MX_TIM5_Init+0xa4>)
 8002272:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <MX_TIM5_Init+0xa0>)
 8002276:	2200      	movs	r2, #0
 8002278:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <MX_TIM5_Init+0xa0>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <MX_TIM5_Init+0xa0>)
 8002282:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002286:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <MX_TIM5_Init+0xa0>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <MX_TIM5_Init+0xa0>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002294:	4816      	ldr	r0, [pc, #88]	; (80022f0 <MX_TIM5_Init+0xa0>)
 8002296:	f001 ff43 	bl	8004120 <HAL_TIM_Base_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80022a0:	f7ff fcf8 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80022a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a8:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <MX_TIM5_Init+0xa0>)
 80022be:	f002 febb 	bl	8005038 <HAL_TIM_ConfigClockSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80022c8:	f7ff fce4 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_TIM5_Init+0xa0>)
 80022da:	f003 fde3 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80022e4:	f7ff fcd6 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000344 	.word	0x20000344
 80022f4:	40000c00 	.word	0x40000c00

080022f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <MX_TIM6_Init+0x68>)
 800230a:	4a16      	ldr	r2, [pc, #88]	; (8002364 <MX_TIM6_Init+0x6c>)
 800230c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50000-1;
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <MX_TIM6_Init+0x68>)
 8002310:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002314:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <MX_TIM6_Init+0x68>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <MX_TIM6_Init+0x68>)
 800231e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002322:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_TIM6_Init+0x68>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800232a:	480d      	ldr	r0, [pc, #52]	; (8002360 <MX_TIM6_Init+0x68>)
 800232c:	f001 fef8 	bl	8004120 <HAL_TIM_Base_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002336:	f7ff fcad 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_TIM6_Init+0x68>)
 8002348:	f003 fdac 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002352:	f7ff fc9f 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000390 	.word	0x20000390
 8002364:	40001000 	.word	0x40001000

08002368 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	; 0x38
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a57      	ldr	r2, [pc, #348]	; (80024e4 <HAL_TIM_Base_MspInit+0x17c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d130      	bne.n	80023ec <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	4a56      	ldr	r2, [pc, #344]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 8002390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002394:	6613      	str	r3, [r2, #96]	; 0x60
 8002396:	4b54      	ldr	r3, [pc, #336]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	4b51      	ldr	r3, [pc, #324]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	4a50      	ldr	r2, [pc, #320]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ae:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 80023ba:	2304      	movs	r3, #4
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80023ca:	2302      	movs	r3, #2
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	4619      	mov	r1, r3
 80023d4:	4845      	ldr	r0, [pc, #276]	; (80024ec <HAL_TIM_Base_MspInit+0x184>)
 80023d6:	f000 fccb 	bl	8002d70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2105      	movs	r1, #5
 80023de:	201b      	movs	r0, #27
 80023e0:	f000 fbd1 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023e4:	201b      	movs	r0, #27
 80023e6:	f000 fbe8 	bl	8002bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80023ea:	e076      	b.n	80024da <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f4:	d129      	bne.n	800244a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f6:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	4a3b      	ldr	r2, [pc, #236]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6593      	str	r3, [r2, #88]	; 0x58
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	4a35      	ldr	r2, [pc, #212]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 8002426:	2301      	movs	r3, #1
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8002436:	230e      	movs	r3, #14
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002444:	f000 fc94 	bl	8002d70 <HAL_GPIO_Init>
}
 8002448:	e047      	b.n	80024da <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM5)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <HAL_TIM_Base_MspInit+0x188>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d129      	bne.n	80024a8 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	6593      	str	r3, [r2, #88]	; 0x58
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_D_Pin;
 8002484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002496:	2302      	movs	r3, #2
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	4619      	mov	r1, r3
 80024a0:	4814      	ldr	r0, [pc, #80]	; (80024f4 <HAL_TIM_Base_MspInit+0x18c>)
 80024a2:	f000 fc65 	bl	8002d70 <HAL_GPIO_Init>
}
 80024a6:	e018      	b.n	80024da <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM6)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <HAL_TIM_Base_MspInit+0x190>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d113      	bne.n	80024da <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 80024b8:	f043 0310 	orr.w	r3, r3, #16
 80024bc:	6593      	str	r3, [r2, #88]	; 0x58
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_TIM_Base_MspInit+0x180>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2105      	movs	r1, #5
 80024ce:	2036      	movs	r0, #54	; 0x36
 80024d0:	f000 fb59 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024d4:	2036      	movs	r0, #54	; 0x36
 80024d6:	f000 fb70 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3738      	adds	r7, #56	; 0x38
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40021000 	.word	0x40021000
 80024ec:	48000800 	.word	0x48000800
 80024f0:	40000c00 	.word	0x40000c00
 80024f4:	48000400 	.word	0x48000400
 80024f8:	40001000 	.word	0x40001000

080024fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <HAL_TIM_PWM_MspInit+0x38>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10b      	bne.n	8002526 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_TIM_PWM_MspInit+0x3c>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_TIM_PWM_MspInit+0x3c>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	6593      	str	r3, [r2, #88]	; 0x58
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_TIM_PWM_MspInit+0x3c>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40000400 	.word	0x40000400
 8002538:	40021000 	.word	0x40021000

0800253c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <HAL_TIM_MspPostInit+0x64>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d11b      	bne.n	8002596 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_TIM_MspPostInit+0x68>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_TIM_MspPostInit+0x68>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_TIM_MspPostInit+0x68>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_2_Pin;
 8002576:	2330      	movs	r3, #48	; 0x30
 8002578:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002586:	2302      	movs	r3, #2
 8002588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	4619      	mov	r1, r3
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <HAL_TIM_MspPostInit+0x6c>)
 8002592:	f000 fbed 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002596:	bf00      	nop
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40021000 	.word	0x40021000
 80025a8:	48000400 	.word	0x48000400

080025ac <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025b2:	4a22      	ldr	r2, [pc, #136]	; (800263c <MX_LPUART1_UART_Init+0x90>)
 80025b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80025ee:	4812      	ldr	r0, [pc, #72]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 80025f0:	f003 fd34 	bl	800605c <HAL_UART_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80025fa:	f7ff fb4b 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025fe:	2100      	movs	r1, #0
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 8002602:	f005 fdaa 	bl	800815a <HAL_UARTEx_SetTxFifoThreshold>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800260c:	f7ff fb42 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002610:	2100      	movs	r1, #0
 8002612:	4809      	ldr	r0, [pc, #36]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 8002614:	f005 fddf 	bl	80081d6 <HAL_UARTEx_SetRxFifoThreshold>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800261e:	f7ff fb39 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_LPUART1_UART_Init+0x8c>)
 8002624:	f005 fd60 	bl	80080e8 <HAL_UARTEx_DisableFifoMode>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800262e:	f7ff fb31 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200003dc 	.word	0x200003dc
 800263c:	40008000 	.word	0x40008000

08002640 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 8002646:	4a23      	ldr	r2, [pc, #140]	; (80026d4 <MX_USART1_UART_Init+0x94>)
 8002648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 800264c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 800268a:	f003 fce7 	bl	800605c <HAL_UART_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002694:	f7ff fafe 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002698:	2100      	movs	r1, #0
 800269a:	480d      	ldr	r0, [pc, #52]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 800269c:	f005 fd5d 	bl	800815a <HAL_UARTEx_SetTxFifoThreshold>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026a6:	f7ff faf5 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026aa:	2100      	movs	r1, #0
 80026ac:	4808      	ldr	r0, [pc, #32]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 80026ae:	f005 fd92 	bl	80081d6 <HAL_UARTEx_SetRxFifoThreshold>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026b8:	f7ff faec 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026bc:	4804      	ldr	r0, [pc, #16]	; (80026d0 <MX_USART1_UART_Init+0x90>)
 80026be:	f005 fd13 	bl	80080e8 <HAL_UARTEx_DisableFifoMode>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026c8:	f7ff fae4 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000046c 	.word	0x2000046c
 80026d4:	40013800 	.word	0x40013800

080026d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0a2      	sub	sp, #136	; 0x88
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	2254      	movs	r2, #84	; 0x54
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f008 fc1d 	bl	800af38 <memset>
  if(uartHandle->Instance==LPUART1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a62      	ldr	r2, [pc, #392]	; (800288c <HAL_UART_MspInit+0x1b4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d157      	bne.n	80027b8 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002708:	2320      	movs	r3, #32
 800270a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800270c:	2300      	movs	r3, #0
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002710:	f107 0320 	add.w	r3, r7, #32
 8002714:	4618      	mov	r0, r3
 8002716:	f001 fab5 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002720:	f7ff fab8 	bl	8001c94 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002724:	4b5a      	ldr	r3, [pc, #360]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	4a59      	ldr	r2, [pc, #356]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002730:	4b57      	ldr	r3, [pc, #348]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	4b54      	ldr	r3, [pc, #336]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	4a53      	ldr	r2, [pc, #332]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002748:	4b51      	ldr	r3, [pc, #324]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 800274a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4b4e      	ldr	r3, [pc, #312]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	4a4d      	ldr	r2, [pc, #308]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002760:	4b4b      	ldr	r3, [pc, #300]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800276c:	2301      	movs	r3, #1
 800276e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800277e:	2308      	movs	r3, #8
 8002780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002784:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002788:	4619      	mov	r1, r3
 800278a:	4842      	ldr	r0, [pc, #264]	; (8002894 <HAL_UART_MspInit+0x1bc>)
 800278c:	f000 faf0 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002790:	2304      	movs	r3, #4
 8002792:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80027a2:	230c      	movs	r3, #12
 80027a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b2:	f000 fadd 	bl	8002d70 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027b6:	e064      	b.n	8002882 <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a36      	ldr	r2, [pc, #216]	; (8002898 <HAL_UART_MspInit+0x1c0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d15f      	bne.n	8002882 <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ca:	f107 0320 	add.w	r3, r7, #32
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 fa58 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_UART_MspInit+0x106>
      Error_Handler();
 80027da:	f7ff fa5b 	bl	8001c94 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 80027e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e2:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e8:	6613      	str	r3, [r2, #96]	; 0x60
 80027ea:	4b29      	ldr	r3, [pc, #164]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_UART_MspInit+0x1b8>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 8002826:	2310      	movs	r3, #16
 8002828:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002838:	2307      	movs	r3, #7
 800283a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002842:	4619      	mov	r1, r3
 8002844:	4813      	ldr	r0, [pc, #76]	; (8002894 <HAL_UART_MspInit+0x1bc>)
 8002846:	f000 fa93 	bl	8002d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_RX_Pin;
 800284a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800284e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800285e:	2307      	movs	r3, #7
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8002864:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002868:	4619      	mov	r1, r3
 800286a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800286e:	f000 fa7f 	bl	8002d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2105      	movs	r1, #5
 8002876:	2025      	movs	r0, #37	; 0x25
 8002878:	f000 f985 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800287c:	2025      	movs	r0, #37	; 0x25
 800287e:	f000 f99c 	bl	8002bba <HAL_NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3788      	adds	r7, #136	; 0x88
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40008000 	.word	0x40008000
 8002890:	40021000 	.word	0x40021000
 8002894:	48000800 	.word	0x48000800
 8002898:	40013800 	.word	0x40013800

0800289c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800289c:	480d      	ldr	r0, [pc, #52]	; (80028d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800289e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80028a2:	490e      	ldr	r1, [pc, #56]	; (80028dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <LoopForever+0xe>)
  movs r3, #0
 80028a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028a8:	e002      	b.n	80028b0 <LoopCopyDataInit>

080028aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ae:	3304      	adds	r3, #4

080028b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b4:	d3f9      	bcc.n	80028aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028b8:	4c0b      	ldr	r4, [pc, #44]	; (80028e8 <LoopForever+0x16>)
  movs r3, #0
 80028ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028bc:	e001      	b.n	80028c2 <LoopFillZerobss>

080028be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c0:	3204      	adds	r2, #4

080028c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c4:	d3fb      	bcc.n	80028be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028c6:	f7ff fb83 	bl	8001fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ca:	f008 fb01 	bl	800aed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ce:	f7ff f977 	bl	8001bc0 <main>

080028d2 <LoopForever>:

LoopForever:
    b LoopForever
 80028d2:	e7fe      	b.n	80028d2 <LoopForever>
  ldr   r0, =_estack
 80028d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80028e0:	0800dbf8 	.word	0x0800dbf8
  ldr r2, =_sbss
 80028e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80028e8:	20002718 	.word	0x20002718

080028ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028ec:	e7fe      	b.n	80028ec <ADC1_2_IRQHandler>

080028ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f8:	2003      	movs	r0, #3
 80028fa:	f000 f939 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028fe:	200f      	movs	r0, #15
 8002900:	f000 f80e 	bl	8002920 <HAL_InitTick>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	e001      	b.n	8002914 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002910:	f7ff fabe 	bl	8001e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002914:	79fb      	ldrb	r3, [r7, #7]

}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_InitTick+0x68>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d022      	beq.n	800297a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_InitTick+0x6c>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_InitTick+0x68>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002940:	fbb1 f3f3 	udiv	r3, r1, r3
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f944 	bl	8002bd6 <HAL_SYSTICK_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10f      	bne.n	8002974 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	d809      	bhi.n	800296e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800295a:	2200      	movs	r2, #0
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	f04f 30ff 	mov.w	r0, #4294967295
 8002962:	f000 f910 	bl	8002b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_InitTick+0x70>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e007      	b.n	800297e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e004      	b.n	800297e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e001      	b.n	800297e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000014 	.word	0x20000014
 800298c:	2000000c 	.word	0x2000000c
 8002990:	20000010 	.word	0x20000010

08002994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_IncTick+0x1c>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_IncTick+0x20>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_IncTick+0x1c>)
 80029a4:	6013      	str	r3, [r2, #0]
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	200004fc 	.word	0x200004fc
 80029b4:	20000014 	.word	0x20000014

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_GetTick+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	200004fc 	.word	0x200004fc

080029d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a02:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	60d3      	str	r3, [r2, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <__NVIC_GetPriorityGrouping+0x18>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 0307 	and.w	r3, r3, #7
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0b      	blt.n	8002a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <__NVIC_EnableIRQ+0x38>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	; (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
         );
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3c:	d301      	bcc.n	8002b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00f      	b.n	8002b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <SysTick_Config+0x40>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4a:	210f      	movs	r1, #15
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f7ff ff8e 	bl	8002a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <SysTick_Config+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <SysTick_Config+0x40>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff29 	bl	80029d0 <__NVIC_SetPriorityGrouping>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b94:	f7ff ff40 	bl	8002a18 <__NVIC_GetPriorityGrouping>
 8002b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff90 	bl	8002ac4 <NVIC_EncodePriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff5f 	bl	8002a70 <__NVIC_SetPriority>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff33 	bl	8002a34 <__NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ffa4 	bl	8002b2c <SysTick_Config>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d005      	beq.n	8002c12 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e037      	b.n	8002c82 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 020e 	bic.w	r2, r2, #14
 8002c20:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c30:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f003 021f 	and.w	r2, r3, #31
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c5e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00c      	beq.n	8002c82 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c76:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c80:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e047      	b.n	8002d64 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 020e 	bic.w	r2, r2, #14
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00c      	beq.n	8002d44 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
    }
  }
  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d7e:	e15a      	b.n	8003036 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 814c 	beq.w	8003030 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d005      	beq.n	8002db0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d130      	bne.n	8002e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2203      	movs	r2, #3
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002de6:	2201      	movs	r2, #1
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f003 0201 	and.w	r2, r3, #1
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d017      	beq.n	8002e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d123      	bne.n	8002ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	08da      	lsrs	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3208      	adds	r2, #8
 8002e9c:	6939      	ldr	r1, [r7, #16]
 8002e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0203 	and.w	r2, r3, #3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80a6 	beq.w	8003030 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee4:	4b5b      	ldr	r3, [pc, #364]	; (8003054 <HAL_GPIO_Init+0x2e4>)
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	4a5a      	ldr	r2, [pc, #360]	; (8003054 <HAL_GPIO_Init+0x2e4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6613      	str	r3, [r2, #96]	; 0x60
 8002ef0:	4b58      	ldr	r3, [pc, #352]	; (8003054 <HAL_GPIO_Init+0x2e4>)
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002efc:	4a56      	ldr	r2, [pc, #344]	; (8003058 <HAL_GPIO_Init+0x2e8>)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	3302      	adds	r3, #2
 8002f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	220f      	movs	r2, #15
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f26:	d01f      	beq.n	8002f68 <HAL_GPIO_Init+0x1f8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a4c      	ldr	r2, [pc, #304]	; (800305c <HAL_GPIO_Init+0x2ec>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d019      	beq.n	8002f64 <HAL_GPIO_Init+0x1f4>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a4b      	ldr	r2, [pc, #300]	; (8003060 <HAL_GPIO_Init+0x2f0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_GPIO_Init+0x1f0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <HAL_GPIO_Init+0x2f4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00d      	beq.n	8002f5c <HAL_GPIO_Init+0x1ec>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a49      	ldr	r2, [pc, #292]	; (8003068 <HAL_GPIO_Init+0x2f8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d007      	beq.n	8002f58 <HAL_GPIO_Init+0x1e8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a48      	ldr	r2, [pc, #288]	; (800306c <HAL_GPIO_Init+0x2fc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d101      	bne.n	8002f54 <HAL_GPIO_Init+0x1e4>
 8002f50:	2305      	movs	r3, #5
 8002f52:	e00a      	b.n	8002f6a <HAL_GPIO_Init+0x1fa>
 8002f54:	2306      	movs	r3, #6
 8002f56:	e008      	b.n	8002f6a <HAL_GPIO_Init+0x1fa>
 8002f58:	2304      	movs	r3, #4
 8002f5a:	e006      	b.n	8002f6a <HAL_GPIO_Init+0x1fa>
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e004      	b.n	8002f6a <HAL_GPIO_Init+0x1fa>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e002      	b.n	8002f6a <HAL_GPIO_Init+0x1fa>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_GPIO_Init+0x1fa>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	f002 0203 	and.w	r2, r2, #3
 8002f70:	0092      	lsls	r2, r2, #2
 8002f72:	4093      	lsls	r3, r2
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7a:	4937      	ldr	r1, [pc, #220]	; (8003058 <HAL_GPIO_Init+0x2e8>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_GPIO_Init+0x300>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fac:	4a30      	ldr	r2, [pc, #192]	; (8003070 <HAL_GPIO_Init+0x300>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <HAL_GPIO_Init+0x300>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fd6:	4a26      	ldr	r2, [pc, #152]	; (8003070 <HAL_GPIO_Init+0x300>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_GPIO_Init+0x300>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_GPIO_Init+0x300>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_GPIO_Init+0x300>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800302a:	4a11      	ldr	r2, [pc, #68]	; (8003070 <HAL_GPIO_Init+0x300>)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3301      	adds	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	f47f ae9d 	bne.w	8002d80 <HAL_GPIO_Init+0x10>
  }
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40021000 	.word	0x40021000
 8003058:	40010000 	.word	0x40010000
 800305c:	48000400 	.word	0x48000400
 8003060:	48000800 	.word	0x48000800
 8003064:	48000c00 	.word	0x48000c00
 8003068:	48001000 	.word	0x48001000
 800306c:	48001400 	.word	0x48001400
 8003070:	40010400 	.word	0x40010400

08003074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e001      	b.n	8003096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
 80030b0:	4613      	mov	r3, r2
 80030b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b4:	787b      	ldrb	r3, [r7, #1]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d141      	bne.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030e2:	4b4b      	ldr	r3, [pc, #300]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d131      	bne.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030f0:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f6:	4a46      	ldr	r2, [pc, #280]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003100:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003108:	4a41      	ldr	r2, [pc, #260]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800310e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003110:	4b40      	ldr	r3, [pc, #256]	; (8003214 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2232      	movs	r2, #50	; 0x32
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	4a3f      	ldr	r2, [pc, #252]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	0c9b      	lsrs	r3, r3, #18
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003126:	e002      	b.n	800312e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3b01      	subs	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800312e:	4b38      	ldr	r3, [pc, #224]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d102      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f2      	bne.n	8003128 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003142:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314e:	d158      	bne.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e057      	b.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315a:	4a2d      	ldr	r2, [pc, #180]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003164:	e04d      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316c:	d141      	bne.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800316e:	4b28      	ldr	r3, [pc, #160]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317a:	d131      	bne.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003182:	4a23      	ldr	r2, [pc, #140]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003188:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003194:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2232      	movs	r2, #50	; 0x32
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031a8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ac:	0c9b      	lsrs	r3, r3, #18
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b2:	e002      	b.n	80031ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d102      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f2      	bne.n	80031b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031da:	d112      	bne.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e011      	b.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031f0:	e007      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003200:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40007000 	.word	0x40007000
 8003214:	2000000c 	.word	0x2000000c
 8003218:	431bde83 	.word	0x431bde83

0800321c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e306      	b.n	800383c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d075      	beq.n	8003326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323a:	4b97      	ldr	r3, [pc, #604]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003244:	4b94      	ldr	r3, [pc, #592]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d102      	bne.n	800325a <HAL_RCC_OscConfig+0x3e>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d002      	beq.n	8003260 <HAL_RCC_OscConfig+0x44>
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d10b      	bne.n	8003278 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	4b8d      	ldr	r3, [pc, #564]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d05b      	beq.n	8003324 <HAL_RCC_OscConfig+0x108>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d157      	bne.n	8003324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e2e1      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003280:	d106      	bne.n	8003290 <HAL_RCC_OscConfig+0x74>
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a84      	ldr	r2, [pc, #528]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e01d      	b.n	80032cc <HAL_RCC_OscConfig+0xb0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x98>
 800329a:	4b7f      	ldr	r3, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a7e      	ldr	r2, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	4b7c      	ldr	r3, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7b      	ldr	r2, [pc, #492]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0xb0>
 80032b4:	4b78      	ldr	r3, [pc, #480]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a77      	ldr	r2, [pc, #476]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b75      	ldr	r3, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a74      	ldr	r2, [pc, #464]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d013      	beq.n	80032fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7ff fb70 	bl	80029b8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032dc:	f7ff fb6c 	bl	80029b8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e2a6      	b.n	800383c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ee:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0xc0>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7ff fb5c 	bl	80029b8 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7ff fb58 	bl	80029b8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e292      	b.n	800383c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003316:	4b60      	ldr	r3, [pc, #384]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0xe8>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d075      	beq.n	800341e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	4b59      	ldr	r3, [pc, #356]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333c:	4b56      	ldr	r3, [pc, #344]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d102      	bne.n	8003352 <HAL_RCC_OscConfig+0x136>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d002      	beq.n	8003358 <HAL_RCC_OscConfig+0x13c>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d11f      	bne.n	8003398 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003358:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x154>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e265      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b49      	ldr	r3, [pc, #292]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	4946      	ldr	r1, [pc, #280]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003384:	4b45      	ldr	r3, [pc, #276]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fac9 	bl	8002920 <HAL_InitTick>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d043      	beq.n	800341c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e251      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d023      	beq.n	80033e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a3c      	ldr	r2, [pc, #240]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7ff fb04 	bl	80029b8 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b4:	f7ff fb00 	bl	80029b8 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e23a      	b.n	800383c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c6:	4b34      	ldr	r3, [pc, #208]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	061b      	lsls	r3, r3, #24
 80033e0:	492d      	ldr	r1, [pc, #180]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
 80033e6:	e01a      	b.n	800341e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 80033ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7ff fae0 	bl	80029b8 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fc:	f7ff fadc 	bl	80029b8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e216      	b.n	800383c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x1e0>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d041      	beq.n	80034ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01c      	beq.n	800346c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7ff fab9 	bl	80029b8 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344a:	f7ff fab5 	bl	80029b8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1ef      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ef      	beq.n	800344a <HAL_RCC_OscConfig+0x22e>
 800346a:	e020      	b.n	80034ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7ff fa9c 	bl	80029b8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003482:	e00d      	b.n	80034a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003484:	f7ff fa98 	bl	80029b8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d906      	bls.n	80034a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1d2      	b.n	800383c <HAL_RCC_OscConfig+0x620>
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a0:	4b8c      	ldr	r3, [pc, #560]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ea      	bne.n	8003484 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80a6 	beq.w	8003608 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_OscConfig+0x2b4>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x2b6>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b7f      	ldr	r3, [pc, #508]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	4a7e      	ldr	r2, [pc, #504]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6593      	str	r3, [r2, #88]	; 0x58
 80034e2:	4b7c      	ldr	r3, [pc, #496]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f2:	4b79      	ldr	r3, [pc, #484]	; (80036d8 <HAL_RCC_OscConfig+0x4bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034fe:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCC_OscConfig+0x4bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a75      	ldr	r2, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x4bc>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7ff fa55 	bl	80029b8 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7ff fa51 	bl	80029b8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e18b      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003524:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <HAL_RCC_OscConfig+0x4bc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d108      	bne.n	800354a <HAL_RCC_OscConfig+0x32e>
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a65      	ldr	r2, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003548:	e024      	b.n	8003594 <HAL_RCC_OscConfig+0x378>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b05      	cmp	r3, #5
 8003550:	d110      	bne.n	8003574 <HAL_RCC_OscConfig+0x358>
 8003552:	4b60      	ldr	r3, [pc, #384]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	4a5e      	ldr	r2, [pc, #376]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003562:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003572:	e00f      	b.n	8003594 <HAL_RCC_OscConfig+0x378>
 8003574:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	4a56      	ldr	r2, [pc, #344]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d016      	beq.n	80035ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7ff fa0c 	bl	80029b8 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7ff fa08 	bl	80029b8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e140      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ba:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ed      	beq.n	80035a4 <HAL_RCC_OscConfig+0x388>
 80035c8:	e015      	b.n	80035f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ca:	f7ff f9f5 	bl	80029b8 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7ff f9f1 	bl	80029b8 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e129      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e8:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ed      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035f6:	7ffb      	ldrb	r3, [r7, #31]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	4a34      	ldr	r2, [pc, #208]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003606:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d03c      	beq.n	800368e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01c      	beq.n	8003656 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 800361e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003622:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7ff f9c4 	bl	80029b8 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003634:	f7ff f9c0 	bl	80029b8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0fa      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003646:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ef      	beq.n	8003634 <HAL_RCC_OscConfig+0x418>
 8003654:	e01b      	b.n	800368e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003656:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003658:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800365c:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7ff f9a7 	bl	80029b8 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800366e:	f7ff f9a3 	bl	80029b8 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0dd      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 8003682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ef      	bne.n	800366e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80d1 	beq.w	800383a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	f000 808b 	beq.w	80037bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d15e      	bne.n	800376c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_RCC_OscConfig+0x4b8>)
 80036b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7ff f97d 	bl	80029b8 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c0:	e00c      	b.n	80036dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c2:	f7ff f979 	bl	80029b8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d905      	bls.n	80036dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0b3      	b.n	800383c <HAL_RCC_OscConfig+0x620>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ec      	bne.n	80036c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e8:	4b56      	ldr	r3, [pc, #344]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	4b56      	ldr	r3, [pc, #344]	; (8003848 <HAL_RCC_OscConfig+0x62c>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6a11      	ldr	r1, [r2, #32]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036f8:	3a01      	subs	r2, #1
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	4311      	orrs	r1, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003702:	0212      	lsls	r2, r2, #8
 8003704:	4311      	orrs	r1, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800370a:	0852      	lsrs	r2, r2, #1
 800370c:	3a01      	subs	r2, #1
 800370e:	0552      	lsls	r2, r2, #21
 8003710:	4311      	orrs	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003716:	0852      	lsrs	r2, r2, #1
 8003718:	3a01      	subs	r2, #1
 800371a:	0652      	lsls	r2, r2, #25
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003722:	06d2      	lsls	r2, r2, #27
 8003724:	430a      	orrs	r2, r1
 8003726:	4947      	ldr	r1, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 8003728:	4313      	orrs	r3, r2
 800372a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b45      	ldr	r3, [pc, #276]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a44      	ldr	r2, [pc, #272]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 8003732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003736:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4a41      	ldr	r2, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003742:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7ff f938 	bl	80029b8 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7ff f934 	bl	80029b8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e06e      	b.n	800383c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x530>
 800376a:	e066      	b.n	800383a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a34      	ldr	r2, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 8003772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003778:	4b32      	ldr	r3, [pc, #200]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a31      	ldr	r2, [pc, #196]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 800377e:	f023 0303 	bic.w	r3, r3, #3
 8003782:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 800378a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800378e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003792:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7ff f910 	bl	80029b8 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379c:	f7ff f90c 	bl	80029b8 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e046      	b.n	800383c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ae:	4b25      	ldr	r3, [pc, #148]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x580>
 80037ba:	e03e      	b.n	800383a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e039      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x628>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0203 	and.w	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d12c      	bne.n	8003836 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	3b01      	subs	r3, #1
 80037e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d123      	bne.n	8003836 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d11b      	bne.n	8003836 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d113      	bne.n	8003836 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d109      	bne.n	8003836 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	3b01      	subs	r3, #1
 8003830:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	019f800c 	.word	0x019f800c

0800384c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e11e      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b91      	ldr	r3, [pc, #580]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b8e      	ldr	r3, [pc, #568]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 020f 	bic.w	r2, r3, #15
 800387a:	498c      	ldr	r1, [pc, #560]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b8a      	ldr	r3, [pc, #552]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e106      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d073      	beq.n	8003988 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d129      	bne.n	80038fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a8:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0f4      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038b8:	f000 f99e 	bl	8003bf8 <RCC_GetSysClockFreqFromPLLSource>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4a7c      	ldr	r2, [pc, #496]	; (8003ab4 <HAL_RCC_ClockConfig+0x268>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d93f      	bls.n	8003946 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038c6:	4b7a      	ldr	r3, [pc, #488]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d033      	beq.n	8003946 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d12f      	bne.n	8003946 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038e6:	4b72      	ldr	r3, [pc, #456]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ee:	4a70      	ldr	r2, [pc, #448]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80038f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e024      	b.n	8003946 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d107      	bne.n	8003914 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003904:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0c6      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003914:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0be      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003924:	f000 f8ce 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003928:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4a61      	ldr	r2, [pc, #388]	; (8003ab4 <HAL_RCC_ClockConfig+0x268>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d909      	bls.n	8003946 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003932:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393a:	4a5d      	ldr	r2, [pc, #372]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 800393c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003940:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b5a      	ldr	r3, [pc, #360]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4957      	ldr	r1, [pc, #348]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7ff f82e 	bl	80029b8 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7ff f82a 	bl	80029b8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e095      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d023      	beq.n	80039dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a0:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a42      	ldr	r2, [pc, #264]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80039a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039b8:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039c0:	4a3b      	ldr	r2, [pc, #236]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80039c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c8:	4b39      	ldr	r3, [pc, #228]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4936      	ldr	r1, [pc, #216]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
 80039da:	e008      	b.n	80039ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d105      	bne.n	80039ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039e2:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4a32      	ldr	r2, [pc, #200]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ee:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d21d      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fc:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 020f 	bic.w	r2, r3, #15
 8003a04:	4929      	ldr	r1, [pc, #164]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a0c:	f7fe ffd4 	bl	80029b8 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fe ffd0 	bl	80029b8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e03b      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d1ed      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4917      	ldr	r1, [pc, #92]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	490f      	ldr	r1, [pc, #60]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a76:	f000 f825 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_RCC_ClockConfig+0x264>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <HAL_RCC_ClockConfig+0x26c>)
 8003a88:	5ccb      	ldrb	r3, [r1, r3]
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_RCC_ClockConfig+0x270>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_RCC_ClockConfig+0x274>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe ff40 	bl	8002920 <HAL_InitTick>
 8003aa0:	4603      	mov	r3, r0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	04c4b400 	.word	0x04c4b400
 8003ab8:	0800d90c 	.word	0x0800d90c
 8003abc:	2000000c 	.word	0x2000000c
 8003ac0:	20000010 	.word	0x20000010

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003aca:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d102      	bne.n	8003adc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e047      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d102      	bne.n	8003aee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ae8:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e03e      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d136      	bne.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d10c      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b18:	4a1a      	ldr	r2, [pc, #104]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b22:	68d2      	ldr	r2, [r2, #12]
 8003b24:	0a12      	lsrs	r2, r2, #8
 8003b26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	617b      	str	r3, [r7, #20]
      break;
 8003b30:	e00c      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	0a12      	lsrs	r2, r2, #8
 8003b40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b44:	fb02 f303 	mul.w	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
      break;
 8003b4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	0e5b      	lsrs	r3, r3, #25
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	3301      	adds	r3, #1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e001      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b6c:	693b      	ldr	r3, [r7, #16]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	007a1200 	.word	0x007a1200

08003b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	2000000c 	.word	0x2000000c

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ba4:	f7ff fff0 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	0800d91c 	.word	0x0800d91c

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bd0:	f7ff ffda 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0adb      	lsrs	r3, r3, #11
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4904      	ldr	r1, [pc, #16]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	0800d91c 	.word	0x0800d91c

08003bf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	3301      	adds	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d10c      	bne.n	8003c36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c26:	68d2      	ldr	r2, [r2, #12]
 8003c28:	0a12      	lsrs	r2, r2, #8
 8003c2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	617b      	str	r3, [r7, #20]
    break;
 8003c34:	e00c      	b.n	8003c50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	0a12      	lsrs	r2, r2, #8
 8003c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
    break;
 8003c4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0e5b      	lsrs	r3, r3, #25
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c6a:	687b      	ldr	r3, [r7, #4]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	007a1200 	.word	0x007a1200
 8003c80:	00f42400 	.word	0x00f42400

08003c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c90:	2300      	movs	r3, #0
 8003c92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8098 	beq.w	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca6:	4b43      	ldr	r3, [pc, #268]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10d      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	4a3f      	ldr	r2, [pc, #252]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cce:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a39      	ldr	r2, [pc, #228]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cda:	f7fe fe6d 	bl	80029b8 <HAL_GetTick>
 8003cde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce0:	e009      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe fe69 	bl	80029b8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d902      	bls.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	74fb      	strb	r3, [r7, #19]
        break;
 8003cf4:	e005      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf6:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ef      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d159      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d08:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01e      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d019      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d40:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fe fe29 	bl	80029b8 <HAL_GetTick>
 8003d66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d68:	e00b      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fe fe25 	bl	80029b8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d902      	bls.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d80:	e006      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ec      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	74bb      	strb	r3, [r7, #18]
 8003db2:	e005      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc0:	7c7b      	ldrb	r3, [r7, #17]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4ba7      	ldr	r3, [pc, #668]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	4aa6      	ldr	r2, [pc, #664]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dde:	4ba1      	ldr	r3, [pc, #644]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f023 0203 	bic.w	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	499d      	ldr	r1, [pc, #628]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e00:	4b98      	ldr	r3, [pc, #608]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f023 020c 	bic.w	r2, r3, #12
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	4995      	ldr	r1, [pc, #596]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e22:	4b90      	ldr	r3, [pc, #576]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	498c      	ldr	r1, [pc, #560]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e44:	4b87      	ldr	r3, [pc, #540]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	4984      	ldr	r1, [pc, #528]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e66:	4b7f      	ldr	r3, [pc, #508]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	497b      	ldr	r1, [pc, #492]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e88:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	4973      	ldr	r1, [pc, #460]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eaa:	4b6e      	ldr	r3, [pc, #440]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	496a      	ldr	r1, [pc, #424]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ecc:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	4962      	ldr	r1, [pc, #392]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eee:	4b5d      	ldr	r3, [pc, #372]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	4959      	ldr	r1, [pc, #356]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f10:	4b54      	ldr	r3, [pc, #336]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f16:	f023 0203 	bic.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	4951      	ldr	r1, [pc, #324]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f32:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4948      	ldr	r1, [pc, #288]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4940      	ldr	r1, [pc, #256]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f72:	d105      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f74:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d015      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f8c:	4b35      	ldr	r3, [pc, #212]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	4932      	ldr	r1, [pc, #200]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fac:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4924      	ldr	r1, [pc, #144]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	4916      	ldr	r1, [pc, #88]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401a:	d105      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a10      	ldr	r2, [pc, #64]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004026:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d019      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4908      	ldr	r1, [pc, #32]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004052:	d109      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a02      	ldr	r2, [pc, #8]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405e:	60d3      	str	r3, [r2, #12]
 8004060:	e002      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	4926      	ldr	r1, [pc, #152]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004092:	d105      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a20      	ldr	r2, [pc, #128]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800409a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d015      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ba:	4918      	ldr	r1, [pc, #96]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d105      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a12      	ldr	r2, [pc, #72]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	490a      	ldr	r1, [pc, #40]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004110:	7cbb      	ldrb	r3, [r7, #18]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000

08004120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e049      	b.n	80041c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fe f90e 	bl	8002368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f001 f8e2 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e04c      	b.n	8004282 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a26      	ldr	r2, [pc, #152]	; (8004290 <HAL_TIM_Base_Start+0xc0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d022      	beq.n	8004240 <HAL_TIM_Base_Start+0x70>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d01d      	beq.n	8004240 <HAL_TIM_Base_Start+0x70>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <HAL_TIM_Base_Start+0xc4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <HAL_TIM_Base_Start+0x70>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a21      	ldr	r2, [pc, #132]	; (8004298 <HAL_TIM_Base_Start+0xc8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <HAL_TIM_Base_Start+0x70>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_TIM_Base_Start+0xcc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <HAL_TIM_Base_Start+0x70>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_TIM_Base_Start+0xd0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_TIM_Base_Start+0x70>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_TIM_Base_Start+0xd4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_TIM_Base_Start+0x70>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_TIM_Base_Start+0xd8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d115      	bne.n	800426c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_TIM_Base_Start+0xdc>)
 8004248:	4013      	ands	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b06      	cmp	r3, #6
 8004250:	d015      	beq.n	800427e <HAL_TIM_Base_Start+0xae>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d011      	beq.n	800427e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426a:	e008      	b.n	800427e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e000      	b.n	8004280 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40013400 	.word	0x40013400
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40015000 	.word	0x40015000
 80042ac:	00010007 	.word	0x00010007

080042b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d001      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e054      	b.n	8004372 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a26      	ldr	r2, [pc, #152]	; (8004380 <HAL_TIM_Base_Start_IT+0xd0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d022      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x80>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d01d      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x80>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a22      	ldr	r2, [pc, #136]	; (8004384 <HAL_TIM_Base_Start_IT+0xd4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d018      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x80>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a21      	ldr	r2, [pc, #132]	; (8004388 <HAL_TIM_Base_Start_IT+0xd8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d013      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x80>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1f      	ldr	r2, [pc, #124]	; (800438c <HAL_TIM_Base_Start_IT+0xdc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00e      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x80>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_TIM_Base_Start_IT+0xe0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x80>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <HAL_TIM_Base_Start_IT+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x80>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <HAL_TIM_Base_Start_IT+0xe8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d115      	bne.n	800435c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_TIM_Base_Start_IT+0xec>)
 8004338:	4013      	ands	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b06      	cmp	r3, #6
 8004340:	d015      	beq.n	800436e <HAL_TIM_Base_Start_IT+0xbe>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d011      	beq.n	800436e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	e008      	b.n	800436e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e000      	b.n	8004370 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40013400 	.word	0x40013400
 8004394:	40014000 	.word	0x40014000
 8004398:	40015000 	.word	0x40015000
 800439c:	00010007 	.word	0x00010007

080043a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e049      	b.n	8004446 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe f898 	bl	80024fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 ffa2 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_TIM_PWM_Start+0x24>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e03c      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b04      	cmp	r3, #4
 8004478:	d109      	bne.n	800448e <HAL_TIM_PWM_Start+0x3e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e02f      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d109      	bne.n	80044a8 <HAL_TIM_PWM_Start+0x58>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e022      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d109      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x72>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	bf14      	ite	ne
 80044ba:	2301      	movne	r3, #1
 80044bc:	2300      	moveq	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	e015      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d109      	bne.n	80044dc <HAL_TIM_PWM_Start+0x8c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e008      	b.n	80044ee <HAL_TIM_PWM_Start+0x9e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0a6      	b.n	8004644 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Start+0xb6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004504:	e023      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d104      	bne.n	8004516 <HAL_TIM_PWM_Start+0xc6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004514:	e01b      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start+0xd6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004524:	e013      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0xe6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004534:	e00b      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b10      	cmp	r3, #16
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0xf6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004544:	e003      	b.n	800454e <HAL_TIM_PWM_Start+0xfe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f001 fc7e 	bl	8005e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a3a      	ldr	r2, [pc, #232]	; (800464c <HAL_TIM_PWM_Start+0x1fc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d018      	beq.n	8004598 <HAL_TIM_PWM_Start+0x148>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a39      	ldr	r2, [pc, #228]	; (8004650 <HAL_TIM_PWM_Start+0x200>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <HAL_TIM_PWM_Start+0x148>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a37      	ldr	r2, [pc, #220]	; (8004654 <HAL_TIM_PWM_Start+0x204>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00e      	beq.n	8004598 <HAL_TIM_PWM_Start+0x148>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a36      	ldr	r2, [pc, #216]	; (8004658 <HAL_TIM_PWM_Start+0x208>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d009      	beq.n	8004598 <HAL_TIM_PWM_Start+0x148>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a34      	ldr	r2, [pc, #208]	; (800465c <HAL_TIM_PWM_Start+0x20c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <HAL_TIM_PWM_Start+0x148>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a33      	ldr	r2, [pc, #204]	; (8004660 <HAL_TIM_PWM_Start+0x210>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d101      	bne.n	800459c <HAL_TIM_PWM_Start+0x14c>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <HAL_TIM_PWM_Start+0x14e>
 800459c:	2300      	movs	r3, #0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a25      	ldr	r2, [pc, #148]	; (800464c <HAL_TIM_PWM_Start+0x1fc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_TIM_PWM_Start+0x1b2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c4:	d01d      	beq.n	8004602 <HAL_TIM_PWM_Start+0x1b2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a26      	ldr	r2, [pc, #152]	; (8004664 <HAL_TIM_PWM_Start+0x214>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_TIM_PWM_Start+0x1b2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <HAL_TIM_PWM_Start+0x218>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_TIM_PWM_Start+0x1b2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_TIM_PWM_Start+0x21c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIM_PWM_Start+0x1b2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_TIM_PWM_Start+0x200>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_TIM_PWM_Start+0x1b2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_TIM_PWM_Start+0x204>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIM_PWM_Start+0x1b2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_TIM_PWM_Start+0x210>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d115      	bne.n	800462e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_TIM_PWM_Start+0x220>)
 800460a:	4013      	ands	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d015      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1f0>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461a:	d011      	beq.n	8004640 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	e008      	b.n	8004640 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e000      	b.n	8004642 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800
 8004660:	40015000 	.word	0x40015000
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	00010007 	.word	0x00010007

08004674 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e049      	b.n	800471a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f841 	bl	8004722 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f000 fe38 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_TIM_IC_Start_IT+0x1e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004752:	b2db      	uxtb	r3, r3
 8004754:	e023      	b.n	800479e <HAL_TIM_IC_Start_IT+0x66>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d104      	bne.n	8004766 <HAL_TIM_IC_Start_IT+0x2e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e01b      	b.n	800479e <HAL_TIM_IC_Start_IT+0x66>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d104      	bne.n	8004776 <HAL_TIM_IC_Start_IT+0x3e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e013      	b.n	800479e <HAL_TIM_IC_Start_IT+0x66>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d104      	bne.n	8004786 <HAL_TIM_IC_Start_IT+0x4e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004782:	b2db      	uxtb	r3, r3
 8004784:	e00b      	b.n	800479e <HAL_TIM_IC_Start_IT+0x66>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b10      	cmp	r3, #16
 800478a:	d104      	bne.n	8004796 <HAL_TIM_IC_Start_IT+0x5e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e003      	b.n	800479e <HAL_TIM_IC_Start_IT+0x66>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800479c:	b2db      	uxtb	r3, r3
 800479e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <HAL_TIM_IC_Start_IT+0x78>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e013      	b.n	80047d8 <HAL_TIM_IC_Start_IT+0xa0>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d104      	bne.n	80047c0 <HAL_TIM_IC_Start_IT+0x88>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e00b      	b.n	80047d8 <HAL_TIM_IC_Start_IT+0xa0>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d104      	bne.n	80047d0 <HAL_TIM_IC_Start_IT+0x98>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e003      	b.n	80047d8 <HAL_TIM_IC_Start_IT+0xa0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80047da:	7bbb      	ldrb	r3, [r7, #14]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d102      	bne.n	80047e6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80047e0:	7b7b      	ldrb	r3, [r7, #13]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0e2      	b.n	80049b0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_IC_Start_IT+0xc2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f8:	e023      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x10a>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d104      	bne.n	800480a <HAL_TIM_IC_Start_IT+0xd2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004808:	e01b      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x10a>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d104      	bne.n	800481a <HAL_TIM_IC_Start_IT+0xe2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004818:	e013      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x10a>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d104      	bne.n	800482a <HAL_TIM_IC_Start_IT+0xf2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004828:	e00b      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x10a>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b10      	cmp	r3, #16
 800482e:	d104      	bne.n	800483a <HAL_TIM_IC_Start_IT+0x102>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004838:	e003      	b.n	8004842 <HAL_TIM_IC_Start_IT+0x10a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_IC_Start_IT+0x11a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004850:	e013      	b.n	800487a <HAL_TIM_IC_Start_IT+0x142>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <HAL_TIM_IC_Start_IT+0x12a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	e00b      	b.n	800487a <HAL_TIM_IC_Start_IT+0x142>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d104      	bne.n	8004872 <HAL_TIM_IC_Start_IT+0x13a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004870:	e003      	b.n	800487a <HAL_TIM_IC_Start_IT+0x142>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d841      	bhi.n	8004904 <HAL_TIM_IC_Start_IT+0x1cc>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <HAL_TIM_IC_Start_IT+0x150>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048bd 	.word	0x080048bd
 800488c:	08004905 	.word	0x08004905
 8004890:	08004905 	.word	0x08004905
 8004894:	08004905 	.word	0x08004905
 8004898:	080048cf 	.word	0x080048cf
 800489c:	08004905 	.word	0x08004905
 80048a0:	08004905 	.word	0x08004905
 80048a4:	08004905 	.word	0x08004905
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	08004905 	.word	0x08004905
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004905 	.word	0x08004905
 80048b8:	080048f3 	.word	0x080048f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0202 	orr.w	r2, r2, #2
 80048ca:	60da      	str	r2, [r3, #12]
      break;
 80048cc:	e01d      	b.n	800490a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0204 	orr.w	r2, r2, #4
 80048dc:	60da      	str	r2, [r3, #12]
      break;
 80048de:	e014      	b.n	800490a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0208 	orr.w	r2, r2, #8
 80048ee:	60da      	str	r2, [r3, #12]
      break;
 80048f0:	e00b      	b.n	800490a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0210 	orr.w	r2, r2, #16
 8004900:	60da      	str	r2, [r3, #12]
      break;
 8004902:	e002      	b.n	800490a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      break;
 8004908:	bf00      	nop
  }

  if (status == HAL_OK)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d14e      	bne.n	80049ae <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fa9d 	bl	8005e58 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a25      	ldr	r2, [pc, #148]	; (80049b8 <HAL_TIM_IC_Start_IT+0x280>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x236>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d01d      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x236>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a21      	ldr	r2, [pc, #132]	; (80049bc <HAL_TIM_IC_Start_IT+0x284>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x236>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <HAL_TIM_IC_Start_IT+0x288>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x236>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <HAL_TIM_IC_Start_IT+0x28c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x236>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_TIM_IC_Start_IT+0x290>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x236>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_TIM_IC_Start_IT+0x294>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x236>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <HAL_TIM_IC_Start_IT+0x298>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d115      	bne.n	800499a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_TIM_IC_Start_IT+0x29c>)
 8004976:	4013      	ands	r3, r2
 8004978:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d015      	beq.n	80049ac <HAL_TIM_IC_Start_IT+0x274>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004986:	d011      	beq.n	80049ac <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004998:	e008      	b.n	80049ac <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e000      	b.n	80049ae <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40013400 	.word	0x40013400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40015000 	.word	0x40015000
 80049d4:	00010007 	.word	0x00010007

080049d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0202 	mvn.w	r2, #2
 8004a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc fea4 	bl	8001768 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fc62 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fc69 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0204 	mvn.w	r2, #4
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fe7a 	bl	8001768 <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fc38 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fc3f 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0208 	mvn.w	r2, #8
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc fe50 	bl	8001768 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fc0e 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fc15 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0210 	mvn.w	r2, #16
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2208      	movs	r2, #8
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc fe26 	bl	8001768 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fbe4 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fbeb 	bl	8005300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0201 	mvn.w	r2, #1
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc fed6 	bl	8001908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f001 fa2e 	bl	8005fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b96:	d10e      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d107      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f001 fa21 	bl	8005ff8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d10e      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d107      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fb99 	bl	8005314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d10e      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f06f 0220 	mvn.w	r2, #32
 8004c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f001 f9e1 	bl	8005fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1c:	d10f      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f001 f9e7 	bl	800600c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c4c:	d10f      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f001 f9d9 	bl	8006020 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7c:	d10f      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c8c:	d107      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f001 f9cb 	bl	8006034 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cac:	d10f      	bne.n	8004cce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cbc:	d107      	bne.n	8004cce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 f9bd 	bl	8006048 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e088      	b.n	8004e06 <HAL_TIM_IC_ConfigChannel+0x130>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11b      	bne.n	8004d3a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6819      	ldr	r1, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f000 fedb 	bl	8005acc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 020c 	bic.w	r2, r2, #12
 8004d24:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6999      	ldr	r1, [r3, #24]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	619a      	str	r2, [r3, #24]
 8004d38:	e060      	b.n	8004dfc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d11c      	bne.n	8004d7a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f000 ff5f 	bl	8005c12 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d62:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6999      	ldr	r1, [r3, #24]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	021a      	lsls	r2, r3, #8
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	619a      	str	r2, [r3, #24]
 8004d78:	e040      	b.n	8004dfc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d11b      	bne.n	8004db8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6819      	ldr	r1, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f000 ffac 	bl	8005cec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 020c 	bic.w	r2, r2, #12
 8004da2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69d9      	ldr	r1, [r3, #28]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	61da      	str	r2, [r3, #28]
 8004db6:	e021      	b.n	8004dfc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d11c      	bne.n	8004df8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f000 ffc9 	bl	8005d64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004de0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69d9      	ldr	r1, [r3, #28]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	021a      	lsls	r2, r3, #8
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	61da      	str	r2, [r3, #28]
 8004df6:	e001      	b.n	8004dfc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e0ff      	b.n	800502e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b14      	cmp	r3, #20
 8004e3a:	f200 80f0 	bhi.w	800501e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	0800501f 	.word	0x0800501f
 8004e4c:	0800501f 	.word	0x0800501f
 8004e50:	0800501f 	.word	0x0800501f
 8004e54:	08004ed9 	.word	0x08004ed9
 8004e58:	0800501f 	.word	0x0800501f
 8004e5c:	0800501f 	.word	0x0800501f
 8004e60:	0800501f 	.word	0x0800501f
 8004e64:	08004f1b 	.word	0x08004f1b
 8004e68:	0800501f 	.word	0x0800501f
 8004e6c:	0800501f 	.word	0x0800501f
 8004e70:	0800501f 	.word	0x0800501f
 8004e74:	08004f5b 	.word	0x08004f5b
 8004e78:	0800501f 	.word	0x0800501f
 8004e7c:	0800501f 	.word	0x0800501f
 8004e80:	0800501f 	.word	0x0800501f
 8004e84:	08004f9d 	.word	0x08004f9d
 8004e88:	0800501f 	.word	0x0800501f
 8004e8c:	0800501f 	.word	0x0800501f
 8004e90:	0800501f 	.word	0x0800501f
 8004e94:	08004fdd 	.word	0x08004fdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 faea 	bl	8005478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0208 	orr.w	r2, r2, #8
 8004eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0204 	bic.w	r2, r2, #4
 8004ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6999      	ldr	r1, [r3, #24]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	619a      	str	r2, [r3, #24]
      break;
 8004ed6:	e0a5      	b.n	8005024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fb64 	bl	80055ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6999      	ldr	r1, [r3, #24]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	619a      	str	r2, [r3, #24]
      break;
 8004f18:	e084      	b.n	8005024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fbd7 	bl	80056d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0208 	orr.w	r2, r2, #8
 8004f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0204 	bic.w	r2, r2, #4
 8004f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69d9      	ldr	r1, [r3, #28]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	61da      	str	r2, [r3, #28]
      break;
 8004f58:	e064      	b.n	8005024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fc49 	bl	80057f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69d9      	ldr	r1, [r3, #28]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	021a      	lsls	r2, r3, #8
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	61da      	str	r2, [r3, #28]
      break;
 8004f9a:	e043      	b.n	8005024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fcbc 	bl	8005920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0208 	orr.w	r2, r2, #8
 8004fb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0204 	bic.w	r2, r2, #4
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004fda:	e023      	b.n	8005024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fd06 	bl	80059f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005006:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	021a      	lsls	r2, r3, #8
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800501c:	e002      	b.n	8005024 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	75fb      	strb	r3, [r7, #23]
      break;
 8005022:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800502c:	7dfb      	ldrb	r3, [r7, #23]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop

08005038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIM_ConfigClockSource+0x1c>
 8005050:	2302      	movs	r3, #2
 8005052:	e0f6      	b.n	8005242 <HAL_TIM_ConfigClockSource+0x20a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6f      	ldr	r2, [pc, #444]	; (800524c <HAL_TIM_ConfigClockSource+0x214>)
 800508e:	4293      	cmp	r3, r2
 8005090:	f000 80c1 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 8005094:	4a6d      	ldr	r2, [pc, #436]	; (800524c <HAL_TIM_ConfigClockSource+0x214>)
 8005096:	4293      	cmp	r3, r2
 8005098:	f200 80c6 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 800509c:	4a6c      	ldr	r2, [pc, #432]	; (8005250 <HAL_TIM_ConfigClockSource+0x218>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	f000 80b9 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 80050a4:	4a6a      	ldr	r2, [pc, #424]	; (8005250 <HAL_TIM_ConfigClockSource+0x218>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	f200 80be 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 80050ac:	4a69      	ldr	r2, [pc, #420]	; (8005254 <HAL_TIM_ConfigClockSource+0x21c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	f000 80b1 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 80050b4:	4a67      	ldr	r2, [pc, #412]	; (8005254 <HAL_TIM_ConfigClockSource+0x21c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	f200 80b6 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 80050bc:	4a66      	ldr	r2, [pc, #408]	; (8005258 <HAL_TIM_ConfigClockSource+0x220>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	f000 80a9 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 80050c4:	4a64      	ldr	r2, [pc, #400]	; (8005258 <HAL_TIM_ConfigClockSource+0x220>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	f200 80ae 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 80050cc:	4a63      	ldr	r2, [pc, #396]	; (800525c <HAL_TIM_ConfigClockSource+0x224>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f000 80a1 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 80050d4:	4a61      	ldr	r2, [pc, #388]	; (800525c <HAL_TIM_ConfigClockSource+0x224>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	f200 80a6 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 80050dc:	4a60      	ldr	r2, [pc, #384]	; (8005260 <HAL_TIM_ConfigClockSource+0x228>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	f000 8099 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 80050e4:	4a5e      	ldr	r2, [pc, #376]	; (8005260 <HAL_TIM_ConfigClockSource+0x228>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	f200 809e 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 80050ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80050f0:	f000 8091 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 80050f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80050f8:	f200 8096 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 80050fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005100:	f000 8089 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005108:	f200 808e 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 800510c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005110:	d03e      	beq.n	8005190 <HAL_TIM_ConfigClockSource+0x158>
 8005112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005116:	f200 8087 	bhi.w	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	f000 8086 	beq.w	800522e <HAL_TIM_ConfigClockSource+0x1f6>
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d87f      	bhi.n	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 8005128:	2b70      	cmp	r3, #112	; 0x70
 800512a:	d01a      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x12a>
 800512c:	2b70      	cmp	r3, #112	; 0x70
 800512e:	d87b      	bhi.n	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 8005130:	2b60      	cmp	r3, #96	; 0x60
 8005132:	d050      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0x19e>
 8005134:	2b60      	cmp	r3, #96	; 0x60
 8005136:	d877      	bhi.n	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 8005138:	2b50      	cmp	r3, #80	; 0x50
 800513a:	d03c      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x17e>
 800513c:	2b50      	cmp	r3, #80	; 0x50
 800513e:	d873      	bhi.n	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d058      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x1be>
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d86f      	bhi.n	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 8005148:	2b30      	cmp	r3, #48	; 0x30
 800514a:	d064      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 800514c:	2b30      	cmp	r3, #48	; 0x30
 800514e:	d86b      	bhi.n	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 8005150:	2b20      	cmp	r3, #32
 8005152:	d060      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d867      	bhi.n	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d05c      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 800515c:	2b10      	cmp	r3, #16
 800515e:	d05a      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0x1de>
 8005160:	e062      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6899      	ldr	r1, [r3, #8]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f000 fe51 	bl	8005e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	609a      	str	r2, [r3, #8]
      break;
 800518e:	e04f      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6899      	ldr	r1, [r3, #8]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f000 fe3a 	bl	8005e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b2:	609a      	str	r2, [r3, #8]
      break;
 80051b4:	e03c      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f000 fcf6 	bl	8005bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2150      	movs	r1, #80	; 0x50
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fe05 	bl	8005dde <TIM_ITRx_SetConfig>
      break;
 80051d4:	e02c      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f000 fd52 	bl	8005c8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2160      	movs	r1, #96	; 0x60
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fdf5 	bl	8005dde <TIM_ITRx_SetConfig>
      break;
 80051f4:	e01c      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6859      	ldr	r1, [r3, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	461a      	mov	r2, r3
 8005204:	f000 fcd6 	bl	8005bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2140      	movs	r1, #64	; 0x40
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fde5 	bl	8005dde <TIM_ITRx_SetConfig>
      break;
 8005214:	e00c      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f000 fddc 	bl	8005dde <TIM_ITRx_SetConfig>
      break;
 8005226:	e003      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      break;
 800522c:	e000      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800522e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	00100070 	.word	0x00100070
 8005250:	00100060 	.word	0x00100060
 8005254:	00100050 	.word	0x00100050
 8005258:	00100040 	.word	0x00100040
 800525c:	00100030 	.word	0x00100030
 8005260:	00100020 	.word	0x00100020

08005264 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d831      	bhi.n	80052dc <HAL_TIM_ReadCapturedValue+0x78>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <HAL_TIM_ReadCapturedValue+0x1c>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080052dd 	.word	0x080052dd
 8005288:	080052dd 	.word	0x080052dd
 800528c:	080052dd 	.word	0x080052dd
 8005290:	080052bf 	.word	0x080052bf
 8005294:	080052dd 	.word	0x080052dd
 8005298:	080052dd 	.word	0x080052dd
 800529c:	080052dd 	.word	0x080052dd
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052dd 	.word	0x080052dd
 80052a8:	080052dd 	.word	0x080052dd
 80052ac:	080052dd 	.word	0x080052dd
 80052b0:	080052d3 	.word	0x080052d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ba:	60fb      	str	r3, [r7, #12]

      break;
 80052bc:	e00f      	b.n	80052de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	60fb      	str	r3, [r7, #12]

      break;
 80052c6:	e00a      	b.n	80052de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	60fb      	str	r3, [r7, #12]

      break;
 80052d0:	e005      	b.n	80052de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	60fb      	str	r3, [r7, #12]

      break;
 80052da:	e000      	b.n	80052de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80052dc:	bf00      	nop
  }

  return tmpreg;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a46      	ldr	r2, [pc, #280]	; (8005454 <TIM_Base_SetConfig+0x12c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d017      	beq.n	8005370 <TIM_Base_SetConfig+0x48>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005346:	d013      	beq.n	8005370 <TIM_Base_SetConfig+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a43      	ldr	r2, [pc, #268]	; (8005458 <TIM_Base_SetConfig+0x130>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00f      	beq.n	8005370 <TIM_Base_SetConfig+0x48>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a42      	ldr	r2, [pc, #264]	; (800545c <TIM_Base_SetConfig+0x134>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00b      	beq.n	8005370 <TIM_Base_SetConfig+0x48>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a41      	ldr	r2, [pc, #260]	; (8005460 <TIM_Base_SetConfig+0x138>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d007      	beq.n	8005370 <TIM_Base_SetConfig+0x48>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a40      	ldr	r2, [pc, #256]	; (8005464 <TIM_Base_SetConfig+0x13c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_Base_SetConfig+0x48>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3f      	ldr	r2, [pc, #252]	; (8005468 <TIM_Base_SetConfig+0x140>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d108      	bne.n	8005382 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a33      	ldr	r2, [pc, #204]	; (8005454 <TIM_Base_SetConfig+0x12c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d023      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005390:	d01f      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a30      	ldr	r2, [pc, #192]	; (8005458 <TIM_Base_SetConfig+0x130>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01b      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2f      	ldr	r2, [pc, #188]	; (800545c <TIM_Base_SetConfig+0x134>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d017      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2e      	ldr	r2, [pc, #184]	; (8005460 <TIM_Base_SetConfig+0x138>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2d      	ldr	r2, [pc, #180]	; (8005464 <TIM_Base_SetConfig+0x13c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00f      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2d      	ldr	r2, [pc, #180]	; (800546c <TIM_Base_SetConfig+0x144>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00b      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2c      	ldr	r2, [pc, #176]	; (8005470 <TIM_Base_SetConfig+0x148>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d007      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2b      	ldr	r2, [pc, #172]	; (8005474 <TIM_Base_SetConfig+0x14c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_Base_SetConfig+0xaa>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a26      	ldr	r2, [pc, #152]	; (8005468 <TIM_Base_SetConfig+0x140>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d108      	bne.n	80053e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <TIM_Base_SetConfig+0x12c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <TIM_Base_SetConfig+0x110>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a14      	ldr	r2, [pc, #80]	; (8005464 <TIM_Base_SetConfig+0x13c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00f      	beq.n	8005438 <TIM_Base_SetConfig+0x110>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a14      	ldr	r2, [pc, #80]	; (800546c <TIM_Base_SetConfig+0x144>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_Base_SetConfig+0x110>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a13      	ldr	r2, [pc, #76]	; (8005470 <TIM_Base_SetConfig+0x148>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_Base_SetConfig+0x110>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a12      	ldr	r2, [pc, #72]	; (8005474 <TIM_Base_SetConfig+0x14c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_Base_SetConfig+0x110>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a0d      	ldr	r2, [pc, #52]	; (8005468 <TIM_Base_SetConfig+0x140>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d103      	bne.n	8005440 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	615a      	str	r2, [r3, #20]
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40015000 	.word	0x40015000
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a30      	ldr	r2, [pc, #192]	; (8005594 <TIM_OC1_SetConfig+0x11c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <TIM_OC1_SetConfig+0x120>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00f      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a2e      	ldr	r2, [pc, #184]	; (800559c <TIM_OC1_SetConfig+0x124>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <TIM_OC1_SetConfig+0x128>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a2c      	ldr	r2, [pc, #176]	; (80055a4 <TIM_OC1_SetConfig+0x12c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC1_SetConfig+0x88>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <TIM_OC1_SetConfig+0x130>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10c      	bne.n	800551a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0308 	bic.w	r3, r3, #8
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 0304 	bic.w	r3, r3, #4
 8005518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <TIM_OC1_SetConfig+0x11c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1c      	ldr	r2, [pc, #112]	; (8005598 <TIM_OC1_SetConfig+0x120>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00f      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <TIM_OC1_SetConfig+0x124>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1a      	ldr	r2, [pc, #104]	; (80055a0 <TIM_OC1_SetConfig+0x128>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <TIM_OC1_SetConfig+0x12c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC1_SetConfig+0xd2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <TIM_OC1_SetConfig+0x130>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d111      	bne.n	800556e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40013400 	.word	0x40013400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800
 80055a8:	40015000 	.word	0x40015000

080055ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0210 	bic.w	r2, r3, #16
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0320 	bic.w	r3, r3, #32
 80055fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a2c      	ldr	r2, [pc, #176]	; (80056bc <TIM_OC2_SetConfig+0x110>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_OC2_SetConfig+0x74>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2b      	ldr	r2, [pc, #172]	; (80056c0 <TIM_OC2_SetConfig+0x114>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_OC2_SetConfig+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a2a      	ldr	r2, [pc, #168]	; (80056c4 <TIM_OC2_SetConfig+0x118>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10d      	bne.n	800563c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <TIM_OC2_SetConfig+0x110>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d013      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <TIM_OC2_SetConfig+0x114>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00f      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <TIM_OC2_SetConfig+0x11c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00b      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <TIM_OC2_SetConfig+0x120>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <TIM_OC2_SetConfig+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC2_SetConfig+0xc0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <TIM_OC2_SetConfig+0x118>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d113      	bne.n	8005694 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800567a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40015000 	.word	0x40015000
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2b      	ldr	r2, [pc, #172]	; (80057e0 <TIM_OC3_SetConfig+0x10c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_OC3_SetConfig+0x72>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2a      	ldr	r2, [pc, #168]	; (80057e4 <TIM_OC3_SetConfig+0x110>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_OC3_SetConfig+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <TIM_OC3_SetConfig+0x114>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10d      	bne.n	8005762 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800574c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <TIM_OC3_SetConfig+0x10c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <TIM_OC3_SetConfig+0x110>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00f      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <TIM_OC3_SetConfig+0x118>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00b      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1c      	ldr	r2, [pc, #112]	; (80057f0 <TIM_OC3_SetConfig+0x11c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1b      	ldr	r2, [pc, #108]	; (80057f4 <TIM_OC3_SetConfig+0x120>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_OC3_SetConfig+0xbe>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <TIM_OC3_SetConfig+0x114>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d113      	bne.n	80057ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	621a      	str	r2, [r3, #32]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40015000 	.word	0x40015000
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	031b      	lsls	r3, r3, #12
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <TIM_OC4_SetConfig+0x110>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_OC4_SetConfig+0x74>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2b      	ldr	r2, [pc, #172]	; (800590c <TIM_OC4_SetConfig+0x114>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC4_SetConfig+0x74>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <TIM_OC4_SetConfig+0x118>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10d      	bne.n	8005888 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <TIM_OC4_SetConfig+0x110>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1e      	ldr	r2, [pc, #120]	; (800590c <TIM_OC4_SetConfig+0x114>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00f      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <TIM_OC4_SetConfig+0x11c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00b      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <TIM_OC4_SetConfig+0x120>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <TIM_OC4_SetConfig+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC4_SetConfig+0xc0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a17      	ldr	r2, [pc, #92]	; (8005910 <TIM_OC4_SetConfig+0x118>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d113      	bne.n	80058e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40015000 	.word	0x40015000
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a19      	ldr	r2, [pc, #100]	; (80059dc <TIM_OC5_SetConfig+0xbc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <TIM_OC5_SetConfig+0xc0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00f      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <TIM_OC5_SetConfig+0xc4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <TIM_OC5_SetConfig+0xc8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a15      	ldr	r2, [pc, #84]	; (80059ec <TIM_OC5_SetConfig+0xcc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC5_SetConfig+0x82>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <TIM_OC5_SetConfig+0xd0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d109      	bne.n	80059b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800
 80059f0:	40015000 	.word	0x40015000

080059f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	051b      	lsls	r3, r3, #20
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <TIM_OC6_SetConfig+0xc0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <TIM_OC6_SetConfig+0xc4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00f      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	; (8005abc <TIM_OC6_SetConfig+0xc8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a17      	ldr	r2, [pc, #92]	; (8005ac0 <TIM_OC6_SetConfig+0xcc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a16      	ldr	r2, [pc, #88]	; (8005ac4 <TIM_OC6_SetConfig+0xd0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC6_SetConfig+0x84>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <TIM_OC6_SetConfig+0xd4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d109      	bne.n	8005a8c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800
 8005ac8:	40015000 	.word	0x40015000

08005acc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f023 0201 	bic.w	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <TIM_TI1_SetConfig+0xcc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01b      	beq.n	8005b32 <TIM_TI1_SetConfig+0x66>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d017      	beq.n	8005b32 <TIM_TI1_SetConfig+0x66>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <TIM_TI1_SetConfig+0xd0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <TIM_TI1_SetConfig+0x66>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <TIM_TI1_SetConfig+0xd4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_TI1_SetConfig+0x66>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <TIM_TI1_SetConfig+0xd8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_TI1_SetConfig+0x66>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <TIM_TI1_SetConfig+0xdc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_TI1_SetConfig+0x66>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a21      	ldr	r2, [pc, #132]	; (8005bac <TIM_TI1_SetConfig+0xe0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_TI1_SetConfig+0x66>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <TIM_TI1_SetConfig+0xe4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d101      	bne.n	8005b36 <TIM_TI1_SetConfig+0x6a>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <TIM_TI1_SetConfig+0x6c>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d008      	beq.n	8005b4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	e003      	b.n	8005b56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f043 0301 	orr.w	r3, r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f023 030a 	bic.w	r3, r3, #10
 8005b70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f003 030a 	and.w	r3, r3, #10
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800
 8005ba4:	40000c00 	.word	0x40000c00
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40015000 	.word	0x40015000

08005bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0201 	bic.w	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f023 030a 	bic.w	r3, r3, #10
 8005bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b087      	sub	sp, #28
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
 8005c1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f023 0210 	bic.w	r2, r3, #16
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	031b      	lsls	r3, r3, #12
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f023 0210 	bic.w	r2, r3, #16
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	031b      	lsls	r3, r3, #12
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	621a      	str	r2, [r3, #32]
}
 8005ce0:	bf00      	nop
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0303 	bic.w	r3, r3, #3
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005da2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	031b      	lsls	r3, r3, #12
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005db6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	031b      	lsls	r3, r3, #12
 8005dbc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f043 0307 	orr.w	r3, r3, #7
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	021a      	lsls	r2, r3, #8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e074      	b.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a34      	ldr	r2, [pc, #208]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a33      	ldr	r2, [pc, #204]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a31      	ldr	r2, [pc, #196]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d022      	beq.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3c:	d01d      	beq.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d018      	beq.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00e      	beq.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d009      	beq.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d004      	beq.n	8005f7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d10c      	bne.n	8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40013400 	.word	0x40013400
 8005fbc:	40015000 	.word	0x40015000
 8005fc0:	40000400 	.word	0x40000400
 8005fc4:	40000800 	.word	0x40000800
 8005fc8:	40000c00 	.word	0x40000c00
 8005fcc:	40014000 	.word	0x40014000

08005fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e042      	b.n	80060f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fc fb29 	bl	80026d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2224      	movs	r2, #36	; 0x24
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fd24 	bl	8006aec <UART_SetConfig>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e022      	b.n	80060f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 f814 	bl	80070e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 f89b 	bl	8007228 <UART_CheckIdleState>
 80060f2:	4603      	mov	r3, r0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	; 0x28
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4613      	mov	r3, r2
 800610a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006112:	2b20      	cmp	r3, #32
 8006114:	f040 8083 	bne.w	800621e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_UART_Transmit+0x28>
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e07b      	b.n	8006220 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_UART_Transmit+0x3a>
 8006132:	2302      	movs	r3, #2
 8006134:	e074      	b.n	8006220 <HAL_UART_Transmit+0x124>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2221      	movs	r2, #33	; 0x21
 800614a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800614e:	f7fc fc33 	bl	80029b8 <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	88fa      	ldrh	r2, [r7, #6]
 8006158:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616c:	d108      	bne.n	8006180 <HAL_UART_Transmit+0x84>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	e003      	b.n	8006188 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006190:	e02c      	b.n	80061ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2200      	movs	r2, #0
 800619a:	2180      	movs	r1, #128	; 0x80
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f001 f88e 	bl	80072be <UART_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e039      	b.n	8006220 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	3302      	adds	r3, #2
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e007      	b.n	80061da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	781a      	ldrb	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1cc      	bne.n	8006192 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2200      	movs	r2, #0
 8006200:	2140      	movs	r1, #64	; 0x40
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f001 f85b 	bl	80072be <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e006      	b.n	8006220 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e000      	b.n	8006220 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	; 0x28
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623e:	2b20      	cmp	r3, #32
 8006240:	f040 80c0 	bne.w	80063c4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_UART_Receive+0x28>
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0b8      	b.n	80063c6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_UART_Receive+0x3a>
 800625e:	2302      	movs	r3, #2
 8006260:	e0b1      	b.n	80063c6 <HAL_UART_Receive+0x19e>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2222      	movs	r2, #34	; 0x22
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006280:	f7fc fb9a 	bl	80029b8 <HAL_GetTick>
 8006284:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629e:	d10e      	bne.n	80062be <HAL_UART_Receive+0x96>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d105      	bne.n	80062b4 <HAL_UART_Receive+0x8c>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062b2:	e02d      	b.n	8006310 <HAL_UART_Receive+0xe8>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	22ff      	movs	r2, #255	; 0xff
 80062b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062bc:	e028      	b.n	8006310 <HAL_UART_Receive+0xe8>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10d      	bne.n	80062e2 <HAL_UART_Receive+0xba>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d104      	bne.n	80062d8 <HAL_UART_Receive+0xb0>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	22ff      	movs	r2, #255	; 0xff
 80062d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062d6:	e01b      	b.n	8006310 <HAL_UART_Receive+0xe8>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	227f      	movs	r2, #127	; 0x7f
 80062dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062e0:	e016      	b.n	8006310 <HAL_UART_Receive+0xe8>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ea:	d10d      	bne.n	8006308 <HAL_UART_Receive+0xe0>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <HAL_UART_Receive+0xd6>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	227f      	movs	r2, #127	; 0x7f
 80062f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062fc:	e008      	b.n	8006310 <HAL_UART_Receive+0xe8>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	223f      	movs	r2, #63	; 0x3f
 8006302:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006306:	e003      	b.n	8006310 <HAL_UART_Receive+0xe8>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006316:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006320:	d108      	bne.n	8006334 <HAL_UART_Receive+0x10c>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d104      	bne.n	8006334 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e003      	b.n	800633c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006344:	e032      	b.n	80063ac <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2200      	movs	r2, #0
 800634e:	2120      	movs	r1, #32
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 ffb4 	bl	80072be <UART_WaitOnFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e032      	b.n	80063c6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10c      	bne.n	8006380 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	b29a      	uxth	r2, r3
 800636e:	8a7b      	ldrh	r3, [r7, #18]
 8006370:	4013      	ands	r3, r2
 8006372:	b29a      	uxth	r2, r3
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	3302      	adds	r3, #2
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	e00c      	b.n	800639a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	b2da      	uxtb	r2, r3
 8006388:	8a7b      	ldrh	r3, [r7, #18]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	4013      	ands	r3, r2
 800638e:	b2da      	uxtb	r2, r3
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	3301      	adds	r3, #1
 8006398:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1c6      	bne.n	8006346 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e000      	b.n	80063c6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d142      	bne.n	800646e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_UART_Receive_IT+0x24>
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e03b      	b.n	8006470 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_UART_Receive_IT+0x36>
 8006402:	2302      	movs	r3, #2
 8006404:	e034      	b.n	8006470 <HAL_UART_Receive_IT+0xa0>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a17      	ldr	r2, [pc, #92]	; (8006478 <HAL_UART_Receive_IT+0xa8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01f      	beq.n	800645e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d018      	beq.n	800645e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	613b      	str	r3, [r7, #16]
   return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	623b      	str	r3, [r7, #32]
 800644c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	69f9      	ldr	r1, [r7, #28]
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	61bb      	str	r3, [r7, #24]
   return(result);
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e6      	bne.n	800642c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	461a      	mov	r2, r3
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fff3 	bl	8007450 <UART_Start_Receive_IT>
 800646a:	4603      	mov	r3, r0
 800646c:	e000      	b.n	8006470 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800646e:	2302      	movs	r3, #2
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	3728      	adds	r7, #40	; 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40008000 	.word	0x40008000

0800647c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b0ba      	sub	sp, #232	; 0xe8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80064aa:	4013      	ands	r3, r2
 80064ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d11b      	bne.n	80064f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d015      	beq.n	80064f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d105      	bne.n	80064dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d009      	beq.n	80064f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 82d6 	beq.w	8006a92 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
      }
      return;
 80064ee:	e2d0      	b.n	8006a92 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 811f 	beq.w	8006738 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80064fe:	4b8b      	ldr	r3, [pc, #556]	; (800672c <HAL_UART_IRQHandler+0x2b0>)
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006506:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800650a:	4b89      	ldr	r3, [pc, #548]	; (8006730 <HAL_UART_IRQHandler+0x2b4>)
 800650c:	4013      	ands	r3, r2
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 8112 	beq.w	8006738 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d011      	beq.n	8006544 <HAL_UART_IRQHandler+0xc8>
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2201      	movs	r2, #1
 8006532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d011      	beq.n	8006574 <HAL_UART_IRQHandler+0xf8>
 8006550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2202      	movs	r2, #2
 8006562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656a:	f043 0204 	orr.w	r2, r3, #4
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d011      	beq.n	80065a4 <HAL_UART_IRQHandler+0x128>
 8006580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2204      	movs	r2, #4
 8006592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800659a:	f043 0202 	orr.w	r2, r3, #2
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d017      	beq.n	80065e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d105      	bne.n	80065c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065c0:	4b5a      	ldr	r3, [pc, #360]	; (800672c <HAL_UART_IRQHandler+0x2b0>)
 80065c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2208      	movs	r2, #8
 80065ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d6:	f043 0208 	orr.w	r2, r3, #8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d012      	beq.n	8006612 <HAL_UART_IRQHandler+0x196>
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00c      	beq.n	8006612 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006608:	f043 0220 	orr.w	r2, r3, #32
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 823c 	beq.w	8006a96 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800661e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d013      	beq.n	8006652 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800662a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d105      	bne.n	8006642 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800663a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	d005      	beq.n	8006676 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800666a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04f      	beq.n	8006716 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 f814 	bl	80076a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d141      	bne.n	800670e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3308      	adds	r3, #8
 80066b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1d9      	bne.n	800668a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d013      	beq.n	8006706 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e2:	4a14      	ldr	r2, [pc, #80]	; (8006734 <HAL_UART_IRQHandler+0x2b8>)
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fc fad8 	bl	8002ca0 <HAL_DMA_Abort_IT>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d017      	beq.n	8006726 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	e00f      	b.n	8006726 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f9da 	bl	8006ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e00b      	b.n	8006726 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9d6 	bl	8006ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	e007      	b.n	8006726 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9d2 	bl	8006ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006724:	e1b7      	b.n	8006a96 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006726:	bf00      	nop
    return;
 8006728:	e1b5      	b.n	8006a96 <HAL_UART_IRQHandler+0x61a>
 800672a:	bf00      	nop
 800672c:	10000001 	.word	0x10000001
 8006730:	04000120 	.word	0x04000120
 8006734:	08007771 	.word	0x08007771

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673c:	2b01      	cmp	r3, #1
 800673e:	f040 814a 	bne.w	80069d6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8143 	beq.w	80069d6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 813c 	beq.w	80069d6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2210      	movs	r2, #16
 8006764:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	f040 80b5 	bne.w	80068e0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006782:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8187 	beq.w	8006a9a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006796:	429a      	cmp	r2, r3
 8006798:	f080 817f 	bcs.w	8006a9a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f040 8086 	bne.w	80068c4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1da      	bne.n	80067b8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006826:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800682a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800682e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e1      	bne.n	8006802 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800684e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3308      	adds	r3, #8
 800685e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e3      	bne.n	800683e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006894:	f023 0310 	bic.w	r3, r3, #16
 8006898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e4      	bne.n	8006884 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fc f995 	bl	8002bee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f8fb 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068de:	e0dc      	b.n	8006a9a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80ce 	beq.w	8006a9e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 80c9 	beq.w	8006a9e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800692e:	647b      	str	r3, [r7, #68]	; 0x44
 8006930:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e4      	bne.n	800690c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3308      	adds	r3, #8
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	623b      	str	r3, [r7, #32]
   return(result);
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3308      	adds	r3, #8
 8006966:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800696a:	633a      	str	r2, [r7, #48]	; 0x30
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e1      	bne.n	8006942 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0310 	bic.w	r3, r3, #16
 80069a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	617b      	str	r3, [r7, #20]
   return(result);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e4      	bne.n	8006992 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f880 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069d4:	e063      	b.n	8006a9e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00e      	beq.n	8006a00 <HAL_UART_IRQHandler+0x584>
 80069e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 fb57 	bl	80080ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069fe:	e051      	b.n	8006aa4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d014      	beq.n	8006a36 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d03a      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
    }
    return;
 8006a34:	e035      	b.n	8006aa2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <HAL_UART_IRQHandler+0x5da>
 8006a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fea4 	bl	800779c <UART_EndTransmit_IT>
    return;
 8006a54:	e026      	b.n	8006aa4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <HAL_UART_IRQHandler+0x5fa>
 8006a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 fb30 	bl	80080d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a74:	e016      	b.n	8006aa4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x628>
 8006a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	da0c      	bge.n	8006aa4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fb18 	bl	80080c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a90:	e008      	b.n	8006aa4 <HAL_UART_IRQHandler+0x628>
      return;
 8006a92:	bf00      	nop
 8006a94:	e006      	b.n	8006aa4 <HAL_UART_IRQHandler+0x628>
    return;
 8006a96:	bf00      	nop
 8006a98:	e004      	b.n	8006aa4 <HAL_UART_IRQHandler+0x628>
      return;
 8006a9a:	bf00      	nop
 8006a9c:	e002      	b.n	8006aa4 <HAL_UART_IRQHandler+0x628>
      return;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <HAL_UART_IRQHandler+0x628>
    return;
 8006aa2:	bf00      	nop
  }
}
 8006aa4:	37e8      	adds	r7, #232	; 0xe8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop

08006aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af0:	b08c      	sub	sp, #48	; 0x30
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4baa      	ldr	r3, [pc, #680]	; (8006dc4 <UART_SetConfig+0x2d8>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b24:	430b      	orrs	r3, r1
 8006b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a9f      	ldr	r2, [pc, #636]	; (8006dc8 <UART_SetConfig+0x2dc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b54:	4313      	orrs	r3, r2
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	6812      	ldr	r2, [r2, #0]
 8006b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	f023 010f 	bic.w	r1, r3, #15
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a90      	ldr	r2, [pc, #576]	; (8006dcc <UART_SetConfig+0x2e0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d125      	bne.n	8006bdc <UART_SetConfig+0xf0>
 8006b90:	4b8f      	ldr	r3, [pc, #572]	; (8006dd0 <UART_SetConfig+0x2e4>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d81a      	bhi.n	8006bd4 <UART_SetConfig+0xe8>
 8006b9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <UART_SetConfig+0xb8>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006bb5 	.word	0x08006bb5
 8006ba8:	08006bc5 	.word	0x08006bc5
 8006bac:	08006bbd 	.word	0x08006bbd
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bba:	e116      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc2:	e112      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bca:	e10e      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006bcc:	2308      	movs	r3, #8
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd2:	e10a      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bda:	e106      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a7c      	ldr	r2, [pc, #496]	; (8006dd4 <UART_SetConfig+0x2e8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d138      	bne.n	8006c58 <UART_SetConfig+0x16c>
 8006be6:	4b7a      	ldr	r3, [pc, #488]	; (8006dd0 <UART_SetConfig+0x2e4>)
 8006be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b0c      	cmp	r3, #12
 8006bf2:	d82d      	bhi.n	8006c50 <UART_SetConfig+0x164>
 8006bf4:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x110>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c31 	.word	0x08006c31
 8006c00:	08006c51 	.word	0x08006c51
 8006c04:	08006c51 	.word	0x08006c51
 8006c08:	08006c51 	.word	0x08006c51
 8006c0c:	08006c41 	.word	0x08006c41
 8006c10:	08006c51 	.word	0x08006c51
 8006c14:	08006c51 	.word	0x08006c51
 8006c18:	08006c51 	.word	0x08006c51
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	08006c51 	.word	0x08006c51
 8006c24:	08006c51 	.word	0x08006c51
 8006c28:	08006c51 	.word	0x08006c51
 8006c2c:	08006c49 	.word	0x08006c49
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c36:	e0d8      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3e:	e0d4      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006c40:	2304      	movs	r3, #4
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c46:	e0d0      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006c48:	2308      	movs	r3, #8
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4e:	e0cc      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006c50:	2310      	movs	r3, #16
 8006c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c56:	e0c8      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a5e      	ldr	r2, [pc, #376]	; (8006dd8 <UART_SetConfig+0x2ec>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d125      	bne.n	8006cae <UART_SetConfig+0x1c2>
 8006c62:	4b5b      	ldr	r3, [pc, #364]	; (8006dd0 <UART_SetConfig+0x2e4>)
 8006c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c6c:	2b30      	cmp	r3, #48	; 0x30
 8006c6e:	d016      	beq.n	8006c9e <UART_SetConfig+0x1b2>
 8006c70:	2b30      	cmp	r3, #48	; 0x30
 8006c72:	d818      	bhi.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d00a      	beq.n	8006c8e <UART_SetConfig+0x1a2>
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d814      	bhi.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <UART_SetConfig+0x19a>
 8006c80:	2b10      	cmp	r3, #16
 8006c82:	d008      	beq.n	8006c96 <UART_SetConfig+0x1aa>
 8006c84:	e00f      	b.n	8006ca6 <UART_SetConfig+0x1ba>
 8006c86:	2300      	movs	r3, #0
 8006c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8c:	e0ad      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c94:	e0a9      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006c96:	2304      	movs	r3, #4
 8006c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9c:	e0a5      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca4:	e0a1      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006ca6:	2310      	movs	r3, #16
 8006ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cac:	e09d      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a4a      	ldr	r2, [pc, #296]	; (8006ddc <UART_SetConfig+0x2f0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d125      	bne.n	8006d04 <UART_SetConfig+0x218>
 8006cb8:	4b45      	ldr	r3, [pc, #276]	; (8006dd0 <UART_SetConfig+0x2e4>)
 8006cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc4:	d016      	beq.n	8006cf4 <UART_SetConfig+0x208>
 8006cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc8:	d818      	bhi.n	8006cfc <UART_SetConfig+0x210>
 8006cca:	2b80      	cmp	r3, #128	; 0x80
 8006ccc:	d00a      	beq.n	8006ce4 <UART_SetConfig+0x1f8>
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d814      	bhi.n	8006cfc <UART_SetConfig+0x210>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <UART_SetConfig+0x1f0>
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d008      	beq.n	8006cec <UART_SetConfig+0x200>
 8006cda:	e00f      	b.n	8006cfc <UART_SetConfig+0x210>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce2:	e082      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cea:	e07e      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006cec:	2304      	movs	r3, #4
 8006cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf2:	e07a      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfa:	e076      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d02:	e072      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a35      	ldr	r2, [pc, #212]	; (8006de0 <UART_SetConfig+0x2f4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d12a      	bne.n	8006d64 <UART_SetConfig+0x278>
 8006d0e:	4b30      	ldr	r3, [pc, #192]	; (8006dd0 <UART_SetConfig+0x2e4>)
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d1c:	d01a      	beq.n	8006d54 <UART_SetConfig+0x268>
 8006d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d22:	d81b      	bhi.n	8006d5c <UART_SetConfig+0x270>
 8006d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d28:	d00c      	beq.n	8006d44 <UART_SetConfig+0x258>
 8006d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d2e:	d815      	bhi.n	8006d5c <UART_SetConfig+0x270>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <UART_SetConfig+0x250>
 8006d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d38:	d008      	beq.n	8006d4c <UART_SetConfig+0x260>
 8006d3a:	e00f      	b.n	8006d5c <UART_SetConfig+0x270>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e052      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006d44:	2302      	movs	r3, #2
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4a:	e04e      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d52:	e04a      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006d54:	2308      	movs	r3, #8
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5a:	e046      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d62:	e042      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <UART_SetConfig+0x2dc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d13a      	bne.n	8006de4 <UART_SetConfig+0x2f8>
 8006d6e:	4b18      	ldr	r3, [pc, #96]	; (8006dd0 <UART_SetConfig+0x2e4>)
 8006d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d7c:	d01a      	beq.n	8006db4 <UART_SetConfig+0x2c8>
 8006d7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d82:	d81b      	bhi.n	8006dbc <UART_SetConfig+0x2d0>
 8006d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d88:	d00c      	beq.n	8006da4 <UART_SetConfig+0x2b8>
 8006d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8e:	d815      	bhi.n	8006dbc <UART_SetConfig+0x2d0>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <UART_SetConfig+0x2b0>
 8006d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d98:	d008      	beq.n	8006dac <UART_SetConfig+0x2c0>
 8006d9a:	e00f      	b.n	8006dbc <UART_SetConfig+0x2d0>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da2:	e022      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006da4:	2302      	movs	r3, #2
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006daa:	e01e      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006dac:	2304      	movs	r3, #4
 8006dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db2:	e01a      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006db4:	2308      	movs	r3, #8
 8006db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dba:	e016      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc2:	e012      	b.n	8006dea <UART_SetConfig+0x2fe>
 8006dc4:	cfff69f3 	.word	0xcfff69f3
 8006dc8:	40008000 	.word	0x40008000
 8006dcc:	40013800 	.word	0x40013800
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	40004400 	.word	0x40004400
 8006dd8:	40004800 	.word	0x40004800
 8006ddc:	40004c00 	.word	0x40004c00
 8006de0:	40005000 	.word	0x40005000
 8006de4:	2310      	movs	r3, #16
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4aae      	ldr	r2, [pc, #696]	; (80070a8 <UART_SetConfig+0x5bc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	f040 8097 	bne.w	8006f24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006df6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d823      	bhi.n	8006e46 <UART_SetConfig+0x35a>
 8006dfe:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <UART_SetConfig+0x318>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e29 	.word	0x08006e29
 8006e08:	08006e47 	.word	0x08006e47
 8006e0c:	08006e31 	.word	0x08006e31
 8006e10:	08006e47 	.word	0x08006e47
 8006e14:	08006e37 	.word	0x08006e37
 8006e18:	08006e47 	.word	0x08006e47
 8006e1c:	08006e47 	.word	0x08006e47
 8006e20:	08006e47 	.word	0x08006e47
 8006e24:	08006e3f 	.word	0x08006e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e28:	f7fc feba 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8006e2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e2e:	e010      	b.n	8006e52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e30:	4b9e      	ldr	r3, [pc, #632]	; (80070ac <UART_SetConfig+0x5c0>)
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e34:	e00d      	b.n	8006e52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e36:	f7fc fe45 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8006e3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e3c:	e009      	b.n	8006e52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e44:	e005      	b.n	8006e52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8130 	beq.w	80070ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	4a94      	ldr	r2, [pc, #592]	; (80070b0 <UART_SetConfig+0x5c4>)
 8006e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	4413      	add	r3, r2
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d305      	bcc.n	8006e8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d903      	bls.n	8006e92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e90:	e113      	b.n	80070ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	2200      	movs	r2, #0
 8006e96:	60bb      	str	r3, [r7, #8]
 8006e98:	60fa      	str	r2, [r7, #12]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	4a84      	ldr	r2, [pc, #528]	; (80070b0 <UART_SetConfig+0x5c4>)
 8006ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eb4:	f7f9 fee8 	bl	8000c88 <__aeabi_uldivmod>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	020b      	lsls	r3, r1, #8
 8006eca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ece:	0202      	lsls	r2, r0, #8
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	6849      	ldr	r1, [r1, #4]
 8006ed4:	0849      	lsrs	r1, r1, #1
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	4605      	mov	r5, r0
 8006edc:	eb12 0804 	adds.w	r8, r2, r4
 8006ee0:	eb43 0905 	adc.w	r9, r3, r5
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	469a      	mov	sl, r3
 8006eec:	4693      	mov	fp, r2
 8006eee:	4652      	mov	r2, sl
 8006ef0:	465b      	mov	r3, fp
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	f7f9 fec7 	bl	8000c88 <__aeabi_uldivmod>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4613      	mov	r3, r2
 8006f00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f08:	d308      	bcc.n	8006f1c <UART_SetConfig+0x430>
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f10:	d204      	bcs.n	8006f1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6a3a      	ldr	r2, [r7, #32]
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	e0ce      	b.n	80070ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f22:	e0ca      	b.n	80070ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2c:	d166      	bne.n	8006ffc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006f2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d827      	bhi.n	8006f86 <UART_SetConfig+0x49a>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <UART_SetConfig+0x450>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	08006f87 	.word	0x08006f87
 8006f4c:	08006f77 	.word	0x08006f77
 8006f50:	08006f87 	.word	0x08006f87
 8006f54:	08006f87 	.word	0x08006f87
 8006f58:	08006f87 	.word	0x08006f87
 8006f5c:	08006f7f 	.word	0x08006f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f60:	f7fc fe1e 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8006f64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f66:	e014      	b.n	8006f92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f68:	f7fc fe30 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8006f6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f6e:	e010      	b.n	8006f92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f70:	4b4e      	ldr	r3, [pc, #312]	; (80070ac <UART_SetConfig+0x5c0>)
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f74:	e00d      	b.n	8006f92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f76:	f7fc fda5 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8006f7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f7c:	e009      	b.n	8006f92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f84:	e005      	b.n	8006f92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8090 	beq.w	80070ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	4a44      	ldr	r2, [pc, #272]	; (80070b0 <UART_SetConfig+0x5c4>)
 8006fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fac:	005a      	lsls	r2, r3, #1
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	441a      	add	r2, r3
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	2b0f      	cmp	r3, #15
 8006fc4:	d916      	bls.n	8006ff4 <UART_SetConfig+0x508>
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fcc:	d212      	bcs.n	8006ff4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f023 030f 	bic.w	r3, r3, #15
 8006fd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	8bfb      	ldrh	r3, [r7, #30]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	8bfa      	ldrh	r2, [r7, #30]
 8006ff0:	60da      	str	r2, [r3, #12]
 8006ff2:	e062      	b.n	80070ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ffa:	e05e      	b.n	80070ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007000:	2b08      	cmp	r3, #8
 8007002:	d828      	bhi.n	8007056 <UART_SetConfig+0x56a>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <UART_SetConfig+0x520>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007031 	.word	0x08007031
 8007010:	08007039 	.word	0x08007039
 8007014:	08007041 	.word	0x08007041
 8007018:	08007057 	.word	0x08007057
 800701c:	08007047 	.word	0x08007047
 8007020:	08007057 	.word	0x08007057
 8007024:	08007057 	.word	0x08007057
 8007028:	08007057 	.word	0x08007057
 800702c:	0800704f 	.word	0x0800704f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007030:	f7fc fdb6 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8007034:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007036:	e014      	b.n	8007062 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007038:	f7fc fdc8 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 800703c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800703e:	e010      	b.n	8007062 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <UART_SetConfig+0x5c0>)
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007044:	e00d      	b.n	8007062 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007046:	f7fc fd3d 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 800704a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800704c:	e009      	b.n	8007062 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800704e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007054:	e005      	b.n	8007062 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007060:	bf00      	nop
    }

    if (pclk != 0U)
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d028      	beq.n	80070ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	4a10      	ldr	r2, [pc, #64]	; (80070b0 <UART_SetConfig+0x5c4>)
 800706e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007072:	461a      	mov	r2, r3
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	fbb3 f2f2 	udiv	r2, r3, r2
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	441a      	add	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	fbb2 f3f3 	udiv	r3, r2, r3
 800708a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	2b0f      	cmp	r3, #15
 8007090:	d910      	bls.n	80070b4 <UART_SetConfig+0x5c8>
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007098:	d20c      	bcs.n	80070b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	b29a      	uxth	r2, r3
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60da      	str	r2, [r3, #12]
 80070a4:	e009      	b.n	80070ba <UART_SetConfig+0x5ce>
 80070a6:	bf00      	nop
 80070a8:	40008000 	.word	0x40008000
 80070ac:	00f42400 	.word	0x00f42400
 80070b0:	0800d924 	.word	0x0800d924
      }
      else
      {
        ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2201      	movs	r2, #1
 80070be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2200      	movs	r2, #0
 80070ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2200      	movs	r2, #0
 80070d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80070d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3730      	adds	r7, #48	; 0x30
 80070de:	46bd      	mov	sp, r7
 80070e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080070e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01a      	beq.n	80071fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e2:	d10a      	bne.n	80071fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af02      	add	r7, sp, #8
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007238:	f7fb fbbe 	bl	80029b8 <HAL_GetTick>
 800723c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b08      	cmp	r3, #8
 800724a:	d10e      	bne.n	800726a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800724c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f82f 	bl	80072be <UART_WaitOnFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e025      	b.n	80072b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b04      	cmp	r3, #4
 8007276:	d10e      	bne.n	8007296 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f819 	bl	80072be <UART_WaitOnFlagUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e00f      	b.n	80072b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b09c      	sub	sp, #112	; 0x70
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	603b      	str	r3, [r7, #0]
 80072ca:	4613      	mov	r3, r2
 80072cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ce:	e0a9      	b.n	8007424 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d6:	f000 80a5 	beq.w	8007424 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072da:	f7fb fb6d 	bl	80029b8 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d302      	bcc.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80072ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d140      	bne.n	8007372 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007304:	667b      	str	r3, [r7, #100]	; 0x64
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007310:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800731c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e6      	bne.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3308      	adds	r3, #8
 8007328:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	663b      	str	r3, [r7, #96]	; 0x60
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007342:	64ba      	str	r2, [r7, #72]	; 0x48
 8007344:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e5      	bne.n	8007322 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2220      	movs	r2, #32
 8007362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e069      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d051      	beq.n	8007424 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800738a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800738e:	d149      	bne.n	8007424 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007398:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e6      	bne.n	800739a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3308      	adds	r3, #8
 80073d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	613b      	str	r3, [r7, #16]
   return(result);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3308      	adds	r3, #8
 80073ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073ec:	623a      	str	r2, [r7, #32]
 80073ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	69f9      	ldr	r1, [r7, #28]
 80073f2:	6a3a      	ldr	r2, [r7, #32]
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e5      	bne.n	80073cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e010      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69da      	ldr	r2, [r3, #28]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4013      	ands	r3, r2
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	429a      	cmp	r2, r3
 8007432:	bf0c      	ite	eq
 8007434:	2301      	moveq	r3, #1
 8007436:	2300      	movne	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	461a      	mov	r2, r3
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	429a      	cmp	r2, r3
 8007440:	f43f af46 	beq.w	80072d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3770      	adds	r7, #112	; 0x70
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007450:	b480      	push	{r7}
 8007452:	b0a3      	sub	sp, #140	; 0x8c
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	88fa      	ldrh	r2, [r7, #6]
 8007470:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007482:	d10e      	bne.n	80074a2 <UART_Start_Receive_IT+0x52>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d105      	bne.n	8007498 <UART_Start_Receive_IT+0x48>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007492:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007496:	e02d      	b.n	80074f4 <UART_Start_Receive_IT+0xa4>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	22ff      	movs	r2, #255	; 0xff
 800749c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074a0:	e028      	b.n	80074f4 <UART_Start_Receive_IT+0xa4>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10d      	bne.n	80074c6 <UART_Start_Receive_IT+0x76>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <UART_Start_Receive_IT+0x6c>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074ba:	e01b      	b.n	80074f4 <UART_Start_Receive_IT+0xa4>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	227f      	movs	r2, #127	; 0x7f
 80074c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074c4:	e016      	b.n	80074f4 <UART_Start_Receive_IT+0xa4>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ce:	d10d      	bne.n	80074ec <UART_Start_Receive_IT+0x9c>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <UART_Start_Receive_IT+0x92>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	227f      	movs	r2, #127	; 0x7f
 80074dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074e0:	e008      	b.n	80074f4 <UART_Start_Receive_IT+0xa4>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	223f      	movs	r2, #63	; 0x3f
 80074e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074ea:	e003      	b.n	80074f4 <UART_Start_Receive_IT+0xa4>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2222      	movs	r2, #34	; 0x22
 8007500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007528:	673a      	str	r2, [r7, #112]	; 0x70
 800752a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800752e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e3      	bne.n	8007504 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007544:	d153      	bne.n	80075ee <UART_Start_Receive_IT+0x19e>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	429a      	cmp	r2, r3
 8007550:	d34d      	bcc.n	80075ee <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755a:	d107      	bne.n	800756c <UART_Start_Receive_IT+0x11c>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a4b      	ldr	r2, [pc, #300]	; (8007694 <UART_Start_Receive_IT+0x244>)
 8007568:	671a      	str	r2, [r3, #112]	; 0x70
 800756a:	e002      	b.n	8007572 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a4a      	ldr	r2, [pc, #296]	; (8007698 <UART_Start_Receive_IT+0x248>)
 8007570:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d01a      	beq.n	80075b8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007596:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e4      	bne.n	8007582 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3308      	adds	r3, #8
 80075be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3308      	adds	r3, #8
 80075d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80075d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80075da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e5      	bne.n	80075b8 <UART_Start_Receive_IT+0x168>
 80075ec:	e04a      	b.n	8007684 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f6:	d107      	bne.n	8007608 <UART_Start_Receive_IT+0x1b8>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d103      	bne.n	8007608 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a26      	ldr	r2, [pc, #152]	; (800769c <UART_Start_Receive_IT+0x24c>)
 8007604:	671a      	str	r2, [r3, #112]	; 0x70
 8007606:	e002      	b.n	800760e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4a25      	ldr	r2, [pc, #148]	; (80076a0 <UART_Start_Receive_IT+0x250>)
 800760c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d019      	beq.n	8007652 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007632:	677b      	str	r3, [r7, #116]	; 0x74
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
 800763e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_Start_Receive_IT+0x1ce>
 8007650:	e018      	b.n	8007684 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	613b      	str	r3, [r7, #16]
   return(result);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f043 0320 	orr.w	r3, r3, #32
 8007666:	67bb      	str	r3, [r7, #120]	; 0x78
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	61bb      	str	r3, [r7, #24]
   return(result);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	378c      	adds	r7, #140	; 0x8c
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	08007dad 	.word	0x08007dad
 8007698:	08007ab5 	.word	0x08007ab5
 800769c:	08007953 	.word	0x08007953
 80076a0:	080077f3 	.word	0x080077f3

080076a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b095      	sub	sp, #84	; 0x54
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ca:	643b      	str	r3, [r7, #64]	; 0x40
 80076cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e6      	bne.n	80076ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f4:	f023 0301 	bic.w	r3, r3, #1
 80076f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e3      	bne.n	80076de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800771a:	2b01      	cmp	r3, #1
 800771c:	d118      	bne.n	8007750 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	60bb      	str	r3, [r7, #8]
   return(result);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f023 0310 	bic.w	r3, r3, #16
 8007732:	647b      	str	r3, [r7, #68]	; 0x44
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6979      	ldr	r1, [r7, #20]
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	613b      	str	r3, [r7, #16]
   return(result);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e6      	bne.n	800771e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007764:	bf00      	nop
 8007766:	3754      	adds	r7, #84	; 0x54
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff f996 	bl	8006ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b8:	61fb      	str	r3, [r7, #28]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6979      	ldr	r1, [r7, #20]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	613b      	str	r3, [r7, #16]
   return(result);
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e6      	bne.n	80077a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff f961 	bl	8006aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ea:	bf00      	nop
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b096      	sub	sp, #88	; 0x58
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007800:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780a:	2b22      	cmp	r3, #34	; 0x22
 800780c:	f040 8095 	bne.w	800793a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800781a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800781e:	b2d9      	uxtb	r1, r3
 8007820:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007824:	b2da      	uxtb	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782a:	400a      	ands	r2, r1
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	b29a      	uxth	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d178      	bne.n	800794a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786c:	653b      	str	r3, [r7, #80]	; 0x50
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007876:	647b      	str	r3, [r7, #68]	; 0x44
 8007878:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800787c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e6      	bne.n	8007858 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3308      	adds	r3, #8
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	623b      	str	r3, [r7, #32]
   return(result);
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f023 0301 	bic.w	r3, r3, #1
 80078a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078aa:	633a      	str	r2, [r7, #48]	; 0x30
 80078ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e5      	bne.n	800788a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d12e      	bne.n	8007932 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0310 	bic.w	r3, r3, #16
 80078ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f8:	61fb      	str	r3, [r7, #28]
 80078fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	69b9      	ldr	r1, [r7, #24]
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	617b      	str	r3, [r7, #20]
   return(result);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e6      	bne.n	80078da <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f003 0310 	and.w	r3, r3, #16
 8007916:	2b10      	cmp	r3, #16
 8007918:	d103      	bne.n	8007922 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2210      	movs	r2, #16
 8007920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff f8d2 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007930:	e00b      	b.n	800794a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fa f86a 	bl	8001a0c <HAL_UART_RxCpltCallback>
}
 8007938:	e007      	b.n	800794a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699a      	ldr	r2, [r3, #24]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f042 0208 	orr.w	r2, r2, #8
 8007948:	619a      	str	r2, [r3, #24]
}
 800794a:	bf00      	nop
 800794c:	3758      	adds	r7, #88	; 0x58
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b096      	sub	sp, #88	; 0x58
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007960:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796a:	2b22      	cmp	r3, #34	; 0x22
 800796c:	f040 8095 	bne.w	8007a9a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007980:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007984:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007988:	4013      	ands	r3, r2
 800798a:	b29a      	uxth	r2, r3
 800798c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007994:	1c9a      	adds	r2, r3, #2
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d178      	bne.n	8007aaa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d6:	643b      	str	r3, [r7, #64]	; 0x40
 80079d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d12e      	bne.n	8007a92 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f023 0310 	bic.w	r3, r3, #16
 8007a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6979      	ldr	r1, [r7, #20]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	613b      	str	r3, [r7, #16]
   return(result);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e6      	bne.n	8007a3a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b10      	cmp	r3, #16
 8007a78:	d103      	bne.n	8007a82 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2210      	movs	r2, #16
 8007a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff f822 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a90:	e00b      	b.n	8007aaa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7f9 ffba 	bl	8001a0c <HAL_UART_RxCpltCallback>
}
 8007a98:	e007      	b.n	8007aaa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	699a      	ldr	r2, [r3, #24]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0208 	orr.w	r2, r2, #8
 8007aa8:	619a      	str	r2, [r3, #24]
}
 8007aaa:	bf00      	nop
 8007aac:	3758      	adds	r7, #88	; 0x58
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b0a6      	sub	sp, #152	; 0x98
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ac2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	2b22      	cmp	r3, #34	; 0x22
 8007aec:	f040 814f 	bne.w	8007d8e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007af6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007afa:	e0f6      	b.n	8007cea <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b06:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007b0a:	b2d9      	uxtb	r1, r3
 8007b0c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b16:	400a      	ands	r2, r1
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d053      	beq.n	8007bf6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d011      	beq.n	8007b7e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b74:	f043 0201 	orr.w	r2, r3, #1
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d011      	beq.n	8007bae <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00b      	beq.n	8007bae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba4:	f043 0204 	orr.w	r2, r3, #4
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d011      	beq.n	8007bde <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2204      	movs	r2, #4
 8007bcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd4:	f043 0202 	orr.w	r2, r3, #2
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d006      	beq.n	8007bf6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7fe ff69 	bl	8006ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d173      	bne.n	8007cea <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c26:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e4      	bne.n	8007c02 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c4e:	f023 0301 	bic.w	r3, r3, #1
 8007c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c5c:	657a      	str	r2, [r7, #84]	; 0x54
 8007c5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e3      	bne.n	8007c38 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d12e      	bne.n	8007ce4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	f023 0310 	bic.w	r3, r3, #16
 8007ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007caa:	643b      	str	r3, [r7, #64]	; 0x40
 8007cac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e6      	bne.n	8007c8c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b10      	cmp	r3, #16
 8007cca:	d103      	bne.n	8007cd4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2210      	movs	r2, #16
 8007cd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fe fef9 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
 8007ce2:	e002      	b.n	8007cea <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7f9 fe91 	bl	8001a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d006      	beq.n	8007d00 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007cf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f47f aefe 	bne.w	8007afc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d045      	beq.n	8007d9e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d23e      	bcs.n	8007d9e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3308      	adds	r3, #8
 8007d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d36:	673b      	str	r3, [r7, #112]	; 0x70
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e5      	bne.n	8007d20 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a14      	ldr	r2, [pc, #80]	; (8007da8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007d58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f043 0320 	orr.w	r3, r3, #32
 8007d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6979      	ldr	r1, [r7, #20]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	613b      	str	r3, [r7, #16]
   return(result);
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e6      	bne.n	8007d5a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d8c:	e007      	b.n	8007d9e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699a      	ldr	r2, [r3, #24]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f042 0208 	orr.w	r2, r2, #8
 8007d9c:	619a      	str	r2, [r3, #24]
}
 8007d9e:	bf00      	nop
 8007da0:	3798      	adds	r7, #152	; 0x98
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	080077f3 	.word	0x080077f3

08007dac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b0a8      	sub	sp, #160	; 0xa0
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007dba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de2:	2b22      	cmp	r3, #34	; 0x22
 8007de4:	f040 8153 	bne.w	800808e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007dee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007df2:	e0fa      	b.n	8007fea <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e06:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007e0a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007e0e:	4013      	ands	r3, r2
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1c:	1c9a      	adds	r2, r3, #2
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d053      	beq.n	8007ef2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d011      	beq.n	8007e7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007e56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00b      	beq.n	8007e7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2201      	movs	r2, #1
 8007e68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e70:	f043 0201 	orr.w	r2, r3, #1
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d011      	beq.n	8007eaa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2202      	movs	r2, #2
 8007e98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea0:	f043 0204 	orr.w	r2, r3, #4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d011      	beq.n	8007eda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2204      	movs	r2, #4
 8007ec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed0:	f043 0202 	orr.w	r2, r3, #2
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d006      	beq.n	8007ef2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fe fdeb 	bl	8006ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d175      	bne.n	8007fea <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f22:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e4      	bne.n	8007efe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3308      	adds	r3, #8
 8007f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	f023 0301 	bic.w	r3, r3, #1
 8007f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e1      	bne.n	8007f34 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d12e      	bne.n	8007fe4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	f023 0310 	bic.w	r3, r3, #16
 8007fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007faa:	647b      	str	r3, [r7, #68]	; 0x44
 8007fac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e6      	bne.n	8007f8c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d103      	bne.n	8007fd4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2210      	movs	r2, #16
 8007fd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7fe fd79 	bl	8006ad4 <HAL_UARTEx_RxEventCallback>
 8007fe2:	e002      	b.n	8007fea <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7f9 fd11 	bl	8001a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d006      	beq.n	8008000 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f47f aefa 	bne.w	8007df4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008006:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800800a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800800e:	2b00      	cmp	r3, #0
 8008010:	d045      	beq.n	800809e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008018:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800801c:	429a      	cmp	r2, r3
 800801e:	d23e      	bcs.n	800809e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3308      	adds	r3, #8
 8008026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	623b      	str	r3, [r7, #32]
   return(result);
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008036:	677b      	str	r3, [r7, #116]	; 0x74
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3308      	adds	r3, #8
 800803e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008040:	633a      	str	r2, [r7, #48]	; 0x30
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e5      	bne.n	8008020 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a14      	ldr	r2, [pc, #80]	; (80080a8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008058:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	60fb      	str	r3, [r7, #12]
   return(result);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f043 0320 	orr.w	r3, r3, #32
 800806e:	673b      	str	r3, [r7, #112]	; 0x70
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008078:	61fb      	str	r3, [r7, #28]
 800807a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	617b      	str	r3, [r7, #20]
   return(result);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800808c:	e007      	b.n	800809e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0208 	orr.w	r2, r2, #8
 800809c:	619a      	str	r2, [r3, #24]
}
 800809e:	bf00      	nop
 80080a0:	37a0      	adds	r7, #160	; 0xa0
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	08007953 	.word	0x08007953

080080ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <HAL_UARTEx_DisableFifoMode+0x16>
 80080fa:	2302      	movs	r3, #2
 80080fc:	e027      	b.n	800814e <HAL_UARTEx_DisableFifoMode+0x66>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2224      	movs	r2, #36	; 0x24
 800810a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800812c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800816e:	2302      	movs	r3, #2
 8008170:	e02d      	b.n	80081ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2224      	movs	r2, #36	; 0x24
 800817e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0201 	bic.w	r2, r2, #1
 8008198:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f850 	bl	8008254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e02d      	b.n	800824a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2224      	movs	r2, #36	; 0x24
 80081fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f812 	bl	8008254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2220      	movs	r2, #32
 800823c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008260:	2b00      	cmp	r3, #0
 8008262:	d108      	bne.n	8008276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008274:	e031      	b.n	80082da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008276:	2308      	movs	r3, #8
 8008278:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800827a:	2308      	movs	r3, #8
 800827c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	0e5b      	lsrs	r3, r3, #25
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	0f5b      	lsrs	r3, r3, #29
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	7b3a      	ldrb	r2, [r7, #12]
 80082a2:	4911      	ldr	r1, [pc, #68]	; (80082e8 <UARTEx_SetNbDataToProcess+0x94>)
 80082a4:	5c8a      	ldrb	r2, [r1, r2]
 80082a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082aa:	7b3a      	ldrb	r2, [r7, #12]
 80082ac:	490f      	ldr	r1, [pc, #60]	; (80082ec <UARTEx_SetNbDataToProcess+0x98>)
 80082ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	7b7a      	ldrb	r2, [r7, #13]
 80082c0:	4909      	ldr	r1, [pc, #36]	; (80082e8 <UARTEx_SetNbDataToProcess+0x94>)
 80082c2:	5c8a      	ldrb	r2, [r1, r2]
 80082c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082c8:	7b7a      	ldrb	r2, [r7, #13]
 80082ca:	4908      	ldr	r1, [pc, #32]	; (80082ec <UARTEx_SetNbDataToProcess+0x98>)
 80082cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082da:	bf00      	nop
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	0800d93c 	.word	0x0800d93c
 80082ec:	0800d944 	.word	0x0800d944

080082f0 <__NVIC_SetPriority>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008300:	2b00      	cmp	r3, #0
 8008302:	db0a      	blt.n	800831a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	b2da      	uxtb	r2, r3
 8008308:	490c      	ldr	r1, [pc, #48]	; (800833c <__NVIC_SetPriority+0x4c>)
 800830a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830e:	0112      	lsls	r2, r2, #4
 8008310:	b2d2      	uxtb	r2, r2
 8008312:	440b      	add	r3, r1
 8008314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008318:	e00a      	b.n	8008330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	b2da      	uxtb	r2, r3
 800831e:	4908      	ldr	r1, [pc, #32]	; (8008340 <__NVIC_SetPriority+0x50>)
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	f003 030f 	and.w	r3, r3, #15
 8008326:	3b04      	subs	r3, #4
 8008328:	0112      	lsls	r2, r2, #4
 800832a:	b2d2      	uxtb	r2, r2
 800832c:	440b      	add	r3, r1
 800832e:	761a      	strb	r2, [r3, #24]
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	e000e100 	.word	0xe000e100
 8008340:	e000ed00 	.word	0xe000ed00

08008344 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008348:	2100      	movs	r1, #0
 800834a:	f06f 0004 	mvn.w	r0, #4
 800834e:	f7ff ffcf 	bl	80082f0 <__NVIC_SetPriority>
#endif
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800835e:	f3ef 8305 	mrs	r3, IPSR
 8008362:	603b      	str	r3, [r7, #0]
  return(result);
 8008364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800836a:	f06f 0305 	mvn.w	r3, #5
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	e00c      	b.n	800838c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008372:	4b0a      	ldr	r3, [pc, #40]	; (800839c <osKernelInitialize+0x44>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800837a:	4b08      	ldr	r3, [pc, #32]	; (800839c <osKernelInitialize+0x44>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008380:	2300      	movs	r3, #0
 8008382:	607b      	str	r3, [r7, #4]
 8008384:	e002      	b.n	800838c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295
 800838a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800838c:	687b      	ldr	r3, [r7, #4]
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20000500 	.word	0x20000500

080083a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083a6:	f3ef 8305 	mrs	r3, IPSR
 80083aa:	603b      	str	r3, [r7, #0]
  return(result);
 80083ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80083b2:	f06f 0305 	mvn.w	r3, #5
 80083b6:	607b      	str	r3, [r7, #4]
 80083b8:	e010      	b.n	80083dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <osKernelStart+0x48>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d109      	bne.n	80083d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083c2:	f7ff ffbf 	bl	8008344 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083c6:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <osKernelStart+0x48>)
 80083c8:	2202      	movs	r2, #2
 80083ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083cc:	f001 fa3c 	bl	8009848 <vTaskStartScheduler>
      stat = osOK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	e002      	b.n	80083dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295
 80083da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083dc:	687b      	ldr	r3, [r7, #4]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000500 	.word	0x20000500

080083ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08e      	sub	sp, #56	; 0x38
 80083f0:	af04      	add	r7, sp, #16
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fc:	f3ef 8305 	mrs	r3, IPSR
 8008400:	617b      	str	r3, [r7, #20]
  return(result);
 8008402:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008404:	2b00      	cmp	r3, #0
 8008406:	d17e      	bne.n	8008506 <osThreadNew+0x11a>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d07b      	beq.n	8008506 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800840e:	2380      	movs	r3, #128	; 0x80
 8008410:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008412:	2318      	movs	r3, #24
 8008414:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295
 800841e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d045      	beq.n	80084b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <osThreadNew+0x48>
        name = attr->name;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <osThreadNew+0x6e>
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b38      	cmp	r3, #56	; 0x38
 800844c:	d805      	bhi.n	800845a <osThreadNew+0x6e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <osThreadNew+0x72>
        return (NULL);
 800845a:	2300      	movs	r3, #0
 800845c:	e054      	b.n	8008508 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	089b      	lsrs	r3, r3, #2
 800846c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00e      	beq.n	8008494 <osThreadNew+0xa8>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2bbb      	cmp	r3, #187	; 0xbb
 800847c:	d90a      	bls.n	8008494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <osThreadNew+0xa8>
        mem = 1;
 800848e:	2301      	movs	r3, #1
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	e010      	b.n	80084b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10c      	bne.n	80084b6 <osThreadNew+0xca>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <osThreadNew+0xca>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <osThreadNew+0xca>
          mem = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61bb      	str	r3, [r7, #24]
 80084b0:	e001      	b.n	80084b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d110      	bne.n	80084de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084c4:	9202      	str	r2, [sp, #8]
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f001 f818 	bl	8009508 <xTaskCreateStatic>
 80084d8:	4603      	mov	r3, r0
 80084da:	613b      	str	r3, [r7, #16]
 80084dc:	e013      	b.n	8008506 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d110      	bne.n	8008506 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f001 f836 	bl	8009568 <xTaskCreate>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d001      	beq.n	8008506 <osThreadNew+0x11a>
            hTask = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008506:	693b      	ldr	r3, [r7, #16]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3728      	adds	r7, #40	; 0x28
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008518:	f3ef 8305 	mrs	r3, IPSR
 800851c:	60bb      	str	r3, [r7, #8]
  return(result);
 800851e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <osDelay+0x1c>
    stat = osErrorISR;
 8008524:	f06f 0305 	mvn.w	r3, #5
 8008528:	60fb      	str	r3, [r7, #12]
 800852a:	e007      	b.n	800853c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 f962 	bl	8009800 <vTaskDelay>
    }
  }

  return (stat);
 800853c:	68fb      	ldr	r3, [r7, #12]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008546:	b580      	push	{r7, lr}
 8008548:	b08a      	sub	sp, #40	; 0x28
 800854a:	af02      	add	r7, sp, #8
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008556:	f3ef 8305 	mrs	r3, IPSR
 800855a:	613b      	str	r3, [r7, #16]
  return(result);
 800855c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800855e:	2b00      	cmp	r3, #0
 8008560:	d175      	bne.n	800864e <osSemaphoreNew+0x108>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d072      	beq.n	800864e <osSemaphoreNew+0x108>
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	429a      	cmp	r2, r3
 800856e:	d86e      	bhi.n	800864e <osSemaphoreNew+0x108>
    mem = -1;
 8008570:	f04f 33ff 	mov.w	r3, #4294967295
 8008574:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d015      	beq.n	80085a8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d006      	beq.n	8008592 <osSemaphoreNew+0x4c>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b4f      	cmp	r3, #79	; 0x4f
 800858a:	d902      	bls.n	8008592 <osSemaphoreNew+0x4c>
        mem = 1;
 800858c:	2301      	movs	r3, #1
 800858e:	61bb      	str	r3, [r7, #24]
 8008590:	e00c      	b.n	80085ac <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d108      	bne.n	80085ac <osSemaphoreNew+0x66>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d104      	bne.n	80085ac <osSemaphoreNew+0x66>
          mem = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	61bb      	str	r3, [r7, #24]
 80085a6:	e001      	b.n	80085ac <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b2:	d04c      	beq.n	800864e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d128      	bne.n	800860c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d10a      	bne.n	80085d6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	2203      	movs	r2, #3
 80085c6:	9200      	str	r2, [sp, #0]
 80085c8:	2200      	movs	r2, #0
 80085ca:	2100      	movs	r1, #0
 80085cc:	2001      	movs	r0, #1
 80085ce:	f000 fa1b 	bl	8008a08 <xQueueGenericCreateStatic>
 80085d2:	61f8      	str	r0, [r7, #28]
 80085d4:	e005      	b.n	80085e2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80085d6:	2203      	movs	r2, #3
 80085d8:	2100      	movs	r1, #0
 80085da:	2001      	movs	r0, #1
 80085dc:	f000 fa33 	bl	8008a46 <xQueueGenericCreate>
 80085e0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d022      	beq.n	800862e <osSemaphoreNew+0xe8>
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01f      	beq.n	800862e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80085ee:	2300      	movs	r3, #0
 80085f0:	2200      	movs	r2, #0
 80085f2:	2100      	movs	r1, #0
 80085f4:	69f8      	ldr	r0, [r7, #28]
 80085f6:	f000 faa5 	bl	8008b44 <xQueueGenericSend>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d016      	beq.n	800862e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008600:	69f8      	ldr	r0, [r7, #28]
 8008602:	f000 fdbc 	bl	800917e <vQueueDelete>
            hSemaphore = NULL;
 8008606:	2300      	movs	r3, #0
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	e010      	b.n	800862e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d108      	bne.n	8008624 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	461a      	mov	r2, r3
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fa62 	bl	8008ae4 <xQueueCreateCountingSemaphoreStatic>
 8008620:	61f8      	str	r0, [r7, #28]
 8008622:	e004      	b.n	800862e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 fa76 	bl	8008b18 <xQueueCreateCountingSemaphore>
 800862c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00c      	beq.n	800864e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <osSemaphoreNew+0xfc>
          name = attr->name;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	e001      	b.n	8008646 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008646:	6979      	ldr	r1, [r7, #20]
 8008648:	69f8      	ldr	r0, [r7, #28]
 800864a:	f000 fed5 	bl	80093f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800864e:	69fb      	ldr	r3, [r7, #28]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3720      	adds	r7, #32
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008670:	f06f 0303 	mvn.w	r3, #3
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	e039      	b.n	80086ec <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008678:	f3ef 8305 	mrs	r3, IPSR
 800867c:	60fb      	str	r3, [r7, #12]
  return(result);
 800867e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008680:	2b00      	cmp	r3, #0
 8008682:	d022      	beq.n	80086ca <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800868a:	f06f 0303 	mvn.w	r3, #3
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e02c      	b.n	80086ec <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008696:	f107 0308 	add.w	r3, r7, #8
 800869a:	461a      	mov	r2, r3
 800869c:	2100      	movs	r1, #0
 800869e:	6938      	ldr	r0, [r7, #16]
 80086a0:	f000 fd16 	bl	80090d0 <xQueueReceiveFromISR>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d003      	beq.n	80086b2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80086aa:	f06f 0302 	mvn.w	r3, #2
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	e01c      	b.n	80086ec <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d019      	beq.n	80086ec <osSemaphoreAcquire+0x94>
 80086b8:	4b0f      	ldr	r3, [pc, #60]	; (80086f8 <osSemaphoreAcquire+0xa0>)
 80086ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	e010      	b.n	80086ec <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6938      	ldr	r0, [r7, #16]
 80086ce:	f000 fc37 	bl	8008f40 <xQueueSemaphoreTake>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d009      	beq.n	80086ec <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80086de:	f06f 0301 	mvn.w	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e002      	b.n	80086ec <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80086e6:	f06f 0302 	mvn.w	r3, #2
 80086ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80086ec:	697b      	ldr	r3, [r7, #20]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d103      	bne.n	800871a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008712:	f06f 0303 	mvn.w	r3, #3
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e02c      	b.n	8008774 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800871a:	f3ef 8305 	mrs	r3, IPSR
 800871e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008720:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008722:	2b00      	cmp	r3, #0
 8008724:	d01a      	beq.n	800875c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800872a:	f107 0308 	add.w	r3, r7, #8
 800872e:	4619      	mov	r1, r3
 8008730:	6938      	ldr	r0, [r7, #16]
 8008732:	f000 fb0e 	bl	8008d52 <xQueueGiveFromISR>
 8008736:	4603      	mov	r3, r0
 8008738:	2b01      	cmp	r3, #1
 800873a:	d003      	beq.n	8008744 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800873c:	f06f 0302 	mvn.w	r3, #2
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	e017      	b.n	8008774 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d014      	beq.n	8008774 <osSemaphoreRelease+0x78>
 800874a:	4b0d      	ldr	r3, [pc, #52]	; (8008780 <osSemaphoreRelease+0x84>)
 800874c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	e00b      	b.n	8008774 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800875c:	2300      	movs	r3, #0
 800875e:	2200      	movs	r2, #0
 8008760:	2100      	movs	r1, #0
 8008762:	6938      	ldr	r0, [r7, #16]
 8008764:	f000 f9ee 	bl	8008b44 <xQueueGenericSend>
 8008768:	4603      	mov	r3, r0
 800876a:	2b01      	cmp	r3, #1
 800876c:	d002      	beq.n	8008774 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800876e:	f06f 0302 	mvn.w	r3, #2
 8008772:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008774:	697b      	ldr	r3, [r7, #20]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	e000ed04 	.word	0xe000ed04

08008784 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4a07      	ldr	r2, [pc, #28]	; (80087b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008794:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	4a06      	ldr	r2, [pc, #24]	; (80087b4 <vApplicationGetIdleTaskMemory+0x30>)
 800879a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2280      	movs	r2, #128	; 0x80
 80087a0:	601a      	str	r2, [r3, #0]
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20000504 	.word	0x20000504
 80087b4:	200005c0 	.word	0x200005c0

080087b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4a07      	ldr	r2, [pc, #28]	; (80087e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80087c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	4a06      	ldr	r2, [pc, #24]	; (80087e8 <vApplicationGetTimerTaskMemory+0x30>)
 80087ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087d6:	601a      	str	r2, [r3, #0]
}
 80087d8:	bf00      	nop
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	200007c0 	.word	0x200007c0
 80087e8:	2000087c 	.word	0x2000087c

080087ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f103 0208 	add.w	r2, r3, #8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f04f 32ff 	mov.w	r2, #4294967295
 8008804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f103 0208 	add.w	r2, r3, #8
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f103 0208 	add.w	r2, r3, #8
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008846:	b480      	push	{r7}
 8008848:	b085      	sub	sp, #20
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d103      	bne.n	80088ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	e00c      	b.n	80088c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3308      	adds	r3, #8
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e002      	b.n	80088bc <vListInsert+0x2e>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d2f6      	bcs.n	80088b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	601a      	str	r2, [r3, #0]
}
 80088f4:	bf00      	nop
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6892      	ldr	r2, [r2, #8]
 8008916:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6852      	ldr	r2, [r2, #4]
 8008920:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	429a      	cmp	r2, r3
 800892a:	d103      	bne.n	8008934 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	1e5a      	subs	r2, r3, #1
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8008962:	f002 f85f 	bl	800aa24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008972:	fb01 f303 	mul.w	r3, r1, r3
 8008976:	441a      	add	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	3b01      	subs	r3, #1
 8008994:	68f9      	ldr	r1, [r7, #12]
 8008996:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008998:	fb01 f303 	mul.w	r3, r1, r3
 800899c:	441a      	add	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	22ff      	movs	r2, #255	; 0xff
 80089a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d114      	bne.n	80089e2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01a      	beq.n	80089f6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3310      	adds	r3, #16
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 f97d 	bl	8009cc4 <xTaskRemoveFromEventList>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d012      	beq.n	80089f6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089d0:	4b0c      	ldr	r3, [pc, #48]	; (8008a04 <xQueueGenericReset+0xb0>)
 80089d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	e009      	b.n	80089f6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3310      	adds	r3, #16
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff ff00 	bl	80087ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3324      	adds	r3, #36	; 0x24
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff fefb 	bl	80087ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089f6:	f002 f82f 	bl	800aa58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80089fa:	2301      	movs	r3, #1
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	e000ed04 	.word	0xe000ed04

08008a08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00d      	beq.n	8008a3c <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a28:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	4613      	mov	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 f831 	bl	8008a9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a3c:	697b      	ldr	r3, [r7, #20]
	}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b08a      	sub	sp, #40	; 0x28
 8008a4a:	af02      	add	r7, sp, #8
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	4613      	mov	r3, r2
 8008a52:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	fb02 f303 	mul.w	r3, r2, r3
 8008a5c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	3350      	adds	r3, #80	; 0x50
 8008a62:	4618      	mov	r0, r3
 8008a64:	f002 f898 	bl	800ab98 <pvPortMalloc>
 8008a68:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d011      	beq.n	8008a94 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	3350      	adds	r3, #80	; 0x50
 8008a78:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a82:	79fa      	ldrb	r2, [r7, #7]
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f805 	bl	8008a9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a94:	69bb      	ldr	r3, [r7, #24]
	}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3720      	adds	r7, #32
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	607a      	str	r2, [r7, #4]
 8008aaa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d103      	bne.n	8008aba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	e002      	b.n	8008ac0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008acc:	2101      	movs	r1, #1
 8008ace:	69b8      	ldr	r0, [r7, #24]
 8008ad0:	f7ff ff40 	bl	8008954 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	78fa      	ldrb	r2, [r7, #3]
 8008ad8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008adc:	bf00      	nop
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008af0:	2302      	movs	r3, #2
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	2100      	movs	r1, #0
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f7ff ff84 	bl	8008a08 <xQueueGenericCreateStatic>
 8008b00:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b0e:	697b      	ldr	r3, [r7, #20]
	}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b22:	2202      	movs	r2, #2
 8008b24:	2100      	movs	r1, #0
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff ff8d 	bl	8008a46 <xQueueGenericCreate>
 8008b2c:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
	}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	; 0x28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b52:	2300      	movs	r3, #0
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b5a:	f001 ff63 	bl	800aa24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d302      	bcc.n	8008b70 <xQueueGenericSend+0x2c>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d129      	bne.n	8008bc4 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	6a38      	ldr	r0, [r7, #32]
 8008b76:	f000 fb2f 	bl	80091d8 <prvCopyDataToQueue>
 8008b7a:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d010      	beq.n	8008ba6 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	3324      	adds	r3, #36	; 0x24
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 f89b 	bl	8009cc4 <xTaskRemoveFromEventList>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d013      	beq.n	8008bbc <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b94:	4b3f      	ldr	r3, [pc, #252]	; (8008c94 <xQueueGenericSend+0x150>)
 8008b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	e00a      	b.n	8008bbc <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d007      	beq.n	8008bbc <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bac:	4b39      	ldr	r3, [pc, #228]	; (8008c94 <xQueueGenericSend+0x150>)
 8008bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bbc:	f001 ff4c 	bl	800aa58 <vPortExitCritical>
				return pdPASS;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e063      	b.n	8008c8c <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d103      	bne.n	8008bd2 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bca:	f001 ff45 	bl	800aa58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e05c      	b.n	8008c8c <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bd8:	f107 0314 	add.w	r3, r7, #20
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 f8c7 	bl	8009d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008be6:	f001 ff37 	bl	800aa58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bea:	f000 fe8d 	bl	8009908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bee:	f001 ff19 	bl	800aa24 <vPortEnterCritical>
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf8:	b25b      	sxtb	r3, r3
 8008bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfe:	d103      	bne.n	8008c08 <xQueueGenericSend+0xc4>
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c0e:	b25b      	sxtb	r3, r3
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c14:	d103      	bne.n	8008c1e <xQueueGenericSend+0xda>
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c1e:	f001 ff1b 	bl	800aa58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c22:	1d3a      	adds	r2, r7, #4
 8008c24:	f107 0314 	add.w	r3, r7, #20
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f001 f8b6 	bl	8009d9c <xTaskCheckForTimeOut>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d124      	bne.n	8008c80 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c36:	6a38      	ldr	r0, [r7, #32]
 8008c38:	f000 fbc6 	bl	80093c8 <prvIsQueueFull>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d018      	beq.n	8008c74 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	3310      	adds	r3, #16
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f001 f806 	bl	8009c5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c50:	6a38      	ldr	r0, [r7, #32]
 8008c52:	f000 fb51 	bl	80092f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c56:	f000 fe65 	bl	8009924 <xTaskResumeAll>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f47f af7c 	bne.w	8008b5a <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8008c62:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <xQueueGenericSend+0x150>)
 8008c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	e772      	b.n	8008b5a <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c74:	6a38      	ldr	r0, [r7, #32]
 8008c76:	f000 fb3f 	bl	80092f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c7a:	f000 fe53 	bl	8009924 <xTaskResumeAll>
 8008c7e:	e76c      	b.n	8008b5a <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c80:	6a38      	ldr	r0, [r7, #32]
 8008c82:	f000 fb39 	bl	80092f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c86:	f000 fe4d 	bl	8009924 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3728      	adds	r7, #40	; 0x28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	e000ed04 	.word	0xe000ed04

08008c98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08c      	sub	sp, #48	; 0x30
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008caa:	f3ef 8211 	mrs	r2, BASEPRI
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	61ba      	str	r2, [r7, #24]
 8008cc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <xQueueGenericSendFromISR+0x40>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d12f      	bne.n	8008d38 <xQueueGenericSendFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	68b9      	ldr	r1, [r7, #8]
 8008cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cee:	f000 fa73 	bl	80091d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cf2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d112      	bne.n	8008d22 <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d016      	beq.n	8008d32 <xQueueGenericSendFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	3324      	adds	r3, #36	; 0x24
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 ffdb 	bl	8009cc4 <xTaskRemoveFromEventList>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00e      	beq.n	8008d32 <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00b      	beq.n	8008d32 <xQueueGenericSendFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e007      	b.n	8008d32 <xQueueGenericSendFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d26:	3301      	adds	r3, #1
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	b25a      	sxtb	r2, r3
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d32:	2301      	movs	r3, #1
 8008d34:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8008d36:	e001      	b.n	8008d3c <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3730      	adds	r7, #48	; 0x30
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b08a      	sub	sp, #40	; 0x28
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	623b      	str	r3, [r7, #32]
	__asm volatile
 8008d60:	f3ef 8211 	mrs	r2, BASEPRI
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	613a      	str	r2, [r7, #16]
 8008d76:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8008d78:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d7a:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d229      	bcs.n	8008de0 <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d92:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d112      	bne.n	8008dcc <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d015      	beq.n	8008dda <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	3324      	adds	r3, #36	; 0x24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 ff86 	bl	8009cc4 <xTaskRemoveFromEventList>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00d      	beq.n	8008dda <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	e006      	b.n	8008dda <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	b25a      	sxtb	r2, r3
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dde:	e001      	b.n	8008de4 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f383 8811 	msr	BASEPRI, r3
}
 8008dee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3728      	adds	r7, #40	; 0x28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	; 0x28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e10:	f001 fe08 	bl	800aa24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01f      	beq.n	8008e60 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	6a38      	ldr	r0, [r7, #32]
 8008e24:	f000 fa42 	bl	80092ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	1e5a      	subs	r2, r3, #1
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00f      	beq.n	8008e58 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	3310      	adds	r3, #16
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 ff41 	bl	8009cc4 <xTaskRemoveFromEventList>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d007      	beq.n	8008e58 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e48:	4b3c      	ldr	r3, [pc, #240]	; (8008f3c <xQueueReceive+0x140>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e58:	f001 fdfe 	bl	800aa58 <vPortExitCritical>
				return pdPASS;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e069      	b.n	8008f34 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e66:	f001 fdf7 	bl	800aa58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e062      	b.n	8008f34 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e74:	f107 0314 	add.w	r3, r7, #20
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 ff79 	bl	8009d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e82:	f001 fde9 	bl	800aa58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e86:	f000 fd3f 	bl	8009908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e8a:	f001 fdcb 	bl	800aa24 <vPortEnterCritical>
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e94:	b25b      	sxtb	r3, r3
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d103      	bne.n	8008ea4 <xQueueReceive+0xa8>
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eaa:	b25b      	sxtb	r3, r3
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb0:	d103      	bne.n	8008eba <xQueueReceive+0xbe>
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eba:	f001 fdcd 	bl	800aa58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ebe:	1d3a      	adds	r2, r7, #4
 8008ec0:	f107 0314 	add.w	r3, r7, #20
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 ff68 	bl	8009d9c <xTaskCheckForTimeOut>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d123      	bne.n	8008f1a <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ed2:	6a38      	ldr	r0, [r7, #32]
 8008ed4:	f000 fa62 	bl	800939c <prvIsQueueEmpty>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d017      	beq.n	8008f0e <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	3324      	adds	r3, #36	; 0x24
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 feb8 	bl	8009c5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eec:	6a38      	ldr	r0, [r7, #32]
 8008eee:	f000 fa03 	bl	80092f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ef2:	f000 fd17 	bl	8009924 <xTaskResumeAll>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d189      	bne.n	8008e10 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8008efc:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <xQueueReceive+0x140>)
 8008efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	e780      	b.n	8008e10 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f0e:	6a38      	ldr	r0, [r7, #32]
 8008f10:	f000 f9f2 	bl	80092f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f14:	f000 fd06 	bl	8009924 <xTaskResumeAll>
 8008f18:	e77a      	b.n	8008e10 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f1a:	6a38      	ldr	r0, [r7, #32]
 8008f1c:	f000 f9ec 	bl	80092f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f20:	f000 fd00 	bl	8009924 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f24:	6a38      	ldr	r0, [r7, #32]
 8008f26:	f000 fa39 	bl	800939c <prvIsQueueEmpty>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f43f af6f 	beq.w	8008e10 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3728      	adds	r7, #40	; 0x28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f56:	f001 fd65 	bl	800aa24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d024      	beq.n	8008fb0 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	1e5a      	subs	r2, r3, #1
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d104      	bne.n	8008f80 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f76:	f001 f95f 	bl	800a238 <pvTaskIncrementMutexHeldCount>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00f      	beq.n	8008fa8 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	3310      	adds	r3, #16
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fe99 	bl	8009cc4 <xTaskRemoveFromEventList>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d007      	beq.n	8008fa8 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f98:	4b4c      	ldr	r3, [pc, #304]	; (80090cc <xQueueSemaphoreTake+0x18c>)
 8008f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fa8:	f001 fd56 	bl	800aa58 <vPortExitCritical>
				return pdPASS;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e089      	b.n	80090c4 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d103      	bne.n	8008fbe <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008fb6:	f001 fd4f 	bl	800aa58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	e082      	b.n	80090c4 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d106      	bne.n	8008fd2 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fc4:	f107 030c 	add.w	r3, r7, #12
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fed1 	bl	8009d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fd2:	f001 fd41 	bl	800aa58 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fd6:	f000 fc97 	bl	8009908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fda:	f001 fd23 	bl	800aa24 <vPortEnterCritical>
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fe4:	b25b      	sxtb	r3, r3
 8008fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fea:	d103      	bne.n	8008ff4 <xQueueSemaphoreTake+0xb4>
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ffa:	b25b      	sxtb	r3, r3
 8008ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009000:	d103      	bne.n	800900a <xQueueSemaphoreTake+0xca>
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800900a:	f001 fd25 	bl	800aa58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800900e:	463a      	mov	r2, r7
 8009010:	f107 030c 	add.w	r3, r7, #12
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fec0 	bl	8009d9c <xTaskCheckForTimeOut>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d132      	bne.n	8009088 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009022:	69f8      	ldr	r0, [r7, #28]
 8009024:	f000 f9ba 	bl	800939c <prvIsQueueEmpty>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d026      	beq.n	800907c <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d109      	bne.n	800904a <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8009036:	f001 fcf5 	bl	800aa24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 ffe6 	bl	800a010 <xTaskPriorityInherit>
 8009044:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8009046:	f001 fd07 	bl	800aa58 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	3324      	adds	r3, #36	; 0x24
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4611      	mov	r1, r2
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fe02 	bl	8009c5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009058:	69f8      	ldr	r0, [r7, #28]
 800905a:	f000 f94d 	bl	80092f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800905e:	f000 fc61 	bl	8009924 <xTaskResumeAll>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	f47f af76 	bne.w	8008f56 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 800906a:	4b18      	ldr	r3, [pc, #96]	; (80090cc <xQueueSemaphoreTake+0x18c>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	e76c      	b.n	8008f56 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800907c:	69f8      	ldr	r0, [r7, #28]
 800907e:	f000 f93b 	bl	80092f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009082:	f000 fc4f 	bl	8009924 <xTaskResumeAll>
 8009086:	e766      	b.n	8008f56 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009088:	69f8      	ldr	r0, [r7, #28]
 800908a:	f000 f935 	bl	80092f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800908e:	f000 fc49 	bl	8009924 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009092:	69f8      	ldr	r0, [r7, #28]
 8009094:	f000 f982 	bl	800939c <prvIsQueueEmpty>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	f43f af5b 	beq.w	8008f56 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 80090a6:	f001 fcbd 	bl	800aa24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80090aa:	69f8      	ldr	r0, [r7, #28]
 80090ac:	f000 f87c 	bl	80091a8 <prvGetDisinheritPriorityAfterTimeout>
 80090b0:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 f85d 	bl	800a178 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80090be:	f001 fccb 	bl	800aa58 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3728      	adds	r7, #40	; 0x28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	e000ed04 	.word	0xe000ed04

080090d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08c      	sub	sp, #48	; 0x30
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 80090e0:	f3ef 8211 	mrs	r2, BASEPRI
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	61ba      	str	r2, [r7, #24]
 80090f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80090f8:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090fa:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009100:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d02d      	beq.n	8009164 <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800910e:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009114:	f000 f8ca 	bl	80092ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	1e5a      	subs	r2, r3, #1
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009120:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009128:	d112      	bne.n	8009150 <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d015      	beq.n	800915e <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	3310      	adds	r3, #16
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fdc4 	bl	8009cc4 <xTaskRemoveFromEventList>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00d      	beq.n	800915e <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00a      	beq.n	800915e <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e006      	b.n	800915e <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009150:	7ffb      	ldrb	r3, [r7, #31]
 8009152:	3301      	adds	r3, #1
 8009154:	b2db      	uxtb	r3, r3
 8009156:	b25a      	sxtb	r2, r3
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800915e:	2301      	movs	r3, #1
 8009160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009162:	e001      	b.n	8009168 <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
 8009164:	2300      	movs	r3, #0
 8009166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f383 8811 	msr	BASEPRI, r3
}
 8009172:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009176:	4618      	mov	r0, r3
 8009178:	3730      	adds	r7, #48	; 0x30
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f95e 	bl	800944c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009196:	2b00      	cmp	r3, #0
 8009198:	d102      	bne.n	80091a0 <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f001 fd96 	bl	800accc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80091a0:	bf00      	nop
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d006      	beq.n	80091c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	e001      	b.n	80091ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80091ca:	68fb      	ldr	r3, [r7, #12]
	}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10d      	bne.n	8009212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d14d      	bne.n	800929a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 ff6c 	bl	800a0e0 <xTaskPriorityDisinherit>
 8009208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	609a      	str	r2, [r3, #8]
 8009210:	e043      	b.n	800929a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d119      	bne.n	800924c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6858      	ldr	r0, [r3, #4]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009220:	461a      	mov	r2, r3
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	f001 fe7a 	bl	800af1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009230:	441a      	add	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	429a      	cmp	r2, r3
 8009240:	d32b      	bcc.n	800929a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	605a      	str	r2, [r3, #4]
 800924a:	e026      	b.n	800929a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68d8      	ldr	r0, [r3, #12]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009254:	461a      	mov	r2, r3
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	f001 fe60 	bl	800af1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68da      	ldr	r2, [r3, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009264:	425b      	negs	r3, r3
 8009266:	441a      	add	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d207      	bcs.n	8009288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009280:	425b      	negs	r3, r3
 8009282:	441a      	add	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d105      	bne.n	800929a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3b01      	subs	r3, #1
 8009298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092a2:	697b      	ldr	r3, [r7, #20]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d018      	beq.n	80092f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	441a      	add	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d303      	bcc.n	80092e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68d9      	ldr	r1, [r3, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	461a      	mov	r2, r3
 80092ea:	6838      	ldr	r0, [r7, #0]
 80092ec:	f001 fe16 	bl	800af1c <memcpy>
	}
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009300:	f001 fb90 	bl	800aa24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800930a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800930c:	e011      	b.n	8009332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	2b00      	cmp	r3, #0
 8009314:	d012      	beq.n	800933c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3324      	adds	r3, #36	; 0x24
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fcd2 	bl	8009cc4 <xTaskRemoveFromEventList>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009326:	f000 fd7f 	bl	8009e28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	3b01      	subs	r3, #1
 800932e:	b2db      	uxtb	r3, r3
 8009330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009336:	2b00      	cmp	r3, #0
 8009338:	dce9      	bgt.n	800930e <prvUnlockQueue+0x16>
 800933a:	e000      	b.n	800933e <prvUnlockQueue+0x46>
					break;
 800933c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009346:	f001 fb87 	bl	800aa58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800934a:	f001 fb6b 	bl	800aa24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009356:	e011      	b.n	800937c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d012      	beq.n	8009386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3310      	adds	r3, #16
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fcad 	bl	8009cc4 <xTaskRemoveFromEventList>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009370:	f000 fd5a 	bl	8009e28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	3b01      	subs	r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800937c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009380:	2b00      	cmp	r3, #0
 8009382:	dce9      	bgt.n	8009358 <prvUnlockQueue+0x60>
 8009384:	e000      	b.n	8009388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	22ff      	movs	r2, #255	; 0xff
 800938c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009390:	f001 fb62 	bl	800aa58 <vPortExitCritical>
}
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093a4:	f001 fb3e 	bl	800aa24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e001      	b.n	80093ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093ba:	f001 fb4d 	bl	800aa58 <vPortExitCritical>

	return xReturn;
 80093be:	68fb      	ldr	r3, [r7, #12]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093d0:	f001 fb28 	bl	800aa24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093dc:	429a      	cmp	r2, r3
 80093de:	d102      	bne.n	80093e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093e0:	2301      	movs	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e001      	b.n	80093ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093ea:	f001 fb35 	bl	800aa58 <vPortExitCritical>

	return xReturn;
 80093ee:	68fb      	ldr	r3, [r7, #12]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	e014      	b.n	8009432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009408:	4a0f      	ldr	r2, [pc, #60]	; (8009448 <vQueueAddToRegistry+0x50>)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10b      	bne.n	800942c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009414:	490c      	ldr	r1, [pc, #48]	; (8009448 <vQueueAddToRegistry+0x50>)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800941e:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <vQueueAddToRegistry+0x50>)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800942a:	e006      	b.n	800943a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3301      	adds	r3, #1
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b07      	cmp	r3, #7
 8009436:	d9e7      	bls.n	8009408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	20000c7c 	.word	0x20000c7c

0800944c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e016      	b.n	8009488 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800945a:	4a10      	ldr	r2, [pc, #64]	; (800949c <vQueueUnregisterQueue+0x50>)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	4413      	add	r3, r2
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d10b      	bne.n	8009482 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800946a:	4a0c      	ldr	r2, [pc, #48]	; (800949c <vQueueUnregisterQueue+0x50>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2100      	movs	r1, #0
 8009470:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009474:	4a09      	ldr	r2, [pc, #36]	; (800949c <vQueueUnregisterQueue+0x50>)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	4413      	add	r3, r2
 800947c:	2200      	movs	r2, #0
 800947e:	605a      	str	r2, [r3, #4]
				break;
 8009480:	e006      	b.n	8009490 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2b07      	cmp	r3, #7
 800948c:	d9e5      	bls.n	800945a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	20000c7c 	.word	0x20000c7c

080094a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094b0:	f001 fab8 	bl	800aa24 <vPortEnterCritical>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ba:	b25b      	sxtb	r3, r3
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c0:	d103      	bne.n	80094ca <vQueueWaitForMessageRestricted+0x2a>
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094d0:	b25b      	sxtb	r3, r3
 80094d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d6:	d103      	bne.n	80094e0 <vQueueWaitForMessageRestricted+0x40>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094e0:	f001 faba 	bl	800aa58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d106      	bne.n	80094fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	3324      	adds	r3, #36	; 0x24
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fbc7 	bl	8009c88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094fa:	6978      	ldr	r0, [r7, #20]
 80094fc:	f7ff fefc 	bl	80092f8 <prvUnlockQueue>
	}
 8009500:	bf00      	nop
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af04      	add	r7, sp, #16
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01e      	beq.n	800955a <xTaskCreateStatic+0x52>
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	d01b      	beq.n	800955a <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009534:	2300      	movs	r3, #0
 8009536:	9303      	str	r3, [sp, #12]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	9302      	str	r3, [sp, #8]
 800953c:	f107 0310 	add.w	r3, r7, #16
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	68b9      	ldr	r1, [r7, #8]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f851 	bl	80095f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009552:	6978      	ldr	r0, [r7, #20]
 8009554:	f000 f8e4 	bl	8009720 <prvAddNewTaskToReadyList>
 8009558:	e001      	b.n	800955e <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 800955e:	693b      	ldr	r3, [r7, #16]
	}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009568:	b580      	push	{r7, lr}
 800956a:	b08c      	sub	sp, #48	; 0x30
 800956c:	af04      	add	r7, sp, #16
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	4613      	mov	r3, r2
 8009576:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4618      	mov	r0, r3
 800957e:	f001 fb0b 	bl	800ab98 <pvPortMalloc>
 8009582:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00e      	beq.n	80095a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800958a:	20bc      	movs	r0, #188	; 0xbc
 800958c:	f001 fb04 	bl	800ab98 <pvPortMalloc>
 8009590:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	631a      	str	r2, [r3, #48]	; 0x30
 800959e:	e005      	b.n	80095ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095a0:	6978      	ldr	r0, [r7, #20]
 80095a2:	f001 fb93 	bl	800accc <vPortFree>
 80095a6:	e001      	b.n	80095ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095a8:	2300      	movs	r3, #0
 80095aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d017      	beq.n	80095e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095ba:	88fa      	ldrh	r2, [r7, #6]
 80095bc:	2300      	movs	r3, #0
 80095be:	9303      	str	r3, [sp, #12]
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	9302      	str	r3, [sp, #8]
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 f80f 	bl	80095f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095d6:	69f8      	ldr	r0, [r7, #28]
 80095d8:	f000 f8a2 	bl	8009720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095dc:	2301      	movs	r3, #1
 80095de:	61bb      	str	r3, [r7, #24]
 80095e0:	e002      	b.n	80095e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095e2:	f04f 33ff 	mov.w	r3, #4294967295
 80095e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095e8:	69bb      	ldr	r3, [r7, #24]
	}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3720      	adds	r7, #32
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	461a      	mov	r2, r3
 800960c:	21a5      	movs	r1, #165	; 0xa5
 800960e:	f001 fc93 	bl	800af38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800961c:	3b01      	subs	r3, #1
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f023 0307 	bic.w	r3, r3, #7
 800962a:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01f      	beq.n	8009672 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009632:	2300      	movs	r3, #0
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	e012      	b.n	800965e <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	4413      	add	r3, r2
 800963e:	7819      	ldrb	r1, [r3, #0]
 8009640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	4413      	add	r3, r2
 8009646:	3334      	adds	r3, #52	; 0x34
 8009648:	460a      	mov	r2, r1
 800964a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	4413      	add	r3, r2
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d006      	beq.n	8009666 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	3301      	adds	r3, #1
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b0f      	cmp	r3, #15
 8009662:	d9e9      	bls.n	8009638 <prvInitialiseNewTask+0x44>
 8009664:	e000      	b.n	8009668 <prvInitialiseNewTask+0x74>
			{
				break;
 8009666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009670:	e003      	b.n	800967a <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	2b37      	cmp	r3, #55	; 0x37
 800967e:	d901      	bls.n	8009684 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009680:	2337      	movs	r3, #55	; 0x37
 8009682:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	6a3a      	ldr	r2, [r7, #32]
 8009688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800968a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968c:	6a3a      	ldr	r2, [r7, #32]
 800968e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	2200      	movs	r2, #0
 8009694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009698:	3304      	adds	r3, #4
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff f8c6 	bl	800882c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	3318      	adds	r3, #24
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff f8c1 	bl	800882c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	3354      	adds	r3, #84	; 0x54
 80096d4:	2260      	movs	r2, #96	; 0x60
 80096d6:	2100      	movs	r1, #0
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 fc2d 	bl	800af38 <memset>
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	4a0c      	ldr	r2, [pc, #48]	; (8009714 <prvInitialiseNewTask+0x120>)
 80096e2:	659a      	str	r2, [r3, #88]	; 0x58
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	4a0c      	ldr	r2, [pc, #48]	; (8009718 <prvInitialiseNewTask+0x124>)
 80096e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	4a0b      	ldr	r2, [pc, #44]	; (800971c <prvInitialiseNewTask+0x128>)
 80096ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	6938      	ldr	r0, [r7, #16]
 80096f6:	f001 f8f5 	bl	800a8e4 <pxPortInitialiseStack>
 80096fa:	4602      	mov	r2, r0
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800970a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800970c:	bf00      	nop
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	0800d96c 	.word	0x0800d96c
 8009718:	0800d98c 	.word	0x0800d98c
 800971c:	0800d94c 	.word	0x0800d94c

08009720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009728:	f001 f97c 	bl	800aa24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800972c:	4b2d      	ldr	r3, [pc, #180]	; (80097e4 <prvAddNewTaskToReadyList+0xc4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3301      	adds	r3, #1
 8009732:	4a2c      	ldr	r2, [pc, #176]	; (80097e4 <prvAddNewTaskToReadyList+0xc4>)
 8009734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009736:	4b2c      	ldr	r3, [pc, #176]	; (80097e8 <prvAddNewTaskToReadyList+0xc8>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d109      	bne.n	8009752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800973e:	4a2a      	ldr	r2, [pc, #168]	; (80097e8 <prvAddNewTaskToReadyList+0xc8>)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009744:	4b27      	ldr	r3, [pc, #156]	; (80097e4 <prvAddNewTaskToReadyList+0xc4>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d110      	bne.n	800976e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800974c:	f000 fb90 	bl	8009e70 <prvInitialiseTaskLists>
 8009750:	e00d      	b.n	800976e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009752:	4b26      	ldr	r3, [pc, #152]	; (80097ec <prvAddNewTaskToReadyList+0xcc>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800975a:	4b23      	ldr	r3, [pc, #140]	; (80097e8 <prvAddNewTaskToReadyList+0xc8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	429a      	cmp	r2, r3
 8009766:	d802      	bhi.n	800976e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009768:	4a1f      	ldr	r2, [pc, #124]	; (80097e8 <prvAddNewTaskToReadyList+0xc8>)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800976e:	4b20      	ldr	r3, [pc, #128]	; (80097f0 <prvAddNewTaskToReadyList+0xd0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <prvAddNewTaskToReadyList+0xd0>)
 8009776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009778:	4b1d      	ldr	r3, [pc, #116]	; (80097f0 <prvAddNewTaskToReadyList+0xd0>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009784:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <prvAddNewTaskToReadyList+0xd4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	d903      	bls.n	8009794 <prvAddNewTaskToReadyList+0x74>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	4a18      	ldr	r2, [pc, #96]	; (80097f4 <prvAddNewTaskToReadyList+0xd4>)
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009798:	4613      	mov	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <prvAddNewTaskToReadyList+0xd8>)
 80097a2:	441a      	add	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	3304      	adds	r3, #4
 80097a8:	4619      	mov	r1, r3
 80097aa:	4610      	mov	r0, r2
 80097ac:	f7ff f84b 	bl	8008846 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097b0:	f001 f952 	bl	800aa58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097b4:	4b0d      	ldr	r3, [pc, #52]	; (80097ec <prvAddNewTaskToReadyList+0xcc>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00e      	beq.n	80097da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097bc:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <prvAddNewTaskToReadyList+0xc8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d207      	bcs.n	80097da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097ca:	4b0c      	ldr	r3, [pc, #48]	; (80097fc <prvAddNewTaskToReadyList+0xdc>)
 80097cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20001190 	.word	0x20001190
 80097e8:	20000cbc 	.word	0x20000cbc
 80097ec:	2000119c 	.word	0x2000119c
 80097f0:	200011ac 	.word	0x200011ac
 80097f4:	20001198 	.word	0x20001198
 80097f8:	20000cc0 	.word	0x20000cc0
 80097fc:	e000ed04 	.word	0xe000ed04

08009800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d008      	beq.n	8009824 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8009812:	f000 f879 	bl	8009908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009816:	2100      	movs	r1, #0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fd21 	bl	800a260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800981e:	f000 f881 	bl	8009924 <xTaskResumeAll>
 8009822:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d107      	bne.n	800983a <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 800982a:	4b06      	ldr	r3, [pc, #24]	; (8009844 <vTaskDelay+0x44>)
 800982c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08a      	sub	sp, #40	; 0x28
 800984c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009856:	1d3a      	adds	r2, r7, #4
 8009858:	f107 0108 	add.w	r1, r7, #8
 800985c:	f107 030c 	add.w	r3, r7, #12
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe ff8f 	bl	8008784 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	9202      	str	r2, [sp, #8]
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	2300      	movs	r3, #0
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	2300      	movs	r3, #0
 8009876:	460a      	mov	r2, r1
 8009878:	491b      	ldr	r1, [pc, #108]	; (80098e8 <vTaskStartScheduler+0xa0>)
 800987a:	481c      	ldr	r0, [pc, #112]	; (80098ec <vTaskStartScheduler+0xa4>)
 800987c:	f7ff fe44 	bl	8009508 <xTaskCreateStatic>
 8009880:	4603      	mov	r3, r0
 8009882:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <vTaskStartScheduler+0xa8>)
 8009884:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009886:	4b1a      	ldr	r3, [pc, #104]	; (80098f0 <vTaskStartScheduler+0xa8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d002      	beq.n	8009894 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800988e:	2301      	movs	r3, #1
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	e001      	b.n	8009898 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d102      	bne.n	80098a4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800989e:	f000 fd33 	bl	800a308 <xTimerCreateTimerTask>
 80098a2:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d11a      	bne.n	80098e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	613b      	str	r3, [r7, #16]
}
 80098bc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098be:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <vTaskStartScheduler+0xac>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3354      	adds	r3, #84	; 0x54
 80098c4:	4a0c      	ldr	r2, [pc, #48]	; (80098f8 <vTaskStartScheduler+0xb0>)
 80098c6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098c8:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <vTaskStartScheduler+0xb4>)
 80098ca:	f04f 32ff 	mov.w	r2, #4294967295
 80098ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098d0:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <vTaskStartScheduler+0xb8>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098d6:	4b0b      	ldr	r3, [pc, #44]	; (8009904 <vTaskStartScheduler+0xbc>)
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098dc:	f001 f878 	bl	800a9d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098e0:	bf00      	nop
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	0800d820 	.word	0x0800d820
 80098ec:	08009e41 	.word	0x08009e41
 80098f0:	200011b4 	.word	0x200011b4
 80098f4:	20000cbc 	.word	0x20000cbc
 80098f8:	2000001c 	.word	0x2000001c
 80098fc:	200011b0 	.word	0x200011b0
 8009900:	2000119c 	.word	0x2000119c
 8009904:	20001194 	.word	0x20001194

08009908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009908:	b480      	push	{r7}
 800990a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800990c:	4b04      	ldr	r3, [pc, #16]	; (8009920 <vTaskSuspendAll+0x18>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3301      	adds	r3, #1
 8009912:	4a03      	ldr	r2, [pc, #12]	; (8009920 <vTaskSuspendAll+0x18>)
 8009914:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009916:	bf00      	nop
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	200011b8 	.word	0x200011b8

08009924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800992e:	2300      	movs	r3, #0
 8009930:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009932:	f001 f877 	bl	800aa24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009936:	4b39      	ldr	r3, [pc, #228]	; (8009a1c <xTaskResumeAll+0xf8>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a37      	ldr	r2, [pc, #220]	; (8009a1c <xTaskResumeAll+0xf8>)
 800993e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009940:	4b36      	ldr	r3, [pc, #216]	; (8009a1c <xTaskResumeAll+0xf8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d162      	bne.n	8009a0e <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009948:	4b35      	ldr	r3, [pc, #212]	; (8009a20 <xTaskResumeAll+0xfc>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05e      	beq.n	8009a0e <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009950:	e02f      	b.n	80099b2 <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009952:	4b34      	ldr	r3, [pc, #208]	; (8009a24 <xTaskResumeAll+0x100>)
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3318      	adds	r3, #24
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe ffce 	bl	8008900 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3304      	adds	r3, #4
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe ffc9 	bl	8008900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009972:	4b2d      	ldr	r3, [pc, #180]	; (8009a28 <xTaskResumeAll+0x104>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d903      	bls.n	8009982 <xTaskResumeAll+0x5e>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	4a2a      	ldr	r2, [pc, #168]	; (8009a28 <xTaskResumeAll+0x104>)
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4a27      	ldr	r2, [pc, #156]	; (8009a2c <xTaskResumeAll+0x108>)
 8009990:	441a      	add	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3304      	adds	r3, #4
 8009996:	4619      	mov	r1, r3
 8009998:	4610      	mov	r0, r2
 800999a:	f7fe ff54 	bl	8008846 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a2:	4b23      	ldr	r3, [pc, #140]	; (8009a30 <xTaskResumeAll+0x10c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d302      	bcc.n	80099b2 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 80099ac:	4b21      	ldr	r3, [pc, #132]	; (8009a34 <xTaskResumeAll+0x110>)
 80099ae:	2201      	movs	r2, #1
 80099b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099b2:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <xTaskResumeAll+0x100>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1cb      	bne.n	8009952 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099c0:	f000 fae8 	bl	8009f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80099c4:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <xTaskResumeAll+0x114>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d010      	beq.n	80099f2 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099d0:	f000 f846 	bl	8009a60 <xTaskIncrementTick>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 80099da:	4b16      	ldr	r3, [pc, #88]	; (8009a34 <xTaskResumeAll+0x110>)
 80099dc:	2201      	movs	r2, #1
 80099de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1f1      	bne.n	80099d0 <xTaskResumeAll+0xac>

						xPendedTicks = 0;
 80099ec:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <xTaskResumeAll+0x114>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099f2:	4b10      	ldr	r3, [pc, #64]	; (8009a34 <xTaskResumeAll+0x110>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d009      	beq.n	8009a0e <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099fa:	2301      	movs	r3, #1
 80099fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <xTaskResumeAll+0x118>)
 8009a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a04:	601a      	str	r2, [r3, #0]
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a0e:	f001 f823 	bl	800aa58 <vPortExitCritical>

	return xAlreadyYielded;
 8009a12:	68bb      	ldr	r3, [r7, #8]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	200011b8 	.word	0x200011b8
 8009a20:	20001190 	.word	0x20001190
 8009a24:	20001150 	.word	0x20001150
 8009a28:	20001198 	.word	0x20001198
 8009a2c:	20000cc0 	.word	0x20000cc0
 8009a30:	20000cbc 	.word	0x20000cbc
 8009a34:	200011a4 	.word	0x200011a4
 8009a38:	200011a0 	.word	0x200011a0
 8009a3c:	e000ed04 	.word	0xe000ed04

08009a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a46:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <xTaskGetTickCount+0x1c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a4c:	687b      	ldr	r3, [r7, #4]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20001194 	.word	0x20001194

08009a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a6a:	4b46      	ldr	r3, [pc, #280]	; (8009b84 <xTaskIncrementTick+0x124>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d17e      	bne.n	8009b70 <xTaskIncrementTick+0x110>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a72:	4b45      	ldr	r3, [pc, #276]	; (8009b88 <xTaskIncrementTick+0x128>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3301      	adds	r3, #1
 8009a78:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a7a:	4a43      	ldr	r2, [pc, #268]	; (8009b88 <xTaskIncrementTick+0x128>)
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d110      	bne.n	8009aa8 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a86:	4b41      	ldr	r3, [pc, #260]	; (8009b8c <xTaskIncrementTick+0x12c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	4b40      	ldr	r3, [pc, #256]	; (8009b90 <xTaskIncrementTick+0x130>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a3e      	ldr	r2, [pc, #248]	; (8009b8c <xTaskIncrementTick+0x12c>)
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	4a3e      	ldr	r2, [pc, #248]	; (8009b90 <xTaskIncrementTick+0x130>)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	4b3e      	ldr	r3, [pc, #248]	; (8009b94 <xTaskIncrementTick+0x134>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	4a3c      	ldr	r2, [pc, #240]	; (8009b94 <xTaskIncrementTick+0x134>)
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	f000 fa76 	bl	8009f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009aa8:	4b3b      	ldr	r3, [pc, #236]	; (8009b98 <xTaskIncrementTick+0x138>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d349      	bcc.n	8009b46 <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ab2:	4b36      	ldr	r3, [pc, #216]	; (8009b8c <xTaskIncrementTick+0x12c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009abc:	4b36      	ldr	r3, [pc, #216]	; (8009b98 <xTaskIncrementTick+0x138>)
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac2:	601a      	str	r2, [r3, #0]
					break;
 8009ac4:	e03f      	b.n	8009b46 <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac6:	4b31      	ldr	r3, [pc, #196]	; (8009b8c <xTaskIncrementTick+0x12c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d203      	bcs.n	8009ae6 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ade:	4a2e      	ldr	r2, [pc, #184]	; (8009b98 <xTaskIncrementTick+0x138>)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ae4:	e02f      	b.n	8009b46 <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe ff08 	bl	8008900 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	3318      	adds	r3, #24
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe feff 	bl	8008900 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b06:	4b25      	ldr	r3, [pc, #148]	; (8009b9c <xTaskIncrementTick+0x13c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d903      	bls.n	8009b16 <xTaskIncrementTick+0xb6>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	4a22      	ldr	r2, [pc, #136]	; (8009b9c <xTaskIncrementTick+0x13c>)
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4a1f      	ldr	r2, [pc, #124]	; (8009ba0 <xTaskIncrementTick+0x140>)
 8009b24:	441a      	add	r2, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	f7fe fe8a 	bl	8008846 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b36:	4b1b      	ldr	r3, [pc, #108]	; (8009ba4 <xTaskIncrementTick+0x144>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d3b8      	bcc.n	8009ab2 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8009b40:	2301      	movs	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b44:	e7b5      	b.n	8009ab2 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b46:	4b17      	ldr	r3, [pc, #92]	; (8009ba4 <xTaskIncrementTick+0x144>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4c:	4914      	ldr	r1, [pc, #80]	; (8009ba0 <xTaskIncrementTick+0x140>)
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	440b      	add	r3, r1
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d901      	bls.n	8009b62 <xTaskIncrementTick+0x102>
			{
				xSwitchRequired = pdTRUE;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b62:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <xTaskIncrementTick+0x148>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d007      	beq.n	8009b7a <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	e004      	b.n	8009b7a <xTaskIncrementTick+0x11a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b70:	4b0e      	ldr	r3, [pc, #56]	; (8009bac <xTaskIncrementTick+0x14c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	4a0d      	ldr	r2, [pc, #52]	; (8009bac <xTaskIncrementTick+0x14c>)
 8009b78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b7a:	697b      	ldr	r3, [r7, #20]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	200011b8 	.word	0x200011b8
 8009b88:	20001194 	.word	0x20001194
 8009b8c:	20001148 	.word	0x20001148
 8009b90:	2000114c 	.word	0x2000114c
 8009b94:	200011a8 	.word	0x200011a8
 8009b98:	200011b0 	.word	0x200011b0
 8009b9c:	20001198 	.word	0x20001198
 8009ba0:	20000cc0 	.word	0x20000cc0
 8009ba4:	20000cbc 	.word	0x20000cbc
 8009ba8:	200011a4 	.word	0x200011a4
 8009bac:	200011a0 	.word	0x200011a0

08009bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bb6:	4b23      	ldr	r3, [pc, #140]	; (8009c44 <vTaskSwitchContext+0x94>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bbe:	4b22      	ldr	r3, [pc, #136]	; (8009c48 <vTaskSwitchContext+0x98>)
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bc4:	e038      	b.n	8009c38 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8009bc6:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <vTaskSwitchContext+0x98>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bcc:	4b1f      	ldr	r3, [pc, #124]	; (8009c4c <vTaskSwitchContext+0x9c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	607b      	str	r3, [r7, #4]
 8009bd2:	e002      	b.n	8009bda <vTaskSwitchContext+0x2a>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	607b      	str	r3, [r7, #4]
 8009bda:	491d      	ldr	r1, [pc, #116]	; (8009c50 <vTaskSwitchContext+0xa0>)
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	440b      	add	r3, r1
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0f2      	beq.n	8009bd4 <vTaskSwitchContext+0x24>
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4a15      	ldr	r2, [pc, #84]	; (8009c50 <vTaskSwitchContext+0xa0>)
 8009bfa:	4413      	add	r3, r2
 8009bfc:	603b      	str	r3, [r7, #0]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	605a      	str	r2, [r3, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d104      	bne.n	8009c1e <vTaskSwitchContext+0x6e>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	605a      	str	r2, [r3, #4]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	4a0b      	ldr	r2, [pc, #44]	; (8009c54 <vTaskSwitchContext+0xa4>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	4a08      	ldr	r2, [pc, #32]	; (8009c4c <vTaskSwitchContext+0x9c>)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c2e:	4b09      	ldr	r3, [pc, #36]	; (8009c54 <vTaskSwitchContext+0xa4>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3354      	adds	r3, #84	; 0x54
 8009c34:	4a08      	ldr	r2, [pc, #32]	; (8009c58 <vTaskSwitchContext+0xa8>)
 8009c36:	6013      	str	r3, [r2, #0]
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	200011b8 	.word	0x200011b8
 8009c48:	200011a4 	.word	0x200011a4
 8009c4c:	20001198 	.word	0x20001198
 8009c50:	20000cc0 	.word	0x20000cc0
 8009c54:	20000cbc 	.word	0x20000cbc
 8009c58:	2000001c 	.word	0x2000001c

08009c5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c66:	4b07      	ldr	r3, [pc, #28]	; (8009c84 <vTaskPlaceOnEventList+0x28>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3318      	adds	r3, #24
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7fe fe0d 	bl	800888e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c74:	2101      	movs	r1, #1
 8009c76:	6838      	ldr	r0, [r7, #0]
 8009c78:	f000 faf2 	bl	800a260 <prvAddCurrentTaskToDelayedList>
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20000cbc 	.word	0x20000cbc

08009c88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c94:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <vTaskPlaceOnEventListRestricted+0x38>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3318      	adds	r3, #24
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7fe fdd2 	bl	8008846 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8009ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	68b8      	ldr	r0, [r7, #8]
 8009cb2:	f000 fad5 	bl	800a260 <prvAddCurrentTaskToDelayedList>
	}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000cbc 	.word	0x20000cbc

08009cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	3318      	adds	r3, #24
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fe fe11 	bl	8008900 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cde:	4b1e      	ldr	r3, [pc, #120]	; (8009d58 <xTaskRemoveFromEventList+0x94>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d11d      	bne.n	8009d22 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fe08 	bl	8008900 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf4:	4b19      	ldr	r3, [pc, #100]	; (8009d5c <xTaskRemoveFromEventList+0x98>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d903      	bls.n	8009d04 <xTaskRemoveFromEventList+0x40>
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	4a16      	ldr	r2, [pc, #88]	; (8009d5c <xTaskRemoveFromEventList+0x98>)
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4a13      	ldr	r2, [pc, #76]	; (8009d60 <xTaskRemoveFromEventList+0x9c>)
 8009d12:	441a      	add	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	3304      	adds	r3, #4
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f7fe fd93 	bl	8008846 <vListInsertEnd>
 8009d20:	e005      	b.n	8009d2e <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	3318      	adds	r3, #24
 8009d26:	4619      	mov	r1, r3
 8009d28:	480e      	ldr	r0, [pc, #56]	; (8009d64 <xTaskRemoveFromEventList+0xa0>)
 8009d2a:	f7fe fd8c 	bl	8008846 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d32:	4b0d      	ldr	r3, [pc, #52]	; (8009d68 <xTaskRemoveFromEventList+0xa4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d905      	bls.n	8009d48 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <xTaskRemoveFromEventList+0xa8>)
 8009d42:	2201      	movs	r2, #1
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	e001      	b.n	8009d4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200011b8 	.word	0x200011b8
 8009d5c:	20001198 	.word	0x20001198
 8009d60:	20000cc0 	.word	0x20000cc0
 8009d64:	20001150 	.word	0x20001150
 8009d68:	20000cbc 	.word	0x20000cbc
 8009d6c:	200011a4 	.word	0x200011a4

08009d70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d78:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <vTaskInternalSetTimeOutState+0x24>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d80:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <vTaskInternalSetTimeOutState+0x28>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	605a      	str	r2, [r3, #4]
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	200011a8 	.word	0x200011a8
 8009d98:	20001194 	.word	0x20001194

08009d9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8009da6:	f000 fe3d 	bl	800aa24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009daa:	4b1d      	ldr	r3, [pc, #116]	; (8009e20 <xTaskCheckForTimeOut+0x84>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d102      	bne.n	8009dca <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	e023      	b.n	8009e12 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	4b15      	ldr	r3, [pc, #84]	; (8009e24 <xTaskCheckForTimeOut+0x88>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d007      	beq.n	8009de6 <xTaskCheckForTimeOut+0x4a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d302      	bcc.n	8009de6 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009de0:	2301      	movs	r3, #1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e015      	b.n	8009e12 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d20b      	bcs.n	8009e08 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	1ad2      	subs	r2, r2, r3
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff ffb7 	bl	8009d70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	e004      	b.n	8009e12 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009e12:	f000 fe21 	bl	800aa58 <vPortExitCritical>

	return xReturn;
 8009e16:	697b      	ldr	r3, [r7, #20]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20001194 	.word	0x20001194
 8009e24:	200011a8 	.word	0x200011a8

08009e28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e2c:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <vTaskMissedYield+0x14>)
 8009e2e:	2201      	movs	r2, #1
 8009e30:	601a      	str	r2, [r3, #0]
}
 8009e32:	bf00      	nop
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	200011a4 	.word	0x200011a4

08009e40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e48:	f000 f852 	bl	8009ef0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e4c:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <prvIdleTask+0x28>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d9f9      	bls.n	8009e48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <prvIdleTask+0x2c>)
 8009e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e64:	e7f0      	b.n	8009e48 <prvIdleTask+0x8>
 8009e66:	bf00      	nop
 8009e68:	20000cc0 	.word	0x20000cc0
 8009e6c:	e000ed04 	.word	0xe000ed04

08009e70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e76:	2300      	movs	r3, #0
 8009e78:	607b      	str	r3, [r7, #4]
 8009e7a:	e00c      	b.n	8009e96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4a12      	ldr	r2, [pc, #72]	; (8009ed0 <prvInitialiseTaskLists+0x60>)
 8009e88:	4413      	add	r3, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fcae 	bl	80087ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3301      	adds	r3, #1
 8009e94:	607b      	str	r3, [r7, #4]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b37      	cmp	r3, #55	; 0x37
 8009e9a:	d9ef      	bls.n	8009e7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e9c:	480d      	ldr	r0, [pc, #52]	; (8009ed4 <prvInitialiseTaskLists+0x64>)
 8009e9e:	f7fe fca5 	bl	80087ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ea2:	480d      	ldr	r0, [pc, #52]	; (8009ed8 <prvInitialiseTaskLists+0x68>)
 8009ea4:	f7fe fca2 	bl	80087ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ea8:	480c      	ldr	r0, [pc, #48]	; (8009edc <prvInitialiseTaskLists+0x6c>)
 8009eaa:	f7fe fc9f 	bl	80087ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009eae:	480c      	ldr	r0, [pc, #48]	; (8009ee0 <prvInitialiseTaskLists+0x70>)
 8009eb0:	f7fe fc9c 	bl	80087ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009eb4:	480b      	ldr	r0, [pc, #44]	; (8009ee4 <prvInitialiseTaskLists+0x74>)
 8009eb6:	f7fe fc99 	bl	80087ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <prvInitialiseTaskLists+0x78>)
 8009ebc:	4a05      	ldr	r2, [pc, #20]	; (8009ed4 <prvInitialiseTaskLists+0x64>)
 8009ebe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ec0:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <prvInitialiseTaskLists+0x7c>)
 8009ec2:	4a05      	ldr	r2, [pc, #20]	; (8009ed8 <prvInitialiseTaskLists+0x68>)
 8009ec4:	601a      	str	r2, [r3, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000cc0 	.word	0x20000cc0
 8009ed4:	20001120 	.word	0x20001120
 8009ed8:	20001134 	.word	0x20001134
 8009edc:	20001150 	.word	0x20001150
 8009ee0:	20001164 	.word	0x20001164
 8009ee4:	2000117c 	.word	0x2000117c
 8009ee8:	20001148 	.word	0x20001148
 8009eec:	2000114c 	.word	0x2000114c

08009ef0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ef6:	e019      	b.n	8009f2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ef8:	f000 fd94 	bl	800aa24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efc:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <prvCheckTasksWaitingTermination+0x50>)
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fcf9 	bl	8008900 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f0e:	4b0d      	ldr	r3, [pc, #52]	; (8009f44 <prvCheckTasksWaitingTermination+0x54>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3b01      	subs	r3, #1
 8009f14:	4a0b      	ldr	r2, [pc, #44]	; (8009f44 <prvCheckTasksWaitingTermination+0x54>)
 8009f16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f18:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <prvCheckTasksWaitingTermination+0x58>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	4a0a      	ldr	r2, [pc, #40]	; (8009f48 <prvCheckTasksWaitingTermination+0x58>)
 8009f20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f22:	f000 fd99 	bl	800aa58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f810 	bl	8009f4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f2c:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <prvCheckTasksWaitingTermination+0x58>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e1      	bne.n	8009ef8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20001164 	.word	0x20001164
 8009f44:	20001190 	.word	0x20001190
 8009f48:	20001178 	.word	0x20001178

08009f4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3354      	adds	r3, #84	; 0x54
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 f897 	bl	800b08c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d108      	bne.n	8009f7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 fead 	bl	800accc <vPortFree>
				vPortFree( pxTCB );
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 feaa 	bl	800accc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f78:	e007      	b.n	8009f8a <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d102      	bne.n	8009f8a <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fea1 	bl	800accc <vPortFree>
	}
 8009f8a:	bf00      	nop
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f9a:	4b0c      	ldr	r3, [pc, #48]	; (8009fcc <prvResetNextTaskUnblockTime+0x38>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d104      	bne.n	8009fae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fa4:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8009fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009faa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fac:	e008      	b.n	8009fc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fae:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <prvResetNextTaskUnblockTime+0x38>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	4a04      	ldr	r2, [pc, #16]	; (8009fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8009fbe:	6013      	str	r3, [r2, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	20001148 	.word	0x20001148
 8009fd0:	200011b0 	.word	0x200011b0

08009fd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fda:	4b0b      	ldr	r3, [pc, #44]	; (800a008 <xTaskGetSchedulerState+0x34>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d102      	bne.n	8009fe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	607b      	str	r3, [r7, #4]
 8009fe6:	e008      	b.n	8009ffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fe8:	4b08      	ldr	r3, [pc, #32]	; (800a00c <xTaskGetSchedulerState+0x38>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d102      	bne.n	8009ff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	607b      	str	r3, [r7, #4]
 8009ff4:	e001      	b.n	8009ffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ffa:	687b      	ldr	r3, [r7, #4]
	}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	2000119c 	.word	0x2000119c
 800a00c:	200011b8 	.word	0x200011b8

0800a010 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d051      	beq.n	800a0ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02a:	4b2a      	ldr	r3, [pc, #168]	; (800a0d4 <xTaskPriorityInherit+0xc4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	429a      	cmp	r2, r3
 800a032:	d241      	bcs.n	800a0b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	db06      	blt.n	800a04a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a03c:	4b25      	ldr	r3, [pc, #148]	; (800a0d4 <xTaskPriorityInherit+0xc4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a042:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	6959      	ldr	r1, [r3, #20]
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4a1f      	ldr	r2, [pc, #124]	; (800a0d8 <xTaskPriorityInherit+0xc8>)
 800a05c:	4413      	add	r3, r2
 800a05e:	4299      	cmp	r1, r3
 800a060:	d122      	bne.n	800a0a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	3304      	adds	r3, #4
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fc4a 	bl	8008900 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a06c:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <xTaskPriorityInherit+0xc4>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07a:	4b18      	ldr	r3, [pc, #96]	; (800a0dc <xTaskPriorityInherit+0xcc>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d903      	bls.n	800a08a <xTaskPriorityInherit+0x7a>
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a086:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <xTaskPriorityInherit+0xcc>)
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4a10      	ldr	r2, [pc, #64]	; (800a0d8 <xTaskPriorityInherit+0xc8>)
 800a098:	441a      	add	r2, r3
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	3304      	adds	r3, #4
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f7fe fbd0 	bl	8008846 <vListInsertEnd>
 800a0a6:	e004      	b.n	800a0b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a0a8:	4b0a      	ldr	r3, [pc, #40]	; (800a0d4 <xTaskPriorityInherit+0xc4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	e008      	b.n	800a0ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0bc:	4b05      	ldr	r3, [pc, #20]	; (800a0d4 <xTaskPriorityInherit+0xc4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d201      	bcs.n	800a0ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
	}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20000cbc 	.word	0x20000cbc
 800a0d8:	20000cc0 	.word	0x20000cc0
 800a0dc:	20001198 	.word	0x20001198

0800a0e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d037      	beq.n	800a166 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0fa:	1e5a      	subs	r2, r3, #1
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a108:	429a      	cmp	r2, r3
 800a10a:	d02c      	beq.n	800a166 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a110:	2b00      	cmp	r3, #0
 800a112:	d128      	bne.n	800a166 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	3304      	adds	r3, #4
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fe fbf1 	bl	8008900 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a136:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <xTaskPriorityDisinherit+0x90>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d903      	bls.n	800a146 <xTaskPriorityDisinherit+0x66>
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	4a0b      	ldr	r2, [pc, #44]	; (800a170 <xTaskPriorityDisinherit+0x90>)
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14a:	4613      	mov	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4a08      	ldr	r2, [pc, #32]	; (800a174 <xTaskPriorityDisinherit+0x94>)
 800a154:	441a      	add	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	3304      	adds	r3, #4
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f7fe fb72 	bl	8008846 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a162:	2301      	movs	r3, #1
 800a164:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a166:	68fb      	ldr	r3, [r7, #12]
	}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20001198 	.word	0x20001198
 800a174:	20000cc0 	.word	0x20000cc0

0800a178 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a186:	2301      	movs	r3, #1
 800a188:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d04b      	beq.n	800a228 <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d902      	bls.n	800a1a0 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	e002      	b.n	800a1a6 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1a4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d03b      	beq.n	800a228 <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d136      	bne.n	800a228 <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1be:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	db04      	blt.n	800a1d8 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	6959      	ldr	r1, [r3, #20]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4a12      	ldr	r2, [pc, #72]	; (800a230 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a1e8:	4413      	add	r3, r2
 800a1ea:	4299      	cmp	r1, r3
 800a1ec:	d11c      	bne.n	800a228 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fb84 	bl	8008900 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fc:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d903      	bls.n	800a20c <vTaskPriorityDisinheritAfterTimeout+0x94>
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	4a0a      	ldr	r2, [pc, #40]	; (800a234 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4a05      	ldr	r2, [pc, #20]	; (800a230 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a21a:	441a      	add	r2, r3
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	3304      	adds	r3, #4
 800a220:	4619      	mov	r1, r3
 800a222:	4610      	mov	r0, r2
 800a224:	f7fe fb0f 	bl	8008846 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a228:	bf00      	nop
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20000cc0 	.word	0x20000cc0
 800a234:	20001198 	.word	0x20001198

0800a238 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a23c:	4b07      	ldr	r3, [pc, #28]	; (800a25c <pvTaskIncrementMutexHeldCount+0x24>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d004      	beq.n	800a24e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <pvTaskIncrementMutexHeldCount+0x24>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a24a:	3201      	adds	r2, #1
 800a24c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a24e:	4b03      	ldr	r3, [pc, #12]	; (800a25c <pvTaskIncrementMutexHeldCount+0x24>)
 800a250:	681b      	ldr	r3, [r3, #0]
	}
 800a252:	4618      	mov	r0, r3
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000cbc 	.word	0x20000cbc

0800a260 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a26a:	4b21      	ldr	r3, [pc, #132]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a270:	4b20      	ldr	r3, [pc, #128]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3304      	adds	r3, #4
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fb42 	bl	8008900 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d10a      	bne.n	800a29a <prvAddCurrentTaskToDelayedList+0x3a>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a28a:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3304      	adds	r3, #4
 800a290:	4619      	mov	r1, r3
 800a292:	4819      	ldr	r0, [pc, #100]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a294:	f7fe fad7 	bl	8008846 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a298:	e026      	b.n	800a2e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4413      	add	r3, r2
 800a2a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2a2:	4b14      	ldr	r3, [pc, #80]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d209      	bcs.n	800a2c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2b2:	4b12      	ldr	r3, [pc, #72]	; (800a2fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f7fe fae5 	bl	800888e <vListInsert>
}
 800a2c4:	e010      	b.n	800a2e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2c6:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	f7fe fadb 	bl	800888e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d202      	bcs.n	800a2e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2e2:	4a08      	ldr	r2, [pc, #32]	; (800a304 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6013      	str	r3, [r2, #0]
}
 800a2e8:	bf00      	nop
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	20001194 	.word	0x20001194
 800a2f4:	20000cbc 	.word	0x20000cbc
 800a2f8:	2000117c 	.word	0x2000117c
 800a2fc:	2000114c 	.word	0x2000114c
 800a300:	20001148 	.word	0x20001148
 800a304:	200011b0 	.word	0x200011b0

0800a308 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a312:	f000 faa7 	bl	800a864 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a316:	4b15      	ldr	r3, [pc, #84]	; (800a36c <xTimerCreateTimerTask+0x64>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d020      	beq.n	800a360 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a322:	2300      	movs	r3, #0
 800a324:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a326:	463a      	mov	r2, r7
 800a328:	1d39      	adds	r1, r7, #4
 800a32a:	f107 0308 	add.w	r3, r7, #8
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe fa42 	bl	80087b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	9202      	str	r2, [sp, #8]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	2302      	movs	r3, #2
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	2300      	movs	r3, #0
 800a344:	460a      	mov	r2, r1
 800a346:	490a      	ldr	r1, [pc, #40]	; (800a370 <xTimerCreateTimerTask+0x68>)
 800a348:	480a      	ldr	r0, [pc, #40]	; (800a374 <xTimerCreateTimerTask+0x6c>)
 800a34a:	f7ff f8dd 	bl	8009508 <xTaskCreateStatic>
 800a34e:	4603      	mov	r3, r0
 800a350:	4a09      	ldr	r2, [pc, #36]	; (800a378 <xTimerCreateTimerTask+0x70>)
 800a352:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a354:	4b08      	ldr	r3, [pc, #32]	; (800a378 <xTimerCreateTimerTask+0x70>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a35c:	2301      	movs	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 800a360:	68fb      	ldr	r3, [r7, #12]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	200011ec 	.word	0x200011ec
 800a370:	0800d828 	.word	0x0800d828
 800a374:	0800a47d 	.word	0x0800a47d
 800a378:	200011f0 	.word	0x200011f0

0800a37c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08a      	sub	sp, #40	; 0x28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a38e:	4b1a      	ldr	r3, [pc, #104]	; (800a3f8 <xTimerGenericCommand+0x7c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d02a      	beq.n	800a3ec <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b05      	cmp	r3, #5
 800a3a6:	dc18      	bgt.n	800a3da <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3a8:	f7ff fe14 	bl	8009fd4 <xTaskGetSchedulerState>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d109      	bne.n	800a3c6 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3b2:	4b11      	ldr	r3, [pc, #68]	; (800a3f8 <xTimerGenericCommand+0x7c>)
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	f107 0114 	add.w	r1, r7, #20
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3be:	f7fe fbc1 	bl	8008b44 <xQueueGenericSend>
 800a3c2:	6278      	str	r0, [r7, #36]	; 0x24
 800a3c4:	e012      	b.n	800a3ec <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3c6:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <xTimerGenericCommand+0x7c>)
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	f107 0114 	add.w	r1, r7, #20
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f7fe fbb7 	bl	8008b44 <xQueueGenericSend>
 800a3d6:	6278      	str	r0, [r7, #36]	; 0x24
 800a3d8:	e008      	b.n	800a3ec <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3da:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <xTimerGenericCommand+0x7c>)
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	f107 0114 	add.w	r1, r7, #20
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	f7fe fc57 	bl	8008c98 <xQueueGenericSendFromISR>
 800a3ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3728      	adds	r7, #40	; 0x28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	200011ec 	.word	0x200011ec

0800a3fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af02      	add	r7, sp, #8
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a406:	4b1c      	ldr	r3, [pc, #112]	; (800a478 <prvProcessExpiredTimer+0x7c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3304      	adds	r3, #4
 800a414:	4618      	mov	r0, r3
 800a416:	f7fe fa73 	bl	8008900 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	2b00      	cmp	r3, #0
 800a426:	d015      	beq.n	800a454 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	699a      	ldr	r2, [r3, #24]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	18d1      	adds	r1, r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f000 f8c5 	bl	800a5c4 <prvInsertTimerInActiveList>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d012      	beq.n	800a466 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a440:	2300      	movs	r3, #0
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	2300      	movs	r3, #0
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	2100      	movs	r1, #0
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7ff ff96 	bl	800a37c <xTimerGenericCommand>
 800a450:	60b8      	str	r0, [r7, #8]
 800a452:	e008      	b.n	800a466 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a45a:	f023 0301 	bic.w	r3, r3, #1
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	4798      	blx	r3
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	200011e4 	.word	0x200011e4

0800a47c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a484:	f107 0308 	add.w	r3, r7, #8
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 f857 	bl	800a53c <prvGetNextExpireTime>
 800a48e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	4619      	mov	r1, r3
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 f803 	bl	800a4a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a49a:	f000 f8d5 	bl	800a648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a49e:	e7f1      	b.n	800a484 <prvTimerTask+0x8>

0800a4a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4aa:	f7ff fa2d 	bl	8009908 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 f866 	bl	800a584 <prvSampleTimeNow>
 800a4b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d130      	bne.n	800a522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <prvProcessTimerOrBlockTask+0x3c>
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d806      	bhi.n	800a4dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4ce:	f7ff fa29 	bl	8009924 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4d2:	68f9      	ldr	r1, [r7, #12]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7ff ff91 	bl	800a3fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4da:	e024      	b.n	800a526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d008      	beq.n	800a4f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4e2:	4b13      	ldr	r3, [pc, #76]	; (800a530 <prvProcessTimerOrBlockTask+0x90>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <prvProcessTimerOrBlockTask+0x50>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <prvProcessTimerOrBlockTask+0x52>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <prvProcessTimerOrBlockTask+0x94>)
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	4619      	mov	r1, r3
 800a502:	f7fe ffcd 	bl	80094a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a506:	f7ff fa0d 	bl	8009924 <xTaskResumeAll>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a510:	4b09      	ldr	r3, [pc, #36]	; (800a538 <prvProcessTimerOrBlockTask+0x98>)
 800a512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
}
 800a520:	e001      	b.n	800a526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a522:	f7ff f9ff 	bl	8009924 <xTaskResumeAll>
}
 800a526:	bf00      	nop
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	200011e8 	.word	0x200011e8
 800a534:	200011ec 	.word	0x200011ec
 800a538:	e000ed04 	.word	0xe000ed04

0800a53c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a544:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <prvGetNextExpireTime+0x44>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <prvGetNextExpireTime+0x16>
 800a54e:	2201      	movs	r2, #1
 800a550:	e000      	b.n	800a554 <prvGetNextExpireTime+0x18>
 800a552:	2200      	movs	r2, #0
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d105      	bne.n	800a56c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <prvGetNextExpireTime+0x44>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	e001      	b.n	800a570 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a570:	68fb      	ldr	r3, [r7, #12]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	200011e4 	.word	0x200011e4

0800a584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a58c:	f7ff fa58 	bl	8009a40 <xTaskGetTickCount>
 800a590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a592:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <prvSampleTimeNow+0x3c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d205      	bcs.n	800a5a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a59c:	f000 f90c 	bl	800a7b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	e002      	b.n	800a5ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5ae:	4a04      	ldr	r2, [pc, #16]	; (800a5c0 <prvSampleTimeNow+0x3c>)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	200011f4 	.word	0x200011f4

0800a5c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d812      	bhi.n	800a610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d302      	bcc.n	800a5fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	e01b      	b.n	800a636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5fe:	4b10      	ldr	r3, [pc, #64]	; (800a640 <prvInsertTimerInActiveList+0x7c>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3304      	adds	r3, #4
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f7fe f940 	bl	800888e <vListInsert>
 800a60e:	e012      	b.n	800a636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d206      	bcs.n	800a626 <prvInsertTimerInActiveList+0x62>
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d302      	bcc.n	800a626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a620:	2301      	movs	r3, #1
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	e007      	b.n	800a636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a626:	4b07      	ldr	r3, [pc, #28]	; (800a644 <prvInsertTimerInActiveList+0x80>)
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3304      	adds	r3, #4
 800a62e:	4619      	mov	r1, r3
 800a630:	4610      	mov	r0, r2
 800a632:	f7fe f92c 	bl	800888e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a636:	697b      	ldr	r3, [r7, #20]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3718      	adds	r7, #24
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	200011e8 	.word	0x200011e8
 800a644:	200011e4 	.word	0x200011e4

0800a648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08c      	sub	sp, #48	; 0x30
 800a64c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a64e:	e0a0      	b.n	800a792 <prvProcessReceivedCommands+0x14a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	da0b      	bge.n	800a66e <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a656:	f107 0308 	add.w	r3, r7, #8
 800a65a:	3304      	adds	r3, #4
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a664:	6850      	ldr	r0, [r2, #4]
 800a666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a668:	6892      	ldr	r2, [r2, #8]
 800a66a:	4611      	mov	r1, r2
 800a66c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	f2c0 808d 	blt.w	800a790 <prvProcessReceivedCommands+0x148>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d004      	beq.n	800a68c <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	3304      	adds	r3, #4
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe f93a 	bl	8008900 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a68c:	1d3b      	adds	r3, r7, #4
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff ff78 	bl	800a584 <prvSampleTimeNow>
 800a694:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	2b09      	cmp	r3, #9
 800a69a:	d87a      	bhi.n	800a792 <prvProcessReceivedCommands+0x14a>
 800a69c:	a201      	add	r2, pc, #4	; (adr r2, 800a6a4 <prvProcessReceivedCommands+0x5c>)
 800a69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a2:	bf00      	nop
 800a6a4:	0800a6cd 	.word	0x0800a6cd
 800a6a8:	0800a6cd 	.word	0x0800a6cd
 800a6ac:	0800a6cd 	.word	0x0800a6cd
 800a6b0:	0800a727 	.word	0x0800a727
 800a6b4:	0800a73b 	.word	0x0800a73b
 800a6b8:	0800a767 	.word	0x0800a767
 800a6bc:	0800a6cd 	.word	0x0800a6cd
 800a6c0:	0800a6cd 	.word	0x0800a6cd
 800a6c4:	0800a727 	.word	0x0800a727
 800a6c8:	0800a73b 	.word	0x0800a73b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6d2:	f043 0301 	orr.w	r3, r3, #1
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	18d1      	adds	r1, r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	69fa      	ldr	r2, [r7, #28]
 800a6ea:	6a38      	ldr	r0, [r7, #32]
 800a6ec:	f7ff ff6a 	bl	800a5c4 <prvInsertTimerInActiveList>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d04d      	beq.n	800a792 <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	6a38      	ldr	r0, [r7, #32]
 800a6fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d042      	beq.n	800a792 <prvProcessReceivedCommands+0x14a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	441a      	add	r2, r3
 800a714:	2300      	movs	r3, #0
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	2300      	movs	r3, #0
 800a71a:	2100      	movs	r1, #0
 800a71c:	6a38      	ldr	r0, [r7, #32]
 800a71e:	f7ff fe2d 	bl	800a37c <xTimerGenericCommand>
 800a722:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800a724:	e035      	b.n	800a792 <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a72c:	f023 0301 	bic.w	r3, r3, #1
 800a730:	b2da      	uxtb	r2, r3
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a738:	e02b      	b.n	800a792 <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a740:	f043 0301 	orr.w	r3, r3, #1
 800a744:	b2da      	uxtb	r2, r3
 800a746:	6a3b      	ldr	r3, [r7, #32]
 800a748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	18d1      	adds	r1, r2, r3
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	69fa      	ldr	r2, [r7, #28]
 800a75e:	6a38      	ldr	r0, [r7, #32]
 800a760:	f7ff ff30 	bl	800a5c4 <prvInsertTimerInActiveList>
					break;
 800a764:	e015      	b.n	800a792 <prvProcessReceivedCommands+0x14a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d103      	bne.n	800a77c <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 800a774:	6a38      	ldr	r0, [r7, #32]
 800a776:	f000 faa9 	bl	800accc <vPortFree>
 800a77a:	e00a      	b.n	800a792 <prvProcessReceivedCommands+0x14a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a77c:	6a3b      	ldr	r3, [r7, #32]
 800a77e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a782:	f023 0301 	bic.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a78e:	e000      	b.n	800a792 <prvProcessReceivedCommands+0x14a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a790:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a792:	4b08      	ldr	r3, [pc, #32]	; (800a7b4 <prvProcessReceivedCommands+0x16c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f107 0108 	add.w	r1, r7, #8
 800a79a:	2200      	movs	r2, #0
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fe fb2d 	bl	8008dfc <xQueueReceive>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f47f af53 	bne.w	800a650 <prvProcessReceivedCommands+0x8>
	}
}
 800a7aa:	bf00      	nop
 800a7ac:	bf00      	nop
 800a7ae:	3728      	adds	r7, #40	; 0x28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	200011ec 	.word	0x200011ec

0800a7b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7be:	e03a      	b.n	800a836 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7c0:	4b26      	ldr	r3, [pc, #152]	; (800a85c <prvSwitchTimerLists+0xa4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ca:	4b24      	ldr	r3, [pc, #144]	; (800a85c <prvSwitchTimerLists+0xa4>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe f891 	bl	8008900 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d020      	beq.n	800a836 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	429a      	cmp	r2, r3
 800a804:	d90e      	bls.n	800a824 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a812:	4b12      	ldr	r3, [pc, #72]	; (800a85c <prvSwitchTimerLists+0xa4>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3304      	adds	r3, #4
 800a81a:	4619      	mov	r1, r3
 800a81c:	4610      	mov	r0, r2
 800a81e:	f7fe f836 	bl	800888e <vListInsert>
 800a822:	e008      	b.n	800a836 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a824:	2300      	movs	r3, #0
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2300      	movs	r3, #0
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	2100      	movs	r1, #0
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f7ff fda4 	bl	800a37c <xTimerGenericCommand>
 800a834:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a836:	4b09      	ldr	r3, [pc, #36]	; (800a85c <prvSwitchTimerLists+0xa4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1bf      	bne.n	800a7c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <prvSwitchTimerLists+0xa4>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a846:	4b06      	ldr	r3, [pc, #24]	; (800a860 <prvSwitchTimerLists+0xa8>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a04      	ldr	r2, [pc, #16]	; (800a85c <prvSwitchTimerLists+0xa4>)
 800a84c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a84e:	4a04      	ldr	r2, [pc, #16]	; (800a860 <prvSwitchTimerLists+0xa8>)
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	6013      	str	r3, [r2, #0]
}
 800a854:	bf00      	nop
 800a856:	3718      	adds	r7, #24
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	200011e4 	.word	0x200011e4
 800a860:	200011e8 	.word	0x200011e8

0800a864 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a86a:	f000 f8db 	bl	800aa24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a86e:	4b15      	ldr	r3, [pc, #84]	; (800a8c4 <prvCheckForValidListAndQueue+0x60>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d120      	bne.n	800a8b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a876:	4814      	ldr	r0, [pc, #80]	; (800a8c8 <prvCheckForValidListAndQueue+0x64>)
 800a878:	f7fd ffb8 	bl	80087ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a87c:	4813      	ldr	r0, [pc, #76]	; (800a8cc <prvCheckForValidListAndQueue+0x68>)
 800a87e:	f7fd ffb5 	bl	80087ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a882:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <prvCheckForValidListAndQueue+0x6c>)
 800a884:	4a10      	ldr	r2, [pc, #64]	; (800a8c8 <prvCheckForValidListAndQueue+0x64>)
 800a886:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a888:	4b12      	ldr	r3, [pc, #72]	; (800a8d4 <prvCheckForValidListAndQueue+0x70>)
 800a88a:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <prvCheckForValidListAndQueue+0x68>)
 800a88c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a88e:	2300      	movs	r3, #0
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <prvCheckForValidListAndQueue+0x74>)
 800a894:	4a11      	ldr	r2, [pc, #68]	; (800a8dc <prvCheckForValidListAndQueue+0x78>)
 800a896:	2110      	movs	r1, #16
 800a898:	200a      	movs	r0, #10
 800a89a:	f7fe f8b5 	bl	8008a08 <xQueueGenericCreateStatic>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4a08      	ldr	r2, [pc, #32]	; (800a8c4 <prvCheckForValidListAndQueue+0x60>)
 800a8a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8a4:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <prvCheckForValidListAndQueue+0x60>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8ac:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <prvCheckForValidListAndQueue+0x60>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	490b      	ldr	r1, [pc, #44]	; (800a8e0 <prvCheckForValidListAndQueue+0x7c>)
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe fda0 	bl	80093f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8b8:	f000 f8ce 	bl	800aa58 <vPortExitCritical>
}
 800a8bc:	bf00      	nop
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200011ec 	.word	0x200011ec
 800a8c8:	200011bc 	.word	0x200011bc
 800a8cc:	200011d0 	.word	0x200011d0
 800a8d0:	200011e4 	.word	0x200011e4
 800a8d4:	200011e8 	.word	0x200011e8
 800a8d8:	20001298 	.word	0x20001298
 800a8dc:	200011f8 	.word	0x200011f8
 800a8e0:	0800d830 	.word	0x0800d830

0800a8e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3b04      	subs	r3, #4
 800a8f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3b04      	subs	r3, #4
 800a902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f023 0201 	bic.w	r2, r3, #1
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3b04      	subs	r3, #4
 800a912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a914:	4a0c      	ldr	r2, [pc, #48]	; (800a948 <pxPortInitialiseStack+0x64>)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3b14      	subs	r3, #20
 800a91e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	3b04      	subs	r3, #4
 800a92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f06f 0202 	mvn.w	r2, #2
 800a932:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3b20      	subs	r3, #32
 800a938:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a93a:	68fb      	ldr	r3, [r7, #12]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	0800a94d 	.word	0x0800a94d

0800a94c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	607b      	str	r3, [r7, #4]
}
 800a968:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a96a:	bf00      	nop
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0fc      	beq.n	800a96c <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a972:	bf00      	nop
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a980:	4b07      	ldr	r3, [pc, #28]	; (800a9a0 <pxCurrentTCBConst2>)
 800a982:	6819      	ldr	r1, [r3, #0]
 800a984:	6808      	ldr	r0, [r1, #0]
 800a986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98a:	f380 8809 	msr	PSP, r0
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f04f 0000 	mov.w	r0, #0
 800a996:	f380 8811 	msr	BASEPRI, r0
 800a99a:	4770      	bx	lr
 800a99c:	f3af 8000 	nop.w

0800a9a0 <pxCurrentTCBConst2>:
 800a9a0:	20000cbc 	.word	0x20000cbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop

0800a9a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9a8:	4808      	ldr	r0, [pc, #32]	; (800a9cc <prvPortStartFirstTask+0x24>)
 800a9aa:	6800      	ldr	r0, [r0, #0]
 800a9ac:	6800      	ldr	r0, [r0, #0]
 800a9ae:	f380 8808 	msr	MSP, r0
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8814 	msr	CONTROL, r0
 800a9ba:	b662      	cpsie	i
 800a9bc:	b661      	cpsie	f
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	df00      	svc	0
 800a9c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9ca:	bf00      	nop
 800a9cc:	e000ed08 	.word	0xe000ed08

0800a9d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9d4:	4b10      	ldr	r3, [pc, #64]	; (800aa18 <xPortStartScheduler+0x48>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a0f      	ldr	r2, [pc, #60]	; (800aa18 <xPortStartScheduler+0x48>)
 800a9da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9de:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <xPortStartScheduler+0x48>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a0c      	ldr	r2, [pc, #48]	; (800aa18 <xPortStartScheduler+0x48>)
 800a9e6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9ea:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9ec:	f000 f8a6 	bl	800ab3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <xPortStartScheduler+0x4c>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9f6:	f000 f8c5 	bl	800ab84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9fa:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <xPortStartScheduler+0x50>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a08      	ldr	r2, [pc, #32]	; (800aa20 <xPortStartScheduler+0x50>)
 800aa00:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa04:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa06:	f7ff ffcf 	bl	800a9a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa0a:	f7ff f8d1 	bl	8009bb0 <vTaskSwitchContext>
	prvTaskExitError();
 800aa0e:	f7ff ff9d 	bl	800a94c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	e000ed20 	.word	0xe000ed20
 800aa1c:	20000018 	.word	0x20000018
 800aa20:	e000ef34 	.word	0xe000ef34

0800aa24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	607b      	str	r3, [r7, #4]
}
 800aa3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <vPortEnterCritical+0x30>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3301      	adds	r3, #1
 800aa44:	4a03      	ldr	r2, [pc, #12]	; (800aa54 <vPortEnterCritical+0x30>)
 800aa46:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	20000018 	.word	0x20000018

0800aa58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800aa5e:	4b0a      	ldr	r3, [pc, #40]	; (800aa88 <vPortExitCritical+0x30>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	4a08      	ldr	r2, [pc, #32]	; (800aa88 <vPortExitCritical+0x30>)
 800aa66:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa68:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <vPortExitCritical+0x30>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d105      	bne.n	800aa7c <vPortExitCritical+0x24>
 800aa70:	2300      	movs	r3, #0
 800aa72:	607b      	str	r3, [r7, #4]
	__asm volatile
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f383 8811 	msr	BASEPRI, r3
}
 800aa7a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	20000018 	.word	0x20000018
 800aa8c:	00000000 	.word	0x00000000

0800aa90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa90:	f3ef 8009 	mrs	r0, PSP
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	4b15      	ldr	r3, [pc, #84]	; (800aaf0 <pxCurrentTCBConst>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	f01e 0f10 	tst.w	lr, #16
 800aaa0:	bf08      	it	eq
 800aaa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aaa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaaa:	6010      	str	r0, [r2, #0]
 800aaac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aab4:	f380 8811 	msr	BASEPRI, r0
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f7ff f876 	bl	8009bb0 <vTaskSwitchContext>
 800aac4:	f04f 0000 	mov.w	r0, #0
 800aac8:	f380 8811 	msr	BASEPRI, r0
 800aacc:	bc09      	pop	{r0, r3}
 800aace:	6819      	ldr	r1, [r3, #0]
 800aad0:	6808      	ldr	r0, [r1, #0]
 800aad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad6:	f01e 0f10 	tst.w	lr, #16
 800aada:	bf08      	it	eq
 800aadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aae0:	f380 8809 	msr	PSP, r0
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	f3af 8000 	nop.w

0800aaf0 <pxCurrentTCBConst>:
 800aaf0:	20000cbc 	.word	0x20000cbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop

0800aaf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	607b      	str	r3, [r7, #4]
}
 800ab10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab12:	f7fe ffa5 	bl	8009a60 <xTaskIncrementTick>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab1c:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <xPortSysTickHandler+0x40>)
 800ab1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	2300      	movs	r3, #0
 800ab26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f383 8811 	msr	BASEPRI, r3
}
 800ab2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	e000ed04 	.word	0xe000ed04

0800ab3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <vPortSetupTimerInterrupt+0x34>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab46:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <vPortSetupTimerInterrupt+0x38>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <vPortSetupTimerInterrupt+0x3c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a0a      	ldr	r2, [pc, #40]	; (800ab7c <vPortSetupTimerInterrupt+0x40>)
 800ab52:	fba2 2303 	umull	r2, r3, r2, r3
 800ab56:	099b      	lsrs	r3, r3, #6
 800ab58:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <vPortSetupTimerInterrupt+0x44>)
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab5e:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <vPortSetupTimerInterrupt+0x34>)
 800ab60:	2207      	movs	r2, #7
 800ab62:	601a      	str	r2, [r3, #0]
}
 800ab64:	bf00      	nop
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	e000e010 	.word	0xe000e010
 800ab74:	e000e018 	.word	0xe000e018
 800ab78:	2000000c 	.word	0x2000000c
 800ab7c:	10624dd3 	.word	0x10624dd3
 800ab80:	e000e014 	.word	0xe000e014

0800ab84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab94 <vPortEnableVFP+0x10>
 800ab88:	6801      	ldr	r1, [r0, #0]
 800ab8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab8e:	6001      	str	r1, [r0, #0]
 800ab90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab92:	bf00      	nop
 800ab94:	e000ed88 	.word	0xe000ed88

0800ab98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800aba4:	f7fe feb0 	bl	8009908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aba8:	4b42      	ldr	r3, [pc, #264]	; (800acb4 <pvPortMalloc+0x11c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abb0:	f000 f8cc 	bl	800ad4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abb4:	4b40      	ldr	r3, [pc, #256]	; (800acb8 <pvPortMalloc+0x120>)
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4013      	ands	r3, r2
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d172      	bne.n	800aca6 <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00d      	beq.n	800abe2 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800abc6:	2208      	movs	r2, #8
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4413      	add	r3, r2
 800abcc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f003 0307 	and.w	r3, r3, #7
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d004      	beq.n	800abe2 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f023 0307 	bic.w	r3, r3, #7
 800abde:	3308      	adds	r3, #8
 800abe0:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d05e      	beq.n	800aca6 <pvPortMalloc+0x10e>
 800abe8:	4b34      	ldr	r3, [pc, #208]	; (800acbc <pvPortMalloc+0x124>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d859      	bhi.n	800aca6 <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abf2:	4b33      	ldr	r3, [pc, #204]	; (800acc0 <pvPortMalloc+0x128>)
 800abf4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800abf6:	4b32      	ldr	r3, [pc, #200]	; (800acc0 <pvPortMalloc+0x128>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abfc:	e004      	b.n	800ac08 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d903      	bls.n	800ac1a <pvPortMalloc+0x82>
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1f1      	bne.n	800abfe <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac1a:	4b26      	ldr	r3, [pc, #152]	; (800acb4 <pvPortMalloc+0x11c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d040      	beq.n	800aca6 <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2208      	movs	r2, #8
 800ac2a:	4413      	add	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	1ad2      	subs	r2, r2, r3
 800ac3e:	2308      	movs	r3, #8
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d90f      	bls.n	800ac66 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	685a      	ldr	r2, [r3, #4]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	1ad2      	subs	r2, r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac60:	68b8      	ldr	r0, [r7, #8]
 800ac62:	f000 f8d5 	bl	800ae10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac66:	4b15      	ldr	r3, [pc, #84]	; (800acbc <pvPortMalloc+0x124>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	4a12      	ldr	r2, [pc, #72]	; (800acbc <pvPortMalloc+0x124>)
 800ac72:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac74:	4b11      	ldr	r3, [pc, #68]	; (800acbc <pvPortMalloc+0x124>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <pvPortMalloc+0x12c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d203      	bcs.n	800ac88 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac80:	4b0e      	ldr	r3, [pc, #56]	; (800acbc <pvPortMalloc+0x124>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a0f      	ldr	r2, [pc, #60]	; (800acc4 <pvPortMalloc+0x12c>)
 800ac86:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	4b0a      	ldr	r3, [pc, #40]	; (800acb8 <pvPortMalloc+0x120>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	431a      	orrs	r2, r3
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac9c:	4b0a      	ldr	r3, [pc, #40]	; (800acc8 <pvPortMalloc+0x130>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3301      	adds	r3, #1
 800aca2:	4a09      	ldr	r2, [pc, #36]	; (800acc8 <pvPortMalloc+0x130>)
 800aca4:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aca6:	f7fe fe3d 	bl	8009924 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 800acaa:	68fb      	ldr	r3, [r7, #12]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	200026f0 	.word	0x200026f0
 800acb8:	20002704 	.word	0x20002704
 800acbc:	200026f4 	.word	0x200026f4
 800acc0:	200026e8 	.word	0x200026e8
 800acc4:	200026f8 	.word	0x200026f8
 800acc8:	200026fc 	.word	0x200026fc

0800accc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d02c      	beq.n	800ad38 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acde:	2308      	movs	r3, #8
 800ace0:	425b      	negs	r3, r3
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4413      	add	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	685a      	ldr	r2, [r3, #4]
 800acf0:	4b13      	ldr	r3, [pc, #76]	; (800ad40 <vPortFree+0x74>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4013      	ands	r3, r2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d01e      	beq.n	800ad38 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d11a      	bne.n	800ad38 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	4b0e      	ldr	r3, [pc, #56]	; (800ad40 <vPortFree+0x74>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	43db      	mvns	r3, r3
 800ad0c:	401a      	ands	r2, r3
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad12:	f7fe fdf9 	bl	8009908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <vPortFree+0x78>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4413      	add	r3, r2
 800ad20:	4a08      	ldr	r2, [pc, #32]	; (800ad44 <vPortFree+0x78>)
 800ad22:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad24:	68b8      	ldr	r0, [r7, #8]
 800ad26:	f000 f873 	bl	800ae10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad2a:	4b07      	ldr	r3, [pc, #28]	; (800ad48 <vPortFree+0x7c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	4a05      	ldr	r2, [pc, #20]	; (800ad48 <vPortFree+0x7c>)
 800ad32:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad34:	f7fe fdf6 	bl	8009924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad38:	bf00      	nop
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	20002704 	.word	0x20002704
 800ad44:	200026f4 	.word	0x200026f4
 800ad48:	20002700 	.word	0x20002700

0800ad4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ad56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad58:	4b27      	ldr	r3, [pc, #156]	; (800adf8 <prvHeapInit+0xac>)
 800ad5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f003 0307 	and.w	r3, r3, #7
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00c      	beq.n	800ad80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3307      	adds	r3, #7
 800ad6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f023 0307 	bic.w	r3, r3, #7
 800ad72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	4a1f      	ldr	r2, [pc, #124]	; (800adf8 <prvHeapInit+0xac>)
 800ad7c:	4413      	add	r3, r2
 800ad7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad84:	4a1d      	ldr	r2, [pc, #116]	; (800adfc <prvHeapInit+0xb0>)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad8a:	4b1c      	ldr	r3, [pc, #112]	; (800adfc <prvHeapInit+0xb0>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4413      	add	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad98:	2208      	movs	r2, #8
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0307 	bic.w	r3, r3, #7
 800ada6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4a15      	ldr	r2, [pc, #84]	; (800ae00 <prvHeapInit+0xb4>)
 800adac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800adae:	4b14      	ldr	r3, [pc, #80]	; (800ae00 <prvHeapInit+0xb4>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2200      	movs	r2, #0
 800adb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adb6:	4b12      	ldr	r3, [pc, #72]	; (800ae00 <prvHeapInit+0xb4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2200      	movs	r2, #0
 800adbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adcc:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <prvHeapInit+0xb4>)
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	4a0a      	ldr	r2, [pc, #40]	; (800ae04 <prvHeapInit+0xb8>)
 800adda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	4a09      	ldr	r2, [pc, #36]	; (800ae08 <prvHeapInit+0xbc>)
 800ade2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ade4:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <prvHeapInit+0xc0>)
 800ade6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800adea:	601a      	str	r2, [r3, #0]
}
 800adec:	bf00      	nop
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	200012e8 	.word	0x200012e8
 800adfc:	200026e8 	.word	0x200026e8
 800ae00:	200026f0 	.word	0x200026f0
 800ae04:	200026f8 	.word	0x200026f8
 800ae08:	200026f4 	.word	0x200026f4
 800ae0c:	20002704 	.word	0x20002704

0800ae10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae18:	4b28      	ldr	r3, [pc, #160]	; (800aebc <prvInsertBlockIntoFreeList+0xac>)
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e002      	b.n	800ae24 <prvInsertBlockIntoFreeList+0x14>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d8f7      	bhi.n	800ae1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	4413      	add	r3, r2
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d108      	bne.n	800ae52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	441a      	add	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	441a      	add	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d118      	bne.n	800ae98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <prvInsertBlockIntoFreeList+0xb0>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d00d      	beq.n	800ae8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	441a      	add	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	e008      	b.n	800aea0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae8e:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <prvInsertBlockIntoFreeList+0xb0>)
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	e003      	b.n	800aea0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d002      	beq.n	800aeae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aeae:	bf00      	nop
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	200026e8 	.word	0x200026e8
 800aec0:	200026f0 	.word	0x200026f0

0800aec4 <__errno>:
 800aec4:	4b01      	ldr	r3, [pc, #4]	; (800aecc <__errno+0x8>)
 800aec6:	6818      	ldr	r0, [r3, #0]
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	2000001c 	.word	0x2000001c

0800aed0 <__libc_init_array>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	4d0d      	ldr	r5, [pc, #52]	; (800af08 <__libc_init_array+0x38>)
 800aed4:	4c0d      	ldr	r4, [pc, #52]	; (800af0c <__libc_init_array+0x3c>)
 800aed6:	1b64      	subs	r4, r4, r5
 800aed8:	10a4      	asrs	r4, r4, #2
 800aeda:	2600      	movs	r6, #0
 800aedc:	42a6      	cmp	r6, r4
 800aede:	d109      	bne.n	800aef4 <__libc_init_array+0x24>
 800aee0:	4d0b      	ldr	r5, [pc, #44]	; (800af10 <__libc_init_array+0x40>)
 800aee2:	4c0c      	ldr	r4, [pc, #48]	; (800af14 <__libc_init_array+0x44>)
 800aee4:	f002 fc52 	bl	800d78c <_init>
 800aee8:	1b64      	subs	r4, r4, r5
 800aeea:	10a4      	asrs	r4, r4, #2
 800aeec:	2600      	movs	r6, #0
 800aeee:	42a6      	cmp	r6, r4
 800aef0:	d105      	bne.n	800aefe <__libc_init_array+0x2e>
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef8:	4798      	blx	r3
 800aefa:	3601      	adds	r6, #1
 800aefc:	e7ee      	b.n	800aedc <__libc_init_array+0xc>
 800aefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800af02:	4798      	blx	r3
 800af04:	3601      	adds	r6, #1
 800af06:	e7f2      	b.n	800aeee <__libc_init_array+0x1e>
 800af08:	0800dbf0 	.word	0x0800dbf0
 800af0c:	0800dbf0 	.word	0x0800dbf0
 800af10:	0800dbf0 	.word	0x0800dbf0
 800af14:	0800dbf4 	.word	0x0800dbf4

0800af18 <__retarget_lock_acquire_recursive>:
 800af18:	4770      	bx	lr

0800af1a <__retarget_lock_release_recursive>:
 800af1a:	4770      	bx	lr

0800af1c <memcpy>:
 800af1c:	440a      	add	r2, r1
 800af1e:	4291      	cmp	r1, r2
 800af20:	f100 33ff 	add.w	r3, r0, #4294967295
 800af24:	d100      	bne.n	800af28 <memcpy+0xc>
 800af26:	4770      	bx	lr
 800af28:	b510      	push	{r4, lr}
 800af2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af32:	4291      	cmp	r1, r2
 800af34:	d1f9      	bne.n	800af2a <memcpy+0xe>
 800af36:	bd10      	pop	{r4, pc}

0800af38 <memset>:
 800af38:	4402      	add	r2, r0
 800af3a:	4603      	mov	r3, r0
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d100      	bne.n	800af42 <memset+0xa>
 800af40:	4770      	bx	lr
 800af42:	f803 1b01 	strb.w	r1, [r3], #1
 800af46:	e7f9      	b.n	800af3c <memset+0x4>

0800af48 <sbrk_aligned>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	4e0e      	ldr	r6, [pc, #56]	; (800af84 <sbrk_aligned+0x3c>)
 800af4c:	460c      	mov	r4, r1
 800af4e:	6831      	ldr	r1, [r6, #0]
 800af50:	4605      	mov	r5, r0
 800af52:	b911      	cbnz	r1, 800af5a <sbrk_aligned+0x12>
 800af54:	f000 f8f6 	bl	800b144 <_sbrk_r>
 800af58:	6030      	str	r0, [r6, #0]
 800af5a:	4621      	mov	r1, r4
 800af5c:	4628      	mov	r0, r5
 800af5e:	f000 f8f1 	bl	800b144 <_sbrk_r>
 800af62:	1c43      	adds	r3, r0, #1
 800af64:	d00a      	beq.n	800af7c <sbrk_aligned+0x34>
 800af66:	1cc4      	adds	r4, r0, #3
 800af68:	f024 0403 	bic.w	r4, r4, #3
 800af6c:	42a0      	cmp	r0, r4
 800af6e:	d007      	beq.n	800af80 <sbrk_aligned+0x38>
 800af70:	1a21      	subs	r1, r4, r0
 800af72:	4628      	mov	r0, r5
 800af74:	f000 f8e6 	bl	800b144 <_sbrk_r>
 800af78:	3001      	adds	r0, #1
 800af7a:	d101      	bne.n	800af80 <sbrk_aligned+0x38>
 800af7c:	f04f 34ff 	mov.w	r4, #4294967295
 800af80:	4620      	mov	r0, r4
 800af82:	bd70      	pop	{r4, r5, r6, pc}
 800af84:	20002710 	.word	0x20002710

0800af88 <_malloc_r>:
 800af88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af8c:	1ccd      	adds	r5, r1, #3
 800af8e:	f025 0503 	bic.w	r5, r5, #3
 800af92:	3508      	adds	r5, #8
 800af94:	2d0c      	cmp	r5, #12
 800af96:	bf38      	it	cc
 800af98:	250c      	movcc	r5, #12
 800af9a:	2d00      	cmp	r5, #0
 800af9c:	4607      	mov	r7, r0
 800af9e:	db01      	blt.n	800afa4 <_malloc_r+0x1c>
 800afa0:	42a9      	cmp	r1, r5
 800afa2:	d905      	bls.n	800afb0 <_malloc_r+0x28>
 800afa4:	230c      	movs	r3, #12
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	2600      	movs	r6, #0
 800afaa:	4630      	mov	r0, r6
 800afac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb0:	4e2e      	ldr	r6, [pc, #184]	; (800b06c <_malloc_r+0xe4>)
 800afb2:	f000 f8f7 	bl	800b1a4 <__malloc_lock>
 800afb6:	6833      	ldr	r3, [r6, #0]
 800afb8:	461c      	mov	r4, r3
 800afba:	bb34      	cbnz	r4, 800b00a <_malloc_r+0x82>
 800afbc:	4629      	mov	r1, r5
 800afbe:	4638      	mov	r0, r7
 800afc0:	f7ff ffc2 	bl	800af48 <sbrk_aligned>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	4604      	mov	r4, r0
 800afc8:	d14d      	bne.n	800b066 <_malloc_r+0xde>
 800afca:	6834      	ldr	r4, [r6, #0]
 800afcc:	4626      	mov	r6, r4
 800afce:	2e00      	cmp	r6, #0
 800afd0:	d140      	bne.n	800b054 <_malloc_r+0xcc>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	4631      	mov	r1, r6
 800afd6:	4638      	mov	r0, r7
 800afd8:	eb04 0803 	add.w	r8, r4, r3
 800afdc:	f000 f8b2 	bl	800b144 <_sbrk_r>
 800afe0:	4580      	cmp	r8, r0
 800afe2:	d13a      	bne.n	800b05a <_malloc_r+0xd2>
 800afe4:	6821      	ldr	r1, [r4, #0]
 800afe6:	3503      	adds	r5, #3
 800afe8:	1a6d      	subs	r5, r5, r1
 800afea:	f025 0503 	bic.w	r5, r5, #3
 800afee:	3508      	adds	r5, #8
 800aff0:	2d0c      	cmp	r5, #12
 800aff2:	bf38      	it	cc
 800aff4:	250c      	movcc	r5, #12
 800aff6:	4629      	mov	r1, r5
 800aff8:	4638      	mov	r0, r7
 800affa:	f7ff ffa5 	bl	800af48 <sbrk_aligned>
 800affe:	3001      	adds	r0, #1
 800b000:	d02b      	beq.n	800b05a <_malloc_r+0xd2>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	442b      	add	r3, r5
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	e00e      	b.n	800b028 <_malloc_r+0xa0>
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	1b52      	subs	r2, r2, r5
 800b00e:	d41e      	bmi.n	800b04e <_malloc_r+0xc6>
 800b010:	2a0b      	cmp	r2, #11
 800b012:	d916      	bls.n	800b042 <_malloc_r+0xba>
 800b014:	1961      	adds	r1, r4, r5
 800b016:	42a3      	cmp	r3, r4
 800b018:	6025      	str	r5, [r4, #0]
 800b01a:	bf18      	it	ne
 800b01c:	6059      	strne	r1, [r3, #4]
 800b01e:	6863      	ldr	r3, [r4, #4]
 800b020:	bf08      	it	eq
 800b022:	6031      	streq	r1, [r6, #0]
 800b024:	5162      	str	r2, [r4, r5]
 800b026:	604b      	str	r3, [r1, #4]
 800b028:	4638      	mov	r0, r7
 800b02a:	f104 060b 	add.w	r6, r4, #11
 800b02e:	f000 f8bf 	bl	800b1b0 <__malloc_unlock>
 800b032:	f026 0607 	bic.w	r6, r6, #7
 800b036:	1d23      	adds	r3, r4, #4
 800b038:	1af2      	subs	r2, r6, r3
 800b03a:	d0b6      	beq.n	800afaa <_malloc_r+0x22>
 800b03c:	1b9b      	subs	r3, r3, r6
 800b03e:	50a3      	str	r3, [r4, r2]
 800b040:	e7b3      	b.n	800afaa <_malloc_r+0x22>
 800b042:	6862      	ldr	r2, [r4, #4]
 800b044:	42a3      	cmp	r3, r4
 800b046:	bf0c      	ite	eq
 800b048:	6032      	streq	r2, [r6, #0]
 800b04a:	605a      	strne	r2, [r3, #4]
 800b04c:	e7ec      	b.n	800b028 <_malloc_r+0xa0>
 800b04e:	4623      	mov	r3, r4
 800b050:	6864      	ldr	r4, [r4, #4]
 800b052:	e7b2      	b.n	800afba <_malloc_r+0x32>
 800b054:	4634      	mov	r4, r6
 800b056:	6876      	ldr	r6, [r6, #4]
 800b058:	e7b9      	b.n	800afce <_malloc_r+0x46>
 800b05a:	230c      	movs	r3, #12
 800b05c:	603b      	str	r3, [r7, #0]
 800b05e:	4638      	mov	r0, r7
 800b060:	f000 f8a6 	bl	800b1b0 <__malloc_unlock>
 800b064:	e7a1      	b.n	800afaa <_malloc_r+0x22>
 800b066:	6025      	str	r5, [r4, #0]
 800b068:	e7de      	b.n	800b028 <_malloc_r+0xa0>
 800b06a:	bf00      	nop
 800b06c:	2000270c 	.word	0x2000270c

0800b070 <cleanup_glue>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	460c      	mov	r4, r1
 800b074:	6809      	ldr	r1, [r1, #0]
 800b076:	4605      	mov	r5, r0
 800b078:	b109      	cbz	r1, 800b07e <cleanup_glue+0xe>
 800b07a:	f7ff fff9 	bl	800b070 <cleanup_glue>
 800b07e:	4621      	mov	r1, r4
 800b080:	4628      	mov	r0, r5
 800b082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b086:	f000 b899 	b.w	800b1bc <_free_r>
	...

0800b08c <_reclaim_reent>:
 800b08c:	4b2c      	ldr	r3, [pc, #176]	; (800b140 <_reclaim_reent+0xb4>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4283      	cmp	r3, r0
 800b092:	b570      	push	{r4, r5, r6, lr}
 800b094:	4604      	mov	r4, r0
 800b096:	d051      	beq.n	800b13c <_reclaim_reent+0xb0>
 800b098:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b09a:	b143      	cbz	r3, 800b0ae <_reclaim_reent+0x22>
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d14a      	bne.n	800b138 <_reclaim_reent+0xac>
 800b0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a4:	6819      	ldr	r1, [r3, #0]
 800b0a6:	b111      	cbz	r1, 800b0ae <_reclaim_reent+0x22>
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 f887 	bl	800b1bc <_free_r>
 800b0ae:	6961      	ldr	r1, [r4, #20]
 800b0b0:	b111      	cbz	r1, 800b0b8 <_reclaim_reent+0x2c>
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 f882 	bl	800b1bc <_free_r>
 800b0b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b0ba:	b111      	cbz	r1, 800b0c2 <_reclaim_reent+0x36>
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f000 f87d 	bl	800b1bc <_free_r>
 800b0c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b0c4:	b111      	cbz	r1, 800b0cc <_reclaim_reent+0x40>
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f000 f878 	bl	800b1bc <_free_r>
 800b0cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b0ce:	b111      	cbz	r1, 800b0d6 <_reclaim_reent+0x4a>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 f873 	bl	800b1bc <_free_r>
 800b0d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b0d8:	b111      	cbz	r1, 800b0e0 <_reclaim_reent+0x54>
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 f86e 	bl	800b1bc <_free_r>
 800b0e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b0e2:	b111      	cbz	r1, 800b0ea <_reclaim_reent+0x5e>
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f000 f869 	bl	800b1bc <_free_r>
 800b0ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b0ec:	b111      	cbz	r1, 800b0f4 <_reclaim_reent+0x68>
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 f864 	bl	800b1bc <_free_r>
 800b0f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0f6:	b111      	cbz	r1, 800b0fe <_reclaim_reent+0x72>
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 f85f 	bl	800b1bc <_free_r>
 800b0fe:	69a3      	ldr	r3, [r4, #24]
 800b100:	b1e3      	cbz	r3, 800b13c <_reclaim_reent+0xb0>
 800b102:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b104:	4620      	mov	r0, r4
 800b106:	4798      	blx	r3
 800b108:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b10a:	b1b9      	cbz	r1, 800b13c <_reclaim_reent+0xb0>
 800b10c:	4620      	mov	r0, r4
 800b10e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b112:	f7ff bfad 	b.w	800b070 <cleanup_glue>
 800b116:	5949      	ldr	r1, [r1, r5]
 800b118:	b941      	cbnz	r1, 800b12c <_reclaim_reent+0xa0>
 800b11a:	3504      	adds	r5, #4
 800b11c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b11e:	2d80      	cmp	r5, #128	; 0x80
 800b120:	68d9      	ldr	r1, [r3, #12]
 800b122:	d1f8      	bne.n	800b116 <_reclaim_reent+0x8a>
 800b124:	4620      	mov	r0, r4
 800b126:	f000 f849 	bl	800b1bc <_free_r>
 800b12a:	e7ba      	b.n	800b0a2 <_reclaim_reent+0x16>
 800b12c:	680e      	ldr	r6, [r1, #0]
 800b12e:	4620      	mov	r0, r4
 800b130:	f000 f844 	bl	800b1bc <_free_r>
 800b134:	4631      	mov	r1, r6
 800b136:	e7ef      	b.n	800b118 <_reclaim_reent+0x8c>
 800b138:	2500      	movs	r5, #0
 800b13a:	e7ef      	b.n	800b11c <_reclaim_reent+0x90>
 800b13c:	bd70      	pop	{r4, r5, r6, pc}
 800b13e:	bf00      	nop
 800b140:	2000001c 	.word	0x2000001c

0800b144 <_sbrk_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d06      	ldr	r5, [pc, #24]	; (800b160 <_sbrk_r+0x1c>)
 800b148:	2300      	movs	r3, #0
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	f7f6 ff08 	bl	8001f64 <_sbrk>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_sbrk_r+0x1a>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_sbrk_r+0x1a>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	20002714 	.word	0x20002714

0800b164 <siprintf>:
 800b164:	b40e      	push	{r1, r2, r3}
 800b166:	b500      	push	{lr}
 800b168:	b09c      	sub	sp, #112	; 0x70
 800b16a:	ab1d      	add	r3, sp, #116	; 0x74
 800b16c:	9002      	str	r0, [sp, #8]
 800b16e:	9006      	str	r0, [sp, #24]
 800b170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b174:	4809      	ldr	r0, [pc, #36]	; (800b19c <siprintf+0x38>)
 800b176:	9107      	str	r1, [sp, #28]
 800b178:	9104      	str	r1, [sp, #16]
 800b17a:	4909      	ldr	r1, [pc, #36]	; (800b1a0 <siprintf+0x3c>)
 800b17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b180:	9105      	str	r1, [sp, #20]
 800b182:	6800      	ldr	r0, [r0, #0]
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	a902      	add	r1, sp, #8
 800b188:	f000 f8c0 	bl	800b30c <_svfiprintf_r>
 800b18c:	9b02      	ldr	r3, [sp, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	b01c      	add	sp, #112	; 0x70
 800b194:	f85d eb04 	ldr.w	lr, [sp], #4
 800b198:	b003      	add	sp, #12
 800b19a:	4770      	bx	lr
 800b19c:	2000001c 	.word	0x2000001c
 800b1a0:	ffff0208 	.word	0xffff0208

0800b1a4 <__malloc_lock>:
 800b1a4:	4801      	ldr	r0, [pc, #4]	; (800b1ac <__malloc_lock+0x8>)
 800b1a6:	f7ff beb7 	b.w	800af18 <__retarget_lock_acquire_recursive>
 800b1aa:	bf00      	nop
 800b1ac:	20002708 	.word	0x20002708

0800b1b0 <__malloc_unlock>:
 800b1b0:	4801      	ldr	r0, [pc, #4]	; (800b1b8 <__malloc_unlock+0x8>)
 800b1b2:	f7ff beb2 	b.w	800af1a <__retarget_lock_release_recursive>
 800b1b6:	bf00      	nop
 800b1b8:	20002708 	.word	0x20002708

0800b1bc <_free_r>:
 800b1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1be:	2900      	cmp	r1, #0
 800b1c0:	d044      	beq.n	800b24c <_free_r+0x90>
 800b1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1c6:	9001      	str	r0, [sp, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b1ce:	bfb8      	it	lt
 800b1d0:	18e4      	addlt	r4, r4, r3
 800b1d2:	f7ff ffe7 	bl	800b1a4 <__malloc_lock>
 800b1d6:	4a1e      	ldr	r2, [pc, #120]	; (800b250 <_free_r+0x94>)
 800b1d8:	9801      	ldr	r0, [sp, #4]
 800b1da:	6813      	ldr	r3, [r2, #0]
 800b1dc:	b933      	cbnz	r3, 800b1ec <_free_r+0x30>
 800b1de:	6063      	str	r3, [r4, #4]
 800b1e0:	6014      	str	r4, [r2, #0]
 800b1e2:	b003      	add	sp, #12
 800b1e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1e8:	f7ff bfe2 	b.w	800b1b0 <__malloc_unlock>
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	d908      	bls.n	800b202 <_free_r+0x46>
 800b1f0:	6825      	ldr	r5, [r4, #0]
 800b1f2:	1961      	adds	r1, r4, r5
 800b1f4:	428b      	cmp	r3, r1
 800b1f6:	bf01      	itttt	eq
 800b1f8:	6819      	ldreq	r1, [r3, #0]
 800b1fa:	685b      	ldreq	r3, [r3, #4]
 800b1fc:	1949      	addeq	r1, r1, r5
 800b1fe:	6021      	streq	r1, [r4, #0]
 800b200:	e7ed      	b.n	800b1de <_free_r+0x22>
 800b202:	461a      	mov	r2, r3
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	b10b      	cbz	r3, 800b20c <_free_r+0x50>
 800b208:	42a3      	cmp	r3, r4
 800b20a:	d9fa      	bls.n	800b202 <_free_r+0x46>
 800b20c:	6811      	ldr	r1, [r2, #0]
 800b20e:	1855      	adds	r5, r2, r1
 800b210:	42a5      	cmp	r5, r4
 800b212:	d10b      	bne.n	800b22c <_free_r+0x70>
 800b214:	6824      	ldr	r4, [r4, #0]
 800b216:	4421      	add	r1, r4
 800b218:	1854      	adds	r4, r2, r1
 800b21a:	42a3      	cmp	r3, r4
 800b21c:	6011      	str	r1, [r2, #0]
 800b21e:	d1e0      	bne.n	800b1e2 <_free_r+0x26>
 800b220:	681c      	ldr	r4, [r3, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	6053      	str	r3, [r2, #4]
 800b226:	4421      	add	r1, r4
 800b228:	6011      	str	r1, [r2, #0]
 800b22a:	e7da      	b.n	800b1e2 <_free_r+0x26>
 800b22c:	d902      	bls.n	800b234 <_free_r+0x78>
 800b22e:	230c      	movs	r3, #12
 800b230:	6003      	str	r3, [r0, #0]
 800b232:	e7d6      	b.n	800b1e2 <_free_r+0x26>
 800b234:	6825      	ldr	r5, [r4, #0]
 800b236:	1961      	adds	r1, r4, r5
 800b238:	428b      	cmp	r3, r1
 800b23a:	bf04      	itt	eq
 800b23c:	6819      	ldreq	r1, [r3, #0]
 800b23e:	685b      	ldreq	r3, [r3, #4]
 800b240:	6063      	str	r3, [r4, #4]
 800b242:	bf04      	itt	eq
 800b244:	1949      	addeq	r1, r1, r5
 800b246:	6021      	streq	r1, [r4, #0]
 800b248:	6054      	str	r4, [r2, #4]
 800b24a:	e7ca      	b.n	800b1e2 <_free_r+0x26>
 800b24c:	b003      	add	sp, #12
 800b24e:	bd30      	pop	{r4, r5, pc}
 800b250:	2000270c 	.word	0x2000270c

0800b254 <__ssputs_r>:
 800b254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	688e      	ldr	r6, [r1, #8]
 800b25a:	429e      	cmp	r6, r3
 800b25c:	4682      	mov	sl, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	4690      	mov	r8, r2
 800b262:	461f      	mov	r7, r3
 800b264:	d838      	bhi.n	800b2d8 <__ssputs_r+0x84>
 800b266:	898a      	ldrh	r2, [r1, #12]
 800b268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b26c:	d032      	beq.n	800b2d4 <__ssputs_r+0x80>
 800b26e:	6825      	ldr	r5, [r4, #0]
 800b270:	6909      	ldr	r1, [r1, #16]
 800b272:	eba5 0901 	sub.w	r9, r5, r1
 800b276:	6965      	ldr	r5, [r4, #20]
 800b278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b27c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b280:	3301      	adds	r3, #1
 800b282:	444b      	add	r3, r9
 800b284:	106d      	asrs	r5, r5, #1
 800b286:	429d      	cmp	r5, r3
 800b288:	bf38      	it	cc
 800b28a:	461d      	movcc	r5, r3
 800b28c:	0553      	lsls	r3, r2, #21
 800b28e:	d531      	bpl.n	800b2f4 <__ssputs_r+0xa0>
 800b290:	4629      	mov	r1, r5
 800b292:	f7ff fe79 	bl	800af88 <_malloc_r>
 800b296:	4606      	mov	r6, r0
 800b298:	b950      	cbnz	r0, 800b2b0 <__ssputs_r+0x5c>
 800b29a:	230c      	movs	r3, #12
 800b29c:	f8ca 3000 	str.w	r3, [sl]
 800b2a0:	89a3      	ldrh	r3, [r4, #12]
 800b2a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a6:	81a3      	strh	r3, [r4, #12]
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b0:	6921      	ldr	r1, [r4, #16]
 800b2b2:	464a      	mov	r2, r9
 800b2b4:	f7ff fe32 	bl	800af1c <memcpy>
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c2:	81a3      	strh	r3, [r4, #12]
 800b2c4:	6126      	str	r6, [r4, #16]
 800b2c6:	6165      	str	r5, [r4, #20]
 800b2c8:	444e      	add	r6, r9
 800b2ca:	eba5 0509 	sub.w	r5, r5, r9
 800b2ce:	6026      	str	r6, [r4, #0]
 800b2d0:	60a5      	str	r5, [r4, #8]
 800b2d2:	463e      	mov	r6, r7
 800b2d4:	42be      	cmp	r6, r7
 800b2d6:	d900      	bls.n	800b2da <__ssputs_r+0x86>
 800b2d8:	463e      	mov	r6, r7
 800b2da:	6820      	ldr	r0, [r4, #0]
 800b2dc:	4632      	mov	r2, r6
 800b2de:	4641      	mov	r1, r8
 800b2e0:	f000 faa8 	bl	800b834 <memmove>
 800b2e4:	68a3      	ldr	r3, [r4, #8]
 800b2e6:	1b9b      	subs	r3, r3, r6
 800b2e8:	60a3      	str	r3, [r4, #8]
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	4433      	add	r3, r6
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	e7db      	b.n	800b2ac <__ssputs_r+0x58>
 800b2f4:	462a      	mov	r2, r5
 800b2f6:	f000 fab7 	bl	800b868 <_realloc_r>
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d1e1      	bne.n	800b2c4 <__ssputs_r+0x70>
 800b300:	6921      	ldr	r1, [r4, #16]
 800b302:	4650      	mov	r0, sl
 800b304:	f7ff ff5a 	bl	800b1bc <_free_r>
 800b308:	e7c7      	b.n	800b29a <__ssputs_r+0x46>
	...

0800b30c <_svfiprintf_r>:
 800b30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	4698      	mov	r8, r3
 800b312:	898b      	ldrh	r3, [r1, #12]
 800b314:	061b      	lsls	r3, r3, #24
 800b316:	b09d      	sub	sp, #116	; 0x74
 800b318:	4607      	mov	r7, r0
 800b31a:	460d      	mov	r5, r1
 800b31c:	4614      	mov	r4, r2
 800b31e:	d50e      	bpl.n	800b33e <_svfiprintf_r+0x32>
 800b320:	690b      	ldr	r3, [r1, #16]
 800b322:	b963      	cbnz	r3, 800b33e <_svfiprintf_r+0x32>
 800b324:	2140      	movs	r1, #64	; 0x40
 800b326:	f7ff fe2f 	bl	800af88 <_malloc_r>
 800b32a:	6028      	str	r0, [r5, #0]
 800b32c:	6128      	str	r0, [r5, #16]
 800b32e:	b920      	cbnz	r0, 800b33a <_svfiprintf_r+0x2e>
 800b330:	230c      	movs	r3, #12
 800b332:	603b      	str	r3, [r7, #0]
 800b334:	f04f 30ff 	mov.w	r0, #4294967295
 800b338:	e0d1      	b.n	800b4de <_svfiprintf_r+0x1d2>
 800b33a:	2340      	movs	r3, #64	; 0x40
 800b33c:	616b      	str	r3, [r5, #20]
 800b33e:	2300      	movs	r3, #0
 800b340:	9309      	str	r3, [sp, #36]	; 0x24
 800b342:	2320      	movs	r3, #32
 800b344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b348:	f8cd 800c 	str.w	r8, [sp, #12]
 800b34c:	2330      	movs	r3, #48	; 0x30
 800b34e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b4f8 <_svfiprintf_r+0x1ec>
 800b352:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b356:	f04f 0901 	mov.w	r9, #1
 800b35a:	4623      	mov	r3, r4
 800b35c:	469a      	mov	sl, r3
 800b35e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b362:	b10a      	cbz	r2, 800b368 <_svfiprintf_r+0x5c>
 800b364:	2a25      	cmp	r2, #37	; 0x25
 800b366:	d1f9      	bne.n	800b35c <_svfiprintf_r+0x50>
 800b368:	ebba 0b04 	subs.w	fp, sl, r4
 800b36c:	d00b      	beq.n	800b386 <_svfiprintf_r+0x7a>
 800b36e:	465b      	mov	r3, fp
 800b370:	4622      	mov	r2, r4
 800b372:	4629      	mov	r1, r5
 800b374:	4638      	mov	r0, r7
 800b376:	f7ff ff6d 	bl	800b254 <__ssputs_r>
 800b37a:	3001      	adds	r0, #1
 800b37c:	f000 80aa 	beq.w	800b4d4 <_svfiprintf_r+0x1c8>
 800b380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b382:	445a      	add	r2, fp
 800b384:	9209      	str	r2, [sp, #36]	; 0x24
 800b386:	f89a 3000 	ldrb.w	r3, [sl]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f000 80a2 	beq.w	800b4d4 <_svfiprintf_r+0x1c8>
 800b390:	2300      	movs	r3, #0
 800b392:	f04f 32ff 	mov.w	r2, #4294967295
 800b396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b39a:	f10a 0a01 	add.w	sl, sl, #1
 800b39e:	9304      	str	r3, [sp, #16]
 800b3a0:	9307      	str	r3, [sp, #28]
 800b3a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3a6:	931a      	str	r3, [sp, #104]	; 0x68
 800b3a8:	4654      	mov	r4, sl
 800b3aa:	2205      	movs	r2, #5
 800b3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b0:	4851      	ldr	r0, [pc, #324]	; (800b4f8 <_svfiprintf_r+0x1ec>)
 800b3b2:	f7f4 ff35 	bl	8000220 <memchr>
 800b3b6:	9a04      	ldr	r2, [sp, #16]
 800b3b8:	b9d8      	cbnz	r0, 800b3f2 <_svfiprintf_r+0xe6>
 800b3ba:	06d0      	lsls	r0, r2, #27
 800b3bc:	bf44      	itt	mi
 800b3be:	2320      	movmi	r3, #32
 800b3c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3c4:	0711      	lsls	r1, r2, #28
 800b3c6:	bf44      	itt	mi
 800b3c8:	232b      	movmi	r3, #43	; 0x2b
 800b3ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d4:	d015      	beq.n	800b402 <_svfiprintf_r+0xf6>
 800b3d6:	9a07      	ldr	r2, [sp, #28]
 800b3d8:	4654      	mov	r4, sl
 800b3da:	2000      	movs	r0, #0
 800b3dc:	f04f 0c0a 	mov.w	ip, #10
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3e6:	3b30      	subs	r3, #48	; 0x30
 800b3e8:	2b09      	cmp	r3, #9
 800b3ea:	d94e      	bls.n	800b48a <_svfiprintf_r+0x17e>
 800b3ec:	b1b0      	cbz	r0, 800b41c <_svfiprintf_r+0x110>
 800b3ee:	9207      	str	r2, [sp, #28]
 800b3f0:	e014      	b.n	800b41c <_svfiprintf_r+0x110>
 800b3f2:	eba0 0308 	sub.w	r3, r0, r8
 800b3f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	9304      	str	r3, [sp, #16]
 800b3fe:	46a2      	mov	sl, r4
 800b400:	e7d2      	b.n	800b3a8 <_svfiprintf_r+0x9c>
 800b402:	9b03      	ldr	r3, [sp, #12]
 800b404:	1d19      	adds	r1, r3, #4
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	9103      	str	r1, [sp, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bfbb      	ittet	lt
 800b40e:	425b      	neglt	r3, r3
 800b410:	f042 0202 	orrlt.w	r2, r2, #2
 800b414:	9307      	strge	r3, [sp, #28]
 800b416:	9307      	strlt	r3, [sp, #28]
 800b418:	bfb8      	it	lt
 800b41a:	9204      	strlt	r2, [sp, #16]
 800b41c:	7823      	ldrb	r3, [r4, #0]
 800b41e:	2b2e      	cmp	r3, #46	; 0x2e
 800b420:	d10c      	bne.n	800b43c <_svfiprintf_r+0x130>
 800b422:	7863      	ldrb	r3, [r4, #1]
 800b424:	2b2a      	cmp	r3, #42	; 0x2a
 800b426:	d135      	bne.n	800b494 <_svfiprintf_r+0x188>
 800b428:	9b03      	ldr	r3, [sp, #12]
 800b42a:	1d1a      	adds	r2, r3, #4
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	9203      	str	r2, [sp, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	bfb8      	it	lt
 800b434:	f04f 33ff 	movlt.w	r3, #4294967295
 800b438:	3402      	adds	r4, #2
 800b43a:	9305      	str	r3, [sp, #20]
 800b43c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b508 <_svfiprintf_r+0x1fc>
 800b440:	7821      	ldrb	r1, [r4, #0]
 800b442:	2203      	movs	r2, #3
 800b444:	4650      	mov	r0, sl
 800b446:	f7f4 feeb 	bl	8000220 <memchr>
 800b44a:	b140      	cbz	r0, 800b45e <_svfiprintf_r+0x152>
 800b44c:	2340      	movs	r3, #64	; 0x40
 800b44e:	eba0 000a 	sub.w	r0, r0, sl
 800b452:	fa03 f000 	lsl.w	r0, r3, r0
 800b456:	9b04      	ldr	r3, [sp, #16]
 800b458:	4303      	orrs	r3, r0
 800b45a:	3401      	adds	r4, #1
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b462:	4826      	ldr	r0, [pc, #152]	; (800b4fc <_svfiprintf_r+0x1f0>)
 800b464:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b468:	2206      	movs	r2, #6
 800b46a:	f7f4 fed9 	bl	8000220 <memchr>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d038      	beq.n	800b4e4 <_svfiprintf_r+0x1d8>
 800b472:	4b23      	ldr	r3, [pc, #140]	; (800b500 <_svfiprintf_r+0x1f4>)
 800b474:	bb1b      	cbnz	r3, 800b4be <_svfiprintf_r+0x1b2>
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	3307      	adds	r3, #7
 800b47a:	f023 0307 	bic.w	r3, r3, #7
 800b47e:	3308      	adds	r3, #8
 800b480:	9303      	str	r3, [sp, #12]
 800b482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b484:	4433      	add	r3, r6
 800b486:	9309      	str	r3, [sp, #36]	; 0x24
 800b488:	e767      	b.n	800b35a <_svfiprintf_r+0x4e>
 800b48a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b48e:	460c      	mov	r4, r1
 800b490:	2001      	movs	r0, #1
 800b492:	e7a5      	b.n	800b3e0 <_svfiprintf_r+0xd4>
 800b494:	2300      	movs	r3, #0
 800b496:	3401      	adds	r4, #1
 800b498:	9305      	str	r3, [sp, #20]
 800b49a:	4619      	mov	r1, r3
 800b49c:	f04f 0c0a 	mov.w	ip, #10
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a6:	3a30      	subs	r2, #48	; 0x30
 800b4a8:	2a09      	cmp	r2, #9
 800b4aa:	d903      	bls.n	800b4b4 <_svfiprintf_r+0x1a8>
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d0c5      	beq.n	800b43c <_svfiprintf_r+0x130>
 800b4b0:	9105      	str	r1, [sp, #20]
 800b4b2:	e7c3      	b.n	800b43c <_svfiprintf_r+0x130>
 800b4b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e7f0      	b.n	800b4a0 <_svfiprintf_r+0x194>
 800b4be:	ab03      	add	r3, sp, #12
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <_svfiprintf_r+0x1f8>)
 800b4c6:	a904      	add	r1, sp, #16
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f3af 8000 	nop.w
 800b4ce:	1c42      	adds	r2, r0, #1
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	d1d6      	bne.n	800b482 <_svfiprintf_r+0x176>
 800b4d4:	89ab      	ldrh	r3, [r5, #12]
 800b4d6:	065b      	lsls	r3, r3, #25
 800b4d8:	f53f af2c 	bmi.w	800b334 <_svfiprintf_r+0x28>
 800b4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4de:	b01d      	add	sp, #116	; 0x74
 800b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	ab03      	add	r3, sp, #12
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	462a      	mov	r2, r5
 800b4ea:	4b06      	ldr	r3, [pc, #24]	; (800b504 <_svfiprintf_r+0x1f8>)
 800b4ec:	a904      	add	r1, sp, #16
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f000 f87a 	bl	800b5e8 <_printf_i>
 800b4f4:	e7eb      	b.n	800b4ce <_svfiprintf_r+0x1c2>
 800b4f6:	bf00      	nop
 800b4f8:	0800d9ac 	.word	0x0800d9ac
 800b4fc:	0800d9b6 	.word	0x0800d9b6
 800b500:	00000000 	.word	0x00000000
 800b504:	0800b255 	.word	0x0800b255
 800b508:	0800d9b2 	.word	0x0800d9b2

0800b50c <_printf_common>:
 800b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b510:	4616      	mov	r6, r2
 800b512:	4699      	mov	r9, r3
 800b514:	688a      	ldr	r2, [r1, #8]
 800b516:	690b      	ldr	r3, [r1, #16]
 800b518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b51c:	4293      	cmp	r3, r2
 800b51e:	bfb8      	it	lt
 800b520:	4613      	movlt	r3, r2
 800b522:	6033      	str	r3, [r6, #0]
 800b524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b528:	4607      	mov	r7, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	b10a      	cbz	r2, 800b532 <_printf_common+0x26>
 800b52e:	3301      	adds	r3, #1
 800b530:	6033      	str	r3, [r6, #0]
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	0699      	lsls	r1, r3, #26
 800b536:	bf42      	ittt	mi
 800b538:	6833      	ldrmi	r3, [r6, #0]
 800b53a:	3302      	addmi	r3, #2
 800b53c:	6033      	strmi	r3, [r6, #0]
 800b53e:	6825      	ldr	r5, [r4, #0]
 800b540:	f015 0506 	ands.w	r5, r5, #6
 800b544:	d106      	bne.n	800b554 <_printf_common+0x48>
 800b546:	f104 0a19 	add.w	sl, r4, #25
 800b54a:	68e3      	ldr	r3, [r4, #12]
 800b54c:	6832      	ldr	r2, [r6, #0]
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	42ab      	cmp	r3, r5
 800b552:	dc26      	bgt.n	800b5a2 <_printf_common+0x96>
 800b554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b558:	1e13      	subs	r3, r2, #0
 800b55a:	6822      	ldr	r2, [r4, #0]
 800b55c:	bf18      	it	ne
 800b55e:	2301      	movne	r3, #1
 800b560:	0692      	lsls	r2, r2, #26
 800b562:	d42b      	bmi.n	800b5bc <_printf_common+0xb0>
 800b564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b568:	4649      	mov	r1, r9
 800b56a:	4638      	mov	r0, r7
 800b56c:	47c0      	blx	r8
 800b56e:	3001      	adds	r0, #1
 800b570:	d01e      	beq.n	800b5b0 <_printf_common+0xa4>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	68e5      	ldr	r5, [r4, #12]
 800b576:	6832      	ldr	r2, [r6, #0]
 800b578:	f003 0306 	and.w	r3, r3, #6
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	bf08      	it	eq
 800b580:	1aad      	subeq	r5, r5, r2
 800b582:	68a3      	ldr	r3, [r4, #8]
 800b584:	6922      	ldr	r2, [r4, #16]
 800b586:	bf0c      	ite	eq
 800b588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b58c:	2500      	movne	r5, #0
 800b58e:	4293      	cmp	r3, r2
 800b590:	bfc4      	itt	gt
 800b592:	1a9b      	subgt	r3, r3, r2
 800b594:	18ed      	addgt	r5, r5, r3
 800b596:	2600      	movs	r6, #0
 800b598:	341a      	adds	r4, #26
 800b59a:	42b5      	cmp	r5, r6
 800b59c:	d11a      	bne.n	800b5d4 <_printf_common+0xc8>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	e008      	b.n	800b5b4 <_printf_common+0xa8>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	4649      	mov	r1, r9
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	47c0      	blx	r8
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d103      	bne.n	800b5b8 <_printf_common+0xac>
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	e7c6      	b.n	800b54a <_printf_common+0x3e>
 800b5bc:	18e1      	adds	r1, r4, r3
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	2030      	movs	r0, #48	; 0x30
 800b5c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5c6:	4422      	add	r2, r4
 800b5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5d0:	3302      	adds	r3, #2
 800b5d2:	e7c7      	b.n	800b564 <_printf_common+0x58>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	4649      	mov	r1, r9
 800b5da:	4638      	mov	r0, r7
 800b5dc:	47c0      	blx	r8
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d0e6      	beq.n	800b5b0 <_printf_common+0xa4>
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	e7d9      	b.n	800b59a <_printf_common+0x8e>
	...

0800b5e8 <_printf_i>:
 800b5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ec:	7e0f      	ldrb	r7, [r1, #24]
 800b5ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5f0:	2f78      	cmp	r7, #120	; 0x78
 800b5f2:	4691      	mov	r9, r2
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	469a      	mov	sl, r3
 800b5fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5fe:	d807      	bhi.n	800b610 <_printf_i+0x28>
 800b600:	2f62      	cmp	r7, #98	; 0x62
 800b602:	d80a      	bhi.n	800b61a <_printf_i+0x32>
 800b604:	2f00      	cmp	r7, #0
 800b606:	f000 80d8 	beq.w	800b7ba <_printf_i+0x1d2>
 800b60a:	2f58      	cmp	r7, #88	; 0x58
 800b60c:	f000 80a3 	beq.w	800b756 <_printf_i+0x16e>
 800b610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b618:	e03a      	b.n	800b690 <_printf_i+0xa8>
 800b61a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b61e:	2b15      	cmp	r3, #21
 800b620:	d8f6      	bhi.n	800b610 <_printf_i+0x28>
 800b622:	a101      	add	r1, pc, #4	; (adr r1, 800b628 <_printf_i+0x40>)
 800b624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b628:	0800b681 	.word	0x0800b681
 800b62c:	0800b695 	.word	0x0800b695
 800b630:	0800b611 	.word	0x0800b611
 800b634:	0800b611 	.word	0x0800b611
 800b638:	0800b611 	.word	0x0800b611
 800b63c:	0800b611 	.word	0x0800b611
 800b640:	0800b695 	.word	0x0800b695
 800b644:	0800b611 	.word	0x0800b611
 800b648:	0800b611 	.word	0x0800b611
 800b64c:	0800b611 	.word	0x0800b611
 800b650:	0800b611 	.word	0x0800b611
 800b654:	0800b7a1 	.word	0x0800b7a1
 800b658:	0800b6c5 	.word	0x0800b6c5
 800b65c:	0800b783 	.word	0x0800b783
 800b660:	0800b611 	.word	0x0800b611
 800b664:	0800b611 	.word	0x0800b611
 800b668:	0800b7c3 	.word	0x0800b7c3
 800b66c:	0800b611 	.word	0x0800b611
 800b670:	0800b6c5 	.word	0x0800b6c5
 800b674:	0800b611 	.word	0x0800b611
 800b678:	0800b611 	.word	0x0800b611
 800b67c:	0800b78b 	.word	0x0800b78b
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	1d1a      	adds	r2, r3, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	602a      	str	r2, [r5, #0]
 800b688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b68c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b690:	2301      	movs	r3, #1
 800b692:	e0a3      	b.n	800b7dc <_printf_i+0x1f4>
 800b694:	6820      	ldr	r0, [r4, #0]
 800b696:	6829      	ldr	r1, [r5, #0]
 800b698:	0606      	lsls	r6, r0, #24
 800b69a:	f101 0304 	add.w	r3, r1, #4
 800b69e:	d50a      	bpl.n	800b6b6 <_printf_i+0xce>
 800b6a0:	680e      	ldr	r6, [r1, #0]
 800b6a2:	602b      	str	r3, [r5, #0]
 800b6a4:	2e00      	cmp	r6, #0
 800b6a6:	da03      	bge.n	800b6b0 <_printf_i+0xc8>
 800b6a8:	232d      	movs	r3, #45	; 0x2d
 800b6aa:	4276      	negs	r6, r6
 800b6ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6b0:	485e      	ldr	r0, [pc, #376]	; (800b82c <_printf_i+0x244>)
 800b6b2:	230a      	movs	r3, #10
 800b6b4:	e019      	b.n	800b6ea <_printf_i+0x102>
 800b6b6:	680e      	ldr	r6, [r1, #0]
 800b6b8:	602b      	str	r3, [r5, #0]
 800b6ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b6be:	bf18      	it	ne
 800b6c0:	b236      	sxthne	r6, r6
 800b6c2:	e7ef      	b.n	800b6a4 <_printf_i+0xbc>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	6820      	ldr	r0, [r4, #0]
 800b6c8:	1d19      	adds	r1, r3, #4
 800b6ca:	6029      	str	r1, [r5, #0]
 800b6cc:	0601      	lsls	r1, r0, #24
 800b6ce:	d501      	bpl.n	800b6d4 <_printf_i+0xec>
 800b6d0:	681e      	ldr	r6, [r3, #0]
 800b6d2:	e002      	b.n	800b6da <_printf_i+0xf2>
 800b6d4:	0646      	lsls	r6, r0, #25
 800b6d6:	d5fb      	bpl.n	800b6d0 <_printf_i+0xe8>
 800b6d8:	881e      	ldrh	r6, [r3, #0]
 800b6da:	4854      	ldr	r0, [pc, #336]	; (800b82c <_printf_i+0x244>)
 800b6dc:	2f6f      	cmp	r7, #111	; 0x6f
 800b6de:	bf0c      	ite	eq
 800b6e0:	2308      	moveq	r3, #8
 800b6e2:	230a      	movne	r3, #10
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6ea:	6865      	ldr	r5, [r4, #4]
 800b6ec:	60a5      	str	r5, [r4, #8]
 800b6ee:	2d00      	cmp	r5, #0
 800b6f0:	bfa2      	ittt	ge
 800b6f2:	6821      	ldrge	r1, [r4, #0]
 800b6f4:	f021 0104 	bicge.w	r1, r1, #4
 800b6f8:	6021      	strge	r1, [r4, #0]
 800b6fa:	b90e      	cbnz	r6, 800b700 <_printf_i+0x118>
 800b6fc:	2d00      	cmp	r5, #0
 800b6fe:	d04d      	beq.n	800b79c <_printf_i+0x1b4>
 800b700:	4615      	mov	r5, r2
 800b702:	fbb6 f1f3 	udiv	r1, r6, r3
 800b706:	fb03 6711 	mls	r7, r3, r1, r6
 800b70a:	5dc7      	ldrb	r7, [r0, r7]
 800b70c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b710:	4637      	mov	r7, r6
 800b712:	42bb      	cmp	r3, r7
 800b714:	460e      	mov	r6, r1
 800b716:	d9f4      	bls.n	800b702 <_printf_i+0x11a>
 800b718:	2b08      	cmp	r3, #8
 800b71a:	d10b      	bne.n	800b734 <_printf_i+0x14c>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	07de      	lsls	r6, r3, #31
 800b720:	d508      	bpl.n	800b734 <_printf_i+0x14c>
 800b722:	6923      	ldr	r3, [r4, #16]
 800b724:	6861      	ldr	r1, [r4, #4]
 800b726:	4299      	cmp	r1, r3
 800b728:	bfde      	ittt	le
 800b72a:	2330      	movle	r3, #48	; 0x30
 800b72c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b730:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b734:	1b52      	subs	r2, r2, r5
 800b736:	6122      	str	r2, [r4, #16]
 800b738:	f8cd a000 	str.w	sl, [sp]
 800b73c:	464b      	mov	r3, r9
 800b73e:	aa03      	add	r2, sp, #12
 800b740:	4621      	mov	r1, r4
 800b742:	4640      	mov	r0, r8
 800b744:	f7ff fee2 	bl	800b50c <_printf_common>
 800b748:	3001      	adds	r0, #1
 800b74a:	d14c      	bne.n	800b7e6 <_printf_i+0x1fe>
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295
 800b750:	b004      	add	sp, #16
 800b752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b756:	4835      	ldr	r0, [pc, #212]	; (800b82c <_printf_i+0x244>)
 800b758:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b75c:	6829      	ldr	r1, [r5, #0]
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	f851 6b04 	ldr.w	r6, [r1], #4
 800b764:	6029      	str	r1, [r5, #0]
 800b766:	061d      	lsls	r5, r3, #24
 800b768:	d514      	bpl.n	800b794 <_printf_i+0x1ac>
 800b76a:	07df      	lsls	r7, r3, #31
 800b76c:	bf44      	itt	mi
 800b76e:	f043 0320 	orrmi.w	r3, r3, #32
 800b772:	6023      	strmi	r3, [r4, #0]
 800b774:	b91e      	cbnz	r6, 800b77e <_printf_i+0x196>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	f023 0320 	bic.w	r3, r3, #32
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	2310      	movs	r3, #16
 800b780:	e7b0      	b.n	800b6e4 <_printf_i+0xfc>
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	f043 0320 	orr.w	r3, r3, #32
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	2378      	movs	r3, #120	; 0x78
 800b78c:	4828      	ldr	r0, [pc, #160]	; (800b830 <_printf_i+0x248>)
 800b78e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b792:	e7e3      	b.n	800b75c <_printf_i+0x174>
 800b794:	0659      	lsls	r1, r3, #25
 800b796:	bf48      	it	mi
 800b798:	b2b6      	uxthmi	r6, r6
 800b79a:	e7e6      	b.n	800b76a <_printf_i+0x182>
 800b79c:	4615      	mov	r5, r2
 800b79e:	e7bb      	b.n	800b718 <_printf_i+0x130>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	6826      	ldr	r6, [r4, #0]
 800b7a4:	6961      	ldr	r1, [r4, #20]
 800b7a6:	1d18      	adds	r0, r3, #4
 800b7a8:	6028      	str	r0, [r5, #0]
 800b7aa:	0635      	lsls	r5, r6, #24
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	d501      	bpl.n	800b7b4 <_printf_i+0x1cc>
 800b7b0:	6019      	str	r1, [r3, #0]
 800b7b2:	e002      	b.n	800b7ba <_printf_i+0x1d2>
 800b7b4:	0670      	lsls	r0, r6, #25
 800b7b6:	d5fb      	bpl.n	800b7b0 <_printf_i+0x1c8>
 800b7b8:	8019      	strh	r1, [r3, #0]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	6123      	str	r3, [r4, #16]
 800b7be:	4615      	mov	r5, r2
 800b7c0:	e7ba      	b.n	800b738 <_printf_i+0x150>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	1d1a      	adds	r2, r3, #4
 800b7c6:	602a      	str	r2, [r5, #0]
 800b7c8:	681d      	ldr	r5, [r3, #0]
 800b7ca:	6862      	ldr	r2, [r4, #4]
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f7f4 fd26 	bl	8000220 <memchr>
 800b7d4:	b108      	cbz	r0, 800b7da <_printf_i+0x1f2>
 800b7d6:	1b40      	subs	r0, r0, r5
 800b7d8:	6060      	str	r0, [r4, #4]
 800b7da:	6863      	ldr	r3, [r4, #4]
 800b7dc:	6123      	str	r3, [r4, #16]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7e4:	e7a8      	b.n	800b738 <_printf_i+0x150>
 800b7e6:	6923      	ldr	r3, [r4, #16]
 800b7e8:	462a      	mov	r2, r5
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	4640      	mov	r0, r8
 800b7ee:	47d0      	blx	sl
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d0ab      	beq.n	800b74c <_printf_i+0x164>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	079b      	lsls	r3, r3, #30
 800b7f8:	d413      	bmi.n	800b822 <_printf_i+0x23a>
 800b7fa:	68e0      	ldr	r0, [r4, #12]
 800b7fc:	9b03      	ldr	r3, [sp, #12]
 800b7fe:	4298      	cmp	r0, r3
 800b800:	bfb8      	it	lt
 800b802:	4618      	movlt	r0, r3
 800b804:	e7a4      	b.n	800b750 <_printf_i+0x168>
 800b806:	2301      	movs	r3, #1
 800b808:	4632      	mov	r2, r6
 800b80a:	4649      	mov	r1, r9
 800b80c:	4640      	mov	r0, r8
 800b80e:	47d0      	blx	sl
 800b810:	3001      	adds	r0, #1
 800b812:	d09b      	beq.n	800b74c <_printf_i+0x164>
 800b814:	3501      	adds	r5, #1
 800b816:	68e3      	ldr	r3, [r4, #12]
 800b818:	9903      	ldr	r1, [sp, #12]
 800b81a:	1a5b      	subs	r3, r3, r1
 800b81c:	42ab      	cmp	r3, r5
 800b81e:	dcf2      	bgt.n	800b806 <_printf_i+0x21e>
 800b820:	e7eb      	b.n	800b7fa <_printf_i+0x212>
 800b822:	2500      	movs	r5, #0
 800b824:	f104 0619 	add.w	r6, r4, #25
 800b828:	e7f5      	b.n	800b816 <_printf_i+0x22e>
 800b82a:	bf00      	nop
 800b82c:	0800d9bd 	.word	0x0800d9bd
 800b830:	0800d9ce 	.word	0x0800d9ce

0800b834 <memmove>:
 800b834:	4288      	cmp	r0, r1
 800b836:	b510      	push	{r4, lr}
 800b838:	eb01 0402 	add.w	r4, r1, r2
 800b83c:	d902      	bls.n	800b844 <memmove+0x10>
 800b83e:	4284      	cmp	r4, r0
 800b840:	4623      	mov	r3, r4
 800b842:	d807      	bhi.n	800b854 <memmove+0x20>
 800b844:	1e43      	subs	r3, r0, #1
 800b846:	42a1      	cmp	r1, r4
 800b848:	d008      	beq.n	800b85c <memmove+0x28>
 800b84a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b84e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b852:	e7f8      	b.n	800b846 <memmove+0x12>
 800b854:	4402      	add	r2, r0
 800b856:	4601      	mov	r1, r0
 800b858:	428a      	cmp	r2, r1
 800b85a:	d100      	bne.n	800b85e <memmove+0x2a>
 800b85c:	bd10      	pop	{r4, pc}
 800b85e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b866:	e7f7      	b.n	800b858 <memmove+0x24>

0800b868 <_realloc_r>:
 800b868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b86c:	4680      	mov	r8, r0
 800b86e:	4614      	mov	r4, r2
 800b870:	460e      	mov	r6, r1
 800b872:	b921      	cbnz	r1, 800b87e <_realloc_r+0x16>
 800b874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b878:	4611      	mov	r1, r2
 800b87a:	f7ff bb85 	b.w	800af88 <_malloc_r>
 800b87e:	b92a      	cbnz	r2, 800b88c <_realloc_r+0x24>
 800b880:	f7ff fc9c 	bl	800b1bc <_free_r>
 800b884:	4625      	mov	r5, r4
 800b886:	4628      	mov	r0, r5
 800b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88c:	f000 f81b 	bl	800b8c6 <_malloc_usable_size_r>
 800b890:	4284      	cmp	r4, r0
 800b892:	4607      	mov	r7, r0
 800b894:	d802      	bhi.n	800b89c <_realloc_r+0x34>
 800b896:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b89a:	d812      	bhi.n	800b8c2 <_realloc_r+0x5a>
 800b89c:	4621      	mov	r1, r4
 800b89e:	4640      	mov	r0, r8
 800b8a0:	f7ff fb72 	bl	800af88 <_malloc_r>
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d0ed      	beq.n	800b886 <_realloc_r+0x1e>
 800b8aa:	42bc      	cmp	r4, r7
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	bf28      	it	cs
 800b8b2:	463a      	movcs	r2, r7
 800b8b4:	f7ff fb32 	bl	800af1c <memcpy>
 800b8b8:	4631      	mov	r1, r6
 800b8ba:	4640      	mov	r0, r8
 800b8bc:	f7ff fc7e 	bl	800b1bc <_free_r>
 800b8c0:	e7e1      	b.n	800b886 <_realloc_r+0x1e>
 800b8c2:	4635      	mov	r5, r6
 800b8c4:	e7df      	b.n	800b886 <_realloc_r+0x1e>

0800b8c6 <_malloc_usable_size_r>:
 800b8c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ca:	1f18      	subs	r0, r3, #4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	bfbc      	itt	lt
 800b8d0:	580b      	ldrlt	r3, [r1, r0]
 800b8d2:	18c0      	addlt	r0, r0, r3
 800b8d4:	4770      	bx	lr
	...

0800b8d8 <cos>:
 800b8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8da:	ec53 2b10 	vmov	r2, r3, d0
 800b8de:	4826      	ldr	r0, [pc, #152]	; (800b978 <cos+0xa0>)
 800b8e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8e4:	4281      	cmp	r1, r0
 800b8e6:	dc06      	bgt.n	800b8f6 <cos+0x1e>
 800b8e8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b970 <cos+0x98>
 800b8ec:	b005      	add	sp, #20
 800b8ee:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8f2:	f001 b929 	b.w	800cb48 <__kernel_cos>
 800b8f6:	4821      	ldr	r0, [pc, #132]	; (800b97c <cos+0xa4>)
 800b8f8:	4281      	cmp	r1, r0
 800b8fa:	dd09      	ble.n	800b910 <cos+0x38>
 800b8fc:	ee10 0a10 	vmov	r0, s0
 800b900:	4619      	mov	r1, r3
 800b902:	f7f4 fce1 	bl	80002c8 <__aeabi_dsub>
 800b906:	ec41 0b10 	vmov	d0, r0, r1
 800b90a:	b005      	add	sp, #20
 800b90c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b910:	4668      	mov	r0, sp
 800b912:	f000 fe59 	bl	800c5c8 <__ieee754_rem_pio2>
 800b916:	f000 0003 	and.w	r0, r0, #3
 800b91a:	2801      	cmp	r0, #1
 800b91c:	d00b      	beq.n	800b936 <cos+0x5e>
 800b91e:	2802      	cmp	r0, #2
 800b920:	d016      	beq.n	800b950 <cos+0x78>
 800b922:	b9e0      	cbnz	r0, 800b95e <cos+0x86>
 800b924:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b928:	ed9d 0b00 	vldr	d0, [sp]
 800b92c:	f001 f90c 	bl	800cb48 <__kernel_cos>
 800b930:	ec51 0b10 	vmov	r0, r1, d0
 800b934:	e7e7      	b.n	800b906 <cos+0x2e>
 800b936:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b93a:	ed9d 0b00 	vldr	d0, [sp]
 800b93e:	f001 fd1b 	bl	800d378 <__kernel_sin>
 800b942:	ec53 2b10 	vmov	r2, r3, d0
 800b946:	ee10 0a10 	vmov	r0, s0
 800b94a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b94e:	e7da      	b.n	800b906 <cos+0x2e>
 800b950:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b954:	ed9d 0b00 	vldr	d0, [sp]
 800b958:	f001 f8f6 	bl	800cb48 <__kernel_cos>
 800b95c:	e7f1      	b.n	800b942 <cos+0x6a>
 800b95e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b962:	ed9d 0b00 	vldr	d0, [sp]
 800b966:	2001      	movs	r0, #1
 800b968:	f001 fd06 	bl	800d378 <__kernel_sin>
 800b96c:	e7e0      	b.n	800b930 <cos+0x58>
 800b96e:	bf00      	nop
	...
 800b978:	3fe921fb 	.word	0x3fe921fb
 800b97c:	7fefffff 	.word	0x7fefffff

0800b980 <sin>:
 800b980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b982:	ec53 2b10 	vmov	r2, r3, d0
 800b986:	4828      	ldr	r0, [pc, #160]	; (800ba28 <sin+0xa8>)
 800b988:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b98c:	4281      	cmp	r1, r0
 800b98e:	dc07      	bgt.n	800b9a0 <sin+0x20>
 800b990:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ba20 <sin+0xa0>
 800b994:	2000      	movs	r0, #0
 800b996:	b005      	add	sp, #20
 800b998:	f85d eb04 	ldr.w	lr, [sp], #4
 800b99c:	f001 bcec 	b.w	800d378 <__kernel_sin>
 800b9a0:	4822      	ldr	r0, [pc, #136]	; (800ba2c <sin+0xac>)
 800b9a2:	4281      	cmp	r1, r0
 800b9a4:	dd09      	ble.n	800b9ba <sin+0x3a>
 800b9a6:	ee10 0a10 	vmov	r0, s0
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	f7f4 fc8c 	bl	80002c8 <__aeabi_dsub>
 800b9b0:	ec41 0b10 	vmov	d0, r0, r1
 800b9b4:	b005      	add	sp, #20
 800b9b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9ba:	4668      	mov	r0, sp
 800b9bc:	f000 fe04 	bl	800c5c8 <__ieee754_rem_pio2>
 800b9c0:	f000 0003 	and.w	r0, r0, #3
 800b9c4:	2801      	cmp	r0, #1
 800b9c6:	d00c      	beq.n	800b9e2 <sin+0x62>
 800b9c8:	2802      	cmp	r0, #2
 800b9ca:	d011      	beq.n	800b9f0 <sin+0x70>
 800b9cc:	b9f0      	cbnz	r0, 800ba0c <sin+0x8c>
 800b9ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9d2:	ed9d 0b00 	vldr	d0, [sp]
 800b9d6:	2001      	movs	r0, #1
 800b9d8:	f001 fcce 	bl	800d378 <__kernel_sin>
 800b9dc:	ec51 0b10 	vmov	r0, r1, d0
 800b9e0:	e7e6      	b.n	800b9b0 <sin+0x30>
 800b9e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9e6:	ed9d 0b00 	vldr	d0, [sp]
 800b9ea:	f001 f8ad 	bl	800cb48 <__kernel_cos>
 800b9ee:	e7f5      	b.n	800b9dc <sin+0x5c>
 800b9f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9f4:	ed9d 0b00 	vldr	d0, [sp]
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f001 fcbd 	bl	800d378 <__kernel_sin>
 800b9fe:	ec53 2b10 	vmov	r2, r3, d0
 800ba02:	ee10 0a10 	vmov	r0, s0
 800ba06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ba0a:	e7d1      	b.n	800b9b0 <sin+0x30>
 800ba0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba10:	ed9d 0b00 	vldr	d0, [sp]
 800ba14:	f001 f898 	bl	800cb48 <__kernel_cos>
 800ba18:	e7f1      	b.n	800b9fe <sin+0x7e>
 800ba1a:	bf00      	nop
 800ba1c:	f3af 8000 	nop.w
	...
 800ba28:	3fe921fb 	.word	0x3fe921fb
 800ba2c:	7fefffff 	.word	0x7fefffff

0800ba30 <pow>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	ed2d 8b02 	vpush	{d8}
 800ba36:	eeb0 8a40 	vmov.f32	s16, s0
 800ba3a:	eef0 8a60 	vmov.f32	s17, s1
 800ba3e:	ec55 4b11 	vmov	r4, r5, d1
 800ba42:	f000 f891 	bl	800bb68 <__ieee754_pow>
 800ba46:	4622      	mov	r2, r4
 800ba48:	462b      	mov	r3, r5
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	ec57 6b10 	vmov	r6, r7, d0
 800ba52:	f7f5 f88b 	bl	8000b6c <__aeabi_dcmpun>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d13b      	bne.n	800bad2 <pow+0xa2>
 800ba5a:	ec51 0b18 	vmov	r0, r1, d8
 800ba5e:	2200      	movs	r2, #0
 800ba60:	2300      	movs	r3, #0
 800ba62:	f7f5 f851 	bl	8000b08 <__aeabi_dcmpeq>
 800ba66:	b1b8      	cbz	r0, 800ba98 <pow+0x68>
 800ba68:	2200      	movs	r2, #0
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	f7f5 f84a 	bl	8000b08 <__aeabi_dcmpeq>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d146      	bne.n	800bb06 <pow+0xd6>
 800ba78:	ec45 4b10 	vmov	d0, r4, r5
 800ba7c:	f001 fd73 	bl	800d566 <finite>
 800ba80:	b338      	cbz	r0, 800bad2 <pow+0xa2>
 800ba82:	2200      	movs	r2, #0
 800ba84:	2300      	movs	r3, #0
 800ba86:	4620      	mov	r0, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f7f5 f847 	bl	8000b1c <__aeabi_dcmplt>
 800ba8e:	b300      	cbz	r0, 800bad2 <pow+0xa2>
 800ba90:	f7ff fa18 	bl	800aec4 <__errno>
 800ba94:	2322      	movs	r3, #34	; 0x22
 800ba96:	e01b      	b.n	800bad0 <pow+0xa0>
 800ba98:	ec47 6b10 	vmov	d0, r6, r7
 800ba9c:	f001 fd63 	bl	800d566 <finite>
 800baa0:	b9e0      	cbnz	r0, 800badc <pow+0xac>
 800baa2:	eeb0 0a48 	vmov.f32	s0, s16
 800baa6:	eef0 0a68 	vmov.f32	s1, s17
 800baaa:	f001 fd5c 	bl	800d566 <finite>
 800baae:	b1a8      	cbz	r0, 800badc <pow+0xac>
 800bab0:	ec45 4b10 	vmov	d0, r4, r5
 800bab4:	f001 fd57 	bl	800d566 <finite>
 800bab8:	b180      	cbz	r0, 800badc <pow+0xac>
 800baba:	4632      	mov	r2, r6
 800babc:	463b      	mov	r3, r7
 800babe:	4630      	mov	r0, r6
 800bac0:	4639      	mov	r1, r7
 800bac2:	f7f5 f853 	bl	8000b6c <__aeabi_dcmpun>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d0e2      	beq.n	800ba90 <pow+0x60>
 800baca:	f7ff f9fb 	bl	800aec4 <__errno>
 800bace:	2321      	movs	r3, #33	; 0x21
 800bad0:	6003      	str	r3, [r0, #0]
 800bad2:	ecbd 8b02 	vpop	{d8}
 800bad6:	ec47 6b10 	vmov	d0, r6, r7
 800bada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800badc:	2200      	movs	r2, #0
 800bade:	2300      	movs	r3, #0
 800bae0:	4630      	mov	r0, r6
 800bae2:	4639      	mov	r1, r7
 800bae4:	f7f5 f810 	bl	8000b08 <__aeabi_dcmpeq>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d0f2      	beq.n	800bad2 <pow+0xa2>
 800baec:	eeb0 0a48 	vmov.f32	s0, s16
 800baf0:	eef0 0a68 	vmov.f32	s1, s17
 800baf4:	f001 fd37 	bl	800d566 <finite>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d0ea      	beq.n	800bad2 <pow+0xa2>
 800bafc:	ec45 4b10 	vmov	d0, r4, r5
 800bb00:	f001 fd31 	bl	800d566 <finite>
 800bb04:	e7c3      	b.n	800ba8e <pow+0x5e>
 800bb06:	4f01      	ldr	r7, [pc, #4]	; (800bb0c <pow+0xdc>)
 800bb08:	2600      	movs	r6, #0
 800bb0a:	e7e2      	b.n	800bad2 <pow+0xa2>
 800bb0c:	3ff00000 	.word	0x3ff00000

0800bb10 <sqrt>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	ed2d 8b02 	vpush	{d8}
 800bb16:	ec55 4b10 	vmov	r4, r5, d0
 800bb1a:	f000 ff61 	bl	800c9e0 <__ieee754_sqrt>
 800bb1e:	4622      	mov	r2, r4
 800bb20:	462b      	mov	r3, r5
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	eeb0 8a40 	vmov.f32	s16, s0
 800bb2a:	eef0 8a60 	vmov.f32	s17, s1
 800bb2e:	f7f5 f81d 	bl	8000b6c <__aeabi_dcmpun>
 800bb32:	b990      	cbnz	r0, 800bb5a <sqrt+0x4a>
 800bb34:	2200      	movs	r2, #0
 800bb36:	2300      	movs	r3, #0
 800bb38:	4620      	mov	r0, r4
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	f7f4 ffee 	bl	8000b1c <__aeabi_dcmplt>
 800bb40:	b158      	cbz	r0, 800bb5a <sqrt+0x4a>
 800bb42:	f7ff f9bf 	bl	800aec4 <__errno>
 800bb46:	2321      	movs	r3, #33	; 0x21
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4610      	mov	r0, r2
 800bb50:	4619      	mov	r1, r3
 800bb52:	f7f4 fe9b 	bl	800088c <__aeabi_ddiv>
 800bb56:	ec41 0b18 	vmov	d8, r0, r1
 800bb5a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb5e:	eef0 0a68 	vmov.f32	s1, s17
 800bb62:	ecbd 8b02 	vpop	{d8}
 800bb66:	bd38      	pop	{r3, r4, r5, pc}

0800bb68 <__ieee754_pow>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	ed2d 8b06 	vpush	{d8-d10}
 800bb70:	b089      	sub	sp, #36	; 0x24
 800bb72:	ed8d 1b00 	vstr	d1, [sp]
 800bb76:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bb7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bb7e:	ea58 0102 	orrs.w	r1, r8, r2
 800bb82:	ec57 6b10 	vmov	r6, r7, d0
 800bb86:	d115      	bne.n	800bbb4 <__ieee754_pow+0x4c>
 800bb88:	19b3      	adds	r3, r6, r6
 800bb8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bb8e:	4152      	adcs	r2, r2
 800bb90:	4299      	cmp	r1, r3
 800bb92:	4b89      	ldr	r3, [pc, #548]	; (800bdb8 <__ieee754_pow+0x250>)
 800bb94:	4193      	sbcs	r3, r2
 800bb96:	f080 84d2 	bcs.w	800c53e <__ieee754_pow+0x9d6>
 800bb9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb9e:	4630      	mov	r0, r6
 800bba0:	4639      	mov	r1, r7
 800bba2:	f7f4 fb93 	bl	80002cc <__adddf3>
 800bba6:	ec41 0b10 	vmov	d0, r0, r1
 800bbaa:	b009      	add	sp, #36	; 0x24
 800bbac:	ecbd 8b06 	vpop	{d8-d10}
 800bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb4:	4b81      	ldr	r3, [pc, #516]	; (800bdbc <__ieee754_pow+0x254>)
 800bbb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bbba:	429c      	cmp	r4, r3
 800bbbc:	ee10 aa10 	vmov	sl, s0
 800bbc0:	463d      	mov	r5, r7
 800bbc2:	dc06      	bgt.n	800bbd2 <__ieee754_pow+0x6a>
 800bbc4:	d101      	bne.n	800bbca <__ieee754_pow+0x62>
 800bbc6:	2e00      	cmp	r6, #0
 800bbc8:	d1e7      	bne.n	800bb9a <__ieee754_pow+0x32>
 800bbca:	4598      	cmp	r8, r3
 800bbcc:	dc01      	bgt.n	800bbd2 <__ieee754_pow+0x6a>
 800bbce:	d10f      	bne.n	800bbf0 <__ieee754_pow+0x88>
 800bbd0:	b172      	cbz	r2, 800bbf0 <__ieee754_pow+0x88>
 800bbd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bbd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bbda:	ea55 050a 	orrs.w	r5, r5, sl
 800bbde:	d1dc      	bne.n	800bb9a <__ieee754_pow+0x32>
 800bbe0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbe4:	18db      	adds	r3, r3, r3
 800bbe6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bbea:	4152      	adcs	r2, r2
 800bbec:	429d      	cmp	r5, r3
 800bbee:	e7d0      	b.n	800bb92 <__ieee754_pow+0x2a>
 800bbf0:	2d00      	cmp	r5, #0
 800bbf2:	da3b      	bge.n	800bc6c <__ieee754_pow+0x104>
 800bbf4:	4b72      	ldr	r3, [pc, #456]	; (800bdc0 <__ieee754_pow+0x258>)
 800bbf6:	4598      	cmp	r8, r3
 800bbf8:	dc51      	bgt.n	800bc9e <__ieee754_pow+0x136>
 800bbfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bbfe:	4598      	cmp	r8, r3
 800bc00:	f340 84ac 	ble.w	800c55c <__ieee754_pow+0x9f4>
 800bc04:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bc08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc0c:	2b14      	cmp	r3, #20
 800bc0e:	dd0f      	ble.n	800bc30 <__ieee754_pow+0xc8>
 800bc10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bc14:	fa22 f103 	lsr.w	r1, r2, r3
 800bc18:	fa01 f303 	lsl.w	r3, r1, r3
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	f040 849d 	bne.w	800c55c <__ieee754_pow+0x9f4>
 800bc22:	f001 0101 	and.w	r1, r1, #1
 800bc26:	f1c1 0302 	rsb	r3, r1, #2
 800bc2a:	9304      	str	r3, [sp, #16]
 800bc2c:	b182      	cbz	r2, 800bc50 <__ieee754_pow+0xe8>
 800bc2e:	e05f      	b.n	800bcf0 <__ieee754_pow+0x188>
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	d15b      	bne.n	800bcec <__ieee754_pow+0x184>
 800bc34:	f1c3 0314 	rsb	r3, r3, #20
 800bc38:	fa48 f103 	asr.w	r1, r8, r3
 800bc3c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc40:	4543      	cmp	r3, r8
 800bc42:	f040 8488 	bne.w	800c556 <__ieee754_pow+0x9ee>
 800bc46:	f001 0101 	and.w	r1, r1, #1
 800bc4a:	f1c1 0302 	rsb	r3, r1, #2
 800bc4e:	9304      	str	r3, [sp, #16]
 800bc50:	4b5c      	ldr	r3, [pc, #368]	; (800bdc4 <__ieee754_pow+0x25c>)
 800bc52:	4598      	cmp	r8, r3
 800bc54:	d132      	bne.n	800bcbc <__ieee754_pow+0x154>
 800bc56:	f1b9 0f00 	cmp.w	r9, #0
 800bc5a:	f280 8478 	bge.w	800c54e <__ieee754_pow+0x9e6>
 800bc5e:	4959      	ldr	r1, [pc, #356]	; (800bdc4 <__ieee754_pow+0x25c>)
 800bc60:	4632      	mov	r2, r6
 800bc62:	463b      	mov	r3, r7
 800bc64:	2000      	movs	r0, #0
 800bc66:	f7f4 fe11 	bl	800088c <__aeabi_ddiv>
 800bc6a:	e79c      	b.n	800bba6 <__ieee754_pow+0x3e>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	9304      	str	r3, [sp, #16]
 800bc70:	2a00      	cmp	r2, #0
 800bc72:	d13d      	bne.n	800bcf0 <__ieee754_pow+0x188>
 800bc74:	4b51      	ldr	r3, [pc, #324]	; (800bdbc <__ieee754_pow+0x254>)
 800bc76:	4598      	cmp	r8, r3
 800bc78:	d1ea      	bne.n	800bc50 <__ieee754_pow+0xe8>
 800bc7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bc7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bc82:	ea53 030a 	orrs.w	r3, r3, sl
 800bc86:	f000 845a 	beq.w	800c53e <__ieee754_pow+0x9d6>
 800bc8a:	4b4f      	ldr	r3, [pc, #316]	; (800bdc8 <__ieee754_pow+0x260>)
 800bc8c:	429c      	cmp	r4, r3
 800bc8e:	dd08      	ble.n	800bca2 <__ieee754_pow+0x13a>
 800bc90:	f1b9 0f00 	cmp.w	r9, #0
 800bc94:	f2c0 8457 	blt.w	800c546 <__ieee754_pow+0x9de>
 800bc98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc9c:	e783      	b.n	800bba6 <__ieee754_pow+0x3e>
 800bc9e:	2302      	movs	r3, #2
 800bca0:	e7e5      	b.n	800bc6e <__ieee754_pow+0x106>
 800bca2:	f1b9 0f00 	cmp.w	r9, #0
 800bca6:	f04f 0000 	mov.w	r0, #0
 800bcaa:	f04f 0100 	mov.w	r1, #0
 800bcae:	f6bf af7a 	bge.w	800bba6 <__ieee754_pow+0x3e>
 800bcb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bcb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bcba:	e774      	b.n	800bba6 <__ieee754_pow+0x3e>
 800bcbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bcc0:	d106      	bne.n	800bcd0 <__ieee754_pow+0x168>
 800bcc2:	4632      	mov	r2, r6
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	4639      	mov	r1, r7
 800bcca:	f7f4 fcb5 	bl	8000638 <__aeabi_dmul>
 800bcce:	e76a      	b.n	800bba6 <__ieee754_pow+0x3e>
 800bcd0:	4b3e      	ldr	r3, [pc, #248]	; (800bdcc <__ieee754_pow+0x264>)
 800bcd2:	4599      	cmp	r9, r3
 800bcd4:	d10c      	bne.n	800bcf0 <__ieee754_pow+0x188>
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	db0a      	blt.n	800bcf0 <__ieee754_pow+0x188>
 800bcda:	ec47 6b10 	vmov	d0, r6, r7
 800bcde:	b009      	add	sp, #36	; 0x24
 800bce0:	ecbd 8b06 	vpop	{d8-d10}
 800bce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce8:	f000 be7a 	b.w	800c9e0 <__ieee754_sqrt>
 800bcec:	2300      	movs	r3, #0
 800bcee:	9304      	str	r3, [sp, #16]
 800bcf0:	ec47 6b10 	vmov	d0, r6, r7
 800bcf4:	f001 fc2e 	bl	800d554 <fabs>
 800bcf8:	ec51 0b10 	vmov	r0, r1, d0
 800bcfc:	f1ba 0f00 	cmp.w	sl, #0
 800bd00:	d129      	bne.n	800bd56 <__ieee754_pow+0x1ee>
 800bd02:	b124      	cbz	r4, 800bd0e <__ieee754_pow+0x1a6>
 800bd04:	4b2f      	ldr	r3, [pc, #188]	; (800bdc4 <__ieee754_pow+0x25c>)
 800bd06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d123      	bne.n	800bd56 <__ieee754_pow+0x1ee>
 800bd0e:	f1b9 0f00 	cmp.w	r9, #0
 800bd12:	da05      	bge.n	800bd20 <__ieee754_pow+0x1b8>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	2000      	movs	r0, #0
 800bd1a:	492a      	ldr	r1, [pc, #168]	; (800bdc4 <__ieee754_pow+0x25c>)
 800bd1c:	f7f4 fdb6 	bl	800088c <__aeabi_ddiv>
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	f6bf af40 	bge.w	800bba6 <__ieee754_pow+0x3e>
 800bd26:	9b04      	ldr	r3, [sp, #16]
 800bd28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bd2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bd30:	4323      	orrs	r3, r4
 800bd32:	d108      	bne.n	800bd46 <__ieee754_pow+0x1de>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4610      	mov	r0, r2
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	f7f4 fac4 	bl	80002c8 <__aeabi_dsub>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	e78f      	b.n	800bc66 <__ieee754_pow+0xfe>
 800bd46:	9b04      	ldr	r3, [sp, #16]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	f47f af2c 	bne.w	800bba6 <__ieee754_pow+0x3e>
 800bd4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd52:	4619      	mov	r1, r3
 800bd54:	e727      	b.n	800bba6 <__ieee754_pow+0x3e>
 800bd56:	0feb      	lsrs	r3, r5, #31
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	9306      	str	r3, [sp, #24]
 800bd5c:	9a06      	ldr	r2, [sp, #24]
 800bd5e:	9b04      	ldr	r3, [sp, #16]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	d102      	bne.n	800bd6a <__ieee754_pow+0x202>
 800bd64:	4632      	mov	r2, r6
 800bd66:	463b      	mov	r3, r7
 800bd68:	e7e6      	b.n	800bd38 <__ieee754_pow+0x1d0>
 800bd6a:	4b19      	ldr	r3, [pc, #100]	; (800bdd0 <__ieee754_pow+0x268>)
 800bd6c:	4598      	cmp	r8, r3
 800bd6e:	f340 80fb 	ble.w	800bf68 <__ieee754_pow+0x400>
 800bd72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bd76:	4598      	cmp	r8, r3
 800bd78:	4b13      	ldr	r3, [pc, #76]	; (800bdc8 <__ieee754_pow+0x260>)
 800bd7a:	dd0c      	ble.n	800bd96 <__ieee754_pow+0x22e>
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	dc0f      	bgt.n	800bda0 <__ieee754_pow+0x238>
 800bd80:	f1b9 0f00 	cmp.w	r9, #0
 800bd84:	da0f      	bge.n	800bda6 <__ieee754_pow+0x23e>
 800bd86:	2000      	movs	r0, #0
 800bd88:	b009      	add	sp, #36	; 0x24
 800bd8a:	ecbd 8b06 	vpop	{d8-d10}
 800bd8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd92:	f001 bbd6 	b.w	800d542 <__math_oflow>
 800bd96:	429c      	cmp	r4, r3
 800bd98:	dbf2      	blt.n	800bd80 <__ieee754_pow+0x218>
 800bd9a:	4b0a      	ldr	r3, [pc, #40]	; (800bdc4 <__ieee754_pow+0x25c>)
 800bd9c:	429c      	cmp	r4, r3
 800bd9e:	dd19      	ble.n	800bdd4 <__ieee754_pow+0x26c>
 800bda0:	f1b9 0f00 	cmp.w	r9, #0
 800bda4:	dcef      	bgt.n	800bd86 <__ieee754_pow+0x21e>
 800bda6:	2000      	movs	r0, #0
 800bda8:	b009      	add	sp, #36	; 0x24
 800bdaa:	ecbd 8b06 	vpop	{d8-d10}
 800bdae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb2:	f001 bbbd 	b.w	800d530 <__math_uflow>
 800bdb6:	bf00      	nop
 800bdb8:	fff00000 	.word	0xfff00000
 800bdbc:	7ff00000 	.word	0x7ff00000
 800bdc0:	433fffff 	.word	0x433fffff
 800bdc4:	3ff00000 	.word	0x3ff00000
 800bdc8:	3fefffff 	.word	0x3fefffff
 800bdcc:	3fe00000 	.word	0x3fe00000
 800bdd0:	41e00000 	.word	0x41e00000
 800bdd4:	4b60      	ldr	r3, [pc, #384]	; (800bf58 <__ieee754_pow+0x3f0>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f7f4 fa76 	bl	80002c8 <__aeabi_dsub>
 800bddc:	a354      	add	r3, pc, #336	; (adr r3, 800bf30 <__ieee754_pow+0x3c8>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	4604      	mov	r4, r0
 800bde4:	460d      	mov	r5, r1
 800bde6:	f7f4 fc27 	bl	8000638 <__aeabi_dmul>
 800bdea:	a353      	add	r3, pc, #332	; (adr r3, 800bf38 <__ieee754_pow+0x3d0>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	460f      	mov	r7, r1
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	f7f4 fc1e 	bl	8000638 <__aeabi_dmul>
 800bdfc:	4b57      	ldr	r3, [pc, #348]	; (800bf5c <__ieee754_pow+0x3f4>)
 800bdfe:	4682      	mov	sl, r0
 800be00:	468b      	mov	fp, r1
 800be02:	2200      	movs	r2, #0
 800be04:	4620      	mov	r0, r4
 800be06:	4629      	mov	r1, r5
 800be08:	f7f4 fc16 	bl	8000638 <__aeabi_dmul>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	a14b      	add	r1, pc, #300	; (adr r1, 800bf40 <__ieee754_pow+0x3d8>)
 800be12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be16:	f7f4 fa57 	bl	80002c8 <__aeabi_dsub>
 800be1a:	4622      	mov	r2, r4
 800be1c:	462b      	mov	r3, r5
 800be1e:	f7f4 fc0b 	bl	8000638 <__aeabi_dmul>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	2000      	movs	r0, #0
 800be28:	494d      	ldr	r1, [pc, #308]	; (800bf60 <__ieee754_pow+0x3f8>)
 800be2a:	f7f4 fa4d 	bl	80002c8 <__aeabi_dsub>
 800be2e:	4622      	mov	r2, r4
 800be30:	4680      	mov	r8, r0
 800be32:	4689      	mov	r9, r1
 800be34:	462b      	mov	r3, r5
 800be36:	4620      	mov	r0, r4
 800be38:	4629      	mov	r1, r5
 800be3a:	f7f4 fbfd 	bl	8000638 <__aeabi_dmul>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 fbf7 	bl	8000638 <__aeabi_dmul>
 800be4a:	a33f      	add	r3, pc, #252	; (adr r3, 800bf48 <__ieee754_pow+0x3e0>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f7f4 fbf2 	bl	8000638 <__aeabi_dmul>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4650      	mov	r0, sl
 800be5a:	4659      	mov	r1, fp
 800be5c:	f7f4 fa34 	bl	80002c8 <__aeabi_dsub>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4680      	mov	r8, r0
 800be66:	4689      	mov	r9, r1
 800be68:	4630      	mov	r0, r6
 800be6a:	4639      	mov	r1, r7
 800be6c:	f7f4 fa2e 	bl	80002cc <__adddf3>
 800be70:	2000      	movs	r0, #0
 800be72:	4632      	mov	r2, r6
 800be74:	463b      	mov	r3, r7
 800be76:	4604      	mov	r4, r0
 800be78:	460d      	mov	r5, r1
 800be7a:	f7f4 fa25 	bl	80002c8 <__aeabi_dsub>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	4640      	mov	r0, r8
 800be84:	4649      	mov	r1, r9
 800be86:	f7f4 fa1f 	bl	80002c8 <__aeabi_dsub>
 800be8a:	9b04      	ldr	r3, [sp, #16]
 800be8c:	9a06      	ldr	r2, [sp, #24]
 800be8e:	3b01      	subs	r3, #1
 800be90:	4313      	orrs	r3, r2
 800be92:	4682      	mov	sl, r0
 800be94:	468b      	mov	fp, r1
 800be96:	f040 81e7 	bne.w	800c268 <__ieee754_pow+0x700>
 800be9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bf50 <__ieee754_pow+0x3e8>
 800be9e:	eeb0 8a47 	vmov.f32	s16, s14
 800bea2:	eef0 8a67 	vmov.f32	s17, s15
 800bea6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800beaa:	2600      	movs	r6, #0
 800beac:	4632      	mov	r2, r6
 800beae:	463b      	mov	r3, r7
 800beb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beb4:	f7f4 fa08 	bl	80002c8 <__aeabi_dsub>
 800beb8:	4622      	mov	r2, r4
 800beba:	462b      	mov	r3, r5
 800bebc:	f7f4 fbbc 	bl	8000638 <__aeabi_dmul>
 800bec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bec4:	4680      	mov	r8, r0
 800bec6:	4689      	mov	r9, r1
 800bec8:	4650      	mov	r0, sl
 800beca:	4659      	mov	r1, fp
 800becc:	f7f4 fbb4 	bl	8000638 <__aeabi_dmul>
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4640      	mov	r0, r8
 800bed6:	4649      	mov	r1, r9
 800bed8:	f7f4 f9f8 	bl	80002cc <__adddf3>
 800bedc:	4632      	mov	r2, r6
 800bede:	463b      	mov	r3, r7
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	4620      	mov	r0, r4
 800bee6:	4629      	mov	r1, r5
 800bee8:	f7f4 fba6 	bl	8000638 <__aeabi_dmul>
 800beec:	460b      	mov	r3, r1
 800beee:	4604      	mov	r4, r0
 800bef0:	460d      	mov	r5, r1
 800bef2:	4602      	mov	r2, r0
 800bef4:	4649      	mov	r1, r9
 800bef6:	4640      	mov	r0, r8
 800bef8:	f7f4 f9e8 	bl	80002cc <__adddf3>
 800befc:	4b19      	ldr	r3, [pc, #100]	; (800bf64 <__ieee754_pow+0x3fc>)
 800befe:	4299      	cmp	r1, r3
 800bf00:	ec45 4b19 	vmov	d9, r4, r5
 800bf04:	4606      	mov	r6, r0
 800bf06:	460f      	mov	r7, r1
 800bf08:	468b      	mov	fp, r1
 800bf0a:	f340 82f1 	ble.w	800c4f0 <__ieee754_pow+0x988>
 800bf0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bf12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bf16:	4303      	orrs	r3, r0
 800bf18:	f000 81e4 	beq.w	800c2e4 <__ieee754_pow+0x77c>
 800bf1c:	ec51 0b18 	vmov	r0, r1, d8
 800bf20:	2200      	movs	r2, #0
 800bf22:	2300      	movs	r3, #0
 800bf24:	f7f4 fdfa 	bl	8000b1c <__aeabi_dcmplt>
 800bf28:	3800      	subs	r0, #0
 800bf2a:	bf18      	it	ne
 800bf2c:	2001      	movne	r0, #1
 800bf2e:	e72b      	b.n	800bd88 <__ieee754_pow+0x220>
 800bf30:	60000000 	.word	0x60000000
 800bf34:	3ff71547 	.word	0x3ff71547
 800bf38:	f85ddf44 	.word	0xf85ddf44
 800bf3c:	3e54ae0b 	.word	0x3e54ae0b
 800bf40:	55555555 	.word	0x55555555
 800bf44:	3fd55555 	.word	0x3fd55555
 800bf48:	652b82fe 	.word	0x652b82fe
 800bf4c:	3ff71547 	.word	0x3ff71547
 800bf50:	00000000 	.word	0x00000000
 800bf54:	bff00000 	.word	0xbff00000
 800bf58:	3ff00000 	.word	0x3ff00000
 800bf5c:	3fd00000 	.word	0x3fd00000
 800bf60:	3fe00000 	.word	0x3fe00000
 800bf64:	408fffff 	.word	0x408fffff
 800bf68:	4bd5      	ldr	r3, [pc, #852]	; (800c2c0 <__ieee754_pow+0x758>)
 800bf6a:	402b      	ands	r3, r5
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	b92b      	cbnz	r3, 800bf7c <__ieee754_pow+0x414>
 800bf70:	4bd4      	ldr	r3, [pc, #848]	; (800c2c4 <__ieee754_pow+0x75c>)
 800bf72:	f7f4 fb61 	bl	8000638 <__aeabi_dmul>
 800bf76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	1523      	asrs	r3, r4, #20
 800bf7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bf82:	4413      	add	r3, r2
 800bf84:	9305      	str	r3, [sp, #20]
 800bf86:	4bd0      	ldr	r3, [pc, #832]	; (800c2c8 <__ieee754_pow+0x760>)
 800bf88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bf8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bf90:	429c      	cmp	r4, r3
 800bf92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bf96:	dd08      	ble.n	800bfaa <__ieee754_pow+0x442>
 800bf98:	4bcc      	ldr	r3, [pc, #816]	; (800c2cc <__ieee754_pow+0x764>)
 800bf9a:	429c      	cmp	r4, r3
 800bf9c:	f340 8162 	ble.w	800c264 <__ieee754_pow+0x6fc>
 800bfa0:	9b05      	ldr	r3, [sp, #20]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	9305      	str	r3, [sp, #20]
 800bfa6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bfaa:	2400      	movs	r4, #0
 800bfac:	00e3      	lsls	r3, r4, #3
 800bfae:	9307      	str	r3, [sp, #28]
 800bfb0:	4bc7      	ldr	r3, [pc, #796]	; (800c2d0 <__ieee754_pow+0x768>)
 800bfb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfb6:	ed93 7b00 	vldr	d7, [r3]
 800bfba:	4629      	mov	r1, r5
 800bfbc:	ec53 2b17 	vmov	r2, r3, d7
 800bfc0:	eeb0 9a47 	vmov.f32	s18, s14
 800bfc4:	eef0 9a67 	vmov.f32	s19, s15
 800bfc8:	4682      	mov	sl, r0
 800bfca:	f7f4 f97d 	bl	80002c8 <__aeabi_dsub>
 800bfce:	4652      	mov	r2, sl
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	460f      	mov	r7, r1
 800bfd4:	462b      	mov	r3, r5
 800bfd6:	ec51 0b19 	vmov	r0, r1, d9
 800bfda:	f7f4 f977 	bl	80002cc <__adddf3>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	49bb      	ldr	r1, [pc, #748]	; (800c2d4 <__ieee754_pow+0x76c>)
 800bfe6:	f7f4 fc51 	bl	800088c <__aeabi_ddiv>
 800bfea:	ec41 0b1a 	vmov	d10, r0, r1
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4630      	mov	r0, r6
 800bff4:	4639      	mov	r1, r7
 800bff6:	f7f4 fb1f 	bl	8000638 <__aeabi_dmul>
 800bffa:	2300      	movs	r3, #0
 800bffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c000:	9302      	str	r3, [sp, #8]
 800c002:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c006:	46ab      	mov	fp, r5
 800c008:	106d      	asrs	r5, r5, #1
 800c00a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c00e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c012:	ec41 0b18 	vmov	d8, r0, r1
 800c016:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c01a:	2200      	movs	r2, #0
 800c01c:	4640      	mov	r0, r8
 800c01e:	4649      	mov	r1, r9
 800c020:	4614      	mov	r4, r2
 800c022:	461d      	mov	r5, r3
 800c024:	f7f4 fb08 	bl	8000638 <__aeabi_dmul>
 800c028:	4602      	mov	r2, r0
 800c02a:	460b      	mov	r3, r1
 800c02c:	4630      	mov	r0, r6
 800c02e:	4639      	mov	r1, r7
 800c030:	f7f4 f94a 	bl	80002c8 <__aeabi_dsub>
 800c034:	ec53 2b19 	vmov	r2, r3, d9
 800c038:	4606      	mov	r6, r0
 800c03a:	460f      	mov	r7, r1
 800c03c:	4620      	mov	r0, r4
 800c03e:	4629      	mov	r1, r5
 800c040:	f7f4 f942 	bl	80002c8 <__aeabi_dsub>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4650      	mov	r0, sl
 800c04a:	4659      	mov	r1, fp
 800c04c:	f7f4 f93c 	bl	80002c8 <__aeabi_dsub>
 800c050:	4642      	mov	r2, r8
 800c052:	464b      	mov	r3, r9
 800c054:	f7f4 faf0 	bl	8000638 <__aeabi_dmul>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4630      	mov	r0, r6
 800c05e:	4639      	mov	r1, r7
 800c060:	f7f4 f932 	bl	80002c8 <__aeabi_dsub>
 800c064:	ec53 2b1a 	vmov	r2, r3, d10
 800c068:	f7f4 fae6 	bl	8000638 <__aeabi_dmul>
 800c06c:	ec53 2b18 	vmov	r2, r3, d8
 800c070:	ec41 0b19 	vmov	d9, r0, r1
 800c074:	ec51 0b18 	vmov	r0, r1, d8
 800c078:	f7f4 fade 	bl	8000638 <__aeabi_dmul>
 800c07c:	a37c      	add	r3, pc, #496	; (adr r3, 800c270 <__ieee754_pow+0x708>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	4604      	mov	r4, r0
 800c084:	460d      	mov	r5, r1
 800c086:	f7f4 fad7 	bl	8000638 <__aeabi_dmul>
 800c08a:	a37b      	add	r3, pc, #492	; (adr r3, 800c278 <__ieee754_pow+0x710>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f7f4 f91c 	bl	80002cc <__adddf3>
 800c094:	4622      	mov	r2, r4
 800c096:	462b      	mov	r3, r5
 800c098:	f7f4 face 	bl	8000638 <__aeabi_dmul>
 800c09c:	a378      	add	r3, pc, #480	; (adr r3, 800c280 <__ieee754_pow+0x718>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 f913 	bl	80002cc <__adddf3>
 800c0a6:	4622      	mov	r2, r4
 800c0a8:	462b      	mov	r3, r5
 800c0aa:	f7f4 fac5 	bl	8000638 <__aeabi_dmul>
 800c0ae:	a376      	add	r3, pc, #472	; (adr r3, 800c288 <__ieee754_pow+0x720>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	f7f4 f90a 	bl	80002cc <__adddf3>
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	462b      	mov	r3, r5
 800c0bc:	f7f4 fabc 	bl	8000638 <__aeabi_dmul>
 800c0c0:	a373      	add	r3, pc, #460	; (adr r3, 800c290 <__ieee754_pow+0x728>)
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f7f4 f901 	bl	80002cc <__adddf3>
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	462b      	mov	r3, r5
 800c0ce:	f7f4 fab3 	bl	8000638 <__aeabi_dmul>
 800c0d2:	a371      	add	r3, pc, #452	; (adr r3, 800c298 <__ieee754_pow+0x730>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	f7f4 f8f8 	bl	80002cc <__adddf3>
 800c0dc:	4622      	mov	r2, r4
 800c0de:	4606      	mov	r6, r0
 800c0e0:	460f      	mov	r7, r1
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7f4 faa6 	bl	8000638 <__aeabi_dmul>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	4639      	mov	r1, r7
 800c0f4:	f7f4 faa0 	bl	8000638 <__aeabi_dmul>
 800c0f8:	4642      	mov	r2, r8
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	460d      	mov	r5, r1
 800c0fe:	464b      	mov	r3, r9
 800c100:	ec51 0b18 	vmov	r0, r1, d8
 800c104:	f7f4 f8e2 	bl	80002cc <__adddf3>
 800c108:	ec53 2b19 	vmov	r2, r3, d9
 800c10c:	f7f4 fa94 	bl	8000638 <__aeabi_dmul>
 800c110:	4622      	mov	r2, r4
 800c112:	462b      	mov	r3, r5
 800c114:	f7f4 f8da 	bl	80002cc <__adddf3>
 800c118:	4642      	mov	r2, r8
 800c11a:	4682      	mov	sl, r0
 800c11c:	468b      	mov	fp, r1
 800c11e:	464b      	mov	r3, r9
 800c120:	4640      	mov	r0, r8
 800c122:	4649      	mov	r1, r9
 800c124:	f7f4 fa88 	bl	8000638 <__aeabi_dmul>
 800c128:	4b6b      	ldr	r3, [pc, #428]	; (800c2d8 <__ieee754_pow+0x770>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	4606      	mov	r6, r0
 800c12e:	460f      	mov	r7, r1
 800c130:	f7f4 f8cc 	bl	80002cc <__adddf3>
 800c134:	4652      	mov	r2, sl
 800c136:	465b      	mov	r3, fp
 800c138:	f7f4 f8c8 	bl	80002cc <__adddf3>
 800c13c:	2000      	movs	r0, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	460d      	mov	r5, r1
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	4640      	mov	r0, r8
 800c148:	4649      	mov	r1, r9
 800c14a:	f7f4 fa75 	bl	8000638 <__aeabi_dmul>
 800c14e:	4b62      	ldr	r3, [pc, #392]	; (800c2d8 <__ieee754_pow+0x770>)
 800c150:	4680      	mov	r8, r0
 800c152:	4689      	mov	r9, r1
 800c154:	2200      	movs	r2, #0
 800c156:	4620      	mov	r0, r4
 800c158:	4629      	mov	r1, r5
 800c15a:	f7f4 f8b5 	bl	80002c8 <__aeabi_dsub>
 800c15e:	4632      	mov	r2, r6
 800c160:	463b      	mov	r3, r7
 800c162:	f7f4 f8b1 	bl	80002c8 <__aeabi_dsub>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4650      	mov	r0, sl
 800c16c:	4659      	mov	r1, fp
 800c16e:	f7f4 f8ab 	bl	80002c8 <__aeabi_dsub>
 800c172:	ec53 2b18 	vmov	r2, r3, d8
 800c176:	f7f4 fa5f 	bl	8000638 <__aeabi_dmul>
 800c17a:	4622      	mov	r2, r4
 800c17c:	4606      	mov	r6, r0
 800c17e:	460f      	mov	r7, r1
 800c180:	462b      	mov	r3, r5
 800c182:	ec51 0b19 	vmov	r0, r1, d9
 800c186:	f7f4 fa57 	bl	8000638 <__aeabi_dmul>
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	4630      	mov	r0, r6
 800c190:	4639      	mov	r1, r7
 800c192:	f7f4 f89b 	bl	80002cc <__adddf3>
 800c196:	4606      	mov	r6, r0
 800c198:	460f      	mov	r7, r1
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4640      	mov	r0, r8
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	f7f4 f893 	bl	80002cc <__adddf3>
 800c1a6:	a33e      	add	r3, pc, #248	; (adr r3, 800c2a0 <__ieee754_pow+0x738>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	460d      	mov	r5, r1
 800c1b2:	f7f4 fa41 	bl	8000638 <__aeabi_dmul>
 800c1b6:	4642      	mov	r2, r8
 800c1b8:	ec41 0b18 	vmov	d8, r0, r1
 800c1bc:	464b      	mov	r3, r9
 800c1be:	4620      	mov	r0, r4
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	f7f4 f881 	bl	80002c8 <__aeabi_dsub>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	4639      	mov	r1, r7
 800c1ce:	f7f4 f87b 	bl	80002c8 <__aeabi_dsub>
 800c1d2:	a335      	add	r3, pc, #212	; (adr r3, 800c2a8 <__ieee754_pow+0x740>)
 800c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d8:	f7f4 fa2e 	bl	8000638 <__aeabi_dmul>
 800c1dc:	a334      	add	r3, pc, #208	; (adr r3, 800c2b0 <__ieee754_pow+0x748>)
 800c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	460f      	mov	r7, r1
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f7f4 fa25 	bl	8000638 <__aeabi_dmul>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	f7f4 f869 	bl	80002cc <__adddf3>
 800c1fa:	9a07      	ldr	r2, [sp, #28]
 800c1fc:	4b37      	ldr	r3, [pc, #220]	; (800c2dc <__ieee754_pow+0x774>)
 800c1fe:	4413      	add	r3, r2
 800c200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c204:	f7f4 f862 	bl	80002cc <__adddf3>
 800c208:	4682      	mov	sl, r0
 800c20a:	9805      	ldr	r0, [sp, #20]
 800c20c:	468b      	mov	fp, r1
 800c20e:	f7f4 f9a9 	bl	8000564 <__aeabi_i2d>
 800c212:	9a07      	ldr	r2, [sp, #28]
 800c214:	4b32      	ldr	r3, [pc, #200]	; (800c2e0 <__ieee754_pow+0x778>)
 800c216:	4413      	add	r3, r2
 800c218:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c21c:	4606      	mov	r6, r0
 800c21e:	460f      	mov	r7, r1
 800c220:	4652      	mov	r2, sl
 800c222:	465b      	mov	r3, fp
 800c224:	ec51 0b18 	vmov	r0, r1, d8
 800c228:	f7f4 f850 	bl	80002cc <__adddf3>
 800c22c:	4642      	mov	r2, r8
 800c22e:	464b      	mov	r3, r9
 800c230:	f7f4 f84c 	bl	80002cc <__adddf3>
 800c234:	4632      	mov	r2, r6
 800c236:	463b      	mov	r3, r7
 800c238:	f7f4 f848 	bl	80002cc <__adddf3>
 800c23c:	2000      	movs	r0, #0
 800c23e:	4632      	mov	r2, r6
 800c240:	463b      	mov	r3, r7
 800c242:	4604      	mov	r4, r0
 800c244:	460d      	mov	r5, r1
 800c246:	f7f4 f83f 	bl	80002c8 <__aeabi_dsub>
 800c24a:	4642      	mov	r2, r8
 800c24c:	464b      	mov	r3, r9
 800c24e:	f7f4 f83b 	bl	80002c8 <__aeabi_dsub>
 800c252:	ec53 2b18 	vmov	r2, r3, d8
 800c256:	f7f4 f837 	bl	80002c8 <__aeabi_dsub>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4650      	mov	r0, sl
 800c260:	4659      	mov	r1, fp
 800c262:	e610      	b.n	800be86 <__ieee754_pow+0x31e>
 800c264:	2401      	movs	r4, #1
 800c266:	e6a1      	b.n	800bfac <__ieee754_pow+0x444>
 800c268:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c2b8 <__ieee754_pow+0x750>
 800c26c:	e617      	b.n	800be9e <__ieee754_pow+0x336>
 800c26e:	bf00      	nop
 800c270:	4a454eef 	.word	0x4a454eef
 800c274:	3fca7e28 	.word	0x3fca7e28
 800c278:	93c9db65 	.word	0x93c9db65
 800c27c:	3fcd864a 	.word	0x3fcd864a
 800c280:	a91d4101 	.word	0xa91d4101
 800c284:	3fd17460 	.word	0x3fd17460
 800c288:	518f264d 	.word	0x518f264d
 800c28c:	3fd55555 	.word	0x3fd55555
 800c290:	db6fabff 	.word	0xdb6fabff
 800c294:	3fdb6db6 	.word	0x3fdb6db6
 800c298:	33333303 	.word	0x33333303
 800c29c:	3fe33333 	.word	0x3fe33333
 800c2a0:	e0000000 	.word	0xe0000000
 800c2a4:	3feec709 	.word	0x3feec709
 800c2a8:	dc3a03fd 	.word	0xdc3a03fd
 800c2ac:	3feec709 	.word	0x3feec709
 800c2b0:	145b01f5 	.word	0x145b01f5
 800c2b4:	be3e2fe0 	.word	0xbe3e2fe0
 800c2b8:	00000000 	.word	0x00000000
 800c2bc:	3ff00000 	.word	0x3ff00000
 800c2c0:	7ff00000 	.word	0x7ff00000
 800c2c4:	43400000 	.word	0x43400000
 800c2c8:	0003988e 	.word	0x0003988e
 800c2cc:	000bb679 	.word	0x000bb679
 800c2d0:	0800d9e0 	.word	0x0800d9e0
 800c2d4:	3ff00000 	.word	0x3ff00000
 800c2d8:	40080000 	.word	0x40080000
 800c2dc:	0800da00 	.word	0x0800da00
 800c2e0:	0800d9f0 	.word	0x0800d9f0
 800c2e4:	a3b5      	add	r3, pc, #724	; (adr r3, 800c5bc <__ieee754_pow+0xa54>)
 800c2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	4649      	mov	r1, r9
 800c2ee:	f7f3 ffed 	bl	80002cc <__adddf3>
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	ec41 0b1a 	vmov	d10, r0, r1
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	f7f3 ffe3 	bl	80002c8 <__aeabi_dsub>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	ec51 0b1a 	vmov	r0, r1, d10
 800c30a:	f7f4 fc25 	bl	8000b58 <__aeabi_dcmpgt>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f47f ae04 	bne.w	800bf1c <__ieee754_pow+0x3b4>
 800c314:	4aa4      	ldr	r2, [pc, #656]	; (800c5a8 <__ieee754_pow+0xa40>)
 800c316:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c31a:	4293      	cmp	r3, r2
 800c31c:	f340 8108 	ble.w	800c530 <__ieee754_pow+0x9c8>
 800c320:	151b      	asrs	r3, r3, #20
 800c322:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c326:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c32a:	fa4a f303 	asr.w	r3, sl, r3
 800c32e:	445b      	add	r3, fp
 800c330:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c334:	4e9d      	ldr	r6, [pc, #628]	; (800c5ac <__ieee754_pow+0xa44>)
 800c336:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c33a:	4116      	asrs	r6, r2
 800c33c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c340:	2000      	movs	r0, #0
 800c342:	ea23 0106 	bic.w	r1, r3, r6
 800c346:	f1c2 0214 	rsb	r2, r2, #20
 800c34a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c34e:	fa4a fa02 	asr.w	sl, sl, r2
 800c352:	f1bb 0f00 	cmp.w	fp, #0
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	4620      	mov	r0, r4
 800c35c:	4629      	mov	r1, r5
 800c35e:	bfb8      	it	lt
 800c360:	f1ca 0a00 	rsblt	sl, sl, #0
 800c364:	f7f3 ffb0 	bl	80002c8 <__aeabi_dsub>
 800c368:	ec41 0b19 	vmov	d9, r0, r1
 800c36c:	4642      	mov	r2, r8
 800c36e:	464b      	mov	r3, r9
 800c370:	ec51 0b19 	vmov	r0, r1, d9
 800c374:	f7f3 ffaa 	bl	80002cc <__adddf3>
 800c378:	a37b      	add	r3, pc, #492	; (adr r3, 800c568 <__ieee754_pow+0xa00>)
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	2000      	movs	r0, #0
 800c380:	4604      	mov	r4, r0
 800c382:	460d      	mov	r5, r1
 800c384:	f7f4 f958 	bl	8000638 <__aeabi_dmul>
 800c388:	ec53 2b19 	vmov	r2, r3, d9
 800c38c:	4606      	mov	r6, r0
 800c38e:	460f      	mov	r7, r1
 800c390:	4620      	mov	r0, r4
 800c392:	4629      	mov	r1, r5
 800c394:	f7f3 ff98 	bl	80002c8 <__aeabi_dsub>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4640      	mov	r0, r8
 800c39e:	4649      	mov	r1, r9
 800c3a0:	f7f3 ff92 	bl	80002c8 <__aeabi_dsub>
 800c3a4:	a372      	add	r3, pc, #456	; (adr r3, 800c570 <__ieee754_pow+0xa08>)
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f7f4 f945 	bl	8000638 <__aeabi_dmul>
 800c3ae:	a372      	add	r3, pc, #456	; (adr r3, 800c578 <__ieee754_pow+0xa10>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	4680      	mov	r8, r0
 800c3b6:	4689      	mov	r9, r1
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	f7f4 f93c 	bl	8000638 <__aeabi_dmul>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	f7f3 ff80 	bl	80002cc <__adddf3>
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	460d      	mov	r5, r1
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	4639      	mov	r1, r7
 800c3d8:	f7f3 ff78 	bl	80002cc <__adddf3>
 800c3dc:	4632      	mov	r2, r6
 800c3de:	463b      	mov	r3, r7
 800c3e0:	4680      	mov	r8, r0
 800c3e2:	4689      	mov	r9, r1
 800c3e4:	f7f3 ff70 	bl	80002c8 <__aeabi_dsub>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	f7f3 ff6a 	bl	80002c8 <__aeabi_dsub>
 800c3f4:	4642      	mov	r2, r8
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460f      	mov	r7, r1
 800c3fa:	464b      	mov	r3, r9
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4649      	mov	r1, r9
 800c400:	f7f4 f91a 	bl	8000638 <__aeabi_dmul>
 800c404:	a35e      	add	r3, pc, #376	; (adr r3, 800c580 <__ieee754_pow+0xa18>)
 800c406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40a:	4604      	mov	r4, r0
 800c40c:	460d      	mov	r5, r1
 800c40e:	f7f4 f913 	bl	8000638 <__aeabi_dmul>
 800c412:	a35d      	add	r3, pc, #372	; (adr r3, 800c588 <__ieee754_pow+0xa20>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	f7f3 ff56 	bl	80002c8 <__aeabi_dsub>
 800c41c:	4622      	mov	r2, r4
 800c41e:	462b      	mov	r3, r5
 800c420:	f7f4 f90a 	bl	8000638 <__aeabi_dmul>
 800c424:	a35a      	add	r3, pc, #360	; (adr r3, 800c590 <__ieee754_pow+0xa28>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	f7f3 ff4f 	bl	80002cc <__adddf3>
 800c42e:	4622      	mov	r2, r4
 800c430:	462b      	mov	r3, r5
 800c432:	f7f4 f901 	bl	8000638 <__aeabi_dmul>
 800c436:	a358      	add	r3, pc, #352	; (adr r3, 800c598 <__ieee754_pow+0xa30>)
 800c438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43c:	f7f3 ff44 	bl	80002c8 <__aeabi_dsub>
 800c440:	4622      	mov	r2, r4
 800c442:	462b      	mov	r3, r5
 800c444:	f7f4 f8f8 	bl	8000638 <__aeabi_dmul>
 800c448:	a355      	add	r3, pc, #340	; (adr r3, 800c5a0 <__ieee754_pow+0xa38>)
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	f7f3 ff3d 	bl	80002cc <__adddf3>
 800c452:	4622      	mov	r2, r4
 800c454:	462b      	mov	r3, r5
 800c456:	f7f4 f8ef 	bl	8000638 <__aeabi_dmul>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	4640      	mov	r0, r8
 800c460:	4649      	mov	r1, r9
 800c462:	f7f3 ff31 	bl	80002c8 <__aeabi_dsub>
 800c466:	4604      	mov	r4, r0
 800c468:	460d      	mov	r5, r1
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4640      	mov	r0, r8
 800c470:	4649      	mov	r1, r9
 800c472:	f7f4 f8e1 	bl	8000638 <__aeabi_dmul>
 800c476:	2200      	movs	r2, #0
 800c478:	ec41 0b19 	vmov	d9, r0, r1
 800c47c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c480:	4620      	mov	r0, r4
 800c482:	4629      	mov	r1, r5
 800c484:	f7f3 ff20 	bl	80002c8 <__aeabi_dsub>
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	ec51 0b19 	vmov	r0, r1, d9
 800c490:	f7f4 f9fc 	bl	800088c <__aeabi_ddiv>
 800c494:	4632      	mov	r2, r6
 800c496:	4604      	mov	r4, r0
 800c498:	460d      	mov	r5, r1
 800c49a:	463b      	mov	r3, r7
 800c49c:	4640      	mov	r0, r8
 800c49e:	4649      	mov	r1, r9
 800c4a0:	f7f4 f8ca 	bl	8000638 <__aeabi_dmul>
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	463b      	mov	r3, r7
 800c4a8:	f7f3 ff10 	bl	80002cc <__adddf3>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	f7f3 ff08 	bl	80002c8 <__aeabi_dsub>
 800c4b8:	4642      	mov	r2, r8
 800c4ba:	464b      	mov	r3, r9
 800c4bc:	f7f3 ff04 	bl	80002c8 <__aeabi_dsub>
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	493a      	ldr	r1, [pc, #232]	; (800c5b0 <__ieee754_pow+0xa48>)
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	f7f3 fefe 	bl	80002c8 <__aeabi_dsub>
 800c4cc:	ec41 0b10 	vmov	d0, r0, r1
 800c4d0:	ee10 3a90 	vmov	r3, s1
 800c4d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c4d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4dc:	da2b      	bge.n	800c536 <__ieee754_pow+0x9ce>
 800c4de:	4650      	mov	r0, sl
 800c4e0:	f001 f8ce 	bl	800d680 <scalbn>
 800c4e4:	ec51 0b10 	vmov	r0, r1, d0
 800c4e8:	ec53 2b18 	vmov	r2, r3, d8
 800c4ec:	f7ff bbed 	b.w	800bcca <__ieee754_pow+0x162>
 800c4f0:	4b30      	ldr	r3, [pc, #192]	; (800c5b4 <__ieee754_pow+0xa4c>)
 800c4f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c4f6:	429e      	cmp	r6, r3
 800c4f8:	f77f af0c 	ble.w	800c314 <__ieee754_pow+0x7ac>
 800c4fc:	4b2e      	ldr	r3, [pc, #184]	; (800c5b8 <__ieee754_pow+0xa50>)
 800c4fe:	440b      	add	r3, r1
 800c500:	4303      	orrs	r3, r0
 800c502:	d009      	beq.n	800c518 <__ieee754_pow+0x9b0>
 800c504:	ec51 0b18 	vmov	r0, r1, d8
 800c508:	2200      	movs	r2, #0
 800c50a:	2300      	movs	r3, #0
 800c50c:	f7f4 fb06 	bl	8000b1c <__aeabi_dcmplt>
 800c510:	3800      	subs	r0, #0
 800c512:	bf18      	it	ne
 800c514:	2001      	movne	r0, #1
 800c516:	e447      	b.n	800bda8 <__ieee754_pow+0x240>
 800c518:	4622      	mov	r2, r4
 800c51a:	462b      	mov	r3, r5
 800c51c:	f7f3 fed4 	bl	80002c8 <__aeabi_dsub>
 800c520:	4642      	mov	r2, r8
 800c522:	464b      	mov	r3, r9
 800c524:	f7f4 fb0e 	bl	8000b44 <__aeabi_dcmpge>
 800c528:	2800      	cmp	r0, #0
 800c52a:	f43f aef3 	beq.w	800c314 <__ieee754_pow+0x7ac>
 800c52e:	e7e9      	b.n	800c504 <__ieee754_pow+0x99c>
 800c530:	f04f 0a00 	mov.w	sl, #0
 800c534:	e71a      	b.n	800c36c <__ieee754_pow+0x804>
 800c536:	ec51 0b10 	vmov	r0, r1, d0
 800c53a:	4619      	mov	r1, r3
 800c53c:	e7d4      	b.n	800c4e8 <__ieee754_pow+0x980>
 800c53e:	491c      	ldr	r1, [pc, #112]	; (800c5b0 <__ieee754_pow+0xa48>)
 800c540:	2000      	movs	r0, #0
 800c542:	f7ff bb30 	b.w	800bba6 <__ieee754_pow+0x3e>
 800c546:	2000      	movs	r0, #0
 800c548:	2100      	movs	r1, #0
 800c54a:	f7ff bb2c 	b.w	800bba6 <__ieee754_pow+0x3e>
 800c54e:	4630      	mov	r0, r6
 800c550:	4639      	mov	r1, r7
 800c552:	f7ff bb28 	b.w	800bba6 <__ieee754_pow+0x3e>
 800c556:	9204      	str	r2, [sp, #16]
 800c558:	f7ff bb7a 	b.w	800bc50 <__ieee754_pow+0xe8>
 800c55c:	2300      	movs	r3, #0
 800c55e:	f7ff bb64 	b.w	800bc2a <__ieee754_pow+0xc2>
 800c562:	bf00      	nop
 800c564:	f3af 8000 	nop.w
 800c568:	00000000 	.word	0x00000000
 800c56c:	3fe62e43 	.word	0x3fe62e43
 800c570:	fefa39ef 	.word	0xfefa39ef
 800c574:	3fe62e42 	.word	0x3fe62e42
 800c578:	0ca86c39 	.word	0x0ca86c39
 800c57c:	be205c61 	.word	0xbe205c61
 800c580:	72bea4d0 	.word	0x72bea4d0
 800c584:	3e663769 	.word	0x3e663769
 800c588:	c5d26bf1 	.word	0xc5d26bf1
 800c58c:	3ebbbd41 	.word	0x3ebbbd41
 800c590:	af25de2c 	.word	0xaf25de2c
 800c594:	3f11566a 	.word	0x3f11566a
 800c598:	16bebd93 	.word	0x16bebd93
 800c59c:	3f66c16c 	.word	0x3f66c16c
 800c5a0:	5555553e 	.word	0x5555553e
 800c5a4:	3fc55555 	.word	0x3fc55555
 800c5a8:	3fe00000 	.word	0x3fe00000
 800c5ac:	000fffff 	.word	0x000fffff
 800c5b0:	3ff00000 	.word	0x3ff00000
 800c5b4:	4090cbff 	.word	0x4090cbff
 800c5b8:	3f6f3400 	.word	0x3f6f3400
 800c5bc:	652b82fe 	.word	0x652b82fe
 800c5c0:	3c971547 	.word	0x3c971547
 800c5c4:	00000000 	.word	0x00000000

0800c5c8 <__ieee754_rem_pio2>:
 800c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	ed2d 8b02 	vpush	{d8}
 800c5d0:	ec55 4b10 	vmov	r4, r5, d0
 800c5d4:	4bca      	ldr	r3, [pc, #808]	; (800c900 <__ieee754_rem_pio2+0x338>)
 800c5d6:	b08b      	sub	sp, #44	; 0x2c
 800c5d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c5dc:	4598      	cmp	r8, r3
 800c5de:	4682      	mov	sl, r0
 800c5e0:	9502      	str	r5, [sp, #8]
 800c5e2:	dc08      	bgt.n	800c5f6 <__ieee754_rem_pio2+0x2e>
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	ed80 0b00 	vstr	d0, [r0]
 800c5ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c5f0:	f04f 0b00 	mov.w	fp, #0
 800c5f4:	e028      	b.n	800c648 <__ieee754_rem_pio2+0x80>
 800c5f6:	4bc3      	ldr	r3, [pc, #780]	; (800c904 <__ieee754_rem_pio2+0x33c>)
 800c5f8:	4598      	cmp	r8, r3
 800c5fa:	dc78      	bgt.n	800c6ee <__ieee754_rem_pio2+0x126>
 800c5fc:	9b02      	ldr	r3, [sp, #8]
 800c5fe:	4ec2      	ldr	r6, [pc, #776]	; (800c908 <__ieee754_rem_pio2+0x340>)
 800c600:	2b00      	cmp	r3, #0
 800c602:	ee10 0a10 	vmov	r0, s0
 800c606:	a3b0      	add	r3, pc, #704	; (adr r3, 800c8c8 <__ieee754_rem_pio2+0x300>)
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	4629      	mov	r1, r5
 800c60e:	dd39      	ble.n	800c684 <__ieee754_rem_pio2+0xbc>
 800c610:	f7f3 fe5a 	bl	80002c8 <__aeabi_dsub>
 800c614:	45b0      	cmp	r8, r6
 800c616:	4604      	mov	r4, r0
 800c618:	460d      	mov	r5, r1
 800c61a:	d01b      	beq.n	800c654 <__ieee754_rem_pio2+0x8c>
 800c61c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c8d0 <__ieee754_rem_pio2+0x308>)
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	f7f3 fe51 	bl	80002c8 <__aeabi_dsub>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	e9ca 2300 	strd	r2, r3, [sl]
 800c62e:	4620      	mov	r0, r4
 800c630:	4629      	mov	r1, r5
 800c632:	f7f3 fe49 	bl	80002c8 <__aeabi_dsub>
 800c636:	a3a6      	add	r3, pc, #664	; (adr r3, 800c8d0 <__ieee754_rem_pio2+0x308>)
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	f7f3 fe44 	bl	80002c8 <__aeabi_dsub>
 800c640:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c644:	f04f 0b01 	mov.w	fp, #1
 800c648:	4658      	mov	r0, fp
 800c64a:	b00b      	add	sp, #44	; 0x2c
 800c64c:	ecbd 8b02 	vpop	{d8}
 800c650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c654:	a3a0      	add	r3, pc, #640	; (adr r3, 800c8d8 <__ieee754_rem_pio2+0x310>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 fe35 	bl	80002c8 <__aeabi_dsub>
 800c65e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c8e0 <__ieee754_rem_pio2+0x318>)
 800c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c664:	4604      	mov	r4, r0
 800c666:	460d      	mov	r5, r1
 800c668:	f7f3 fe2e 	bl	80002c8 <__aeabi_dsub>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	e9ca 2300 	strd	r2, r3, [sl]
 800c674:	4620      	mov	r0, r4
 800c676:	4629      	mov	r1, r5
 800c678:	f7f3 fe26 	bl	80002c8 <__aeabi_dsub>
 800c67c:	a398      	add	r3, pc, #608	; (adr r3, 800c8e0 <__ieee754_rem_pio2+0x318>)
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	e7db      	b.n	800c63c <__ieee754_rem_pio2+0x74>
 800c684:	f7f3 fe22 	bl	80002cc <__adddf3>
 800c688:	45b0      	cmp	r8, r6
 800c68a:	4604      	mov	r4, r0
 800c68c:	460d      	mov	r5, r1
 800c68e:	d016      	beq.n	800c6be <__ieee754_rem_pio2+0xf6>
 800c690:	a38f      	add	r3, pc, #572	; (adr r3, 800c8d0 <__ieee754_rem_pio2+0x308>)
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	f7f3 fe19 	bl	80002cc <__adddf3>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	e9ca 2300 	strd	r2, r3, [sl]
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f3 fe0f 	bl	80002c8 <__aeabi_dsub>
 800c6aa:	a389      	add	r3, pc, #548	; (adr r3, 800c8d0 <__ieee754_rem_pio2+0x308>)
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	f7f3 fe0c 	bl	80002cc <__adddf3>
 800c6b4:	f04f 3bff 	mov.w	fp, #4294967295
 800c6b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6bc:	e7c4      	b.n	800c648 <__ieee754_rem_pio2+0x80>
 800c6be:	a386      	add	r3, pc, #536	; (adr r3, 800c8d8 <__ieee754_rem_pio2+0x310>)
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	f7f3 fe02 	bl	80002cc <__adddf3>
 800c6c8:	a385      	add	r3, pc, #532	; (adr r3, 800c8e0 <__ieee754_rem_pio2+0x318>)
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	f7f3 fdfb 	bl	80002cc <__adddf3>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	e9ca 2300 	strd	r2, r3, [sl]
 800c6de:	4620      	mov	r0, r4
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	f7f3 fdf1 	bl	80002c8 <__aeabi_dsub>
 800c6e6:	a37e      	add	r3, pc, #504	; (adr r3, 800c8e0 <__ieee754_rem_pio2+0x318>)
 800c6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ec:	e7e0      	b.n	800c6b0 <__ieee754_rem_pio2+0xe8>
 800c6ee:	4b87      	ldr	r3, [pc, #540]	; (800c90c <__ieee754_rem_pio2+0x344>)
 800c6f0:	4598      	cmp	r8, r3
 800c6f2:	f300 80d9 	bgt.w	800c8a8 <__ieee754_rem_pio2+0x2e0>
 800c6f6:	f000 ff2d 	bl	800d554 <fabs>
 800c6fa:	ec55 4b10 	vmov	r4, r5, d0
 800c6fe:	ee10 0a10 	vmov	r0, s0
 800c702:	a379      	add	r3, pc, #484	; (adr r3, 800c8e8 <__ieee754_rem_pio2+0x320>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	4629      	mov	r1, r5
 800c70a:	f7f3 ff95 	bl	8000638 <__aeabi_dmul>
 800c70e:	4b80      	ldr	r3, [pc, #512]	; (800c910 <__ieee754_rem_pio2+0x348>)
 800c710:	2200      	movs	r2, #0
 800c712:	f7f3 fddb 	bl	80002cc <__adddf3>
 800c716:	f7f4 fa3f 	bl	8000b98 <__aeabi_d2iz>
 800c71a:	4683      	mov	fp, r0
 800c71c:	f7f3 ff22 	bl	8000564 <__aeabi_i2d>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	ec43 2b18 	vmov	d8, r2, r3
 800c728:	a367      	add	r3, pc, #412	; (adr r3, 800c8c8 <__ieee754_rem_pio2+0x300>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f7f3 ff83 	bl	8000638 <__aeabi_dmul>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	4620      	mov	r0, r4
 800c738:	4629      	mov	r1, r5
 800c73a:	f7f3 fdc5 	bl	80002c8 <__aeabi_dsub>
 800c73e:	a364      	add	r3, pc, #400	; (adr r3, 800c8d0 <__ieee754_rem_pio2+0x308>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	4606      	mov	r6, r0
 800c746:	460f      	mov	r7, r1
 800c748:	ec51 0b18 	vmov	r0, r1, d8
 800c74c:	f7f3 ff74 	bl	8000638 <__aeabi_dmul>
 800c750:	f1bb 0f1f 	cmp.w	fp, #31
 800c754:	4604      	mov	r4, r0
 800c756:	460d      	mov	r5, r1
 800c758:	dc0d      	bgt.n	800c776 <__ieee754_rem_pio2+0x1ae>
 800c75a:	4b6e      	ldr	r3, [pc, #440]	; (800c914 <__ieee754_rem_pio2+0x34c>)
 800c75c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c764:	4543      	cmp	r3, r8
 800c766:	d006      	beq.n	800c776 <__ieee754_rem_pio2+0x1ae>
 800c768:	4622      	mov	r2, r4
 800c76a:	462b      	mov	r3, r5
 800c76c:	4630      	mov	r0, r6
 800c76e:	4639      	mov	r1, r7
 800c770:	f7f3 fdaa 	bl	80002c8 <__aeabi_dsub>
 800c774:	e00f      	b.n	800c796 <__ieee754_rem_pio2+0x1ce>
 800c776:	462b      	mov	r3, r5
 800c778:	4622      	mov	r2, r4
 800c77a:	4630      	mov	r0, r6
 800c77c:	4639      	mov	r1, r7
 800c77e:	f7f3 fda3 	bl	80002c8 <__aeabi_dsub>
 800c782:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c786:	9303      	str	r3, [sp, #12]
 800c788:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c78c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c790:	f1b8 0f10 	cmp.w	r8, #16
 800c794:	dc02      	bgt.n	800c79c <__ieee754_rem_pio2+0x1d4>
 800c796:	e9ca 0100 	strd	r0, r1, [sl]
 800c79a:	e039      	b.n	800c810 <__ieee754_rem_pio2+0x248>
 800c79c:	a34e      	add	r3, pc, #312	; (adr r3, 800c8d8 <__ieee754_rem_pio2+0x310>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	ec51 0b18 	vmov	r0, r1, d8
 800c7a6:	f7f3 ff47 	bl	8000638 <__aeabi_dmul>
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	4639      	mov	r1, r7
 800c7b6:	f7f3 fd87 	bl	80002c8 <__aeabi_dsub>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	4680      	mov	r8, r0
 800c7c0:	4689      	mov	r9, r1
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7f3 fd7f 	bl	80002c8 <__aeabi_dsub>
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	462b      	mov	r3, r5
 800c7ce:	f7f3 fd7b 	bl	80002c8 <__aeabi_dsub>
 800c7d2:	a343      	add	r3, pc, #268	; (adr r3, 800c8e0 <__ieee754_rem_pio2+0x318>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460d      	mov	r5, r1
 800c7dc:	ec51 0b18 	vmov	r0, r1, d8
 800c7e0:	f7f3 ff2a 	bl	8000638 <__aeabi_dmul>
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	462b      	mov	r3, r5
 800c7e8:	f7f3 fd6e 	bl	80002c8 <__aeabi_dsub>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f7f3 fd66 	bl	80002c8 <__aeabi_dsub>
 800c7fc:	9a03      	ldr	r2, [sp, #12]
 800c7fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c802:	1ad3      	subs	r3, r2, r3
 800c804:	2b31      	cmp	r3, #49	; 0x31
 800c806:	dc24      	bgt.n	800c852 <__ieee754_rem_pio2+0x28a>
 800c808:	e9ca 0100 	strd	r0, r1, [sl]
 800c80c:	4646      	mov	r6, r8
 800c80e:	464f      	mov	r7, r9
 800c810:	e9da 8900 	ldrd	r8, r9, [sl]
 800c814:	4630      	mov	r0, r6
 800c816:	4642      	mov	r2, r8
 800c818:	464b      	mov	r3, r9
 800c81a:	4639      	mov	r1, r7
 800c81c:	f7f3 fd54 	bl	80002c8 <__aeabi_dsub>
 800c820:	462b      	mov	r3, r5
 800c822:	4622      	mov	r2, r4
 800c824:	f7f3 fd50 	bl	80002c8 <__aeabi_dsub>
 800c828:	9b02      	ldr	r3, [sp, #8]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c830:	f6bf af0a 	bge.w	800c648 <__ieee754_rem_pio2+0x80>
 800c834:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c838:	f8ca 3004 	str.w	r3, [sl, #4]
 800c83c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c840:	f8ca 8000 	str.w	r8, [sl]
 800c844:	f8ca 0008 	str.w	r0, [sl, #8]
 800c848:	f8ca 300c 	str.w	r3, [sl, #12]
 800c84c:	f1cb 0b00 	rsb	fp, fp, #0
 800c850:	e6fa      	b.n	800c648 <__ieee754_rem_pio2+0x80>
 800c852:	a327      	add	r3, pc, #156	; (adr r3, 800c8f0 <__ieee754_rem_pio2+0x328>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	ec51 0b18 	vmov	r0, r1, d8
 800c85c:	f7f3 feec 	bl	8000638 <__aeabi_dmul>
 800c860:	4604      	mov	r4, r0
 800c862:	460d      	mov	r5, r1
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4640      	mov	r0, r8
 800c86a:	4649      	mov	r1, r9
 800c86c:	f7f3 fd2c 	bl	80002c8 <__aeabi_dsub>
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	4606      	mov	r6, r0
 800c876:	460f      	mov	r7, r1
 800c878:	4640      	mov	r0, r8
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f3 fd24 	bl	80002c8 <__aeabi_dsub>
 800c880:	4622      	mov	r2, r4
 800c882:	462b      	mov	r3, r5
 800c884:	f7f3 fd20 	bl	80002c8 <__aeabi_dsub>
 800c888:	a31b      	add	r3, pc, #108	; (adr r3, 800c8f8 <__ieee754_rem_pio2+0x330>)
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	4604      	mov	r4, r0
 800c890:	460d      	mov	r5, r1
 800c892:	ec51 0b18 	vmov	r0, r1, d8
 800c896:	f7f3 fecf 	bl	8000638 <__aeabi_dmul>
 800c89a:	4622      	mov	r2, r4
 800c89c:	462b      	mov	r3, r5
 800c89e:	f7f3 fd13 	bl	80002c8 <__aeabi_dsub>
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	460d      	mov	r5, r1
 800c8a6:	e75f      	b.n	800c768 <__ieee754_rem_pio2+0x1a0>
 800c8a8:	4b1b      	ldr	r3, [pc, #108]	; (800c918 <__ieee754_rem_pio2+0x350>)
 800c8aa:	4598      	cmp	r8, r3
 800c8ac:	dd36      	ble.n	800c91c <__ieee754_rem_pio2+0x354>
 800c8ae:	ee10 2a10 	vmov	r2, s0
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	f7f3 fd06 	bl	80002c8 <__aeabi_dsub>
 800c8bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c8c0:	e9ca 0100 	strd	r0, r1, [sl]
 800c8c4:	e694      	b.n	800c5f0 <__ieee754_rem_pio2+0x28>
 800c8c6:	bf00      	nop
 800c8c8:	54400000 	.word	0x54400000
 800c8cc:	3ff921fb 	.word	0x3ff921fb
 800c8d0:	1a626331 	.word	0x1a626331
 800c8d4:	3dd0b461 	.word	0x3dd0b461
 800c8d8:	1a600000 	.word	0x1a600000
 800c8dc:	3dd0b461 	.word	0x3dd0b461
 800c8e0:	2e037073 	.word	0x2e037073
 800c8e4:	3ba3198a 	.word	0x3ba3198a
 800c8e8:	6dc9c883 	.word	0x6dc9c883
 800c8ec:	3fe45f30 	.word	0x3fe45f30
 800c8f0:	2e000000 	.word	0x2e000000
 800c8f4:	3ba3198a 	.word	0x3ba3198a
 800c8f8:	252049c1 	.word	0x252049c1
 800c8fc:	397b839a 	.word	0x397b839a
 800c900:	3fe921fb 	.word	0x3fe921fb
 800c904:	4002d97b 	.word	0x4002d97b
 800c908:	3ff921fb 	.word	0x3ff921fb
 800c90c:	413921fb 	.word	0x413921fb
 800c910:	3fe00000 	.word	0x3fe00000
 800c914:	0800da10 	.word	0x0800da10
 800c918:	7fefffff 	.word	0x7fefffff
 800c91c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c920:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c924:	ee10 0a10 	vmov	r0, s0
 800c928:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c92c:	ee10 6a10 	vmov	r6, s0
 800c930:	460f      	mov	r7, r1
 800c932:	f7f4 f931 	bl	8000b98 <__aeabi_d2iz>
 800c936:	f7f3 fe15 	bl	8000564 <__aeabi_i2d>
 800c93a:	4602      	mov	r2, r0
 800c93c:	460b      	mov	r3, r1
 800c93e:	4630      	mov	r0, r6
 800c940:	4639      	mov	r1, r7
 800c942:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c946:	f7f3 fcbf 	bl	80002c8 <__aeabi_dsub>
 800c94a:	4b23      	ldr	r3, [pc, #140]	; (800c9d8 <__ieee754_rem_pio2+0x410>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	f7f3 fe73 	bl	8000638 <__aeabi_dmul>
 800c952:	460f      	mov	r7, r1
 800c954:	4606      	mov	r6, r0
 800c956:	f7f4 f91f 	bl	8000b98 <__aeabi_d2iz>
 800c95a:	f7f3 fe03 	bl	8000564 <__aeabi_i2d>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4630      	mov	r0, r6
 800c964:	4639      	mov	r1, r7
 800c966:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c96a:	f7f3 fcad 	bl	80002c8 <__aeabi_dsub>
 800c96e:	4b1a      	ldr	r3, [pc, #104]	; (800c9d8 <__ieee754_rem_pio2+0x410>)
 800c970:	2200      	movs	r2, #0
 800c972:	f7f3 fe61 	bl	8000638 <__aeabi_dmul>
 800c976:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c97a:	ad04      	add	r5, sp, #16
 800c97c:	f04f 0803 	mov.w	r8, #3
 800c980:	46a9      	mov	r9, r5
 800c982:	2600      	movs	r6, #0
 800c984:	2700      	movs	r7, #0
 800c986:	4632      	mov	r2, r6
 800c988:	463b      	mov	r3, r7
 800c98a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c98e:	46c3      	mov	fp, r8
 800c990:	3d08      	subs	r5, #8
 800c992:	f108 38ff 	add.w	r8, r8, #4294967295
 800c996:	f7f4 f8b7 	bl	8000b08 <__aeabi_dcmpeq>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d1f3      	bne.n	800c986 <__ieee754_rem_pio2+0x3be>
 800c99e:	4b0f      	ldr	r3, [pc, #60]	; (800c9dc <__ieee754_rem_pio2+0x414>)
 800c9a0:	9301      	str	r3, [sp, #4]
 800c9a2:	2302      	movs	r3, #2
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	4622      	mov	r2, r4
 800c9a8:	465b      	mov	r3, fp
 800c9aa:	4651      	mov	r1, sl
 800c9ac:	4648      	mov	r0, r9
 800c9ae:	f000 f993 	bl	800ccd8 <__kernel_rem_pio2>
 800c9b2:	9b02      	ldr	r3, [sp, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	4683      	mov	fp, r0
 800c9b8:	f6bf ae46 	bge.w	800c648 <__ieee754_rem_pio2+0x80>
 800c9bc:	e9da 2100 	ldrd	r2, r1, [sl]
 800c9c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9c4:	e9ca 2300 	strd	r2, r3, [sl]
 800c9c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c9cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c9d4:	e73a      	b.n	800c84c <__ieee754_rem_pio2+0x284>
 800c9d6:	bf00      	nop
 800c9d8:	41700000 	.word	0x41700000
 800c9dc:	0800da90 	.word	0x0800da90

0800c9e0 <__ieee754_sqrt>:
 800c9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e4:	ec55 4b10 	vmov	r4, r5, d0
 800c9e8:	4e55      	ldr	r6, [pc, #340]	; (800cb40 <__ieee754_sqrt+0x160>)
 800c9ea:	43ae      	bics	r6, r5
 800c9ec:	ee10 0a10 	vmov	r0, s0
 800c9f0:	ee10 3a10 	vmov	r3, s0
 800c9f4:	462a      	mov	r2, r5
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	d110      	bne.n	800ca1c <__ieee754_sqrt+0x3c>
 800c9fa:	ee10 2a10 	vmov	r2, s0
 800c9fe:	462b      	mov	r3, r5
 800ca00:	f7f3 fe1a 	bl	8000638 <__aeabi_dmul>
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	4620      	mov	r0, r4
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	f7f3 fc5e 	bl	80002cc <__adddf3>
 800ca10:	4604      	mov	r4, r0
 800ca12:	460d      	mov	r5, r1
 800ca14:	ec45 4b10 	vmov	d0, r4, r5
 800ca18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca1c:	2d00      	cmp	r5, #0
 800ca1e:	dc10      	bgt.n	800ca42 <__ieee754_sqrt+0x62>
 800ca20:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca24:	4330      	orrs	r0, r6
 800ca26:	d0f5      	beq.n	800ca14 <__ieee754_sqrt+0x34>
 800ca28:	b15d      	cbz	r5, 800ca42 <__ieee754_sqrt+0x62>
 800ca2a:	ee10 2a10 	vmov	r2, s0
 800ca2e:	462b      	mov	r3, r5
 800ca30:	ee10 0a10 	vmov	r0, s0
 800ca34:	f7f3 fc48 	bl	80002c8 <__aeabi_dsub>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	f7f3 ff26 	bl	800088c <__aeabi_ddiv>
 800ca40:	e7e6      	b.n	800ca10 <__ieee754_sqrt+0x30>
 800ca42:	1512      	asrs	r2, r2, #20
 800ca44:	d074      	beq.n	800cb30 <__ieee754_sqrt+0x150>
 800ca46:	07d4      	lsls	r4, r2, #31
 800ca48:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ca4c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ca50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ca54:	bf5e      	ittt	pl
 800ca56:	0fda      	lsrpl	r2, r3, #31
 800ca58:	005b      	lslpl	r3, r3, #1
 800ca5a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ca5e:	2400      	movs	r4, #0
 800ca60:	0fda      	lsrs	r2, r3, #31
 800ca62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ca66:	107f      	asrs	r7, r7, #1
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	2516      	movs	r5, #22
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ca72:	1886      	adds	r6, r0, r2
 800ca74:	428e      	cmp	r6, r1
 800ca76:	bfde      	ittt	le
 800ca78:	1b89      	suble	r1, r1, r6
 800ca7a:	18b0      	addle	r0, r6, r2
 800ca7c:	18a4      	addle	r4, r4, r2
 800ca7e:	0049      	lsls	r1, r1, #1
 800ca80:	3d01      	subs	r5, #1
 800ca82:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ca86:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ca8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca8e:	d1f0      	bne.n	800ca72 <__ieee754_sqrt+0x92>
 800ca90:	462a      	mov	r2, r5
 800ca92:	f04f 0e20 	mov.w	lr, #32
 800ca96:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ca9a:	4281      	cmp	r1, r0
 800ca9c:	eb06 0c05 	add.w	ip, r6, r5
 800caa0:	dc02      	bgt.n	800caa8 <__ieee754_sqrt+0xc8>
 800caa2:	d113      	bne.n	800cacc <__ieee754_sqrt+0xec>
 800caa4:	459c      	cmp	ip, r3
 800caa6:	d811      	bhi.n	800cacc <__ieee754_sqrt+0xec>
 800caa8:	f1bc 0f00 	cmp.w	ip, #0
 800caac:	eb0c 0506 	add.w	r5, ip, r6
 800cab0:	da43      	bge.n	800cb3a <__ieee754_sqrt+0x15a>
 800cab2:	2d00      	cmp	r5, #0
 800cab4:	db41      	blt.n	800cb3a <__ieee754_sqrt+0x15a>
 800cab6:	f100 0801 	add.w	r8, r0, #1
 800caba:	1a09      	subs	r1, r1, r0
 800cabc:	459c      	cmp	ip, r3
 800cabe:	bf88      	it	hi
 800cac0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cac4:	eba3 030c 	sub.w	r3, r3, ip
 800cac8:	4432      	add	r2, r6
 800caca:	4640      	mov	r0, r8
 800cacc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cad0:	f1be 0e01 	subs.w	lr, lr, #1
 800cad4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cadc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cae0:	d1db      	bne.n	800ca9a <__ieee754_sqrt+0xba>
 800cae2:	430b      	orrs	r3, r1
 800cae4:	d006      	beq.n	800caf4 <__ieee754_sqrt+0x114>
 800cae6:	1c50      	adds	r0, r2, #1
 800cae8:	bf13      	iteet	ne
 800caea:	3201      	addne	r2, #1
 800caec:	3401      	addeq	r4, #1
 800caee:	4672      	moveq	r2, lr
 800caf0:	f022 0201 	bicne.w	r2, r2, #1
 800caf4:	1063      	asrs	r3, r4, #1
 800caf6:	0852      	lsrs	r2, r2, #1
 800caf8:	07e1      	lsls	r1, r4, #31
 800cafa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cafe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cb02:	bf48      	it	mi
 800cb04:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cb08:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cb0c:	4614      	mov	r4, r2
 800cb0e:	e781      	b.n	800ca14 <__ieee754_sqrt+0x34>
 800cb10:	0ad9      	lsrs	r1, r3, #11
 800cb12:	3815      	subs	r0, #21
 800cb14:	055b      	lsls	r3, r3, #21
 800cb16:	2900      	cmp	r1, #0
 800cb18:	d0fa      	beq.n	800cb10 <__ieee754_sqrt+0x130>
 800cb1a:	02cd      	lsls	r5, r1, #11
 800cb1c:	d50a      	bpl.n	800cb34 <__ieee754_sqrt+0x154>
 800cb1e:	f1c2 0420 	rsb	r4, r2, #32
 800cb22:	fa23 f404 	lsr.w	r4, r3, r4
 800cb26:	1e55      	subs	r5, r2, #1
 800cb28:	4093      	lsls	r3, r2
 800cb2a:	4321      	orrs	r1, r4
 800cb2c:	1b42      	subs	r2, r0, r5
 800cb2e:	e78a      	b.n	800ca46 <__ieee754_sqrt+0x66>
 800cb30:	4610      	mov	r0, r2
 800cb32:	e7f0      	b.n	800cb16 <__ieee754_sqrt+0x136>
 800cb34:	0049      	lsls	r1, r1, #1
 800cb36:	3201      	adds	r2, #1
 800cb38:	e7ef      	b.n	800cb1a <__ieee754_sqrt+0x13a>
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	e7bd      	b.n	800caba <__ieee754_sqrt+0xda>
 800cb3e:	bf00      	nop
 800cb40:	7ff00000 	.word	0x7ff00000
 800cb44:	00000000 	.word	0x00000000

0800cb48 <__kernel_cos>:
 800cb48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	ec57 6b10 	vmov	r6, r7, d0
 800cb50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cb54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cb58:	ed8d 1b00 	vstr	d1, [sp]
 800cb5c:	da07      	bge.n	800cb6e <__kernel_cos+0x26>
 800cb5e:	ee10 0a10 	vmov	r0, s0
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f4 f818 	bl	8000b98 <__aeabi_d2iz>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	f000 8088 	beq.w	800cc7e <__kernel_cos+0x136>
 800cb6e:	4632      	mov	r2, r6
 800cb70:	463b      	mov	r3, r7
 800cb72:	4630      	mov	r0, r6
 800cb74:	4639      	mov	r1, r7
 800cb76:	f7f3 fd5f 	bl	8000638 <__aeabi_dmul>
 800cb7a:	4b51      	ldr	r3, [pc, #324]	; (800ccc0 <__kernel_cos+0x178>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4604      	mov	r4, r0
 800cb80:	460d      	mov	r5, r1
 800cb82:	f7f3 fd59 	bl	8000638 <__aeabi_dmul>
 800cb86:	a340      	add	r3, pc, #256	; (adr r3, 800cc88 <__kernel_cos+0x140>)
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	4682      	mov	sl, r0
 800cb8e:	468b      	mov	fp, r1
 800cb90:	4620      	mov	r0, r4
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7f3 fd50 	bl	8000638 <__aeabi_dmul>
 800cb98:	a33d      	add	r3, pc, #244	; (adr r3, 800cc90 <__kernel_cos+0x148>)
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	f7f3 fb95 	bl	80002cc <__adddf3>
 800cba2:	4622      	mov	r2, r4
 800cba4:	462b      	mov	r3, r5
 800cba6:	f7f3 fd47 	bl	8000638 <__aeabi_dmul>
 800cbaa:	a33b      	add	r3, pc, #236	; (adr r3, 800cc98 <__kernel_cos+0x150>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fb8a 	bl	80002c8 <__aeabi_dsub>
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	462b      	mov	r3, r5
 800cbb8:	f7f3 fd3e 	bl	8000638 <__aeabi_dmul>
 800cbbc:	a338      	add	r3, pc, #224	; (adr r3, 800cca0 <__kernel_cos+0x158>)
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fb83 	bl	80002cc <__adddf3>
 800cbc6:	4622      	mov	r2, r4
 800cbc8:	462b      	mov	r3, r5
 800cbca:	f7f3 fd35 	bl	8000638 <__aeabi_dmul>
 800cbce:	a336      	add	r3, pc, #216	; (adr r3, 800cca8 <__kernel_cos+0x160>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	f7f3 fb78 	bl	80002c8 <__aeabi_dsub>
 800cbd8:	4622      	mov	r2, r4
 800cbda:	462b      	mov	r3, r5
 800cbdc:	f7f3 fd2c 	bl	8000638 <__aeabi_dmul>
 800cbe0:	a333      	add	r3, pc, #204	; (adr r3, 800ccb0 <__kernel_cos+0x168>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fb71 	bl	80002cc <__adddf3>
 800cbea:	4622      	mov	r2, r4
 800cbec:	462b      	mov	r3, r5
 800cbee:	f7f3 fd23 	bl	8000638 <__aeabi_dmul>
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	f7f3 fd1f 	bl	8000638 <__aeabi_dmul>
 800cbfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbfe:	4604      	mov	r4, r0
 800cc00:	460d      	mov	r5, r1
 800cc02:	4630      	mov	r0, r6
 800cc04:	4639      	mov	r1, r7
 800cc06:	f7f3 fd17 	bl	8000638 <__aeabi_dmul>
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4620      	mov	r0, r4
 800cc12:	f7f3 fb59 	bl	80002c8 <__aeabi_dsub>
 800cc16:	4b2b      	ldr	r3, [pc, #172]	; (800ccc4 <__kernel_cos+0x17c>)
 800cc18:	4598      	cmp	r8, r3
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	dc10      	bgt.n	800cc42 <__kernel_cos+0xfa>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4650      	mov	r0, sl
 800cc26:	4659      	mov	r1, fp
 800cc28:	f7f3 fb4e 	bl	80002c8 <__aeabi_dsub>
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4926      	ldr	r1, [pc, #152]	; (800ccc8 <__kernel_cos+0x180>)
 800cc30:	4602      	mov	r2, r0
 800cc32:	2000      	movs	r0, #0
 800cc34:	f7f3 fb48 	bl	80002c8 <__aeabi_dsub>
 800cc38:	ec41 0b10 	vmov	d0, r0, r1
 800cc3c:	b003      	add	sp, #12
 800cc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc42:	4b22      	ldr	r3, [pc, #136]	; (800cccc <__kernel_cos+0x184>)
 800cc44:	4920      	ldr	r1, [pc, #128]	; (800ccc8 <__kernel_cos+0x180>)
 800cc46:	4598      	cmp	r8, r3
 800cc48:	bfcc      	ite	gt
 800cc4a:	4d21      	ldrgt	r5, [pc, #132]	; (800ccd0 <__kernel_cos+0x188>)
 800cc4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cc50:	2400      	movs	r4, #0
 800cc52:	4622      	mov	r2, r4
 800cc54:	462b      	mov	r3, r5
 800cc56:	2000      	movs	r0, #0
 800cc58:	f7f3 fb36 	bl	80002c8 <__aeabi_dsub>
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	4680      	mov	r8, r0
 800cc60:	4689      	mov	r9, r1
 800cc62:	462b      	mov	r3, r5
 800cc64:	4650      	mov	r0, sl
 800cc66:	4659      	mov	r1, fp
 800cc68:	f7f3 fb2e 	bl	80002c8 <__aeabi_dsub>
 800cc6c:	4632      	mov	r2, r6
 800cc6e:	463b      	mov	r3, r7
 800cc70:	f7f3 fb2a 	bl	80002c8 <__aeabi_dsub>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	4640      	mov	r0, r8
 800cc7a:	4649      	mov	r1, r9
 800cc7c:	e7da      	b.n	800cc34 <__kernel_cos+0xec>
 800cc7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ccb8 <__kernel_cos+0x170>
 800cc82:	e7db      	b.n	800cc3c <__kernel_cos+0xf4>
 800cc84:	f3af 8000 	nop.w
 800cc88:	be8838d4 	.word	0xbe8838d4
 800cc8c:	bda8fae9 	.word	0xbda8fae9
 800cc90:	bdb4b1c4 	.word	0xbdb4b1c4
 800cc94:	3e21ee9e 	.word	0x3e21ee9e
 800cc98:	809c52ad 	.word	0x809c52ad
 800cc9c:	3e927e4f 	.word	0x3e927e4f
 800cca0:	19cb1590 	.word	0x19cb1590
 800cca4:	3efa01a0 	.word	0x3efa01a0
 800cca8:	16c15177 	.word	0x16c15177
 800ccac:	3f56c16c 	.word	0x3f56c16c
 800ccb0:	5555554c 	.word	0x5555554c
 800ccb4:	3fa55555 	.word	0x3fa55555
 800ccb8:	00000000 	.word	0x00000000
 800ccbc:	3ff00000 	.word	0x3ff00000
 800ccc0:	3fe00000 	.word	0x3fe00000
 800ccc4:	3fd33332 	.word	0x3fd33332
 800ccc8:	3ff00000 	.word	0x3ff00000
 800cccc:	3fe90000 	.word	0x3fe90000
 800ccd0:	3fd20000 	.word	0x3fd20000
 800ccd4:	00000000 	.word	0x00000000

0800ccd8 <__kernel_rem_pio2>:
 800ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	ed2d 8b02 	vpush	{d8}
 800cce0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800cce4:	f112 0f14 	cmn.w	r2, #20
 800cce8:	9308      	str	r3, [sp, #32]
 800ccea:	9101      	str	r1, [sp, #4]
 800ccec:	4bc4      	ldr	r3, [pc, #784]	; (800d000 <__kernel_rem_pio2+0x328>)
 800ccee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ccf0:	900b      	str	r0, [sp, #44]	; 0x2c
 800ccf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccf6:	9302      	str	r3, [sp, #8]
 800ccf8:	9b08      	ldr	r3, [sp, #32]
 800ccfa:	f103 33ff 	add.w	r3, r3, #4294967295
 800ccfe:	bfa8      	it	ge
 800cd00:	1ed4      	subge	r4, r2, #3
 800cd02:	9306      	str	r3, [sp, #24]
 800cd04:	bfb2      	itee	lt
 800cd06:	2400      	movlt	r4, #0
 800cd08:	2318      	movge	r3, #24
 800cd0a:	fb94 f4f3 	sdivge	r4, r4, r3
 800cd0e:	f06f 0317 	mvn.w	r3, #23
 800cd12:	fb04 3303 	mla	r3, r4, r3, r3
 800cd16:	eb03 0a02 	add.w	sl, r3, r2
 800cd1a:	9b02      	ldr	r3, [sp, #8]
 800cd1c:	9a06      	ldr	r2, [sp, #24]
 800cd1e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800cff0 <__kernel_rem_pio2+0x318>
 800cd22:	eb03 0802 	add.w	r8, r3, r2
 800cd26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cd28:	1aa7      	subs	r7, r4, r2
 800cd2a:	ae22      	add	r6, sp, #136	; 0x88
 800cd2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cd30:	2500      	movs	r5, #0
 800cd32:	4545      	cmp	r5, r8
 800cd34:	dd13      	ble.n	800cd5e <__kernel_rem_pio2+0x86>
 800cd36:	9b08      	ldr	r3, [sp, #32]
 800cd38:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800cff0 <__kernel_rem_pio2+0x318>
 800cd3c:	aa22      	add	r2, sp, #136	; 0x88
 800cd3e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cd42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800cd46:	f04f 0800 	mov.w	r8, #0
 800cd4a:	9b02      	ldr	r3, [sp, #8]
 800cd4c:	4598      	cmp	r8, r3
 800cd4e:	dc2f      	bgt.n	800cdb0 <__kernel_rem_pio2+0xd8>
 800cd50:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cd54:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800cd58:	462f      	mov	r7, r5
 800cd5a:	2600      	movs	r6, #0
 800cd5c:	e01b      	b.n	800cd96 <__kernel_rem_pio2+0xbe>
 800cd5e:	42ef      	cmn	r7, r5
 800cd60:	d407      	bmi.n	800cd72 <__kernel_rem_pio2+0x9a>
 800cd62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cd66:	f7f3 fbfd 	bl	8000564 <__aeabi_i2d>
 800cd6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cd6e:	3501      	adds	r5, #1
 800cd70:	e7df      	b.n	800cd32 <__kernel_rem_pio2+0x5a>
 800cd72:	ec51 0b18 	vmov	r0, r1, d8
 800cd76:	e7f8      	b.n	800cd6a <__kernel_rem_pio2+0x92>
 800cd78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cd80:	f7f3 fc5a 	bl	8000638 <__aeabi_dmul>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd8c:	f7f3 fa9e 	bl	80002cc <__adddf3>
 800cd90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd94:	3601      	adds	r6, #1
 800cd96:	9b06      	ldr	r3, [sp, #24]
 800cd98:	429e      	cmp	r6, r3
 800cd9a:	f1a7 0708 	sub.w	r7, r7, #8
 800cd9e:	ddeb      	ble.n	800cd78 <__kernel_rem_pio2+0xa0>
 800cda0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cda4:	f108 0801 	add.w	r8, r8, #1
 800cda8:	ecab 7b02 	vstmia	fp!, {d7}
 800cdac:	3508      	adds	r5, #8
 800cdae:	e7cc      	b.n	800cd4a <__kernel_rem_pio2+0x72>
 800cdb0:	9b02      	ldr	r3, [sp, #8]
 800cdb2:	aa0e      	add	r2, sp, #56	; 0x38
 800cdb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdb8:	930d      	str	r3, [sp, #52]	; 0x34
 800cdba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cdbc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cdc0:	9c02      	ldr	r4, [sp, #8]
 800cdc2:	930c      	str	r3, [sp, #48]	; 0x30
 800cdc4:	00e3      	lsls	r3, r4, #3
 800cdc6:	930a      	str	r3, [sp, #40]	; 0x28
 800cdc8:	ab9a      	add	r3, sp, #616	; 0x268
 800cdca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cdce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cdd2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800cdd6:	ab72      	add	r3, sp, #456	; 0x1c8
 800cdd8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cddc:	46c3      	mov	fp, r8
 800cdde:	46a1      	mov	r9, r4
 800cde0:	f1b9 0f00 	cmp.w	r9, #0
 800cde4:	f1a5 0508 	sub.w	r5, r5, #8
 800cde8:	dc77      	bgt.n	800ceda <__kernel_rem_pio2+0x202>
 800cdea:	ec47 6b10 	vmov	d0, r6, r7
 800cdee:	4650      	mov	r0, sl
 800cdf0:	f000 fc46 	bl	800d680 <scalbn>
 800cdf4:	ec57 6b10 	vmov	r6, r7, d0
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cdfe:	ee10 0a10 	vmov	r0, s0
 800ce02:	4639      	mov	r1, r7
 800ce04:	f7f3 fc18 	bl	8000638 <__aeabi_dmul>
 800ce08:	ec41 0b10 	vmov	d0, r0, r1
 800ce0c:	f000 fbb8 	bl	800d580 <floor>
 800ce10:	4b7c      	ldr	r3, [pc, #496]	; (800d004 <__kernel_rem_pio2+0x32c>)
 800ce12:	ec51 0b10 	vmov	r0, r1, d0
 800ce16:	2200      	movs	r2, #0
 800ce18:	f7f3 fc0e 	bl	8000638 <__aeabi_dmul>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	4630      	mov	r0, r6
 800ce22:	4639      	mov	r1, r7
 800ce24:	f7f3 fa50 	bl	80002c8 <__aeabi_dsub>
 800ce28:	460f      	mov	r7, r1
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	f7f3 feb4 	bl	8000b98 <__aeabi_d2iz>
 800ce30:	9004      	str	r0, [sp, #16]
 800ce32:	f7f3 fb97 	bl	8000564 <__aeabi_i2d>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	4639      	mov	r1, r7
 800ce3e:	f7f3 fa43 	bl	80002c8 <__aeabi_dsub>
 800ce42:	f1ba 0f00 	cmp.w	sl, #0
 800ce46:	4606      	mov	r6, r0
 800ce48:	460f      	mov	r7, r1
 800ce4a:	dd6d      	ble.n	800cf28 <__kernel_rem_pio2+0x250>
 800ce4c:	1e62      	subs	r2, r4, #1
 800ce4e:	ab0e      	add	r3, sp, #56	; 0x38
 800ce50:	9d04      	ldr	r5, [sp, #16]
 800ce52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ce56:	f1ca 0118 	rsb	r1, sl, #24
 800ce5a:	fa40 f301 	asr.w	r3, r0, r1
 800ce5e:	441d      	add	r5, r3
 800ce60:	408b      	lsls	r3, r1
 800ce62:	1ac0      	subs	r0, r0, r3
 800ce64:	ab0e      	add	r3, sp, #56	; 0x38
 800ce66:	9504      	str	r5, [sp, #16]
 800ce68:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ce6c:	f1ca 0317 	rsb	r3, sl, #23
 800ce70:	fa40 fb03 	asr.w	fp, r0, r3
 800ce74:	f1bb 0f00 	cmp.w	fp, #0
 800ce78:	dd65      	ble.n	800cf46 <__kernel_rem_pio2+0x26e>
 800ce7a:	9b04      	ldr	r3, [sp, #16]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	3301      	adds	r3, #1
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	4615      	mov	r5, r2
 800ce84:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ce88:	4294      	cmp	r4, r2
 800ce8a:	f300 809c 	bgt.w	800cfc6 <__kernel_rem_pio2+0x2ee>
 800ce8e:	f1ba 0f00 	cmp.w	sl, #0
 800ce92:	dd07      	ble.n	800cea4 <__kernel_rem_pio2+0x1cc>
 800ce94:	f1ba 0f01 	cmp.w	sl, #1
 800ce98:	f000 80c0 	beq.w	800d01c <__kernel_rem_pio2+0x344>
 800ce9c:	f1ba 0f02 	cmp.w	sl, #2
 800cea0:	f000 80c6 	beq.w	800d030 <__kernel_rem_pio2+0x358>
 800cea4:	f1bb 0f02 	cmp.w	fp, #2
 800cea8:	d14d      	bne.n	800cf46 <__kernel_rem_pio2+0x26e>
 800ceaa:	4632      	mov	r2, r6
 800ceac:	463b      	mov	r3, r7
 800ceae:	4956      	ldr	r1, [pc, #344]	; (800d008 <__kernel_rem_pio2+0x330>)
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	f7f3 fa09 	bl	80002c8 <__aeabi_dsub>
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	460f      	mov	r7, r1
 800ceba:	2d00      	cmp	r5, #0
 800cebc:	d043      	beq.n	800cf46 <__kernel_rem_pio2+0x26e>
 800cebe:	4650      	mov	r0, sl
 800cec0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800cff8 <__kernel_rem_pio2+0x320>
 800cec4:	f000 fbdc 	bl	800d680 <scalbn>
 800cec8:	4630      	mov	r0, r6
 800ceca:	4639      	mov	r1, r7
 800cecc:	ec53 2b10 	vmov	r2, r3, d0
 800ced0:	f7f3 f9fa 	bl	80002c8 <__aeabi_dsub>
 800ced4:	4606      	mov	r6, r0
 800ced6:	460f      	mov	r7, r1
 800ced8:	e035      	b.n	800cf46 <__kernel_rem_pio2+0x26e>
 800ceda:	4b4c      	ldr	r3, [pc, #304]	; (800d00c <__kernel_rem_pio2+0x334>)
 800cedc:	2200      	movs	r2, #0
 800cede:	4630      	mov	r0, r6
 800cee0:	4639      	mov	r1, r7
 800cee2:	f7f3 fba9 	bl	8000638 <__aeabi_dmul>
 800cee6:	f7f3 fe57 	bl	8000b98 <__aeabi_d2iz>
 800ceea:	f7f3 fb3b 	bl	8000564 <__aeabi_i2d>
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	ec43 2b18 	vmov	d8, r2, r3
 800cef6:	4b46      	ldr	r3, [pc, #280]	; (800d010 <__kernel_rem_pio2+0x338>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	f7f3 fb9d 	bl	8000638 <__aeabi_dmul>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	4630      	mov	r0, r6
 800cf04:	4639      	mov	r1, r7
 800cf06:	f7f3 f9df 	bl	80002c8 <__aeabi_dsub>
 800cf0a:	f7f3 fe45 	bl	8000b98 <__aeabi_d2iz>
 800cf0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf12:	f84b 0b04 	str.w	r0, [fp], #4
 800cf16:	ec51 0b18 	vmov	r0, r1, d8
 800cf1a:	f7f3 f9d7 	bl	80002cc <__adddf3>
 800cf1e:	f109 39ff 	add.w	r9, r9, #4294967295
 800cf22:	4606      	mov	r6, r0
 800cf24:	460f      	mov	r7, r1
 800cf26:	e75b      	b.n	800cde0 <__kernel_rem_pio2+0x108>
 800cf28:	d106      	bne.n	800cf38 <__kernel_rem_pio2+0x260>
 800cf2a:	1e63      	subs	r3, r4, #1
 800cf2c:	aa0e      	add	r2, sp, #56	; 0x38
 800cf2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cf32:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800cf36:	e79d      	b.n	800ce74 <__kernel_rem_pio2+0x19c>
 800cf38:	4b36      	ldr	r3, [pc, #216]	; (800d014 <__kernel_rem_pio2+0x33c>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f7f3 fe02 	bl	8000b44 <__aeabi_dcmpge>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d13d      	bne.n	800cfc0 <__kernel_rem_pio2+0x2e8>
 800cf44:	4683      	mov	fp, r0
 800cf46:	2200      	movs	r2, #0
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	4639      	mov	r1, r7
 800cf4e:	f7f3 fddb 	bl	8000b08 <__aeabi_dcmpeq>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	f000 80c0 	beq.w	800d0d8 <__kernel_rem_pio2+0x400>
 800cf58:	1e65      	subs	r5, r4, #1
 800cf5a:	462b      	mov	r3, r5
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	9902      	ldr	r1, [sp, #8]
 800cf60:	428b      	cmp	r3, r1
 800cf62:	da6c      	bge.n	800d03e <__kernel_rem_pio2+0x366>
 800cf64:	2a00      	cmp	r2, #0
 800cf66:	f000 8089 	beq.w	800d07c <__kernel_rem_pio2+0x3a4>
 800cf6a:	ab0e      	add	r3, sp, #56	; 0x38
 800cf6c:	f1aa 0a18 	sub.w	sl, sl, #24
 800cf70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f000 80ad 	beq.w	800d0d4 <__kernel_rem_pio2+0x3fc>
 800cf7a:	4650      	mov	r0, sl
 800cf7c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800cff8 <__kernel_rem_pio2+0x320>
 800cf80:	f000 fb7e 	bl	800d680 <scalbn>
 800cf84:	ab9a      	add	r3, sp, #616	; 0x268
 800cf86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cf8a:	ec57 6b10 	vmov	r6, r7, d0
 800cf8e:	00ec      	lsls	r4, r5, #3
 800cf90:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800cf94:	46aa      	mov	sl, r5
 800cf96:	f1ba 0f00 	cmp.w	sl, #0
 800cf9a:	f280 80d6 	bge.w	800d14a <__kernel_rem_pio2+0x472>
 800cf9e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800cff0 <__kernel_rem_pio2+0x318>
 800cfa2:	462e      	mov	r6, r5
 800cfa4:	2e00      	cmp	r6, #0
 800cfa6:	f2c0 8104 	blt.w	800d1b2 <__kernel_rem_pio2+0x4da>
 800cfaa:	ab72      	add	r3, sp, #456	; 0x1c8
 800cfac:	ed8d 8b06 	vstr	d8, [sp, #24]
 800cfb0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d018 <__kernel_rem_pio2+0x340>
 800cfb4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800cfb8:	f04f 0800 	mov.w	r8, #0
 800cfbc:	1baf      	subs	r7, r5, r6
 800cfbe:	e0ea      	b.n	800d196 <__kernel_rem_pio2+0x4be>
 800cfc0:	f04f 0b02 	mov.w	fp, #2
 800cfc4:	e759      	b.n	800ce7a <__kernel_rem_pio2+0x1a2>
 800cfc6:	f8d8 3000 	ldr.w	r3, [r8]
 800cfca:	b955      	cbnz	r5, 800cfe2 <__kernel_rem_pio2+0x30a>
 800cfcc:	b123      	cbz	r3, 800cfd8 <__kernel_rem_pio2+0x300>
 800cfce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cfd2:	f8c8 3000 	str.w	r3, [r8]
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	3201      	adds	r2, #1
 800cfda:	f108 0804 	add.w	r8, r8, #4
 800cfde:	461d      	mov	r5, r3
 800cfe0:	e752      	b.n	800ce88 <__kernel_rem_pio2+0x1b0>
 800cfe2:	1acb      	subs	r3, r1, r3
 800cfe4:	f8c8 3000 	str.w	r3, [r8]
 800cfe8:	462b      	mov	r3, r5
 800cfea:	e7f5      	b.n	800cfd8 <__kernel_rem_pio2+0x300>
 800cfec:	f3af 8000 	nop.w
	...
 800cffc:	3ff00000 	.word	0x3ff00000
 800d000:	0800dbd8 	.word	0x0800dbd8
 800d004:	40200000 	.word	0x40200000
 800d008:	3ff00000 	.word	0x3ff00000
 800d00c:	3e700000 	.word	0x3e700000
 800d010:	41700000 	.word	0x41700000
 800d014:	3fe00000 	.word	0x3fe00000
 800d018:	0800db98 	.word	0x0800db98
 800d01c:	1e62      	subs	r2, r4, #1
 800d01e:	ab0e      	add	r3, sp, #56	; 0x38
 800d020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d024:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d028:	a90e      	add	r1, sp, #56	; 0x38
 800d02a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d02e:	e739      	b.n	800cea4 <__kernel_rem_pio2+0x1cc>
 800d030:	1e62      	subs	r2, r4, #1
 800d032:	ab0e      	add	r3, sp, #56	; 0x38
 800d034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d038:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d03c:	e7f4      	b.n	800d028 <__kernel_rem_pio2+0x350>
 800d03e:	a90e      	add	r1, sp, #56	; 0x38
 800d040:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d044:	3b01      	subs	r3, #1
 800d046:	430a      	orrs	r2, r1
 800d048:	e789      	b.n	800cf5e <__kernel_rem_pio2+0x286>
 800d04a:	3301      	adds	r3, #1
 800d04c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d050:	2900      	cmp	r1, #0
 800d052:	d0fa      	beq.n	800d04a <__kernel_rem_pio2+0x372>
 800d054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d056:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d05a:	446a      	add	r2, sp
 800d05c:	3a98      	subs	r2, #152	; 0x98
 800d05e:	920a      	str	r2, [sp, #40]	; 0x28
 800d060:	9a08      	ldr	r2, [sp, #32]
 800d062:	18e3      	adds	r3, r4, r3
 800d064:	18a5      	adds	r5, r4, r2
 800d066:	aa22      	add	r2, sp, #136	; 0x88
 800d068:	f104 0801 	add.w	r8, r4, #1
 800d06c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d070:	9304      	str	r3, [sp, #16]
 800d072:	9b04      	ldr	r3, [sp, #16]
 800d074:	4543      	cmp	r3, r8
 800d076:	da04      	bge.n	800d082 <__kernel_rem_pio2+0x3aa>
 800d078:	461c      	mov	r4, r3
 800d07a:	e6a3      	b.n	800cdc4 <__kernel_rem_pio2+0xec>
 800d07c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d07e:	2301      	movs	r3, #1
 800d080:	e7e4      	b.n	800d04c <__kernel_rem_pio2+0x374>
 800d082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d084:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d088:	f7f3 fa6c 	bl	8000564 <__aeabi_i2d>
 800d08c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d092:	46ab      	mov	fp, r5
 800d094:	461c      	mov	r4, r3
 800d096:	f04f 0900 	mov.w	r9, #0
 800d09a:	2600      	movs	r6, #0
 800d09c:	2700      	movs	r7, #0
 800d09e:	9b06      	ldr	r3, [sp, #24]
 800d0a0:	4599      	cmp	r9, r3
 800d0a2:	dd06      	ble.n	800d0b2 <__kernel_rem_pio2+0x3da>
 800d0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0a6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d0aa:	f108 0801 	add.w	r8, r8, #1
 800d0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d0b0:	e7df      	b.n	800d072 <__kernel_rem_pio2+0x39a>
 800d0b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d0b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d0ba:	f7f3 fabd 	bl	8000638 <__aeabi_dmul>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	4639      	mov	r1, r7
 800d0c6:	f7f3 f901 	bl	80002cc <__adddf3>
 800d0ca:	f109 0901 	add.w	r9, r9, #1
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	460f      	mov	r7, r1
 800d0d2:	e7e4      	b.n	800d09e <__kernel_rem_pio2+0x3c6>
 800d0d4:	3d01      	subs	r5, #1
 800d0d6:	e748      	b.n	800cf6a <__kernel_rem_pio2+0x292>
 800d0d8:	ec47 6b10 	vmov	d0, r6, r7
 800d0dc:	f1ca 0000 	rsb	r0, sl, #0
 800d0e0:	f000 face 	bl	800d680 <scalbn>
 800d0e4:	ec57 6b10 	vmov	r6, r7, d0
 800d0e8:	4ba0      	ldr	r3, [pc, #640]	; (800d36c <__kernel_rem_pio2+0x694>)
 800d0ea:	ee10 0a10 	vmov	r0, s0
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	f7f3 fd27 	bl	8000b44 <__aeabi_dcmpge>
 800d0f6:	b1f8      	cbz	r0, 800d138 <__kernel_rem_pio2+0x460>
 800d0f8:	4b9d      	ldr	r3, [pc, #628]	; (800d370 <__kernel_rem_pio2+0x698>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	4639      	mov	r1, r7
 800d100:	f7f3 fa9a 	bl	8000638 <__aeabi_dmul>
 800d104:	f7f3 fd48 	bl	8000b98 <__aeabi_d2iz>
 800d108:	4680      	mov	r8, r0
 800d10a:	f7f3 fa2b 	bl	8000564 <__aeabi_i2d>
 800d10e:	4b97      	ldr	r3, [pc, #604]	; (800d36c <__kernel_rem_pio2+0x694>)
 800d110:	2200      	movs	r2, #0
 800d112:	f7f3 fa91 	bl	8000638 <__aeabi_dmul>
 800d116:	460b      	mov	r3, r1
 800d118:	4602      	mov	r2, r0
 800d11a:	4639      	mov	r1, r7
 800d11c:	4630      	mov	r0, r6
 800d11e:	f7f3 f8d3 	bl	80002c8 <__aeabi_dsub>
 800d122:	f7f3 fd39 	bl	8000b98 <__aeabi_d2iz>
 800d126:	1c65      	adds	r5, r4, #1
 800d128:	ab0e      	add	r3, sp, #56	; 0x38
 800d12a:	f10a 0a18 	add.w	sl, sl, #24
 800d12e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d132:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d136:	e720      	b.n	800cf7a <__kernel_rem_pio2+0x2a2>
 800d138:	4630      	mov	r0, r6
 800d13a:	4639      	mov	r1, r7
 800d13c:	f7f3 fd2c 	bl	8000b98 <__aeabi_d2iz>
 800d140:	ab0e      	add	r3, sp, #56	; 0x38
 800d142:	4625      	mov	r5, r4
 800d144:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d148:	e717      	b.n	800cf7a <__kernel_rem_pio2+0x2a2>
 800d14a:	ab0e      	add	r3, sp, #56	; 0x38
 800d14c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d150:	f7f3 fa08 	bl	8000564 <__aeabi_i2d>
 800d154:	4632      	mov	r2, r6
 800d156:	463b      	mov	r3, r7
 800d158:	f7f3 fa6e 	bl	8000638 <__aeabi_dmul>
 800d15c:	4b84      	ldr	r3, [pc, #528]	; (800d370 <__kernel_rem_pio2+0x698>)
 800d15e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d162:	2200      	movs	r2, #0
 800d164:	4630      	mov	r0, r6
 800d166:	4639      	mov	r1, r7
 800d168:	f7f3 fa66 	bl	8000638 <__aeabi_dmul>
 800d16c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d170:	4606      	mov	r6, r0
 800d172:	460f      	mov	r7, r1
 800d174:	e70f      	b.n	800cf96 <__kernel_rem_pio2+0x2be>
 800d176:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d17a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d17e:	f7f3 fa5b 	bl	8000638 <__aeabi_dmul>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d18a:	f7f3 f89f 	bl	80002cc <__adddf3>
 800d18e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d192:	f108 0801 	add.w	r8, r8, #1
 800d196:	9b02      	ldr	r3, [sp, #8]
 800d198:	4598      	cmp	r8, r3
 800d19a:	dc01      	bgt.n	800d1a0 <__kernel_rem_pio2+0x4c8>
 800d19c:	45b8      	cmp	r8, r7
 800d19e:	ddea      	ble.n	800d176 <__kernel_rem_pio2+0x49e>
 800d1a0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d1a4:	ab4a      	add	r3, sp, #296	; 0x128
 800d1a6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d1aa:	ed87 7b00 	vstr	d7, [r7]
 800d1ae:	3e01      	subs	r6, #1
 800d1b0:	e6f8      	b.n	800cfa4 <__kernel_rem_pio2+0x2cc>
 800d1b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	dc0b      	bgt.n	800d1d0 <__kernel_rem_pio2+0x4f8>
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	dc35      	bgt.n	800d228 <__kernel_rem_pio2+0x550>
 800d1bc:	d059      	beq.n	800d272 <__kernel_rem_pio2+0x59a>
 800d1be:	9b04      	ldr	r3, [sp, #16]
 800d1c0:	f003 0007 	and.w	r0, r3, #7
 800d1c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d1c8:	ecbd 8b02 	vpop	{d8}
 800d1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d1f3      	bne.n	800d1be <__kernel_rem_pio2+0x4e6>
 800d1d6:	ab4a      	add	r3, sp, #296	; 0x128
 800d1d8:	4423      	add	r3, r4
 800d1da:	9306      	str	r3, [sp, #24]
 800d1dc:	461c      	mov	r4, r3
 800d1de:	469a      	mov	sl, r3
 800d1e0:	9502      	str	r5, [sp, #8]
 800d1e2:	9b02      	ldr	r3, [sp, #8]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f1aa 0a08 	sub.w	sl, sl, #8
 800d1ea:	dc6b      	bgt.n	800d2c4 <__kernel_rem_pio2+0x5ec>
 800d1ec:	46aa      	mov	sl, r5
 800d1ee:	f1ba 0f01 	cmp.w	sl, #1
 800d1f2:	f1a4 0408 	sub.w	r4, r4, #8
 800d1f6:	f300 8085 	bgt.w	800d304 <__kernel_rem_pio2+0x62c>
 800d1fa:	9c06      	ldr	r4, [sp, #24]
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	3408      	adds	r4, #8
 800d200:	2100      	movs	r1, #0
 800d202:	2d01      	cmp	r5, #1
 800d204:	f300 809d 	bgt.w	800d342 <__kernel_rem_pio2+0x66a>
 800d208:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d20c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d210:	f1bb 0f00 	cmp.w	fp, #0
 800d214:	f040 809b 	bne.w	800d34e <__kernel_rem_pio2+0x676>
 800d218:	9b01      	ldr	r3, [sp, #4]
 800d21a:	e9c3 5600 	strd	r5, r6, [r3]
 800d21e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d222:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d226:	e7ca      	b.n	800d1be <__kernel_rem_pio2+0x4e6>
 800d228:	3408      	adds	r4, #8
 800d22a:	ab4a      	add	r3, sp, #296	; 0x128
 800d22c:	441c      	add	r4, r3
 800d22e:	462e      	mov	r6, r5
 800d230:	2000      	movs	r0, #0
 800d232:	2100      	movs	r1, #0
 800d234:	2e00      	cmp	r6, #0
 800d236:	da36      	bge.n	800d2a6 <__kernel_rem_pio2+0x5ce>
 800d238:	f1bb 0f00 	cmp.w	fp, #0
 800d23c:	d039      	beq.n	800d2b2 <__kernel_rem_pio2+0x5da>
 800d23e:	4602      	mov	r2, r0
 800d240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d244:	9c01      	ldr	r4, [sp, #4]
 800d246:	e9c4 2300 	strd	r2, r3, [r4]
 800d24a:	4602      	mov	r2, r0
 800d24c:	460b      	mov	r3, r1
 800d24e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d252:	f7f3 f839 	bl	80002c8 <__aeabi_dsub>
 800d256:	ae4c      	add	r6, sp, #304	; 0x130
 800d258:	2401      	movs	r4, #1
 800d25a:	42a5      	cmp	r5, r4
 800d25c:	da2c      	bge.n	800d2b8 <__kernel_rem_pio2+0x5e0>
 800d25e:	f1bb 0f00 	cmp.w	fp, #0
 800d262:	d002      	beq.n	800d26a <__kernel_rem_pio2+0x592>
 800d264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d268:	4619      	mov	r1, r3
 800d26a:	9b01      	ldr	r3, [sp, #4]
 800d26c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d270:	e7a5      	b.n	800d1be <__kernel_rem_pio2+0x4e6>
 800d272:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d276:	eb0d 0403 	add.w	r4, sp, r3
 800d27a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d27e:	2000      	movs	r0, #0
 800d280:	2100      	movs	r1, #0
 800d282:	2d00      	cmp	r5, #0
 800d284:	da09      	bge.n	800d29a <__kernel_rem_pio2+0x5c2>
 800d286:	f1bb 0f00 	cmp.w	fp, #0
 800d28a:	d002      	beq.n	800d292 <__kernel_rem_pio2+0x5ba>
 800d28c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d290:	4619      	mov	r1, r3
 800d292:	9b01      	ldr	r3, [sp, #4]
 800d294:	e9c3 0100 	strd	r0, r1, [r3]
 800d298:	e791      	b.n	800d1be <__kernel_rem_pio2+0x4e6>
 800d29a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d29e:	f7f3 f815 	bl	80002cc <__adddf3>
 800d2a2:	3d01      	subs	r5, #1
 800d2a4:	e7ed      	b.n	800d282 <__kernel_rem_pio2+0x5aa>
 800d2a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d2aa:	f7f3 f80f 	bl	80002cc <__adddf3>
 800d2ae:	3e01      	subs	r6, #1
 800d2b0:	e7c0      	b.n	800d234 <__kernel_rem_pio2+0x55c>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	e7c5      	b.n	800d244 <__kernel_rem_pio2+0x56c>
 800d2b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d2bc:	f7f3 f806 	bl	80002cc <__adddf3>
 800d2c0:	3401      	adds	r4, #1
 800d2c2:	e7ca      	b.n	800d25a <__kernel_rem_pio2+0x582>
 800d2c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d2cc:	9b02      	ldr	r3, [sp, #8]
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	9302      	str	r3, [sp, #8]
 800d2d2:	4632      	mov	r2, r6
 800d2d4:	463b      	mov	r3, r7
 800d2d6:	4640      	mov	r0, r8
 800d2d8:	4649      	mov	r1, r9
 800d2da:	f7f2 fff7 	bl	80002cc <__adddf3>
 800d2de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	4649      	mov	r1, r9
 800d2ea:	f7f2 ffed 	bl	80002c8 <__aeabi_dsub>
 800d2ee:	4632      	mov	r2, r6
 800d2f0:	463b      	mov	r3, r7
 800d2f2:	f7f2 ffeb 	bl	80002cc <__adddf3>
 800d2f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d2fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d2fe:	ed8a 7b00 	vstr	d7, [sl]
 800d302:	e76e      	b.n	800d1e2 <__kernel_rem_pio2+0x50a>
 800d304:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d308:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d30c:	4640      	mov	r0, r8
 800d30e:	4632      	mov	r2, r6
 800d310:	463b      	mov	r3, r7
 800d312:	4649      	mov	r1, r9
 800d314:	f7f2 ffda 	bl	80002cc <__adddf3>
 800d318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4640      	mov	r0, r8
 800d322:	4649      	mov	r1, r9
 800d324:	f7f2 ffd0 	bl	80002c8 <__aeabi_dsub>
 800d328:	4632      	mov	r2, r6
 800d32a:	463b      	mov	r3, r7
 800d32c:	f7f2 ffce 	bl	80002cc <__adddf3>
 800d330:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d334:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d338:	ed84 7b00 	vstr	d7, [r4]
 800d33c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d340:	e755      	b.n	800d1ee <__kernel_rem_pio2+0x516>
 800d342:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d346:	f7f2 ffc1 	bl	80002cc <__adddf3>
 800d34a:	3d01      	subs	r5, #1
 800d34c:	e759      	b.n	800d202 <__kernel_rem_pio2+0x52a>
 800d34e:	9b01      	ldr	r3, [sp, #4]
 800d350:	9a01      	ldr	r2, [sp, #4]
 800d352:	601d      	str	r5, [r3, #0]
 800d354:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d358:	605c      	str	r4, [r3, #4]
 800d35a:	609f      	str	r7, [r3, #8]
 800d35c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d360:	60d3      	str	r3, [r2, #12]
 800d362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d366:	6110      	str	r0, [r2, #16]
 800d368:	6153      	str	r3, [r2, #20]
 800d36a:	e728      	b.n	800d1be <__kernel_rem_pio2+0x4e6>
 800d36c:	41700000 	.word	0x41700000
 800d370:	3e700000 	.word	0x3e700000
 800d374:	00000000 	.word	0x00000000

0800d378 <__kernel_sin>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	ed2d 8b04 	vpush	{d8-d9}
 800d380:	eeb0 8a41 	vmov.f32	s16, s2
 800d384:	eef0 8a61 	vmov.f32	s17, s3
 800d388:	ec55 4b10 	vmov	r4, r5, d0
 800d38c:	b083      	sub	sp, #12
 800d38e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d392:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d396:	9001      	str	r0, [sp, #4]
 800d398:	da06      	bge.n	800d3a8 <__kernel_sin+0x30>
 800d39a:	ee10 0a10 	vmov	r0, s0
 800d39e:	4629      	mov	r1, r5
 800d3a0:	f7f3 fbfa 	bl	8000b98 <__aeabi_d2iz>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d051      	beq.n	800d44c <__kernel_sin+0xd4>
 800d3a8:	4622      	mov	r2, r4
 800d3aa:	462b      	mov	r3, r5
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	f7f3 f942 	bl	8000638 <__aeabi_dmul>
 800d3b4:	4682      	mov	sl, r0
 800d3b6:	468b      	mov	fp, r1
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4620      	mov	r0, r4
 800d3be:	4629      	mov	r1, r5
 800d3c0:	f7f3 f93a 	bl	8000638 <__aeabi_dmul>
 800d3c4:	a341      	add	r3, pc, #260	; (adr r3, 800d4cc <__kernel_sin+0x154>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	4680      	mov	r8, r0
 800d3cc:	4689      	mov	r9, r1
 800d3ce:	4650      	mov	r0, sl
 800d3d0:	4659      	mov	r1, fp
 800d3d2:	f7f3 f931 	bl	8000638 <__aeabi_dmul>
 800d3d6:	a33f      	add	r3, pc, #252	; (adr r3, 800d4d4 <__kernel_sin+0x15c>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f7f2 ff74 	bl	80002c8 <__aeabi_dsub>
 800d3e0:	4652      	mov	r2, sl
 800d3e2:	465b      	mov	r3, fp
 800d3e4:	f7f3 f928 	bl	8000638 <__aeabi_dmul>
 800d3e8:	a33c      	add	r3, pc, #240	; (adr r3, 800d4dc <__kernel_sin+0x164>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f2 ff6d 	bl	80002cc <__adddf3>
 800d3f2:	4652      	mov	r2, sl
 800d3f4:	465b      	mov	r3, fp
 800d3f6:	f7f3 f91f 	bl	8000638 <__aeabi_dmul>
 800d3fa:	a33a      	add	r3, pc, #232	; (adr r3, 800d4e4 <__kernel_sin+0x16c>)
 800d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d400:	f7f2 ff62 	bl	80002c8 <__aeabi_dsub>
 800d404:	4652      	mov	r2, sl
 800d406:	465b      	mov	r3, fp
 800d408:	f7f3 f916 	bl	8000638 <__aeabi_dmul>
 800d40c:	a337      	add	r3, pc, #220	; (adr r3, 800d4ec <__kernel_sin+0x174>)
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	f7f2 ff5b 	bl	80002cc <__adddf3>
 800d416:	9b01      	ldr	r3, [sp, #4]
 800d418:	4606      	mov	r6, r0
 800d41a:	460f      	mov	r7, r1
 800d41c:	b9eb      	cbnz	r3, 800d45a <__kernel_sin+0xe2>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	4650      	mov	r0, sl
 800d424:	4659      	mov	r1, fp
 800d426:	f7f3 f907 	bl	8000638 <__aeabi_dmul>
 800d42a:	a325      	add	r3, pc, #148	; (adr r3, 800d4c0 <__kernel_sin+0x148>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	f7f2 ff4a 	bl	80002c8 <__aeabi_dsub>
 800d434:	4642      	mov	r2, r8
 800d436:	464b      	mov	r3, r9
 800d438:	f7f3 f8fe 	bl	8000638 <__aeabi_dmul>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	4620      	mov	r0, r4
 800d442:	4629      	mov	r1, r5
 800d444:	f7f2 ff42 	bl	80002cc <__adddf3>
 800d448:	4604      	mov	r4, r0
 800d44a:	460d      	mov	r5, r1
 800d44c:	ec45 4b10 	vmov	d0, r4, r5
 800d450:	b003      	add	sp, #12
 800d452:	ecbd 8b04 	vpop	{d8-d9}
 800d456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45a:	4b1b      	ldr	r3, [pc, #108]	; (800d4c8 <__kernel_sin+0x150>)
 800d45c:	ec51 0b18 	vmov	r0, r1, d8
 800d460:	2200      	movs	r2, #0
 800d462:	f7f3 f8e9 	bl	8000638 <__aeabi_dmul>
 800d466:	4632      	mov	r2, r6
 800d468:	ec41 0b19 	vmov	d9, r0, r1
 800d46c:	463b      	mov	r3, r7
 800d46e:	4640      	mov	r0, r8
 800d470:	4649      	mov	r1, r9
 800d472:	f7f3 f8e1 	bl	8000638 <__aeabi_dmul>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	ec51 0b19 	vmov	r0, r1, d9
 800d47e:	f7f2 ff23 	bl	80002c8 <__aeabi_dsub>
 800d482:	4652      	mov	r2, sl
 800d484:	465b      	mov	r3, fp
 800d486:	f7f3 f8d7 	bl	8000638 <__aeabi_dmul>
 800d48a:	ec53 2b18 	vmov	r2, r3, d8
 800d48e:	f7f2 ff1b 	bl	80002c8 <__aeabi_dsub>
 800d492:	a30b      	add	r3, pc, #44	; (adr r3, 800d4c0 <__kernel_sin+0x148>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	4606      	mov	r6, r0
 800d49a:	460f      	mov	r7, r1
 800d49c:	4640      	mov	r0, r8
 800d49e:	4649      	mov	r1, r9
 800d4a0:	f7f3 f8ca 	bl	8000638 <__aeabi_dmul>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	4639      	mov	r1, r7
 800d4ac:	f7f2 ff0e 	bl	80002cc <__adddf3>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f2 ff06 	bl	80002c8 <__aeabi_dsub>
 800d4bc:	e7c4      	b.n	800d448 <__kernel_sin+0xd0>
 800d4be:	bf00      	nop
 800d4c0:	55555549 	.word	0x55555549
 800d4c4:	3fc55555 	.word	0x3fc55555
 800d4c8:	3fe00000 	.word	0x3fe00000
 800d4cc:	5acfd57c 	.word	0x5acfd57c
 800d4d0:	3de5d93a 	.word	0x3de5d93a
 800d4d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d4d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d4dc:	57b1fe7d 	.word	0x57b1fe7d
 800d4e0:	3ec71de3 	.word	0x3ec71de3
 800d4e4:	19c161d5 	.word	0x19c161d5
 800d4e8:	3f2a01a0 	.word	0x3f2a01a0
 800d4ec:	1110f8a6 	.word	0x1110f8a6
 800d4f0:	3f811111 	.word	0x3f811111

0800d4f4 <with_errno>:
 800d4f4:	b570      	push	{r4, r5, r6, lr}
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	460d      	mov	r5, r1
 800d4fa:	4616      	mov	r6, r2
 800d4fc:	f7fd fce2 	bl	800aec4 <__errno>
 800d500:	4629      	mov	r1, r5
 800d502:	6006      	str	r6, [r0, #0]
 800d504:	4620      	mov	r0, r4
 800d506:	bd70      	pop	{r4, r5, r6, pc}

0800d508 <xflow>:
 800d508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d50a:	4614      	mov	r4, r2
 800d50c:	461d      	mov	r5, r3
 800d50e:	b108      	cbz	r0, 800d514 <xflow+0xc>
 800d510:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d514:	e9cd 2300 	strd	r2, r3, [sp]
 800d518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d51c:	4620      	mov	r0, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	f7f3 f88a 	bl	8000638 <__aeabi_dmul>
 800d524:	2222      	movs	r2, #34	; 0x22
 800d526:	b003      	add	sp, #12
 800d528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d52c:	f7ff bfe2 	b.w	800d4f4 <with_errno>

0800d530 <__math_uflow>:
 800d530:	b508      	push	{r3, lr}
 800d532:	2200      	movs	r2, #0
 800d534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d538:	f7ff ffe6 	bl	800d508 <xflow>
 800d53c:	ec41 0b10 	vmov	d0, r0, r1
 800d540:	bd08      	pop	{r3, pc}

0800d542 <__math_oflow>:
 800d542:	b508      	push	{r3, lr}
 800d544:	2200      	movs	r2, #0
 800d546:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d54a:	f7ff ffdd 	bl	800d508 <xflow>
 800d54e:	ec41 0b10 	vmov	d0, r0, r1
 800d552:	bd08      	pop	{r3, pc}

0800d554 <fabs>:
 800d554:	ec51 0b10 	vmov	r0, r1, d0
 800d558:	ee10 2a10 	vmov	r2, s0
 800d55c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d560:	ec43 2b10 	vmov	d0, r2, r3
 800d564:	4770      	bx	lr

0800d566 <finite>:
 800d566:	b082      	sub	sp, #8
 800d568:	ed8d 0b00 	vstr	d0, [sp]
 800d56c:	9801      	ldr	r0, [sp, #4]
 800d56e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d572:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d576:	0fc0      	lsrs	r0, r0, #31
 800d578:	b002      	add	sp, #8
 800d57a:	4770      	bx	lr
 800d57c:	0000      	movs	r0, r0
	...

0800d580 <floor>:
 800d580:	ec51 0b10 	vmov	r0, r1, d0
 800d584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d588:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d58c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d590:	2e13      	cmp	r6, #19
 800d592:	ee10 5a10 	vmov	r5, s0
 800d596:	ee10 8a10 	vmov	r8, s0
 800d59a:	460c      	mov	r4, r1
 800d59c:	dc32      	bgt.n	800d604 <floor+0x84>
 800d59e:	2e00      	cmp	r6, #0
 800d5a0:	da14      	bge.n	800d5cc <floor+0x4c>
 800d5a2:	a333      	add	r3, pc, #204	; (adr r3, 800d670 <floor+0xf0>)
 800d5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a8:	f7f2 fe90 	bl	80002cc <__adddf3>
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f7f3 fad2 	bl	8000b58 <__aeabi_dcmpgt>
 800d5b4:	b138      	cbz	r0, 800d5c6 <floor+0x46>
 800d5b6:	2c00      	cmp	r4, #0
 800d5b8:	da57      	bge.n	800d66a <floor+0xea>
 800d5ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d5be:	431d      	orrs	r5, r3
 800d5c0:	d001      	beq.n	800d5c6 <floor+0x46>
 800d5c2:	4c2d      	ldr	r4, [pc, #180]	; (800d678 <floor+0xf8>)
 800d5c4:	2500      	movs	r5, #0
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	e025      	b.n	800d618 <floor+0x98>
 800d5cc:	4f2b      	ldr	r7, [pc, #172]	; (800d67c <floor+0xfc>)
 800d5ce:	4137      	asrs	r7, r6
 800d5d0:	ea01 0307 	and.w	r3, r1, r7
 800d5d4:	4303      	orrs	r3, r0
 800d5d6:	d01f      	beq.n	800d618 <floor+0x98>
 800d5d8:	a325      	add	r3, pc, #148	; (adr r3, 800d670 <floor+0xf0>)
 800d5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5de:	f7f2 fe75 	bl	80002cc <__adddf3>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	f7f3 fab7 	bl	8000b58 <__aeabi_dcmpgt>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d0eb      	beq.n	800d5c6 <floor+0x46>
 800d5ee:	2c00      	cmp	r4, #0
 800d5f0:	bfbe      	ittt	lt
 800d5f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d5f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d5fa:	19a4      	addlt	r4, r4, r6
 800d5fc:	ea24 0407 	bic.w	r4, r4, r7
 800d600:	2500      	movs	r5, #0
 800d602:	e7e0      	b.n	800d5c6 <floor+0x46>
 800d604:	2e33      	cmp	r6, #51	; 0x33
 800d606:	dd0b      	ble.n	800d620 <floor+0xa0>
 800d608:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d60c:	d104      	bne.n	800d618 <floor+0x98>
 800d60e:	ee10 2a10 	vmov	r2, s0
 800d612:	460b      	mov	r3, r1
 800d614:	f7f2 fe5a 	bl	80002cc <__adddf3>
 800d618:	ec41 0b10 	vmov	d0, r0, r1
 800d61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d620:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d624:	f04f 33ff 	mov.w	r3, #4294967295
 800d628:	fa23 f707 	lsr.w	r7, r3, r7
 800d62c:	4207      	tst	r7, r0
 800d62e:	d0f3      	beq.n	800d618 <floor+0x98>
 800d630:	a30f      	add	r3, pc, #60	; (adr r3, 800d670 <floor+0xf0>)
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	f7f2 fe49 	bl	80002cc <__adddf3>
 800d63a:	2200      	movs	r2, #0
 800d63c:	2300      	movs	r3, #0
 800d63e:	f7f3 fa8b 	bl	8000b58 <__aeabi_dcmpgt>
 800d642:	2800      	cmp	r0, #0
 800d644:	d0bf      	beq.n	800d5c6 <floor+0x46>
 800d646:	2c00      	cmp	r4, #0
 800d648:	da02      	bge.n	800d650 <floor+0xd0>
 800d64a:	2e14      	cmp	r6, #20
 800d64c:	d103      	bne.n	800d656 <floor+0xd6>
 800d64e:	3401      	adds	r4, #1
 800d650:	ea25 0507 	bic.w	r5, r5, r7
 800d654:	e7b7      	b.n	800d5c6 <floor+0x46>
 800d656:	2301      	movs	r3, #1
 800d658:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d65c:	fa03 f606 	lsl.w	r6, r3, r6
 800d660:	4435      	add	r5, r6
 800d662:	4545      	cmp	r5, r8
 800d664:	bf38      	it	cc
 800d666:	18e4      	addcc	r4, r4, r3
 800d668:	e7f2      	b.n	800d650 <floor+0xd0>
 800d66a:	2500      	movs	r5, #0
 800d66c:	462c      	mov	r4, r5
 800d66e:	e7aa      	b.n	800d5c6 <floor+0x46>
 800d670:	8800759c 	.word	0x8800759c
 800d674:	7e37e43c 	.word	0x7e37e43c
 800d678:	bff00000 	.word	0xbff00000
 800d67c:	000fffff 	.word	0x000fffff

0800d680 <scalbn>:
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	ec55 4b10 	vmov	r4, r5, d0
 800d686:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d68a:	4606      	mov	r6, r0
 800d68c:	462b      	mov	r3, r5
 800d68e:	b99a      	cbnz	r2, 800d6b8 <scalbn+0x38>
 800d690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d694:	4323      	orrs	r3, r4
 800d696:	d036      	beq.n	800d706 <scalbn+0x86>
 800d698:	4b39      	ldr	r3, [pc, #228]	; (800d780 <scalbn+0x100>)
 800d69a:	4629      	mov	r1, r5
 800d69c:	ee10 0a10 	vmov	r0, s0
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f7f2 ffc9 	bl	8000638 <__aeabi_dmul>
 800d6a6:	4b37      	ldr	r3, [pc, #220]	; (800d784 <scalbn+0x104>)
 800d6a8:	429e      	cmp	r6, r3
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	460d      	mov	r5, r1
 800d6ae:	da10      	bge.n	800d6d2 <scalbn+0x52>
 800d6b0:	a32b      	add	r3, pc, #172	; (adr r3, 800d760 <scalbn+0xe0>)
 800d6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b6:	e03a      	b.n	800d72e <scalbn+0xae>
 800d6b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d6bc:	428a      	cmp	r2, r1
 800d6be:	d10c      	bne.n	800d6da <scalbn+0x5a>
 800d6c0:	ee10 2a10 	vmov	r2, s0
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	f7f2 fe00 	bl	80002cc <__adddf3>
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	460d      	mov	r5, r1
 800d6d0:	e019      	b.n	800d706 <scalbn+0x86>
 800d6d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	3a36      	subs	r2, #54	; 0x36
 800d6da:	4432      	add	r2, r6
 800d6dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d6e0:	428a      	cmp	r2, r1
 800d6e2:	dd08      	ble.n	800d6f6 <scalbn+0x76>
 800d6e4:	2d00      	cmp	r5, #0
 800d6e6:	a120      	add	r1, pc, #128	; (adr r1, 800d768 <scalbn+0xe8>)
 800d6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ec:	da1c      	bge.n	800d728 <scalbn+0xa8>
 800d6ee:	a120      	add	r1, pc, #128	; (adr r1, 800d770 <scalbn+0xf0>)
 800d6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f4:	e018      	b.n	800d728 <scalbn+0xa8>
 800d6f6:	2a00      	cmp	r2, #0
 800d6f8:	dd08      	ble.n	800d70c <scalbn+0x8c>
 800d6fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d702:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d706:	ec45 4b10 	vmov	d0, r4, r5
 800d70a:	bd70      	pop	{r4, r5, r6, pc}
 800d70c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d710:	da19      	bge.n	800d746 <scalbn+0xc6>
 800d712:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d716:	429e      	cmp	r6, r3
 800d718:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d71c:	dd0a      	ble.n	800d734 <scalbn+0xb4>
 800d71e:	a112      	add	r1, pc, #72	; (adr r1, 800d768 <scalbn+0xe8>)
 800d720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e2      	bne.n	800d6ee <scalbn+0x6e>
 800d728:	a30f      	add	r3, pc, #60	; (adr r3, 800d768 <scalbn+0xe8>)
 800d72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72e:	f7f2 ff83 	bl	8000638 <__aeabi_dmul>
 800d732:	e7cb      	b.n	800d6cc <scalbn+0x4c>
 800d734:	a10a      	add	r1, pc, #40	; (adr r1, 800d760 <scalbn+0xe0>)
 800d736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d0b8      	beq.n	800d6b0 <scalbn+0x30>
 800d73e:	a10e      	add	r1, pc, #56	; (adr r1, 800d778 <scalbn+0xf8>)
 800d740:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d744:	e7b4      	b.n	800d6b0 <scalbn+0x30>
 800d746:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d74a:	3236      	adds	r2, #54	; 0x36
 800d74c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d750:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d754:	4620      	mov	r0, r4
 800d756:	4b0c      	ldr	r3, [pc, #48]	; (800d788 <scalbn+0x108>)
 800d758:	2200      	movs	r2, #0
 800d75a:	e7e8      	b.n	800d72e <scalbn+0xae>
 800d75c:	f3af 8000 	nop.w
 800d760:	c2f8f359 	.word	0xc2f8f359
 800d764:	01a56e1f 	.word	0x01a56e1f
 800d768:	8800759c 	.word	0x8800759c
 800d76c:	7e37e43c 	.word	0x7e37e43c
 800d770:	8800759c 	.word	0x8800759c
 800d774:	fe37e43c 	.word	0xfe37e43c
 800d778:	c2f8f359 	.word	0xc2f8f359
 800d77c:	81a56e1f 	.word	0x81a56e1f
 800d780:	43500000 	.word	0x43500000
 800d784:	ffff3cb0 	.word	0xffff3cb0
 800d788:	3c900000 	.word	0x3c900000

0800d78c <_init>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	bf00      	nop
 800d790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d792:	bc08      	pop	{r3}
 800d794:	469e      	mov	lr, r3
 800d796:	4770      	bx	lr

0800d798 <_fini>:
 800d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79a:	bf00      	nop
 800d79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79e:	bc08      	pop	{r3}
 800d7a0:	469e      	mov	lr, r3
 800d7a2:	4770      	bx	lr
