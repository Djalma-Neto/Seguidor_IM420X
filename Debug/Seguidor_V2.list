
Seguidor_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac38  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800ae18  0800ae18  0001ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b04c  0800b04c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b054  0800b054  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b054  0800b054  0001b054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800b05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002590  20000084  0800b0e0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002614  0800b0e0  00022614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021107  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fdd  00000000  00000000  000411bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  00045198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00046ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296ef  00000000  00000000  00048290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d46f  00000000  00000000  0007197f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107197  00000000  00000000  0008edee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195f85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  00195fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae00 	.word	0x0800ae00

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	0800ae00 	.word	0x0800ae00

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000e04:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_FREERTOS_Init+0x78>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f006 f92e 	bl	800706a <osSemaphoreNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <MX_FREERTOS_Init+0x7c>)
 8000e12:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <MX_FREERTOS_Init+0x80>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f006 f926 	bl	800706a <osSemaphoreNew>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_FREERTOS_Init+0x84>)
 8000e22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <MX_FREERTOS_Init+0x88>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4818      	ldr	r0, [pc, #96]	; (8000e8c <MX_FREERTOS_Init+0x8c>)
 8000e2a:	f006 f871 	bl	8006f10 <osThreadNew>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <MX_FREERTOS_Init+0x90>)
 8000e32:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <MX_FREERTOS_Init+0x94>)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <MX_FREERTOS_Init+0x98>)
 8000e3a:	f006 f869 	bl	8006f10 <osThreadNew>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <MX_FREERTOS_Init+0x9c>)
 8000e42:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <MX_FREERTOS_Init+0xa0>)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <MX_FREERTOS_Init+0xa4>)
 8000e4a:	f006 f861 	bl	8006f10 <osThreadNew>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <MX_FREERTOS_Init+0xa8>)
 8000e52:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000e54:	4a15      	ldr	r2, [pc, #84]	; (8000eac <MX_FREERTOS_Init+0xac>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <MX_FREERTOS_Init+0xb0>)
 8000e5a:	f006 f859 	bl	8006f10 <osThreadNew>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <MX_FREERTOS_Init+0xb4>)
 8000e62:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <MX_FREERTOS_Init+0xb8>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_FREERTOS_Init+0xbc>)
 8000e6a:	f006 f851 	bl	8006f10 <osThreadNew>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <MX_FREERTOS_Init+0xc0>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	0800af58 	.word	0x0800af58
 8000e7c:	20000148 	.word	0x20000148
 8000e80:	0800af68 	.word	0x0800af68
 8000e84:	2000014c 	.word	0x2000014c
 8000e88:	0800aea4 	.word	0x0800aea4
 8000e8c:	08000ec5 	.word	0x08000ec5
 8000e90:	20000134 	.word	0x20000134
 8000e94:	0800aec8 	.word	0x0800aec8
 8000e98:	08000f15 	.word	0x08000f15
 8000e9c:	20000138 	.word	0x20000138
 8000ea0:	0800aeec 	.word	0x0800aeec
 8000ea4:	08000fb9 	.word	0x08000fb9
 8000ea8:	2000013c 	.word	0x2000013c
 8000eac:	0800af10 	.word	0x0800af10
 8000eb0:	080011d5 	.word	0x080011d5
 8000eb4:	20000140 	.word	0x20000140
 8000eb8:	0800af34 	.word	0x0800af34
 8000ebc:	080012c5 	.word	0x080012c5
 8000ec0:	20000144 	.word	0x20000144

08000ec4 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000ed0:	f003 f876 	bl	8003fc0 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
	for(;;)
	{
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <FunctionUltrassom+0x4c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0208 	orr.w	r2, r2, #8
 8000ee2:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f001 fd8d 	bl	8002a0c <HAL_GPIO_WritePin>
		osDelay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f006 f89e 	bl	8007034 <osDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f001 fd83 	bl	8002a0c <HAL_GPIO_WritePin>
		osDelay(200);
 8000f06:	20c8      	movs	r0, #200	; 0xc8
 8000f08:	f006 f894 	bl	8007034 <osDelay>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8000f0c:	e7e2      	b.n	8000ed4 <FunctionUltrassom+0x10>
 8000f0e:	bf00      	nop
 8000f10:	20000154 	.word	0x20000154

08000f14 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
	//HAL_UART_Receive_IT(&huart1, &rxData, 100);
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(HC05_EN_GPIO_Port, HC05_EN_Pin, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	481e      	ldr	r0, [pc, #120]	; (8000f9c <FunctionComunica+0x88>)
 8000f24:	f001 fd72 	bl	8002a0c <HAL_GPIO_WritePin>
	  //sprintf(mostrar,"D: %d, V1: %d, V2: %d, DIF: %d \r \n ",(int)distancia,(int)valor1,(int)valor2,(int)diferenca);
	  //sprintf(cMostrar,"S2: %d, S3: %d, S4: %d \r \n ",(int)uiS2,(int)uiS3,(int)uiS4);
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <FunctionComunica+0x8c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	21c8      	movs	r1, #200	; 0xc8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 f924 	bl	800717c <osSemaphoreAcquire>
	  int valor1 = (int)ulDistancia;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <FunctionComunica+0x90>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3e:	ee17 3a90 	vmov	r3, s15
 8000f42:	60fb      	str	r3, [r7, #12]
	  int valor2 = (ulDistancia-(int)ulDistancia)*100;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <FunctionComunica+0x90>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <FunctionComunica+0x90>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000fa8 <FunctionComunica+0x94>
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f68:	ee17 3a90 	vmov	r3, s15
 8000f6c:	60bb      	str	r3, [r7, #8]

	  sprintf(cMostrar,"Dis: %d.%02d \r \n ",valor1,valor2);
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <FunctionComunica+0x98>)
 8000f74:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <FunctionComunica+0x9c>)
 8000f76:	f009 fb89 	bl	800a68c <siprintf>

	  //sprintf(cMostrar, "motor_E/RPM: %d, motor_D/RPM: %d \r \n",(int)ulRpmE,(int)ulRpmD);

	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	2264      	movs	r2, #100	; 0x64
 8000f7e:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <FunctionComunica+0x9c>)
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <FunctionComunica+0xa0>)
 8000f82:	f004 fcff 	bl	8005984 <HAL_UART_Transmit>

	  //HAL_UART_Transmit(&hlpuart1, (uint8_t*)rxData, sizeof(rxData), 100);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);

	  osSemaphoreRelease(SemaphoreComunicaHandle);
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <FunctionComunica+0x8c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 f948 	bl	8007220 <osSemaphoreRelease>
	  osDelay(500);
 8000f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f94:	f006 f84e 	bl	8007034 <osDelay>
  {
 8000f98:	e7c0      	b.n	8000f1c <FunctionComunica+0x8>
 8000f9a:	bf00      	nop
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	2000014c 	.word	0x2000014c
 8000fa4:	200000ac 	.word	0x200000ac
 8000fa8:	42c80000 	.word	0x42c80000
 8000fac:	0800ae78 	.word	0x0800ae78
 8000fb0:	200000d0 	.word	0x200000d0
 8000fb4:	200002d0 	.word	0x200002d0

08000fb8 <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8000fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f001 fd08 	bl	80029dc <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4878      	ldr	r0, [pc, #480]	; (80011b4 <FunctionSeguidor+0x1fc>)
 8000fd4:	f001 fd02 	bl	80029dc <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	4875      	ldr	r0, [pc, #468]	; (80011b4 <FunctionSeguidor+0x1fc>)
 8000fe0:	f001 fcfc 	bl	80029dc <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	737b      	strb	r3, [r7, #13]

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8000fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fec:	4871      	ldr	r0, [pc, #452]	; (80011b4 <FunctionSeguidor+0x1fc>)
 8000fee:	f001 fcf5 	bl	80029dc <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 8000ff6:	4b70      	ldr	r3, [pc, #448]	; (80011b8 <FunctionSeguidor+0x200>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	21c8      	movs	r1, #200	; 0xc8
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 f8bd 	bl	800717c <osSemaphoreAcquire>

    if(uiBTN){
 8001002:	7b3b      	ldrb	r3, [r7, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d022      	beq.n	800104e <FunctionSeguidor+0x96>
    	uiVelocidadeRefD = 1;
 8001008:	4b6c      	ldr	r3, [pc, #432]	; (80011bc <FunctionSeguidor+0x204>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefE = 1;
 800100e:	4b6c      	ldr	r3, [pc, #432]	; (80011c0 <FunctionSeguidor+0x208>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
    	uiStart = uiStart?0:1;
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <FunctionSeguidor+0x20c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <FunctionSeguidor+0x20c>)
 8001026:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2104      	movs	r1, #4
 800102c:	4866      	ldr	r0, [pc, #408]	; (80011c8 <FunctionSeguidor+0x210>)
 800102e:	f001 fced 	bl	8002a0c <HAL_GPIO_WritePin>
    	osDelay(500);
 8001032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001036:	f005 fffd 	bl	8007034 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2104      	movs	r1, #4
 800103e:	4862      	ldr	r0, [pc, #392]	; (80011c8 <FunctionSeguidor+0x210>)
 8001040:	f001 fce4 	bl	8002a0c <HAL_GPIO_WritePin>
    	osDelay(500);
 8001044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001048:	f005 fff4 	bl	8007034 <osDelay>
 800104c:	e0a9      	b.n	80011a2 <FunctionSeguidor+0x1ea>
    }else if(uiS2 && !uiS3 && uiS4 && uiStart){
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d014      	beq.n	800107e <FunctionSeguidor+0xc6>
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d111      	bne.n	800107e <FunctionSeguidor+0xc6>
 800105a:	7b7b      	ldrb	r3, [r7, #13]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <FunctionSeguidor+0xc6>
 8001060:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <FunctionSeguidor+0x20c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00a      	beq.n	800107e <FunctionSeguidor+0xc6>
    	uiVelocidadeRefD = uiVelocidade;
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <FunctionSeguidor+0x214>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <FunctionSeguidor+0x204>)
 8001070:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefE = uiVelocidade;
 8001072:	4b56      	ldr	r3, [pc, #344]	; (80011cc <FunctionSeguidor+0x214>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <FunctionSeguidor+0x208>)
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e091      	b.n	80011a2 <FunctionSeguidor+0x1ea>
    }else if(uiS2 && uiS3 && !uiS4 && uiStart){
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d028      	beq.n	80010d6 <FunctionSeguidor+0x11e>
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d025      	beq.n	80010d6 <FunctionSeguidor+0x11e>
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d122      	bne.n	80010d6 <FunctionSeguidor+0x11e>
 8001090:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <FunctionSeguidor+0x20c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d01e      	beq.n	80010d6 <FunctionSeguidor+0x11e>
    	uiVelocidadeRefE = uiVelocidade;
 8001098:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <FunctionSeguidor+0x214>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <FunctionSeguidor+0x208>)
 80010a0:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefD = uiVelocidade-(uiVelocidade*fReducao);
 80010a2:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <FunctionSeguidor+0x214>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <FunctionSeguidor+0x214>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010ba:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <FunctionSeguidor+0x218>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010cc:	ee17 2a90 	vmov	r2, s15
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <FunctionSeguidor+0x204>)
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e065      	b.n	80011a2 <FunctionSeguidor+0x1ea>
    }else if(!uiS2 && uiS3 && uiS4 && uiStart){
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d128      	bne.n	800112e <FunctionSeguidor+0x176>
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d025      	beq.n	800112e <FunctionSeguidor+0x176>
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d022      	beq.n	800112e <FunctionSeguidor+0x176>
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <FunctionSeguidor+0x20c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01e      	beq.n	800112e <FunctionSeguidor+0x176>
    	uiVelocidadeRefE = uiVelocidade-(uiVelocidade*fReducao);
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <FunctionSeguidor+0x214>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fc:	4b33      	ldr	r3, [pc, #204]	; (80011cc <FunctionSeguidor+0x214>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <FunctionSeguidor+0x218>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111a:	ee17 2a90 	vmov	r2, s15
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <FunctionSeguidor+0x208>)
 8001120:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefD = uiVelocidade;
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <FunctionSeguidor+0x214>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <FunctionSeguidor+0x204>)
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e039      	b.n	80011a2 <FunctionSeguidor+0x1ea>
    }else if(((uiS2 && !uiS3 && uiS4)) && uiStart){
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d010      	beq.n	8001156 <FunctionSeguidor+0x19e>
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <FunctionSeguidor+0x19e>
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00a      	beq.n	8001156 <FunctionSeguidor+0x19e>
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <FunctionSeguidor+0x20c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <FunctionSeguidor+0x19e>
    	uiVelocidadeRefD = 1;
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <FunctionSeguidor+0x204>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
    	uiVelocidadeRefE = 1;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <FunctionSeguidor+0x208>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e025      	b.n	80011a2 <FunctionSeguidor+0x1ea>
    } else if(!uiS2 && !uiS3 && !uiS4 && uiStart){
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d122      	bne.n	80011a2 <FunctionSeguidor+0x1ea>
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d11f      	bne.n	80011a2 <FunctionSeguidor+0x1ea>
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d11c      	bne.n	80011a2 <FunctionSeguidor+0x1ea>
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <FunctionSeguidor+0x20c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d018      	beq.n	80011a2 <FunctionSeguidor+0x1ea>
    	uiVelocidadeRefD = 1;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <FunctionSeguidor+0x204>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
		uiVelocidadeRefE = 1;
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <FunctionSeguidor+0x208>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
		uiStart = 0;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <FunctionSeguidor+0x20c>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	2104      	movs	r1, #4
 8001186:	4810      	ldr	r0, [pc, #64]	; (80011c8 <FunctionSeguidor+0x210>)
 8001188:	f001 fc40 	bl	8002a0c <HAL_GPIO_WritePin>
    	osDelay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f005 ff51 	bl	8007034 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2104      	movs	r1, #4
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <FunctionSeguidor+0x210>)
 8001198:	f001 fc38 	bl	8002a0c <HAL_GPIO_WritePin>
    	osDelay(100);
 800119c:	2064      	movs	r0, #100	; 0x64
 800119e:	f005 ff49 	bl	8007034 <osDelay>
    }
    osDelay(100);
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f005 ff46 	bl	8007034 <osDelay>
    osSemaphoreRelease(SemaphoreMovimentaHandle);
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <FunctionSeguidor+0x200>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 f837 	bl	8007220 <osSemaphoreRelease>
  {
 80011b2:	e705      	b.n	8000fc0 <FunctionSeguidor+0x8>
 80011b4:	48000800 	.word	0x48000800
 80011b8:	20000148 	.word	0x20000148
 80011bc:	200000b0 	.word	0x200000b0
 80011c0:	200000b4 	.word	0x200000b4
 80011c4:	200000cc 	.word	0x200000cc
 80011c8:	48000c00 	.word	0x48000c00
 80011cc:	20000004 	.word	0x20000004
 80011d0:	2000000c 	.word	0x2000000c

080011d4 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011dc:	2100      	movs	r1, #0
 80011de:	4831      	ldr	r0, [pc, #196]	; (80012a4 <FunctionAtivarMotores+0xd0>)
 80011e0:	f002 fd84 	bl	8003cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011e4:	2104      	movs	r1, #4
 80011e6:	482f      	ldr	r0, [pc, #188]	; (80012a4 <FunctionAtivarMotores+0xd0>)
 80011e8:	f002 fd80 	bl	8003cec <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <FunctionAtivarMotores+0xd4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	21c8      	movs	r1, #200	; 0xc8
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 ffc2 	bl	800717c <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f001 fc03 	bl	8002a0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f001 fbfc 	bl	8002a0c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	4824      	ldr	r0, [pc, #144]	; (80012ac <FunctionAtivarMotores+0xd8>)
 800121a:	f001 fbf7 	bl	8002a0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	2140      	movs	r1, #64	; 0x40
 8001222:	4823      	ldr	r0, [pc, #140]	; (80012b0 <FunctionAtivarMotores+0xdc>)
 8001224:	f001 fbf2 	bl	8002a0c <HAL_GPIO_WritePin>

	  // htim3.Instance->CCR1 = PID(uiVelocidadeRefE, ulRpmE);
	  // htim3.Instance->CCR2 = PID(uiVelocidadeRefD, ulRpmD);

	  htim3.Instance->CCR1 = uiVelocidadeRefE+(uiVelocidadeRefE*fCalibragemE);
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <FunctionAtivarMotores+0xe0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <FunctionAtivarMotores+0xe0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <FunctionAtivarMotores+0xe4>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <FunctionAtivarMotores+0xd0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001256:	ee17 2a90 	vmov	r2, s15
 800125a:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = uiVelocidadeRefD+(uiVelocidadeRefD*fCalibragemD);
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <FunctionAtivarMotores+0xe8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <FunctionAtivarMotores+0xe8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <FunctionAtivarMotores+0xec>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <FunctionAtivarMotores+0xd0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800128a:	ee17 2a90 	vmov	r2, s15
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
	  //htim3.Instance->CCR1 = 0;
	  //htim3.Instance->CCR2 = uiVelocidadeRefD+2;

	  //htim3.Instance->CCR1 = 85;
	  //htim3.Instance->CCR2 = 85;
	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <FunctionAtivarMotores+0xd4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f005 ffc3 	bl	8007220 <osSemaphoreRelease>
	  osDelay(200);
 800129a:	20c8      	movs	r0, #200	; 0xc8
 800129c:	f005 feca 	bl	8007034 <osDelay>
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80012a0:	e7a4      	b.n	80011ec <FunctionAtivarMotores+0x18>
 80012a2:	bf00      	nop
 80012a4:	200001ec 	.word	0x200001ec
 80012a8:	20000148 	.word	0x20000148
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000400 	.word	0x48000400
 80012b4:	200000b4 	.word	0x200000b4
 80012b8:	200000b8 	.word	0x200000b8
 80012bc:	200000b0 	.word	0x200000b0
 80012c0:	20000008 	.word	0x20000008

080012c4 <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80012cc:	2100      	movs	r1, #0
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <FunctionOdometria+0x28>)
 80012d0:	f002 fe76 	bl	8003fc0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80012d4:	2104      	movs	r1, #4
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <FunctionOdometria+0x28>)
 80012d8:	f002 fe72 	bl	8003fc0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <FunctionOdometria+0x2c>)
 80012de:	f002 fc2b 	bl	8003b38 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f005 fea6 	bl	8007034 <osDelay>
 80012e8:	e7fb      	b.n	80012e2 <FunctionOdometria+0x1e>
 80012ea:	bf00      	nop
 80012ec:	20000238 	.word	0x20000238
 80012f0:	20000284 	.word	0x20000284
 80012f4:	00000000 	.word	0x00000000

080012f8 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){//ultrassonico
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a59      	ldr	r2, [pc, #356]	; (8001468 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001304:	4293      	cmp	r3, r2
 8001306:	f040 808b 	bne.w	8001420 <HAL_TIM_IC_CaptureCallback+0x128>
		if(uiIs_First){
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <HAL_TIM_IC_CaptureCallback+0x174>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01b      	beq.n	800134a <HAL_TIM_IC_CaptureCallback+0x52>
			ulValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001312:	2108      	movs	r1, #8
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f003 fbe9 	bl	8004aec <HAL_TIM_ReadCapturedValue>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001320:	601a      	str	r2, [r3, #0]
			uiIs_First=0;
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <HAL_TIM_IC_CaptureCallback+0x174>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a1a      	ldr	r2, [r3, #32]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001336:	621a      	str	r2, [r3, #32]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001346:	621a      	str	r2, [r3, #32]
 8001348:	e06a      	b.n	8001420 <HAL_TIM_IC_CaptureCallback+0x128>
		}else{
			ulValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800134a:	2108      	movs	r1, #8
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f003 fbcd 	bl	8004aec <HAL_TIM_ReadCapturedValue>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001358:	601a      	str	r2, [r3, #0]
			uiIs_First=1;
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <HAL_TIM_IC_CaptureCallback+0x174>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]

			iDiferenca = (float)((unsigned)ulValor2-(unsigned)ulValor1);
 8001360:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001374:	4b40      	ldr	r3, [pc, #256]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001376:	edc3 7a00 	vstr	s15, [r3]
			iDiferenca = (iDiferenca/2)*0.0001;
 800137a:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x180>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001384:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001388:	ee16 0a90 	vmov	r0, s13
 800138c:	f7ff f8fc 	bl	8000588 <__aeabi_f2d>
 8001390:	a333      	add	r3, pc, #204	; (adr r3, 8001460 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f94f 	bl	8000638 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb5b 	bl	8000a5c <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a33      	ldr	r2, [pc, #204]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x180>)
 80013aa:	6013      	str	r3, [r2, #0]
			ulDistancia = (iDiferenca*340)/2>100?ulDistancia:(iDiferenca*340)/2;
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x180>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800147c <HAL_TIM_IC_CaptureCallback+0x184>
 80013b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001480 <HAL_TIM_IC_CaptureCallback+0x188>
 80013c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	dd03      	ble.n	80013d8 <HAL_TIM_IC_CaptureCallback+0xe0>
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	e00a      	b.n	80013ee <HAL_TIM_IC_CaptureCallback+0xf6>
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_TIM_IC_CaptureCallback+0x180>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800147c <HAL_TIM_IC_CaptureCallback+0x184>
 80013e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80013f0:	edc3 7a00 	vstr	s15, [r3]

			//ulDistancia = ((((float)iDiferenca/100000)*340)/2);
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001402:	621a      	str	r2, [r3, #32]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a12      	ldr	r2, [r2, #32]
 800140e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0208 	bic.w	r2, r2, #8
 800141e:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){//encoder Esquerdo
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d108      	bne.n	800143a <HAL_TIM_IC_CaptureCallback+0x142>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7f1b      	ldrb	r3, [r3, #28]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d104      	bne.n	800143a <HAL_TIM_IC_CaptureCallback+0x142>
		ulPulsePerSecondE++;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_TIM_IC_CaptureCallback+0x194>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a15      	ldr	r2, [pc, #84]	; (800148c <HAL_TIM_IC_CaptureCallback+0x194>)
 8001438:	6013      	str	r3, [r2, #0]
	}
	if(htim == &htim4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){//encoder Direito
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a12      	ldr	r2, [pc, #72]	; (8001488 <HAL_TIM_IC_CaptureCallback+0x190>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d108      	bne.n	8001454 <HAL_TIM_IC_CaptureCallback+0x15c>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7f1b      	ldrb	r3, [r3, #28]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d104      	bne.n	8001454 <HAL_TIM_IC_CaptureCallback+0x15c>
		ulPulsePerSecondD++;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_TIM_IC_CaptureCallback+0x198>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001452:	6013      	str	r3, [r2, #0]
	}
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	f3af 8000 	nop.w
 8001460:	eb1c432d 	.word	0xeb1c432d
 8001464:	3f1a36e2 	.word	0x3f1a36e2
 8001468:	20000154 	.word	0x20000154
 800146c:	20000000 	.word	0x20000000
 8001470:	200000a0 	.word	0x200000a0
 8001474:	200000a4 	.word	0x200000a4
 8001478:	200000a8 	.word	0x200000a8
 800147c:	43aa0000 	.word	0x43aa0000
 8001480:	42c80000 	.word	0x42c80000
 8001484:	200000ac 	.word	0x200000ac
 8001488:	20000238 	.word	0x20000238
 800148c:	200000bc 	.word	0x200000bc
 8001490:	200000c4 	.word	0x200000c4

08001494 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d117      	bne.n	80014d4 <HAL_TIM_PeriodElapsedCallback+0x40>
		ulRpmE = ulPulsePerSecondE;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014b2:	edc3 7a00 	vstr	s15, [r3]
		ulRpmD = ulPulsePerSecondD;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80014c4:	edc3 7a00 	vstr	s15, [r3]
		//HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);

		ulPulsePerSecondE = 0;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
		ulPulsePerSecondD = 0;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
	}
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	20000284 	.word	0x20000284
 80014e4:	200000bc 	.word	0x200000bc
 80014e8:	200000c0 	.word	0x200000c0
 80014ec:	200000c4 	.word	0x200000c4
 80014f0:	200000c8 	.word	0x200000c8

080014f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b50      	ldr	r3, [pc, #320]	; (800164c <MX_GPIO_Init+0x158>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a4f      	ldr	r2, [pc, #316]	; (800164c <MX_GPIO_Init+0x158>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b4d      	ldr	r3, [pc, #308]	; (800164c <MX_GPIO_Init+0x158>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b4a      	ldr	r3, [pc, #296]	; (800164c <MX_GPIO_Init+0x158>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a49      	ldr	r2, [pc, #292]	; (800164c <MX_GPIO_Init+0x158>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <MX_GPIO_Init+0x158>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <MX_GPIO_Init+0x158>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a43      	ldr	r2, [pc, #268]	; (800164c <MX_GPIO_Init+0x158>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <MX_GPIO_Init+0x158>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4b3e      	ldr	r3, [pc, #248]	; (800164c <MX_GPIO_Init+0x158>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a3d      	ldr	r2, [pc, #244]	; (800164c <MX_GPIO_Init+0x158>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <MX_GPIO_Init+0x158>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f248 3120 	movw	r1, #33568	; 0x8320
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f001 fa4a 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4834      	ldr	r0, [pc, #208]	; (8001650 <MX_GPIO_Init+0x15c>)
 800157e:	f001 fa45 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2104      	movs	r1, #4
 8001586:	4833      	ldr	r0, [pc, #204]	; (8001654 <MX_GPIO_Init+0x160>)
 8001588:	f001 fa40 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001592:	4831      	ldr	r0, [pc, #196]	; (8001658 <MX_GPIO_Init+0x164>)
 8001594:	f001 fa3a 	bl	8002a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|GPIO_PIN_8
 8001598:	f242 3360 	movw	r3, #9056	; 0x2360
 800159c:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4828      	ldr	r0, [pc, #160]	; (8001650 <MX_GPIO_Init+0x15c>)
 80015ae:	f001 f893 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin;
 80015b2:	f248 3320 	movw	r3, #33568	; 0x8320
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f001 f883 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4819      	ldr	r0, [pc, #100]	; (8001650 <MX_GPIO_Init+0x15c>)
 80015ea:	f001 f875 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f001 f867 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800160a:	2304      	movs	r3, #4
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0x160>)
 8001622:	f001 f859 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin;
 8001626:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_GPIO_Init+0x164>)
 8001640:	f001 f84a 	bl	80026d8 <HAL_GPIO_Init>

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	48000800 	.word	0x48000800
 8001654:	48000c00 	.word	0x48000c00
 8001658:	48000400 	.word	0x48000400

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f000 fdf9 	bl	8002256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f817 	bl	8001696 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f7ff ff44 	bl	80014f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800166c:	f000 f936 	bl	80018dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001670:	f000 f9aa 	bl	80019c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001674:	f000 f9f6 	bl	8001a64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001678:	f000 fa76 	bl	8001b68 <MX_TIM4_Init>
  MX_TIM6_Init();
 800167c:	f000 fad4 	bl	8001c28 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001680:	f000 fc92 	bl	8001fa8 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8001684:	f000 fc46 	bl	8001f14 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001688:	f005 fbf8 	bl	8006e7c <osKernelInitialize>
  MX_FREERTOS_Init();
 800168c:	f7ff fbb8 	bl	8000e00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001690:	f005 fc18 	bl	8006ec4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001694:	e7fe      	b.n	8001694 <main+0x38>

08001696 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b094      	sub	sp, #80	; 0x50
 800169a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	2238      	movs	r2, #56	; 0x38
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f008 fedb 	bl	800a460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016bc:	f001 f9be 	bl	8002a3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	2302      	movs	r3, #2
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016d2:	2302      	movs	r3, #2
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80016da:	2319      	movs	r3, #25
 80016dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016de:	2302      	movs	r3, #2
 80016e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 fa48 	bl	8002b84 <HAL_RCC_OscConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x68>
  {
    Error_Handler();
 80016fa:	f000 f819 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fe:	230f      	movs	r3, #15
 8001700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001702:	2303      	movs	r3, #3
 8001704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800170a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800170e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2103      	movs	r1, #3
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fd4b 	bl	80031b4 <HAL_RCC_ClockConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001724:	f000 f804 	bl	8001730 <Error_Handler>
  }
}
 8001728:	bf00      	nop
 800172a:	3750      	adds	r7, #80	; 0x50
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_MspInit+0x4c>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_MspInit+0x4c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_MspInit+0x4c>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_MspInit+0x4c>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_MspInit+0x4c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_MspInit+0x4c>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	210f      	movs	r1, #15
 8001776:	f06f 0001 	mvn.w	r0, #1
 800177a:	f000 feb8 	bl	80024ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017bc:	f000 fd9e 	bl	80022fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017c0:	f007 fcb0 	bl	8009124 <xTaskGetSchedulerState>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d001      	beq.n	80017ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80017ca:	f008 fb95 	bl	8009ef8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM1_CC_IRQHandler+0x10>)
 80017da:	f002 fd41 	bl	8004260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000154 	.word	0x20000154

080017e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM2_IRQHandler+0x10>)
 80017ee:	f002 fd37 	bl	8004260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001a0 	.word	0x200001a0

080017fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM3_IRQHandler+0x10>)
 8001802:	f002 fd2d 	bl	8004260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001ec 	.word	0x200001ec

08001810 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM4_IRQHandler+0x10>)
 8001816:	f002 fd23 	bl	8004260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000238 	.word	0x20000238

08001824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <USART1_IRQHandler+0x10>)
 800182a:	f004 f941 	bl	8005ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000360 	.word	0x20000360

08001838 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <TIM6_DAC_IRQHandler+0x10>)
 800183e:	f002 fd0f 	bl	8004260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000284 	.word	0x20000284

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f008 fdb6 	bl	800a3ec <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20020000 	.word	0x20020000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	20000150 	.word	0x20000150
 80018b4:	20002618 	.word	0x20002618

080018b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <MX_TIM1_Init+0xe4>)
 800190a:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <MX_TIM1_Init+0xe8>)
 800190c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800190e:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <MX_TIM1_Init+0xe4>)
 8001910:	2231      	movs	r2, #49	; 0x31
 8001912:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <MX_TIM1_Init+0xe4>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800191a:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <MX_TIM1_Init+0xe4>)
 800191c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001920:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <MX_TIM1_Init+0xe4>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <MX_TIM1_Init+0xe4>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <MX_TIM1_Init+0xe4>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001934:	4822      	ldr	r0, [pc, #136]	; (80019c0 <MX_TIM1_Init+0xe4>)
 8001936:	f002 f8a7 	bl	8003a88 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001940:	f7ff fef6 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	4619      	mov	r1, r3
 8001950:	481b      	ldr	r0, [pc, #108]	; (80019c0 <MX_TIM1_Init+0xe4>)
 8001952:	f002 ffb5 	bl	80048c0 <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800195c:	f7ff fee8 	bl	8001730 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001960:	4817      	ldr	r0, [pc, #92]	; (80019c0 <MX_TIM1_Init+0xe4>)
 8001962:	f002 fad5 	bl	8003f10 <HAL_TIM_IC_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800196c:	f7ff fee0 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	480f      	ldr	r0, [pc, #60]	; (80019c0 <MX_TIM1_Init+0xe4>)
 8001984:	f003 fed2 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800198e:	f7ff fecf 	bl	8001730 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001996:	2301      	movs	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2208      	movs	r2, #8
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_TIM1_Init+0xe4>)
 80019aa:	f002 fdd8 	bl	800455e <HAL_TIM_IC_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80019b4:	f7ff febc 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	3730      	adds	r7, #48	; 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000154 	.word	0x20000154
 80019c4:	40012c00 	.word	0x40012c00

080019c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <MX_TIM2_Init+0x98>)
 80019e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125-1;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_TIM2_Init+0x98>)
 80019f0:	227c      	movs	r2, #124	; 0x7c
 80019f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_TIM2_Init+0x98>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_TIM2_Init+0x98>)
 80019fc:	f240 128f 	movw	r2, #399	; 0x18f
 8001a00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_TIM2_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <MX_TIM2_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a0e:	4814      	ldr	r0, [pc, #80]	; (8001a60 <MX_TIM2_Init+0x98>)
 8001a10:	f002 f83a 	bl	8003a88 <HAL_TIM_Base_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a1a:	f7ff fe89 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_TIM2_Init+0x98>)
 8001a2c:	f002 ff48 	bl	80048c0 <HAL_TIM_ConfigClockSource>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a36:	f7ff fe7b 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <MX_TIM2_Init+0x98>)
 8001a48:	f003 fe70 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a52:	f7ff fe6d 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200001a0 	.word	0x200001a0

08001a64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	; 0x38
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]
 8001a94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001a98:	4a32      	ldr	r2, [pc, #200]	; (8001b64 <MX_TIM3_Init+0x100>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001a9e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001aac:	2263      	movs	r2, #99	; 0x63
 8001aae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001abc:	4828      	ldr	r0, [pc, #160]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001abe:	f001 ffe3 	bl	8003a88 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ac8:	f7ff fe32 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4821      	ldr	r0, [pc, #132]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001ada:	f002 fef1 	bl	80048c0 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ae4:	f7ff fe24 	bl	8001730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ae8:	481d      	ldr	r0, [pc, #116]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001aea:	f002 f89d 	bl	8003c28 <HAL_TIM_PWM_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001af4:	f7ff fe1c 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4816      	ldr	r0, [pc, #88]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001b08:	f003 fe10 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b12:	f7ff fe0d 	bl	8001730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b16:	2360      	movs	r3, #96	; 0x60
 8001b18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001b2e:	f002 fdb3 	bl	8004698 <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b38:	f7ff fdfa 	bl	8001730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2204      	movs	r2, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001b44:	f002 fda8 	bl	8004698 <HAL_TIM_PWM_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b4e:	f7ff fdef 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <MX_TIM3_Init+0xfc>)
 8001b54:	f000 f9a6 	bl	8001ea4 <HAL_TIM_MspPostInit>

}
 8001b58:	bf00      	nop
 8001b5a:	3738      	adds	r7, #56	; 0x38
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001ec 	.word	0x200001ec
 8001b64:	40000400 	.word	0x40000400

08001b68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <MX_TIM4_Init+0xbc>)
 8001b8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000-1;
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001b8e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001b9c:	22c7      	movs	r2, #199	; 0xc7
 8001b9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001bac:	481c      	ldr	r0, [pc, #112]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001bae:	f002 f9af 	bl	8003f10 <HAL_TIM_IC_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bb8:	f7ff fdba 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4815      	ldr	r0, [pc, #84]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001bcc:	f003 fdae 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001bd6:	f7ff fdab 	bl	8001730 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bde:	2301      	movs	r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001bf2:	f002 fcb4 	bl	800455e <HAL_TIM_IC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001bfc:	f7ff fd98 	bl	8001730 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2204      	movs	r2, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <MX_TIM4_Init+0xb8>)
 8001c08:	f002 fca9 	bl	800455e <HAL_TIM_IC_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001c12:	f7ff fd8d 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000238 	.word	0x20000238
 8001c24:	40000800 	.word	0x40000800

08001c28 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50000-1;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c40:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c4e:	22f9      	movs	r2, #249	; 0xf9
 8001c50:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c5a:	f001 ff15 	bl	8003a88 <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c64:	f7ff fd64 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c76:	f003 fd59 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c80:	f7ff fd56 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000284 	.word	0x20000284
 8001c90:	40001000 	.word	0x40001000

08001c94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <HAL_TIM_Base_MspInit+0x128>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d130      	bne.n	8001d18 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cb6:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cba:	4a41      	ldr	r2, [pc, #260]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a3b      	ldr	r2, [pc, #236]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4830      	ldr	r0, [pc, #192]	; (8001dc4 <HAL_TIM_Base_MspInit+0x130>)
 8001d02:	f000 fce9 	bl	80026d8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2105      	movs	r1, #5
 8001d0a:	201b      	movs	r0, #27
 8001d0c:	f000 fbef 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d10:	201b      	movs	r0, #27
 8001d12:	f000 fc06 	bl	8002522 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d16:	e04c      	b.n	8001db2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d20:	d114      	bne.n	8001d4c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d22:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2105      	movs	r1, #5
 8001d3e:	201c      	movs	r0, #28
 8001d40:	f000 fbd5 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d44:	201c      	movs	r0, #28
 8001d46:	f000 fbec 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 8001d4a:	e032      	b.n	8001db2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_TIM_Base_MspInit+0x134>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d114      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2105      	movs	r1, #5
 8001d72:	201d      	movs	r0, #29
 8001d74:	f000 fbbb 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d78:	201d      	movs	r0, #29
 8001d7a:	f000 fbd2 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 8001d7e:	e018      	b.n	8001db2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM6)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <HAL_TIM_Base_MspInit+0x138>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d113      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6593      	str	r3, [r2, #88]	; 0x58
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2105      	movs	r1, #5
 8001da6:	2036      	movs	r0, #54	; 0x36
 8001da8:	f000 fba1 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dac:	2036      	movs	r0, #54	; 0x36
 8001dae:	f000 fbb8 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3730      	adds	r7, #48	; 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40001000 	.word	0x40001000

08001dd0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <HAL_TIM_IC_MspInit+0xc8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d14d      	bne.n	8001e8e <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	4a29      	ldr	r2, [pc, #164]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a1d      	ldr	r2, [pc, #116]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_TIM_IC_MspInit+0xcc>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 8001e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f000 fc3d 	bl	80026d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_D_Pin;
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <HAL_TIM_IC_MspInit+0xd0>)
 8001e7a:	f000 fc2d 	bl	80026d8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2105      	movs	r1, #5
 8001e82:	201e      	movs	r0, #30
 8001e84:	f000 fb33 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e88:	201e      	movs	r0, #30
 8001e8a:	f000 fb4a 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000400 	.word	0x48000400

08001ea4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <HAL_TIM_MspPostInit+0x64>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d11b      	bne.n	8001efe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_TIM_MspPostInit+0x68>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_TIM_MspPostInit+0x68>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_TIM_MspPostInit+0x68>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8001ede:	2330      	movs	r3, #48	; 0x30
 8001ee0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <HAL_TIM_MspPostInit+0x6c>)
 8001efa:	f000 fbed 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3720      	adds	r7, #32
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	48000400 	.word	0x48000400

08001f14 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f1a:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <MX_LPUART1_UART_Init+0x90>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f56:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f58:	f003 fcc4 	bl	80058e4 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f62:	f7ff fbe5 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f66:	2100      	movs	r1, #0
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f6a:	f004 fe88 	bl	8006c7e <HAL_UARTEx_SetTxFifoThreshold>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f74:	f7ff fbdc 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f7c:	f004 febd 	bl	8006cfa <HAL_UARTEx_SetRxFifoThreshold>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001f86:	f7ff fbd3 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_LPUART1_UART_Init+0x8c>)
 8001f8c:	f004 fe3e 	bl	8006c0c <HAL_UARTEx_DisableFifoMode>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001f96:	f7ff fbcb 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200002d0 	.word	0x200002d0
 8001fa4:	40008000 	.word	0x40008000

08001fa8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fae:	4a23      	ldr	r2, [pc, #140]	; (800203c <MX_USART1_UART_Init+0x94>)
 8001fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fce:	220c      	movs	r2, #12
 8001fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ff0:	4811      	ldr	r0, [pc, #68]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8001ff2:	f003 fc77 	bl	80058e4 <HAL_UART_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ffc:	f7ff fb98 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002000:	2100      	movs	r1, #0
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8002004:	f004 fe3b 	bl	8006c7e <HAL_UARTEx_SetTxFifoThreshold>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800200e:	f7ff fb8f 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002012:	2100      	movs	r1, #0
 8002014:	4808      	ldr	r0, [pc, #32]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8002016:	f004 fe70 	bl	8006cfa <HAL_UARTEx_SetRxFifoThreshold>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002020:	f7ff fb86 	bl	8001730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_USART1_UART_Init+0x90>)
 8002026:	f004 fdf1 	bl	8006c0c <HAL_UARTEx_DisableFifoMode>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002030:	f7ff fb7e 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000360 	.word	0x20000360
 800203c:	40013800 	.word	0x40013800

08002040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0a2      	sub	sp, #136	; 0x88
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	2254      	movs	r2, #84	; 0x54
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f008 f9fd 	bl	800a460 <memset>
  if(uartHandle->Instance==LPUART1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a62      	ldr	r2, [pc, #392]	; (80021f4 <HAL_UART_MspInit+0x1b4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d157      	bne.n	8002120 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002070:	2320      	movs	r3, #32
 8002072:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002074:	2300      	movs	r3, #0
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	4618      	mov	r0, r3
 800207e:	f001 fab5 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002088:	f7ff fb52 	bl	8001730 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800208c:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	4a59      	ldr	r2, [pc, #356]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002098:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a4:	4b54      	ldr	r3, [pc, #336]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	4a53      	ldr	r2, [pc, #332]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b0:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c8:	4b4b      	ldr	r3, [pc, #300]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020d4:	2301      	movs	r3, #1
 80020d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020e6:	2308      	movs	r3, #8
 80020e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020f0:	4619      	mov	r1, r3
 80020f2:	4842      	ldr	r0, [pc, #264]	; (80021fc <HAL_UART_MspInit+0x1bc>)
 80020f4:	f000 faf0 	bl	80026d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f8:	2304      	movs	r3, #4
 80020fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800210a:	230c      	movs	r3, #12
 800210c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211a:	f000 fadd 	bl	80026d8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800211e:	e064      	b.n	80021ea <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a36      	ldr	r2, [pc, #216]	; (8002200 <HAL_UART_MspInit+0x1c0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d15f      	bne.n	80021ea <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800212a:	2301      	movs	r3, #1
 800212c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	4618      	mov	r0, r3
 8002138:	f001 fa58 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_UART_MspInit+0x106>
      Error_Handler();
 8002142:	f7ff faf5 	bl	8001730 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 8002148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214a:	4a2b      	ldr	r2, [pc, #172]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6613      	str	r3, [r2, #96]	; 0x60
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_UART_MspInit+0x1b8>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 800218e:	2310      	movs	r3, #16
 8002190:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021a0:	2307      	movs	r3, #7
 80021a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021aa:	4619      	mov	r1, r3
 80021ac:	4813      	ldr	r0, [pc, #76]	; (80021fc <HAL_UART_MspInit+0x1bc>)
 80021ae:	f000 fa93 	bl	80026d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_RX_Pin;
 80021b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021c6:	2307      	movs	r3, #7
 80021c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 80021cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021d0:	4619      	mov	r1, r3
 80021d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d6:	f000 fa7f 	bl	80026d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2105      	movs	r1, #5
 80021de:	2025      	movs	r0, #37	; 0x25
 80021e0:	f000 f985 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021e4:	2025      	movs	r0, #37	; 0x25
 80021e6:	f000 f99c 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3788      	adds	r7, #136	; 0x88
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40008000 	.word	0x40008000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	48000800 	.word	0x48000800
 8002200:	40013800 	.word	0x40013800

08002204 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002206:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <LoopForever+0x6>)
  ldr r1, =_edata
 800220a:	490e      	ldr	r1, [pc, #56]	; (8002244 <LoopForever+0xa>)
  ldr r2, =_sidata
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <LoopForever+0xe>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002210:	e002      	b.n	8002218 <LoopCopyDataInit>

08002212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002216:	3304      	adds	r3, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800221c:	d3f9      	bcc.n	8002212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002220:	4c0b      	ldr	r4, [pc, #44]	; (8002250 <LoopForever+0x16>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002224:	e001      	b.n	800222a <LoopFillZerobss>

08002226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002228:	3204      	adds	r2, #4

0800222a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800222c:	d3fb      	bcc.n	8002226 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800222e:	f7ff fb43 	bl	80018b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002232:	f008 f8e1 	bl	800a3f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002236:	f7ff fa11 	bl	800165c <main>

0800223a <LoopForever>:

LoopForever:
    b LoopForever
 800223a:	e7fe      	b.n	800223a <LoopForever>
  ldr   r0, =_estack
 800223c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002244:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002248:	0800b05c 	.word	0x0800b05c
  ldr r2, =_sbss
 800224c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002250:	20002614 	.word	0x20002614

08002254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC1_2_IRQHandler>

08002256 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 f939 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002266:	200f      	movs	r0, #15
 8002268:	f000 f80e 	bl	8002288 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	e001      	b.n	800227c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002278:	f7ff fa60 	bl	800173c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800227c:	79fb      	ldrb	r3, [r7, #7]

}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_InitTick+0x68>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d022      	beq.n	80022e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800229c:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_InitTick+0x6c>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_InitTick+0x68>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f944 	bl	800253e <HAL_SYSTICK_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10f      	bne.n	80022dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	d809      	bhi.n	80022d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c2:	2200      	movs	r2, #0
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ca:	f000 f910 	bl	80024ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_InitTick+0x70>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e007      	b.n	80022e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e004      	b.n	80022e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e001      	b.n	80022e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000018 	.word	0x20000018
 80022f4:	20000010 	.word	0x20000010
 80022f8:	20000014 	.word	0x20000014

080022fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_IncTick+0x1c>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_IncTick+0x20>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4413      	add	r3, r2
 800230a:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_IncTick+0x1c>)
 800230c:	6013      	str	r3, [r2, #0]
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	200003f0 	.word	0x200003f0
 800231c:	20000018 	.word	0x20000018

08002320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_GetTick+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200003f0 	.word	0x200003f0

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024fc:	f7ff ff40 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff90 	bl	800242c <NVIC_EncodePriority>
 800250c:	4602      	mov	r2, r0
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff5f 	bl	80023d8 <__NVIC_SetPriority>
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff33 	bl	800239c <__NVIC_EnableIRQ>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffa4 	bl	8002494 <SysTick_Config>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d005      	beq.n	800257a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2204      	movs	r2, #4
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	e037      	b.n	80025ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 020e 	bic.w	r2, r2, #14
 8002588:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002598:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f003 021f 	and.w	r2, r3, #31
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f202 	lsl.w	r2, r1, r2
 80025bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00c      	beq.n	80025ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d00d      	beq.n	800263c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2204      	movs	r2, #4
 8002624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e047      	b.n	80026cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 020e 	bic.w	r2, r2, #14
 800264a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800266a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f202 	lsl.w	r2, r1, r2
 800267e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002688:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
    }
  }
  return status;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026e6:	e15a      	b.n	800299e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 814c 	beq.w	8002998 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d005      	beq.n	8002718 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002714:	2b02      	cmp	r3, #2
 8002716:	d130      	bne.n	800277a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274e:	2201      	movs	r2, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 0201 	and.w	r2, r3, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b03      	cmp	r3, #3
 8002784:	d017      	beq.n	80027b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d123      	bne.n	800280a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	6939      	ldr	r1, [r7, #16]
 8002806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0203 	and.w	r2, r3, #3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80a6 	beq.w	8002998 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284c:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_GPIO_Init+0x2e4>)
 800284e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002850:	4a5a      	ldr	r2, [pc, #360]	; (80029bc <HAL_GPIO_Init+0x2e4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6613      	str	r3, [r2, #96]	; 0x60
 8002858:	4b58      	ldr	r3, [pc, #352]	; (80029bc <HAL_GPIO_Init+0x2e4>)
 800285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002864:	4a56      	ldr	r2, [pc, #344]	; (80029c0 <HAL_GPIO_Init+0x2e8>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800288e:	d01f      	beq.n	80028d0 <HAL_GPIO_Init+0x1f8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a4c      	ldr	r2, [pc, #304]	; (80029c4 <HAL_GPIO_Init+0x2ec>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d019      	beq.n	80028cc <HAL_GPIO_Init+0x1f4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <HAL_GPIO_Init+0x2f0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d013      	beq.n	80028c8 <HAL_GPIO_Init+0x1f0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a4a      	ldr	r2, [pc, #296]	; (80029cc <HAL_GPIO_Init+0x2f4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00d      	beq.n	80028c4 <HAL_GPIO_Init+0x1ec>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a49      	ldr	r2, [pc, #292]	; (80029d0 <HAL_GPIO_Init+0x2f8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d007      	beq.n	80028c0 <HAL_GPIO_Init+0x1e8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a48      	ldr	r2, [pc, #288]	; (80029d4 <HAL_GPIO_Init+0x2fc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_GPIO_Init+0x1e4>
 80028b8:	2305      	movs	r3, #5
 80028ba:	e00a      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028bc:	2306      	movs	r3, #6
 80028be:	e008      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e006      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e004      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e002      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_GPIO_Init+0x1fa>
 80028d0:	2300      	movs	r3, #0
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	f002 0203 	and.w	r2, r2, #3
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	4093      	lsls	r3, r2
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e2:	4937      	ldr	r1, [pc, #220]	; (80029c0 <HAL_GPIO_Init+0x2e8>)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_GPIO_Init+0x300>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002914:	4a30      	ldr	r2, [pc, #192]	; (80029d8 <HAL_GPIO_Init+0x300>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_GPIO_Init+0x300>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800293e:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <HAL_GPIO_Init+0x300>)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_GPIO_Init+0x300>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002968:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_GPIO_Init+0x300>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_GPIO_Init+0x300>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002992:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_GPIO_Init+0x300>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3301      	adds	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f47f ae9d 	bne.w	80026e8 <HAL_GPIO_Init+0x10>
  }
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	48000400 	.word	0x48000400
 80029c8:	48000800 	.word	0x48000800
 80029cc:	48000c00 	.word	0x48000c00
 80029d0:	48001000 	.word	0x48001000
 80029d4:	48001400 	.word	0x48001400
 80029d8:	40010400 	.word	0x40010400

080029dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e001      	b.n	80029fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d141      	bne.n	8002ace <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a56:	d131      	bne.n	8002abc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a58:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a5e:	4a46      	ldr	r2, [pc, #280]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a70:	4a41      	ldr	r2, [pc, #260]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a78:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2232      	movs	r2, #50	; 0x32
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	4a3f      	ldr	r2, [pc, #252]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	0c9b      	lsrs	r3, r3, #18
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a8e:	e002      	b.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d102      	bne.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f2      	bne.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aaa:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d158      	bne.n	8002b6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e057      	b.n	8002b6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002abc:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ac2:	4a2d      	ldr	r2, [pc, #180]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002acc:	e04d      	b.n	8002b6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad4:	d141      	bne.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d131      	bne.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aea:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af4:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002afc:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2232      	movs	r2, #50	; 0x32
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	0c9b      	lsrs	r3, r3, #18
 8002b16:	3301      	adds	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1a:	e002      	b.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d102      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f2      	bne.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d112      	bne.n	8002b6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e011      	b.n	8002b6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b58:	e007      	b.n	8002b6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	20000010 	.word	0x20000010
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e306      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d075      	beq.n	8002c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	4b97      	ldr	r3, [pc, #604]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	4b94      	ldr	r3, [pc, #592]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d102      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3e>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d002      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x44>
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	4b8d      	ldr	r3, [pc, #564]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05b      	beq.n	8002c8c <HAL_RCC_OscConfig+0x108>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d157      	bne.n	8002c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e2e1      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x74>
 8002bea:	4b85      	ldr	r3, [pc, #532]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a84      	ldr	r2, [pc, #528]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e01d      	b.n	8002c34 <HAL_RCC_OscConfig+0xb0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7e      	ldr	r2, [pc, #504]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b7c      	ldr	r3, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7b      	ldr	r2, [pc, #492]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0xb0>
 8002c1c:	4b78      	ldr	r3, [pc, #480]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a77      	ldr	r2, [pc, #476]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b75      	ldr	r3, [pc, #468]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a74      	ldr	r2, [pc, #464]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7ff fb70 	bl	8002320 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7ff fb6c 	bl	8002320 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e2a6      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c56:	4b6a      	ldr	r3, [pc, #424]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0xc0>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7ff fb5c 	bl	8002320 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7ff fb58 	bl	8002320 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e292      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7e:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0xe8>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d075      	beq.n	8002d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9a:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca4:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_OscConfig+0x136>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x13c>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d11f      	bne.n	8002d00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x154>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e265      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	4946      	ldr	r1, [pc, #280]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cec:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <HAL_RCC_OscConfig+0x280>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fac9 	bl	8002288 <HAL_InitTick>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d043      	beq.n	8002d84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e251      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d023      	beq.n	8002d50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7ff fb04 	bl	8002320 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7ff fb00 	bl	8002320 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e23a      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	492d      	ldr	r1, [pc, #180]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
 8002d4e:	e01a      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d50:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7ff fae0 	bl	8002320 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d64:	f7ff fadc 	bl	8002320 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e216      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x1e0>
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d041      	beq.n	8002e16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7ff fab9 	bl	8002320 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db2:	f7ff fab5 	bl	8002320 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1ef      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0ef      	beq.n	8002db2 <HAL_RCC_OscConfig+0x22e>
 8002dd2:	e020      	b.n	8002e16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7ff fa9c 	bl	8002320 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dea:	e00d      	b.n	8002e08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7ff fa98 	bl	8002320 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d906      	bls.n	8002e08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1d2      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e08:	4b8c      	ldr	r3, [pc, #560]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ea      	bne.n	8002dec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80a6 	beq.w	8002f70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e28:	4b84      	ldr	r3, [pc, #528]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2b4>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x2b6>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	4a7e      	ldr	r2, [pc, #504]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4a:	4b7c      	ldr	r3, [pc, #496]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5a:	4b79      	ldr	r3, [pc, #484]	; (8003040 <HAL_RCC_OscConfig+0x4bc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <HAL_RCC_OscConfig+0x4bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a75      	ldr	r2, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x4bc>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7ff fa55 	bl	8002320 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7ff fa51 	bl	8002320 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e18b      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8c:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <HAL_RCC_OscConfig+0x4bc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d108      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x32e>
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb0:	e024      	b.n	8002efc <HAL_RCC_OscConfig+0x378>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d110      	bne.n	8002edc <HAL_RCC_OscConfig+0x358>
 8002eba:	4b60      	ldr	r3, [pc, #384]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	4a5e      	ldr	r2, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eca:	4b5c      	ldr	r3, [pc, #368]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eda:	e00f      	b.n	8002efc <HAL_RCC_OscConfig+0x378>
 8002edc:	4b57      	ldr	r3, [pc, #348]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	4a56      	ldr	r2, [pc, #344]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d016      	beq.n	8002f32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7ff fa0c 	bl	8002320 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7ff fa08 	bl	8002320 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e140      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ed      	beq.n	8002f0c <HAL_RCC_OscConfig+0x388>
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7ff f9f5 	bl	8002320 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7ff f9f1 	bl	8002320 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e129      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f50:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1ed      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f5e:	7ffb      	ldrb	r3, [r7, #31]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	4a34      	ldr	r2, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d03c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f8a:	4a2c      	ldr	r2, [pc, #176]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7ff f9c4 	bl	8002320 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f9c:	f7ff f9c0 	bl	8002320 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0fa      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fae:	4b23      	ldr	r3, [pc, #140]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCC_OscConfig+0x418>
 8002fbc:	e01b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7ff f9a7 	bl	8002320 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd6:	f7ff f9a3 	bl	8002320 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0dd      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8002fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ef      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80d1 	beq.w	80031a2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b0c      	cmp	r3, #12
 800300a:	f000 808b 	beq.w	8003124 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d15e      	bne.n	80030d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a08      	ldr	r2, [pc, #32]	; (800303c <HAL_RCC_OscConfig+0x4b8>)
 800301c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7ff f97d 	bl	8002320 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003028:	e00c      	b.n	8003044 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302a:	f7ff f979 	bl	8002320 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d905      	bls.n	8003044 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0b3      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
 800303c:	40021000 	.word	0x40021000
 8003040:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003044:	4b59      	ldr	r3, [pc, #356]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ec      	bne.n	800302a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003050:	4b56      	ldr	r3, [pc, #344]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	4b56      	ldr	r3, [pc, #344]	; (80031b0 <HAL_RCC_OscConfig+0x62c>)
 8003056:	4013      	ands	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6a11      	ldr	r1, [r2, #32]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003060:	3a01      	subs	r2, #1
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	4311      	orrs	r1, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800306a:	0212      	lsls	r2, r2, #8
 800306c:	4311      	orrs	r1, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003072:	0852      	lsrs	r2, r2, #1
 8003074:	3a01      	subs	r2, #1
 8003076:	0552      	lsls	r2, r2, #21
 8003078:	4311      	orrs	r1, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800307e:	0852      	lsrs	r2, r2, #1
 8003080:	3a01      	subs	r2, #1
 8003082:	0652      	lsls	r2, r2, #25
 8003084:	4311      	orrs	r1, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800308a:	06d2      	lsls	r2, r2, #27
 800308c:	430a      	orrs	r2, r1
 800308e:	4947      	ldr	r1, [pc, #284]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 8003090:	4313      	orrs	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b45      	ldr	r3, [pc, #276]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a44      	ldr	r2, [pc, #272]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a0:	4b42      	ldr	r3, [pc, #264]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a41      	ldr	r2, [pc, #260]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7ff f938 	bl	8002320 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7ff f934 	bl	8002320 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e06e      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x530>
 80030d2:	e066      	b.n	80031a2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030e0:	4b32      	ldr	r3, [pc, #200]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a31      	ldr	r2, [pc, #196]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030ec:	4b2f      	ldr	r3, [pc, #188]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 80030f2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7ff f910 	bl	8002320 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7ff f90c 	bl	8002320 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e046      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003116:	4b25      	ldr	r3, [pc, #148]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x580>
 8003122:	e03e      	b.n	80031a2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e039      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_RCC_OscConfig+0x628>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	429a      	cmp	r2, r3
 8003142:	d12c      	bne.n	800319e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	3b01      	subs	r3, #1
 8003150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d123      	bne.n	800319e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d11b      	bne.n	800319e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d113      	bne.n	800319e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	3b01      	subs	r3, #1
 8003184:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d109      	bne.n	800319e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	3b01      	subs	r3, #1
 8003198:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	019f800c 	.word	0x019f800c

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e11e      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031cc:	4b91      	ldr	r3, [pc, #580]	; (8003414 <HAL_RCC_ClockConfig+0x260>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d910      	bls.n	80031fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b8e      	ldr	r3, [pc, #568]	; (8003414 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 020f 	bic.w	r2, r3, #15
 80031e2:	498c      	ldr	r1, [pc, #560]	; (8003414 <HAL_RCC_ClockConfig+0x260>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b8a      	ldr	r3, [pc, #552]	; (8003414 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e106      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d073      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d129      	bne.n	8003264 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003210:	4b81      	ldr	r3, [pc, #516]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0f4      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003220:	f000 f99e 	bl	8003560 <RCC_GetSysClockFreqFromPLLSource>
 8003224:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4a7c      	ldr	r2, [pc, #496]	; (800341c <HAL_RCC_ClockConfig+0x268>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d93f      	bls.n	80032ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800322e:	4b7a      	ldr	r3, [pc, #488]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003242:	2b00      	cmp	r3, #0
 8003244:	d033      	beq.n	80032ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	d12f      	bne.n	80032ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003256:	4a70      	ldr	r2, [pc, #448]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e024      	b.n	80032ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326c:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0c6      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0be      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800328c:	f000 f8ce 	bl	800342c <HAL_RCC_GetSysClockFreq>
 8003290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <HAL_RCC_ClockConfig+0x268>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d909      	bls.n	80032ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800329a:	4b5f      	ldr	r3, [pc, #380]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a2:	4a5d      	ldr	r2, [pc, #372]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80032a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4957      	ldr	r1, [pc, #348]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c0:	f7ff f82e 	bl	8002320 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7ff f82a 	bl	8002320 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e095      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a42      	ldr	r2, [pc, #264]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 800330e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003312:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003320:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003328:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 800332a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800332e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b39      	ldr	r3, [pc, #228]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4936      	ldr	r1, [pc, #216]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
 8003342:	e008      	b.n	8003356 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d105      	bne.n	8003356 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800334a:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4a32      	ldr	r2, [pc, #200]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 8003350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003354:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003356:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_RCC_ClockConfig+0x260>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d21d      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003364:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_ClockConfig+0x260>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 020f 	bic.w	r2, r3, #15
 800336c:	4929      	ldr	r1, [pc, #164]	; (8003414 <HAL_RCC_ClockConfig+0x260>)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003374:	f7fe ffd4 	bl	8002320 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fe ffd0 	bl	8002320 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e03b      	b.n	800340a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x260>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d1ed      	bne.n	800337c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4917      	ldr	r1, [pc, #92]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490f      	ldr	r1, [pc, #60]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033de:	f000 f825 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_RCC_ClockConfig+0x264>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	490c      	ldr	r1, [pc, #48]	; (8003420 <HAL_RCC_ClockConfig+0x26c>)
 80033f0:	5ccb      	ldrb	r3, [r1, r3]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x270>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe ff40 	bl	8002288 <HAL_InitTick>
 8003408:	4603      	mov	r3, r0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
 800341c:	04c4b400 	.word	0x04c4b400
 8003420:	0800af78 	.word	0x0800af78
 8003424:	20000010 	.word	0x20000010
 8003428:	20000014 	.word	0x20000014

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b04      	cmp	r3, #4
 800343c:	d102      	bne.n	8003444 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800343e:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e047      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d102      	bne.n	8003456 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003450:	4b26      	ldr	r3, [pc, #152]	; (80034ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e03e      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d136      	bne.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3301      	adds	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d10c      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003480:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800348a:	68d2      	ldr	r2, [r2, #12]
 800348c:	0a12      	lsrs	r2, r2, #8
 800348e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	617b      	str	r3, [r7, #20]
      break;
 8003498:	e00c      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	0a12      	lsrs	r2, r2, #8
 80034a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
      break;
 80034b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	0e5b      	lsrs	r3, r3, #25
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	e001      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034d4:	693b      	ldr	r3, [r7, #16]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	007a1200 	.word	0x007a1200

080034f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000010 	.word	0x20000010

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4904      	ldr	r1, [pc, #16]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	0800af88 	.word	0x0800af88

08003534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003538:	f7ff ffda 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	0adb      	lsrs	r3, r3, #11
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4904      	ldr	r1, [pc, #16]	; (800355c <HAL_RCC_GetPCLK2Freq+0x28>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	0800af88 	.word	0x0800af88

08003560 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003566:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	3301      	adds	r3, #1
 800357c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d10c      	bne.n	800359e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003584:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800358e:	68d2      	ldr	r2, [r2, #12]
 8003590:	0a12      	lsrs	r2, r2, #8
 8003592:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]
    break;
 800359c:	e00c      	b.n	80035b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	0a12      	lsrs	r2, r2, #8
 80035ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
    break;
 80035b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0e5b      	lsrs	r3, r3, #25
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	3301      	adds	r3, #1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035d2:	687b      	ldr	r3, [r7, #4]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40021000 	.word	0x40021000
 80035e4:	007a1200 	.word	0x007a1200
 80035e8:	00f42400 	.word	0x00f42400

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8098 	beq.w	800373a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b43      	ldr	r3, [pc, #268]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b40      	ldr	r3, [pc, #256]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	4a3f      	ldr	r2, [pc, #252]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	; 0x58
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003636:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a39      	ldr	r2, [pc, #228]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003642:	f7fe fe6d 	bl	8002320 <HAL_GetTick>
 8003646:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003648:	e009      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fe fe69 	bl	8002320 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d902      	bls.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	74fb      	strb	r3, [r7, #19]
        break;
 800365c:	e005      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ef      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d159      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003670:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01e      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d019      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a8:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036b8:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fe fe29 	bl	8002320 <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d0:	e00b      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fe fe25 	bl	8002320 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d902      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	74fb      	strb	r3, [r7, #19]
            break;
 80036e8:	e006      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ec      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	4903      	ldr	r1, [pc, #12]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003714:	e008      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	74bb      	strb	r3, [r7, #18]
 800371a:	e005      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003728:	7c7b      	ldrb	r3, [r7, #17]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4ba7      	ldr	r3, [pc, #668]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	4aa6      	ldr	r2, [pc, #664]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003738:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003746:	4ba1      	ldr	r3, [pc, #644]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	f023 0203 	bic.w	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	499d      	ldr	r1, [pc, #628]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003768:	4b98      	ldr	r3, [pc, #608]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f023 020c 	bic.w	r2, r3, #12
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4995      	ldr	r1, [pc, #596]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800378a:	4b90      	ldr	r3, [pc, #576]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003790:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	498c      	ldr	r1, [pc, #560]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ac:	4b87      	ldr	r3, [pc, #540]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	4984      	ldr	r1, [pc, #528]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ce:	4b7f      	ldr	r3, [pc, #508]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	497b      	ldr	r1, [pc, #492]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f0:	4b76      	ldr	r3, [pc, #472]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	4973      	ldr	r1, [pc, #460]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003812:	4b6e      	ldr	r3, [pc, #440]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	496a      	ldr	r1, [pc, #424]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003834:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4962      	ldr	r1, [pc, #392]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003856:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	4959      	ldr	r1, [pc, #356]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003878:	4b54      	ldr	r3, [pc, #336]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	4951      	ldr	r1, [pc, #324]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800389a:	4b4c      	ldr	r3, [pc, #304]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4948      	ldr	r1, [pc, #288]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d015      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4940      	ldr	r1, [pc, #256]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038da:	d105      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d015      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	4932      	ldr	r1, [pc, #200]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003912:	d105      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003914:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d015      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800392c:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	4924      	ldr	r1, [pc, #144]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800394a:	d105      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800394c:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003956:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d015      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	4916      	ldr	r1, [pc, #88]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a10      	ldr	r2, [pc, #64]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d019      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	4908      	ldr	r1, [pc, #32]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ba:	d109      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a02      	ldr	r2, [pc, #8]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c6:	60d3      	str	r3, [r2, #12]
 80039c8:	e002      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039dc:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4926      	ldr	r1, [pc, #152]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039fc:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a06:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a22:	4918      	ldr	r1, [pc, #96]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a34:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5a:	490a      	ldr	r1, [pc, #40]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a78:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e049      	b.n	8003b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fe f8f0 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f001 f872 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d001      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e054      	b.n	8003bfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d022      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x80>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x80>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x80>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x80>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x80>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x80>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <HAL_TIM_Base_Start_IT+0xe4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x80>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_TIM_Base_Start_IT+0xe8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d115      	bne.n	8003be4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_TIM_Base_Start_IT+0xec>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d015      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0xbe>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d011      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be2:	e008      	b.n	8003bf6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e000      	b.n	8003bf8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40013400 	.word	0x40013400
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40015000 	.word	0x40015000
 8003c24:	00010007 	.word	0x00010007

08003c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e049      	b.n	8003cce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f841 	bl	8003cd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 ffa2 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_TIM_PWM_Start+0x24>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e03c      	b.n	8003d8a <HAL_TIM_PWM_Start+0x9e>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d109      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x3e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e02f      	b.n	8003d8a <HAL_TIM_PWM_Start+0x9e>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d109      	bne.n	8003d44 <HAL_TIM_PWM_Start+0x58>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e022      	b.n	8003d8a <HAL_TIM_PWM_Start+0x9e>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d109      	bne.n	8003d5e <HAL_TIM_PWM_Start+0x72>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	bf14      	ite	ne
 8003d56:	2301      	movne	r3, #1
 8003d58:	2300      	moveq	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	e015      	b.n	8003d8a <HAL_TIM_PWM_Start+0x9e>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d109      	bne.n	8003d78 <HAL_TIM_PWM_Start+0x8c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	bf14      	ite	ne
 8003d70:	2301      	movne	r3, #1
 8003d72:	2300      	moveq	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	e008      	b.n	8003d8a <HAL_TIM_PWM_Start+0x9e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0a6      	b.n	8003ee0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Start+0xb6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da0:	e023      	b.n	8003dea <HAL_TIM_PWM_Start+0xfe>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start+0xc6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db0:	e01b      	b.n	8003dea <HAL_TIM_PWM_Start+0xfe>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0xd6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc0:	e013      	b.n	8003dea <HAL_TIM_PWM_Start+0xfe>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0xe6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd0:	e00b      	b.n	8003dea <HAL_TIM_PWM_Start+0xfe>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Start+0xf6>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de0:	e003      	b.n	8003dea <HAL_TIM_PWM_Start+0xfe>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 fc74 	bl	80056e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <HAL_TIM_PWM_Start+0x1fc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d018      	beq.n	8003e34 <HAL_TIM_PWM_Start+0x148>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a39      	ldr	r2, [pc, #228]	; (8003eec <HAL_TIM_PWM_Start+0x200>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_TIM_PWM_Start+0x148>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <HAL_TIM_PWM_Start+0x204>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_TIM_PWM_Start+0x148>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a36      	ldr	r2, [pc, #216]	; (8003ef4 <HAL_TIM_PWM_Start+0x208>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_TIM_PWM_Start+0x148>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a34      	ldr	r2, [pc, #208]	; (8003ef8 <HAL_TIM_PWM_Start+0x20c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_TIM_PWM_Start+0x148>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a33      	ldr	r2, [pc, #204]	; (8003efc <HAL_TIM_PWM_Start+0x210>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_PWM_Start+0x14c>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_TIM_PWM_Start+0x14e>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a25      	ldr	r2, [pc, #148]	; (8003ee8 <HAL_TIM_PWM_Start+0x1fc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d022      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1b2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d01d      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1b2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <HAL_TIM_PWM_Start+0x214>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1b2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <HAL_TIM_PWM_Start+0x218>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1b2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <HAL_TIM_PWM_Start+0x21c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1b2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a19      	ldr	r2, [pc, #100]	; (8003eec <HAL_TIM_PWM_Start+0x200>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1b2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_TIM_PWM_Start+0x204>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x1b2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_TIM_PWM_Start+0x210>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d115      	bne.n	8003eca <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_TIM_PWM_Start+0x220>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b06      	cmp	r3, #6
 8003eae:	d015      	beq.n	8003edc <HAL_TIM_PWM_Start+0x1f0>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb6:	d011      	beq.n	8003edc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec8:	e008      	b.n	8003edc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e000      	b.n	8003ede <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40013400 	.word	0x40013400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	40015000 	.word	0x40015000
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	00010007 	.word	0x00010007

08003f10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e049      	b.n	8003fb6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd ff4a 	bl	8001dd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 fe2e 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_IC_Start_IT+0x1e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	e023      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x66>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_IC_Start_IT+0x2e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	e01b      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x66>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_IC_Start_IT+0x3e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e013      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x66>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d104      	bne.n	800400e <HAL_TIM_IC_Start_IT+0x4e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e00b      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x66>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d104      	bne.n	800401e <HAL_TIM_IC_Start_IT+0x5e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e003      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x66>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004024:	b2db      	uxtb	r3, r3
 8004026:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <HAL_TIM_IC_Start_IT+0x78>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e013      	b.n	8004060 <HAL_TIM_IC_Start_IT+0xa0>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b04      	cmp	r3, #4
 800403c:	d104      	bne.n	8004048 <HAL_TIM_IC_Start_IT+0x88>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e00b      	b.n	8004060 <HAL_TIM_IC_Start_IT+0xa0>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d104      	bne.n	8004058 <HAL_TIM_IC_Start_IT+0x98>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e003      	b.n	8004060 <HAL_TIM_IC_Start_IT+0xa0>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800405e:	b2db      	uxtb	r3, r3
 8004060:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004062:	7bbb      	ldrb	r3, [r7, #14]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d102      	bne.n	800406e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004068:	7b7b      	ldrb	r3, [r7, #13]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d001      	beq.n	8004072 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0e2      	b.n	8004238 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <HAL_TIM_IC_Start_IT+0xc2>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004080:	e023      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x10a>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b04      	cmp	r3, #4
 8004086:	d104      	bne.n	8004092 <HAL_TIM_IC_Start_IT+0xd2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004090:	e01b      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x10a>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_IC_Start_IT+0xe2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a0:	e013      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x10a>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_IC_Start_IT+0xf2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b0:	e00b      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x10a>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_IC_Start_IT+0x102>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c0:	e003      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x10a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <HAL_TIM_IC_Start_IT+0x11a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d8:	e013      	b.n	8004102 <HAL_TIM_IC_Start_IT+0x142>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d104      	bne.n	80040ea <HAL_TIM_IC_Start_IT+0x12a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e8:	e00b      	b.n	8004102 <HAL_TIM_IC_Start_IT+0x142>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_IC_Start_IT+0x13a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f8:	e003      	b.n	8004102 <HAL_TIM_IC_Start_IT+0x142>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d841      	bhi.n	800418c <HAL_TIM_IC_Start_IT+0x1cc>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <HAL_TIM_IC_Start_IT+0x150>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004145 	.word	0x08004145
 8004114:	0800418d 	.word	0x0800418d
 8004118:	0800418d 	.word	0x0800418d
 800411c:	0800418d 	.word	0x0800418d
 8004120:	08004157 	.word	0x08004157
 8004124:	0800418d 	.word	0x0800418d
 8004128:	0800418d 	.word	0x0800418d
 800412c:	0800418d 	.word	0x0800418d
 8004130:	08004169 	.word	0x08004169
 8004134:	0800418d 	.word	0x0800418d
 8004138:	0800418d 	.word	0x0800418d
 800413c:	0800418d 	.word	0x0800418d
 8004140:	0800417b 	.word	0x0800417b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0202 	orr.w	r2, r2, #2
 8004152:	60da      	str	r2, [r3, #12]
      break;
 8004154:	e01d      	b.n	8004192 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0204 	orr.w	r2, r2, #4
 8004164:	60da      	str	r2, [r3, #12]
      break;
 8004166:	e014      	b.n	8004192 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0208 	orr.w	r2, r2, #8
 8004176:	60da      	str	r2, [r3, #12]
      break;
 8004178:	e00b      	b.n	8004192 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0210 	orr.w	r2, r2, #16
 8004188:	60da      	str	r2, [r3, #12]
      break;
 800418a:	e002      	b.n	8004192 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      break;
 8004190:	bf00      	nop
  }

  if (status == HAL_OK)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d14e      	bne.n	8004236 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2201      	movs	r2, #1
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 fa9d 	bl	80056e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a25      	ldr	r2, [pc, #148]	; (8004240 <HAL_TIM_IC_Start_IT+0x280>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d022      	beq.n	80041f6 <HAL_TIM_IC_Start_IT+0x236>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d01d      	beq.n	80041f6 <HAL_TIM_IC_Start_IT+0x236>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a21      	ldr	r2, [pc, #132]	; (8004244 <HAL_TIM_IC_Start_IT+0x284>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d018      	beq.n	80041f6 <HAL_TIM_IC_Start_IT+0x236>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <HAL_TIM_IC_Start_IT+0x288>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_TIM_IC_Start_IT+0x236>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1e      	ldr	r2, [pc, #120]	; (800424c <HAL_TIM_IC_Start_IT+0x28c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00e      	beq.n	80041f6 <HAL_TIM_IC_Start_IT+0x236>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <HAL_TIM_IC_Start_IT+0x290>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_TIM_IC_Start_IT+0x236>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <HAL_TIM_IC_Start_IT+0x294>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d004      	beq.n	80041f6 <HAL_TIM_IC_Start_IT+0x236>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a19      	ldr	r2, [pc, #100]	; (8004258 <HAL_TIM_IC_Start_IT+0x298>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d115      	bne.n	8004222 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <HAL_TIM_IC_Start_IT+0x29c>)
 80041fe:	4013      	ands	r3, r2
 8004200:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b06      	cmp	r3, #6
 8004206:	d015      	beq.n	8004234 <HAL_TIM_IC_Start_IT+0x274>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420e:	d011      	beq.n	8004234 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004220:	e008      	b.n	8004234 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e000      	b.n	8004236 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40013400 	.word	0x40013400
 8004254:	40014000 	.word	0x40014000
 8004258:	40015000 	.word	0x40015000
 800425c:	00010007 	.word	0x00010007

08004260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b02      	cmp	r3, #2
 8004274:	d122      	bne.n	80042bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b02      	cmp	r3, #2
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0202 	mvn.w	r2, #2
 800428c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fd f828 	bl	80012f8 <HAL_TIM_IC_CaptureCallback>
 80042a8:	e005      	b.n	80042b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fc62 	bl	8004b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fc69 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0204 	mvn.w	r2, #4
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc fffe 	bl	80012f8 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fc38 	bl	8004b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fc3f 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b08      	cmp	r3, #8
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b08      	cmp	r3, #8
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0208 	mvn.w	r2, #8
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2204      	movs	r2, #4
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fc ffd4 	bl	80012f8 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fc0e 	bl	8004b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fc15 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b10      	cmp	r3, #16
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b10      	cmp	r3, #16
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0210 	mvn.w	r2, #16
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2208      	movs	r2, #8
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc ffaa 	bl	80012f8 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fbe4 	bl	8004b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fbeb 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10e      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0201 	mvn.w	r2, #1
 80043dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd f858 	bl	8001494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	2b80      	cmp	r3, #128	; 0x80
 80043f0:	d10e      	bne.n	8004410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d107      	bne.n	8004410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f001 fa2e 	bl	800586c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441e:	d10e      	bne.n	800443e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b80      	cmp	r3, #128	; 0x80
 800442c:	d107      	bne.n	800443e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f001 fa21 	bl	8005880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d10e      	bne.n	800446a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	d107      	bne.n	800446a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fb99 	bl	8004b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b20      	cmp	r3, #32
 8004476:	d10e      	bne.n	8004496 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b20      	cmp	r3, #32
 8004484:	d107      	bne.n	8004496 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0220 	mvn.w	r2, #32
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f001 f9e1 	bl	8005858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a4:	d10f      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f001 f9e7 	bl	8005894 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d4:	d10f      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e4:	d107      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80044ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f001 f9d9 	bl	80058a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004504:	d10f      	bne.n	8004526 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004514:	d107      	bne.n	8004526 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800451e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 f9cb 	bl	80058bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004534:	d10f      	bne.n	8004556 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004544:	d107      	bne.n	8004556 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800454e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 f9bd 	bl	80058d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004578:	2302      	movs	r3, #2
 800457a:	e088      	b.n	800468e <HAL_TIM_IC_ConfigChannel+0x130>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11b      	bne.n	80045c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f000 fedb 	bl	8005354 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 020c 	bic.w	r2, r2, #12
 80045ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6999      	ldr	r1, [r3, #24]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	619a      	str	r2, [r3, #24]
 80045c0:	e060      	b.n	8004684 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d11c      	bne.n	8004602 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f000 ff5f 	bl	800549a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6999      	ldr	r1, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	021a      	lsls	r2, r3, #8
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	619a      	str	r2, [r3, #24]
 8004600:	e040      	b.n	8004684 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d11b      	bne.n	8004640 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f000 ffac 	bl	8005574 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69da      	ldr	r2, [r3, #28]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 020c 	bic.w	r2, r2, #12
 800462a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69d9      	ldr	r1, [r3, #28]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	61da      	str	r2, [r3, #28]
 800463e:	e021      	b.n	8004684 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d11c      	bne.n	8004680 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f000 ffc9 	bl	80055ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004668:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69d9      	ldr	r1, [r3, #28]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	021a      	lsls	r2, r3, #8
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	61da      	str	r2, [r3, #28]
 800467e:	e001      	b.n	8004684 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800468c:	7dfb      	ldrb	r3, [r7, #23]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e0ff      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b14      	cmp	r3, #20
 80046c2:	f200 80f0 	bhi.w	80048a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	08004721 	.word	0x08004721
 80046d0:	080048a7 	.word	0x080048a7
 80046d4:	080048a7 	.word	0x080048a7
 80046d8:	080048a7 	.word	0x080048a7
 80046dc:	08004761 	.word	0x08004761
 80046e0:	080048a7 	.word	0x080048a7
 80046e4:	080048a7 	.word	0x080048a7
 80046e8:	080048a7 	.word	0x080048a7
 80046ec:	080047a3 	.word	0x080047a3
 80046f0:	080048a7 	.word	0x080048a7
 80046f4:	080048a7 	.word	0x080048a7
 80046f8:	080048a7 	.word	0x080048a7
 80046fc:	080047e3 	.word	0x080047e3
 8004700:	080048a7 	.word	0x080048a7
 8004704:	080048a7 	.word	0x080048a7
 8004708:	080048a7 	.word	0x080048a7
 800470c:	08004825 	.word	0x08004825
 8004710:	080048a7 	.word	0x080048a7
 8004714:	080048a7 	.word	0x080048a7
 8004718:	080048a7 	.word	0x080048a7
 800471c:	08004865 	.word	0x08004865
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 faea 	bl	8004d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0204 	bic.w	r2, r2, #4
 800474a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6999      	ldr	r1, [r3, #24]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	619a      	str	r2, [r3, #24]
      break;
 800475e:	e0a5      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fb64 	bl	8004e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6999      	ldr	r1, [r3, #24]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	021a      	lsls	r2, r3, #8
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
      break;
 80047a0:	e084      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fbd7 	bl	8004f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0208 	orr.w	r2, r2, #8
 80047bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0204 	bic.w	r2, r2, #4
 80047cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69d9      	ldr	r1, [r3, #28]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	61da      	str	r2, [r3, #28]
      break;
 80047e0:	e064      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fc49 	bl	8005080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69d9      	ldr	r1, [r3, #28]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	021a      	lsls	r2, r3, #8
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	61da      	str	r2, [r3, #28]
      break;
 8004822:	e043      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fcbc 	bl	80051a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0208 	orr.w	r2, r2, #8
 800483e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0204 	bic.w	r2, r2, #4
 800484e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004862:	e023      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fd06 	bl	800527c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800487e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	021a      	lsls	r2, r3, #8
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80048a4:	e002      	b.n	80048ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
      break;
 80048aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop

080048c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIM_ConfigClockSource+0x1c>
 80048d8:	2302      	movs	r3, #2
 80048da:	e0f6      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x20a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80048fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6f      	ldr	r2, [pc, #444]	; (8004ad4 <HAL_TIM_ConfigClockSource+0x214>)
 8004916:	4293      	cmp	r3, r2
 8004918:	f000 80c1 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 800491c:	4a6d      	ldr	r2, [pc, #436]	; (8004ad4 <HAL_TIM_ConfigClockSource+0x214>)
 800491e:	4293      	cmp	r3, r2
 8004920:	f200 80c6 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004924:	4a6c      	ldr	r2, [pc, #432]	; (8004ad8 <HAL_TIM_ConfigClockSource+0x218>)
 8004926:	4293      	cmp	r3, r2
 8004928:	f000 80b9 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 800492c:	4a6a      	ldr	r2, [pc, #424]	; (8004ad8 <HAL_TIM_ConfigClockSource+0x218>)
 800492e:	4293      	cmp	r3, r2
 8004930:	f200 80be 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004934:	4a69      	ldr	r2, [pc, #420]	; (8004adc <HAL_TIM_ConfigClockSource+0x21c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	f000 80b1 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 800493c:	4a67      	ldr	r2, [pc, #412]	; (8004adc <HAL_TIM_ConfigClockSource+0x21c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	f200 80b6 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004944:	4a66      	ldr	r2, [pc, #408]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x220>)
 8004946:	4293      	cmp	r3, r2
 8004948:	f000 80a9 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 800494c:	4a64      	ldr	r2, [pc, #400]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x220>)
 800494e:	4293      	cmp	r3, r2
 8004950:	f200 80ae 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004954:	4a63      	ldr	r2, [pc, #396]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x224>)
 8004956:	4293      	cmp	r3, r2
 8004958:	f000 80a1 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 800495c:	4a61      	ldr	r2, [pc, #388]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x224>)
 800495e:	4293      	cmp	r3, r2
 8004960:	f200 80a6 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004964:	4a60      	ldr	r2, [pc, #384]	; (8004ae8 <HAL_TIM_ConfigClockSource+0x228>)
 8004966:	4293      	cmp	r3, r2
 8004968:	f000 8099 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 800496c:	4a5e      	ldr	r2, [pc, #376]	; (8004ae8 <HAL_TIM_ConfigClockSource+0x228>)
 800496e:	4293      	cmp	r3, r2
 8004970:	f200 809e 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004974:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004978:	f000 8091 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 800497c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004980:	f200 8096 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004988:	f000 8089 	beq.w	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 800498c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004990:	f200 808e 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004998:	d03e      	beq.n	8004a18 <HAL_TIM_ConfigClockSource+0x158>
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499e:	f200 8087 	bhi.w	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	f000 8086 	beq.w	8004ab6 <HAL_TIM_ConfigClockSource+0x1f6>
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	d87f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b0:	2b70      	cmp	r3, #112	; 0x70
 80049b2:	d01a      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x12a>
 80049b4:	2b70      	cmp	r3, #112	; 0x70
 80049b6:	d87b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b8:	2b60      	cmp	r3, #96	; 0x60
 80049ba:	d050      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x19e>
 80049bc:	2b60      	cmp	r3, #96	; 0x60
 80049be:	d877      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d03c      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x17e>
 80049c4:	2b50      	cmp	r3, #80	; 0x50
 80049c6:	d873      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d058      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x1be>
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d86f      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d064      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d86b      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d060      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d867      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05c      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d05a      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0x1de>
 80049e8:	e062      	b.n	8004ab0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6899      	ldr	r1, [r3, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f000 fe51 	bl	80056a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	609a      	str	r2, [r3, #8]
      break;
 8004a16:	e04f      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6899      	ldr	r1, [r3, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f000 fe3a 	bl	80056a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a3a:	609a      	str	r2, [r3, #8]
      break;
 8004a3c:	e03c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 fcf6 	bl	800543c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2150      	movs	r1, #80	; 0x50
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fe05 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e02c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f000 fd52 	bl	8005514 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2160      	movs	r1, #96	; 0x60
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fdf5 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 8004a7c:	e01c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f000 fcd6 	bl	800543c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fde5 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 8004a9c:	e00c      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f000 fddc 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 8004aae:	e003      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab4:	e000      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	00100070 	.word	0x00100070
 8004ad8:	00100060 	.word	0x00100060
 8004adc:	00100050 	.word	0x00100050
 8004ae0:	00100040 	.word	0x00100040
 8004ae4:	00100030 	.word	0x00100030
 8004ae8:	00100020 	.word	0x00100020

08004aec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d831      	bhi.n	8004b64 <HAL_TIM_ReadCapturedValue+0x78>
 8004b00:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b3d 	.word	0x08004b3d
 8004b0c:	08004b65 	.word	0x08004b65
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b65 	.word	0x08004b65
 8004b20:	08004b65 	.word	0x08004b65
 8004b24:	08004b65 	.word	0x08004b65
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b65 	.word	0x08004b65
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004b65 	.word	0x08004b65
 8004b38:	08004b5b 	.word	0x08004b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	60fb      	str	r3, [r7, #12]

      break;
 8004b44:	e00f      	b.n	8004b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	60fb      	str	r3, [r7, #12]

      break;
 8004b4e:	e00a      	b.n	8004b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	60fb      	str	r3, [r7, #12]

      break;
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	60fb      	str	r3, [r7, #12]

      break;
 8004b62:	e000      	b.n	8004b66 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004b64:	bf00      	nop
  }

  return tmpreg;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a46      	ldr	r2, [pc, #280]	; (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d017      	beq.n	8004bf8 <TIM_Base_SetConfig+0x48>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bce:	d013      	beq.n	8004bf8 <TIM_Base_SetConfig+0x48>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a43      	ldr	r2, [pc, #268]	; (8004ce0 <TIM_Base_SetConfig+0x130>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00f      	beq.n	8004bf8 <TIM_Base_SetConfig+0x48>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a42      	ldr	r2, [pc, #264]	; (8004ce4 <TIM_Base_SetConfig+0x134>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <TIM_Base_SetConfig+0x48>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a41      	ldr	r2, [pc, #260]	; (8004ce8 <TIM_Base_SetConfig+0x138>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <TIM_Base_SetConfig+0x48>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a40      	ldr	r2, [pc, #256]	; (8004cec <TIM_Base_SetConfig+0x13c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_Base_SetConfig+0x48>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a3f      	ldr	r2, [pc, #252]	; (8004cf0 <TIM_Base_SetConfig+0x140>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d108      	bne.n	8004c0a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a33      	ldr	r2, [pc, #204]	; (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d023      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d01f      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a30      	ldr	r2, [pc, #192]	; (8004ce0 <TIM_Base_SetConfig+0x130>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01b      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2f      	ldr	r2, [pc, #188]	; (8004ce4 <TIM_Base_SetConfig+0x134>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d017      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ce8 <TIM_Base_SetConfig+0x138>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2d      	ldr	r2, [pc, #180]	; (8004cec <TIM_Base_SetConfig+0x13c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <TIM_Base_SetConfig+0x144>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <TIM_Base_SetConfig+0x148>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <TIM_Base_SetConfig+0x14c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_Base_SetConfig+0xaa>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a26      	ldr	r2, [pc, #152]	; (8004cf0 <TIM_Base_SetConfig+0x140>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <TIM_Base_SetConfig+0x110>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a14      	ldr	r2, [pc, #80]	; (8004cec <TIM_Base_SetConfig+0x13c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00f      	beq.n	8004cc0 <TIM_Base_SetConfig+0x110>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <TIM_Base_SetConfig+0x144>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00b      	beq.n	8004cc0 <TIM_Base_SetConfig+0x110>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <TIM_Base_SetConfig+0x148>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d007      	beq.n	8004cc0 <TIM_Base_SetConfig+0x110>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <TIM_Base_SetConfig+0x14c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <TIM_Base_SetConfig+0x110>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a0d      	ldr	r2, [pc, #52]	; (8004cf0 <TIM_Base_SetConfig+0x140>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d103      	bne.n	8004cc8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	615a      	str	r2, [r3, #20]
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40015000 	.word	0x40015000
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	40014400 	.word	0x40014400
 8004cfc:	40014800 	.word	0x40014800

08004d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 0302 	bic.w	r3, r3, #2
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a30      	ldr	r2, [pc, #192]	; (8004e1c <TIM_OC1_SetConfig+0x11c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <TIM_OC1_SetConfig+0x88>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a2f      	ldr	r2, [pc, #188]	; (8004e20 <TIM_OC1_SetConfig+0x120>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00f      	beq.n	8004d88 <TIM_OC1_SetConfig+0x88>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a2e      	ldr	r2, [pc, #184]	; (8004e24 <TIM_OC1_SetConfig+0x124>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00b      	beq.n	8004d88 <TIM_OC1_SetConfig+0x88>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a2d      	ldr	r2, [pc, #180]	; (8004e28 <TIM_OC1_SetConfig+0x128>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d007      	beq.n	8004d88 <TIM_OC1_SetConfig+0x88>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <TIM_OC1_SetConfig+0x12c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_OC1_SetConfig+0x88>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <TIM_OC1_SetConfig+0x130>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d10c      	bne.n	8004da2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f023 0308 	bic.w	r3, r3, #8
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <TIM_OC1_SetConfig+0x11c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <TIM_OC1_SetConfig+0xd2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <TIM_OC1_SetConfig+0x120>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <TIM_OC1_SetConfig+0xd2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <TIM_OC1_SetConfig+0x124>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_OC1_SetConfig+0xd2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <TIM_OC1_SetConfig+0x128>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_OC1_SetConfig+0xd2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <TIM_OC1_SetConfig+0x12c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_OC1_SetConfig+0xd2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <TIM_OC1_SetConfig+0x130>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40013400 	.word	0x40013400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800
 8004e30:	40015000 	.word	0x40015000

08004e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0210 	bic.w	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0320 	bic.w	r3, r3, #32
 8004e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <TIM_OC2_SetConfig+0x110>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_OC2_SetConfig+0x74>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <TIM_OC2_SetConfig+0x114>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC2_SetConfig+0x74>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <TIM_OC2_SetConfig+0x118>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10d      	bne.n	8004ec4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <TIM_OC2_SetConfig+0x110>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <TIM_OC2_SetConfig+0xc0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <TIM_OC2_SetConfig+0x114>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_OC2_SetConfig+0xc0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <TIM_OC2_SetConfig+0x11c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_OC2_SetConfig+0xc0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <TIM_OC2_SetConfig+0x120>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_OC2_SetConfig+0xc0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <TIM_OC2_SetConfig+0x124>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC2_SetConfig+0xc0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <TIM_OC2_SetConfig+0x118>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d113      	bne.n	8004f1c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40015000 	.word	0x40015000
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800

08004f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2b      	ldr	r2, [pc, #172]	; (8005068 <TIM_OC3_SetConfig+0x10c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <TIM_OC3_SetConfig+0x72>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2a      	ldr	r2, [pc, #168]	; (800506c <TIM_OC3_SetConfig+0x110>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_OC3_SetConfig+0x72>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a29      	ldr	r2, [pc, #164]	; (8005070 <TIM_OC3_SetConfig+0x114>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d10d      	bne.n	8004fea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <TIM_OC3_SetConfig+0x10c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <TIM_OC3_SetConfig+0xbe>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1d      	ldr	r2, [pc, #116]	; (800506c <TIM_OC3_SetConfig+0x110>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_OC3_SetConfig+0xbe>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <TIM_OC3_SetConfig+0x118>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_OC3_SetConfig+0xbe>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <TIM_OC3_SetConfig+0x11c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_OC3_SetConfig+0xbe>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1b      	ldr	r2, [pc, #108]	; (800507c <TIM_OC3_SetConfig+0x120>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC3_SetConfig+0xbe>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a16      	ldr	r2, [pc, #88]	; (8005070 <TIM_OC3_SetConfig+0x114>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d113      	bne.n	8005042 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40015000 	.word	0x40015000
 8005074:	40014000 	.word	0x40014000
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800

08005080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	031b      	lsls	r3, r3, #12
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <TIM_OC4_SetConfig+0x110>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_OC4_SetConfig+0x74>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a2b      	ldr	r2, [pc, #172]	; (8005194 <TIM_OC4_SetConfig+0x114>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_OC4_SetConfig+0x74>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <TIM_OC4_SetConfig+0x118>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10d      	bne.n	8005110 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a1f      	ldr	r2, [pc, #124]	; (8005190 <TIM_OC4_SetConfig+0x110>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <TIM_OC4_SetConfig+0xc0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <TIM_OC4_SetConfig+0x114>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00f      	beq.n	8005140 <TIM_OC4_SetConfig+0xc0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a1e      	ldr	r2, [pc, #120]	; (800519c <TIM_OC4_SetConfig+0x11c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <TIM_OC4_SetConfig+0xc0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <TIM_OC4_SetConfig+0x120>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_OC4_SetConfig+0xc0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <TIM_OC4_SetConfig+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC4_SetConfig+0xc0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a17      	ldr	r2, [pc, #92]	; (8005198 <TIM_OC4_SetConfig+0x118>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d113      	bne.n	8005168 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005146:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800514e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	019b      	lsls	r3, r3, #6
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	621a      	str	r2, [r3, #32]
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40013400 	.word	0x40013400
 8005198:	40015000 	.word	0x40015000
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800

080051a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <TIM_OC5_SetConfig+0xbc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <TIM_OC5_SetConfig+0x82>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a18      	ldr	r2, [pc, #96]	; (8005268 <TIM_OC5_SetConfig+0xc0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00f      	beq.n	800522a <TIM_OC5_SetConfig+0x82>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a17      	ldr	r2, [pc, #92]	; (800526c <TIM_OC5_SetConfig+0xc4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00b      	beq.n	800522a <TIM_OC5_SetConfig+0x82>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <TIM_OC5_SetConfig+0xc8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <TIM_OC5_SetConfig+0x82>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a15      	ldr	r2, [pc, #84]	; (8005274 <TIM_OC5_SetConfig+0xcc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_OC5_SetConfig+0x82>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <TIM_OC5_SetConfig+0xd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d109      	bne.n	800523e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005230:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40013400 	.word	0x40013400
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800
 8005278:	40015000 	.word	0x40015000

0800527c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	051b      	lsls	r3, r3, #20
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a1a      	ldr	r2, [pc, #104]	; (800533c <TIM_OC6_SetConfig+0xc0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <TIM_OC6_SetConfig+0x84>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a19      	ldr	r2, [pc, #100]	; (8005340 <TIM_OC6_SetConfig+0xc4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00f      	beq.n	8005300 <TIM_OC6_SetConfig+0x84>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a18      	ldr	r2, [pc, #96]	; (8005344 <TIM_OC6_SetConfig+0xc8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00b      	beq.n	8005300 <TIM_OC6_SetConfig+0x84>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a17      	ldr	r2, [pc, #92]	; (8005348 <TIM_OC6_SetConfig+0xcc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_OC6_SetConfig+0x84>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a16      	ldr	r2, [pc, #88]	; (800534c <TIM_OC6_SetConfig+0xd0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_OC6_SetConfig+0x84>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a15      	ldr	r2, [pc, #84]	; (8005350 <TIM_OC6_SetConfig+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d109      	bne.n	8005314 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005306:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	029b      	lsls	r3, r3, #10
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40013400 	.word	0x40013400
 8005344:	40014000 	.word	0x40014000
 8005348:	40014400 	.word	0x40014400
 800534c:	40014800 	.word	0x40014800
 8005350:	40015000 	.word	0x40015000

08005354 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f023 0201 	bic.w	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a28      	ldr	r2, [pc, #160]	; (8005420 <TIM_TI1_SetConfig+0xcc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01b      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005388:	d017      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a25      	ldr	r2, [pc, #148]	; (8005424 <TIM_TI1_SetConfig+0xd0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a24      	ldr	r2, [pc, #144]	; (8005428 <TIM_TI1_SetConfig+0xd4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a23      	ldr	r2, [pc, #140]	; (800542c <TIM_TI1_SetConfig+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4a22      	ldr	r2, [pc, #136]	; (8005430 <TIM_TI1_SetConfig+0xdc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4a21      	ldr	r2, [pc, #132]	; (8005434 <TIM_TI1_SetConfig+0xe0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_TI1_SetConfig+0x66>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a20      	ldr	r2, [pc, #128]	; (8005438 <TIM_TI1_SetConfig+0xe4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d101      	bne.n	80053be <TIM_TI1_SetConfig+0x6a>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <TIM_TI1_SetConfig+0x6c>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e003      	b.n	80053de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f023 030a 	bic.w	r3, r3, #10
 80053f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f003 030a 	and.w	r3, r3, #10
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40014000 	.word	0x40014000
 8005438:	40015000 	.word	0x40015000

0800543c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0201 	bic.w	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 030a 	bic.w	r3, r3, #10
 8005478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f023 0210 	bic.w	r2, r3, #16
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	031b      	lsls	r3, r3, #12
 80054de:	b29b      	uxth	r3, r3
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	621a      	str	r2, [r3, #32]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f023 0210 	bic.w	r2, r3, #16
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800553e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	031b      	lsls	r3, r3, #12
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005550:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0303 	bic.w	r3, r3, #3
 80055a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80055c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	621a      	str	r2, [r3, #32]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005618:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800562a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	031b      	lsls	r3, r3, #12
 8005630:	b29b      	uxth	r3, r3
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800563e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	031b      	lsls	r3, r3, #12
 8005644:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800567c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	f043 0307 	orr.w	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	021a      	lsls	r2, r3, #8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	2201      	movs	r2, #1
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1a      	ldr	r2, [r3, #32]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	43db      	mvns	r3, r3
 8005702:	401a      	ands	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a1a      	ldr	r2, [r3, #32]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	431a      	orrs	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005740:	2302      	movs	r3, #2
 8005742:	e074      	b.n	800582e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a34      	ldr	r2, [pc, #208]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a33      	ldr	r2, [pc, #204]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a31      	ldr	r2, [pc, #196]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d108      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005788:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a21      	ldr	r2, [pc, #132]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d01d      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1d      	ldr	r2, [pc, #116]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a11      	ldr	r2, [pc, #68]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10c      	bne.n	800581c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4313      	orrs	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40013400 	.word	0x40013400
 8005844:	40015000 	.word	0x40015000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40014000 	.word	0x40014000

08005858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e042      	b.n	800597c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fc fb99 	bl	8002040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2224      	movs	r2, #36	; 0x24
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fbfa 	bl	8006120 <UART_SetConfig>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e022      	b.n	800597c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 feea 	bl	8006718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005952:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005962:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 ff71 	bl	800685c <UART_CheckIdleState>
 800597a:	4603      	mov	r3, r0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af02      	add	r7, sp, #8
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599a:	2b20      	cmp	r3, #32
 800599c:	f040 8083 	bne.w	8005aa6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_UART_Transmit+0x28>
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e07b      	b.n	8005aa8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_UART_Transmit+0x3a>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e074      	b.n	8005aa8 <HAL_UART_Transmit+0x124>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2221      	movs	r2, #33	; 0x21
 80059d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059d6:	f7fc fca3 	bl	8002320 <HAL_GetTick>
 80059da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	d108      	bne.n	8005a08 <HAL_UART_Transmit+0x84>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	e003      	b.n	8005a10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005a18:	e02c      	b.n	8005a74 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2200      	movs	r2, #0
 8005a22:	2180      	movs	r1, #128	; 0x80
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 ff64 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e039      	b.n	8005aa8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	e007      	b.n	8005a62 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1cc      	bne.n	8005a1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2200      	movs	r2, #0
 8005a88:	2140      	movs	r1, #64	; 0x40
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 ff31 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e006      	b.n	8005aa8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e000      	b.n	8005aa8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005aa6:	2302      	movs	r3, #2
  }
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b0ba      	sub	sp, #232	; 0xe8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ad6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ada:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ade:	4013      	ands	r3, r2
 8005ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11b      	bne.n	8005b24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d015      	beq.n	8005b24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 82d6 	beq.w	80060c6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
      }
      return;
 8005b22:	e2d0      	b.n	80060c6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 811f 	beq.w	8005d6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b32:	4b8b      	ldr	r3, [pc, #556]	; (8005d60 <HAL_UART_IRQHandler+0x2b0>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b3e:	4b89      	ldr	r3, [pc, #548]	; (8005d64 <HAL_UART_IRQHandler+0x2b4>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8112 	beq.w	8005d6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d011      	beq.n	8005b78 <HAL_UART_IRQHandler+0xc8>
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6e:	f043 0201 	orr.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d011      	beq.n	8005ba8 <HAL_UART_IRQHandler+0xf8>
 8005b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2202      	movs	r2, #2
 8005b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b9e:	f043 0204 	orr.w	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d011      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x128>
 8005bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bce:	f043 0202 	orr.w	r2, r3, #2
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d017      	beq.n	8005c14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005bf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005bf4:	4b5a      	ldr	r3, [pc, #360]	; (8005d60 <HAL_UART_IRQHandler+0x2b0>)
 8005bf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0a:	f043 0208 	orr.w	r2, r3, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d012      	beq.n	8005c46 <HAL_UART_IRQHandler+0x196>
 8005c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3c:	f043 0220 	orr.w	r2, r3, #32
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 823c 	beq.w	80060ca <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d013      	beq.n	8005c86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d005      	beq.n	8005caa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04f      	beq.n	8005d4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fee9 	bl	8006a82 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d141      	bne.n	8005d42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1d9      	bne.n	8005cbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <HAL_UART_IRQHandler+0x2b8>)
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fc fc72 	bl	8002608 <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d017      	beq.n	8005d5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	e00f      	b.n	8005d5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9da 	bl	80060f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e00b      	b.n	8005d5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9d6 	bl	80060f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e007      	b.n	8005d5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f9d2 	bl	80060f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005d58:	e1b7      	b.n	80060ca <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5a:	bf00      	nop
    return;
 8005d5c:	e1b5      	b.n	80060ca <HAL_UART_IRQHandler+0x61a>
 8005d5e:	bf00      	nop
 8005d60:	10000001 	.word	0x10000001
 8005d64:	04000120 	.word	0x04000120
 8005d68:	08006b4f 	.word	0x08006b4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	f040 814a 	bne.w	800600a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8143 	beq.w	800600a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 813c 	beq.w	800600a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2210      	movs	r2, #16
 8005d98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	f040 80b5 	bne.w	8005f14 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8187 	beq.w	80060ce <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	f080 817f 	bcs.w	80060ce <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8086 	bne.w	8005ef8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1da      	bne.n	8005dec <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e1      	bne.n	8005e36 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e3      	bne.n	8005e72 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec8:	f023 0310 	bic.w	r3, r3, #16
 8005ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eda:	65bb      	str	r3, [r7, #88]	; 0x58
 8005edc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e4      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fc fb2f 	bl	8002556 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f8fb 	bl	8006108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f12:	e0dc      	b.n	80060ce <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80ce 	beq.w	80060d2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80c9 	beq.w	80060d2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f62:	647b      	str	r3, [r7, #68]	; 0x44
 8005f64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e4      	bne.n	8005f40 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	623b      	str	r3, [r7, #32]
   return(result);
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f9e:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e1      	bne.n	8005f76 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0310 	bic.w	r3, r3, #16
 8005fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e4      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f880 	bl	8006108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006008:	e063      	b.n	80060d2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00e      	beq.n	8006034 <HAL_UART_IRQHandler+0x584>
 8006016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800601a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800602a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fdcf 	bl	8006bd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006032:	e051      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603c:	2b00      	cmp	r3, #0
 800603e:	d014      	beq.n	800606a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800604c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605c:	2b00      	cmp	r3, #0
 800605e:	d03a      	beq.n	80060d6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
    }
    return;
 8006068:	e035      	b.n	80060d6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <HAL_UART_IRQHandler+0x5da>
 8006076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fd79 	bl	8006b7a <UART_EndTransmit_IT>
    return;
 8006088:	e026      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_UART_IRQHandler+0x5fa>
 8006096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fda8 	bl	8006bf8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060a8:	e016      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d010      	beq.n	80060d8 <HAL_UART_IRQHandler+0x628>
 80060b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	da0c      	bge.n	80060d8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fd90 	bl	8006be4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c4:	e008      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
      return;
 80060c6:	bf00      	nop
 80060c8:	e006      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
    return;
 80060ca:	bf00      	nop
 80060cc:	e004      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
      return;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
      return;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
    return;
 80060d6:	bf00      	nop
  }
}
 80060d8:	37e8      	adds	r7, #232	; 0xe8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop

080060e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006124:	b08c      	sub	sp, #48	; 0x30
 8006126:	af00      	add	r7, sp, #0
 8006128:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	431a      	orrs	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	431a      	orrs	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	4313      	orrs	r3, r2
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4baa      	ldr	r3, [pc, #680]	; (80063f8 <UART_SetConfig+0x2d8>)
 8006150:	4013      	ands	r3, r2
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006158:	430b      	orrs	r3, r1
 800615a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a9f      	ldr	r2, [pc, #636]	; (80063fc <UART_SetConfig+0x2dc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006188:	4313      	orrs	r3, r2
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006196:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	f023 010f 	bic.w	r1, r3, #15
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a90      	ldr	r2, [pc, #576]	; (8006400 <UART_SetConfig+0x2e0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d125      	bne.n	8006210 <UART_SetConfig+0xf0>
 80061c4:	4b8f      	ldr	r3, [pc, #572]	; (8006404 <UART_SetConfig+0x2e4>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d81a      	bhi.n	8006208 <UART_SetConfig+0xe8>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0xb8>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061e9 	.word	0x080061e9
 80061dc:	080061f9 	.word	0x080061f9
 80061e0:	080061f1 	.word	0x080061f1
 80061e4:	08006201 	.word	0x08006201
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ee:	e116      	b.n	800641e <UART_SetConfig+0x2fe>
 80061f0:	2302      	movs	r3, #2
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f6:	e112      	b.n	800641e <UART_SetConfig+0x2fe>
 80061f8:	2304      	movs	r3, #4
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fe:	e10e      	b.n	800641e <UART_SetConfig+0x2fe>
 8006200:	2308      	movs	r3, #8
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006206:	e10a      	b.n	800641e <UART_SetConfig+0x2fe>
 8006208:	2310      	movs	r3, #16
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620e:	e106      	b.n	800641e <UART_SetConfig+0x2fe>
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a7c      	ldr	r2, [pc, #496]	; (8006408 <UART_SetConfig+0x2e8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d138      	bne.n	800628c <UART_SetConfig+0x16c>
 800621a:	4b7a      	ldr	r3, [pc, #488]	; (8006404 <UART_SetConfig+0x2e4>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f003 030c 	and.w	r3, r3, #12
 8006224:	2b0c      	cmp	r3, #12
 8006226:	d82d      	bhi.n	8006284 <UART_SetConfig+0x164>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <UART_SetConfig+0x110>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006265 	.word	0x08006265
 8006234:	08006285 	.word	0x08006285
 8006238:	08006285 	.word	0x08006285
 800623c:	08006285 	.word	0x08006285
 8006240:	08006275 	.word	0x08006275
 8006244:	08006285 	.word	0x08006285
 8006248:	08006285 	.word	0x08006285
 800624c:	08006285 	.word	0x08006285
 8006250:	0800626d 	.word	0x0800626d
 8006254:	08006285 	.word	0x08006285
 8006258:	08006285 	.word	0x08006285
 800625c:	08006285 	.word	0x08006285
 8006260:	0800627d 	.word	0x0800627d
 8006264:	2300      	movs	r3, #0
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626a:	e0d8      	b.n	800641e <UART_SetConfig+0x2fe>
 800626c:	2302      	movs	r3, #2
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006272:	e0d4      	b.n	800641e <UART_SetConfig+0x2fe>
 8006274:	2304      	movs	r3, #4
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627a:	e0d0      	b.n	800641e <UART_SetConfig+0x2fe>
 800627c:	2308      	movs	r3, #8
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006282:	e0cc      	b.n	800641e <UART_SetConfig+0x2fe>
 8006284:	2310      	movs	r3, #16
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628a:	e0c8      	b.n	800641e <UART_SetConfig+0x2fe>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5e      	ldr	r2, [pc, #376]	; (800640c <UART_SetConfig+0x2ec>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d125      	bne.n	80062e2 <UART_SetConfig+0x1c2>
 8006296:	4b5b      	ldr	r3, [pc, #364]	; (8006404 <UART_SetConfig+0x2e4>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062a0:	2b30      	cmp	r3, #48	; 0x30
 80062a2:	d016      	beq.n	80062d2 <UART_SetConfig+0x1b2>
 80062a4:	2b30      	cmp	r3, #48	; 0x30
 80062a6:	d818      	bhi.n	80062da <UART_SetConfig+0x1ba>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d00a      	beq.n	80062c2 <UART_SetConfig+0x1a2>
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d814      	bhi.n	80062da <UART_SetConfig+0x1ba>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <UART_SetConfig+0x19a>
 80062b4:	2b10      	cmp	r3, #16
 80062b6:	d008      	beq.n	80062ca <UART_SetConfig+0x1aa>
 80062b8:	e00f      	b.n	80062da <UART_SetConfig+0x1ba>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c0:	e0ad      	b.n	800641e <UART_SetConfig+0x2fe>
 80062c2:	2302      	movs	r3, #2
 80062c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c8:	e0a9      	b.n	800641e <UART_SetConfig+0x2fe>
 80062ca:	2304      	movs	r3, #4
 80062cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d0:	e0a5      	b.n	800641e <UART_SetConfig+0x2fe>
 80062d2:	2308      	movs	r3, #8
 80062d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d8:	e0a1      	b.n	800641e <UART_SetConfig+0x2fe>
 80062da:	2310      	movs	r3, #16
 80062dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e0:	e09d      	b.n	800641e <UART_SetConfig+0x2fe>
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a4a      	ldr	r2, [pc, #296]	; (8006410 <UART_SetConfig+0x2f0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d125      	bne.n	8006338 <UART_SetConfig+0x218>
 80062ec:	4b45      	ldr	r3, [pc, #276]	; (8006404 <UART_SetConfig+0x2e4>)
 80062ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062f6:	2bc0      	cmp	r3, #192	; 0xc0
 80062f8:	d016      	beq.n	8006328 <UART_SetConfig+0x208>
 80062fa:	2bc0      	cmp	r3, #192	; 0xc0
 80062fc:	d818      	bhi.n	8006330 <UART_SetConfig+0x210>
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d00a      	beq.n	8006318 <UART_SetConfig+0x1f8>
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d814      	bhi.n	8006330 <UART_SetConfig+0x210>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <UART_SetConfig+0x1f0>
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d008      	beq.n	8006320 <UART_SetConfig+0x200>
 800630e:	e00f      	b.n	8006330 <UART_SetConfig+0x210>
 8006310:	2300      	movs	r3, #0
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006316:	e082      	b.n	800641e <UART_SetConfig+0x2fe>
 8006318:	2302      	movs	r3, #2
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631e:	e07e      	b.n	800641e <UART_SetConfig+0x2fe>
 8006320:	2304      	movs	r3, #4
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006326:	e07a      	b.n	800641e <UART_SetConfig+0x2fe>
 8006328:	2308      	movs	r3, #8
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632e:	e076      	b.n	800641e <UART_SetConfig+0x2fe>
 8006330:	2310      	movs	r3, #16
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006336:	e072      	b.n	800641e <UART_SetConfig+0x2fe>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a35      	ldr	r2, [pc, #212]	; (8006414 <UART_SetConfig+0x2f4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d12a      	bne.n	8006398 <UART_SetConfig+0x278>
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <UART_SetConfig+0x2e4>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800634c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006350:	d01a      	beq.n	8006388 <UART_SetConfig+0x268>
 8006352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006356:	d81b      	bhi.n	8006390 <UART_SetConfig+0x270>
 8006358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635c:	d00c      	beq.n	8006378 <UART_SetConfig+0x258>
 800635e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006362:	d815      	bhi.n	8006390 <UART_SetConfig+0x270>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <UART_SetConfig+0x250>
 8006368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636c:	d008      	beq.n	8006380 <UART_SetConfig+0x260>
 800636e:	e00f      	b.n	8006390 <UART_SetConfig+0x270>
 8006370:	2300      	movs	r3, #0
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006376:	e052      	b.n	800641e <UART_SetConfig+0x2fe>
 8006378:	2302      	movs	r3, #2
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637e:	e04e      	b.n	800641e <UART_SetConfig+0x2fe>
 8006380:	2304      	movs	r3, #4
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006386:	e04a      	b.n	800641e <UART_SetConfig+0x2fe>
 8006388:	2308      	movs	r3, #8
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638e:	e046      	b.n	800641e <UART_SetConfig+0x2fe>
 8006390:	2310      	movs	r3, #16
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006396:	e042      	b.n	800641e <UART_SetConfig+0x2fe>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a17      	ldr	r2, [pc, #92]	; (80063fc <UART_SetConfig+0x2dc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d13a      	bne.n	8006418 <UART_SetConfig+0x2f8>
 80063a2:	4b18      	ldr	r3, [pc, #96]	; (8006404 <UART_SetConfig+0x2e4>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b0:	d01a      	beq.n	80063e8 <UART_SetConfig+0x2c8>
 80063b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b6:	d81b      	bhi.n	80063f0 <UART_SetConfig+0x2d0>
 80063b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063bc:	d00c      	beq.n	80063d8 <UART_SetConfig+0x2b8>
 80063be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c2:	d815      	bhi.n	80063f0 <UART_SetConfig+0x2d0>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <UART_SetConfig+0x2b0>
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063cc:	d008      	beq.n	80063e0 <UART_SetConfig+0x2c0>
 80063ce:	e00f      	b.n	80063f0 <UART_SetConfig+0x2d0>
 80063d0:	2300      	movs	r3, #0
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d6:	e022      	b.n	800641e <UART_SetConfig+0x2fe>
 80063d8:	2302      	movs	r3, #2
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063de:	e01e      	b.n	800641e <UART_SetConfig+0x2fe>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e6:	e01a      	b.n	800641e <UART_SetConfig+0x2fe>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ee:	e016      	b.n	800641e <UART_SetConfig+0x2fe>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f6:	e012      	b.n	800641e <UART_SetConfig+0x2fe>
 80063f8:	cfff69f3 	.word	0xcfff69f3
 80063fc:	40008000 	.word	0x40008000
 8006400:	40013800 	.word	0x40013800
 8006404:	40021000 	.word	0x40021000
 8006408:	40004400 	.word	0x40004400
 800640c:	40004800 	.word	0x40004800
 8006410:	40004c00 	.word	0x40004c00
 8006414:	40005000 	.word	0x40005000
 8006418:	2310      	movs	r3, #16
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4aae      	ldr	r2, [pc, #696]	; (80066dc <UART_SetConfig+0x5bc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	f040 8097 	bne.w	8006558 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800642a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800642e:	2b08      	cmp	r3, #8
 8006430:	d823      	bhi.n	800647a <UART_SetConfig+0x35a>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <UART_SetConfig+0x318>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	0800645d 	.word	0x0800645d
 800643c:	0800647b 	.word	0x0800647b
 8006440:	08006465 	.word	0x08006465
 8006444:	0800647b 	.word	0x0800647b
 8006448:	0800646b 	.word	0x0800646b
 800644c:	0800647b 	.word	0x0800647b
 8006450:	0800647b 	.word	0x0800647b
 8006454:	0800647b 	.word	0x0800647b
 8006458:	08006473 	.word	0x08006473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800645c:	f7fd f854 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8006460:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006462:	e010      	b.n	8006486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006464:	4b9e      	ldr	r3, [pc, #632]	; (80066e0 <UART_SetConfig+0x5c0>)
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006468:	e00d      	b.n	8006486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800646a:	f7fc ffdf 	bl	800342c <HAL_RCC_GetSysClockFreq>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006470:	e009      	b.n	8006486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006478:	e005      	b.n	8006486 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8130 	beq.w	80066ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	4a94      	ldr	r2, [pc, #592]	; (80066e4 <UART_SetConfig+0x5c4>)
 8006494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006498:	461a      	mov	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	4413      	add	r3, r2
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d305      	bcc.n	80064be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d903      	bls.n	80064c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064c4:	e113      	b.n	80066ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	2200      	movs	r2, #0
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	60fa      	str	r2, [r7, #12]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	4a84      	ldr	r2, [pc, #528]	; (80066e4 <UART_SetConfig+0x5c4>)
 80064d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2200      	movs	r2, #0
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064e8:	f7fa fb08 	bl	8000afc <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	020b      	lsls	r3, r1, #8
 80064fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006502:	0202      	lsls	r2, r0, #8
 8006504:	6979      	ldr	r1, [r7, #20]
 8006506:	6849      	ldr	r1, [r1, #4]
 8006508:	0849      	lsrs	r1, r1, #1
 800650a:	2000      	movs	r0, #0
 800650c:	460c      	mov	r4, r1
 800650e:	4605      	mov	r5, r0
 8006510:	eb12 0804 	adds.w	r8, r2, r4
 8006514:	eb43 0905 	adc.w	r9, r3, r5
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	469a      	mov	sl, r3
 8006520:	4693      	mov	fp, r2
 8006522:	4652      	mov	r2, sl
 8006524:	465b      	mov	r3, fp
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7fa fae7 	bl	8000afc <__aeabi_uldivmod>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4613      	mov	r3, r2
 8006534:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653c:	d308      	bcc.n	8006550 <UART_SetConfig+0x430>
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006544:	d204      	bcs.n	8006550 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	60da      	str	r2, [r3, #12]
 800654e:	e0ce      	b.n	80066ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006556:	e0ca      	b.n	80066ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006560:	d166      	bne.n	8006630 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006562:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006566:	2b08      	cmp	r3, #8
 8006568:	d827      	bhi.n	80065ba <UART_SetConfig+0x49a>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <UART_SetConfig+0x450>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006595 	.word	0x08006595
 8006574:	0800659d 	.word	0x0800659d
 8006578:	080065a5 	.word	0x080065a5
 800657c:	080065bb 	.word	0x080065bb
 8006580:	080065ab 	.word	0x080065ab
 8006584:	080065bb 	.word	0x080065bb
 8006588:	080065bb 	.word	0x080065bb
 800658c:	080065bb 	.word	0x080065bb
 8006590:	080065b3 	.word	0x080065b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006594:	f7fc ffb8 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800659a:	e014      	b.n	80065c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800659c:	f7fc ffca 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 80065a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065a2:	e010      	b.n	80065c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a4:	4b4e      	ldr	r3, [pc, #312]	; (80066e0 <UART_SetConfig+0x5c0>)
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065a8:	e00d      	b.n	80065c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065aa:	f7fc ff3f 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80065ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065b0:	e009      	b.n	80065c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065b8:	e005      	b.n	80065c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8090 	beq.w	80066ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	4a44      	ldr	r2, [pc, #272]	; (80066e4 <UART_SetConfig+0x5c4>)
 80065d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d8:	461a      	mov	r2, r3
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e0:	005a      	lsls	r2, r3, #1
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	441a      	add	r2, r3
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d916      	bls.n	8006628 <UART_SetConfig+0x508>
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006600:	d212      	bcs.n	8006628 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	b29b      	uxth	r3, r3
 8006606:	f023 030f 	bic.w	r3, r3, #15
 800660a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	b29b      	uxth	r3, r3
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	b29a      	uxth	r2, r3
 8006618:	8bfb      	ldrh	r3, [r7, #30]
 800661a:	4313      	orrs	r3, r2
 800661c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	8bfa      	ldrh	r2, [r7, #30]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	e062      	b.n	80066ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800662e:	e05e      	b.n	80066ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006630:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006634:	2b08      	cmp	r3, #8
 8006636:	d828      	bhi.n	800668a <UART_SetConfig+0x56a>
 8006638:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <UART_SetConfig+0x520>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	08006665 	.word	0x08006665
 8006644:	0800666d 	.word	0x0800666d
 8006648:	08006675 	.word	0x08006675
 800664c:	0800668b 	.word	0x0800668b
 8006650:	0800667b 	.word	0x0800667b
 8006654:	0800668b 	.word	0x0800668b
 8006658:	0800668b 	.word	0x0800668b
 800665c:	0800668b 	.word	0x0800668b
 8006660:	08006683 	.word	0x08006683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006664:	f7fc ff50 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800666a:	e014      	b.n	8006696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800666c:	f7fc ff62 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 8006670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006672:	e010      	b.n	8006696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006674:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <UART_SetConfig+0x5c0>)
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006678:	e00d      	b.n	8006696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667a:	f7fc fed7 	bl	800342c <HAL_RCC_GetSysClockFreq>
 800667e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006680:	e009      	b.n	8006696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006688:	e005      	b.n	8006696 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006694:	bf00      	nop
    }

    if (pclk != 0U)
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	d028      	beq.n	80066ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <UART_SetConfig+0x5c4>)
 80066a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	441a      	add	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	2b0f      	cmp	r3, #15
 80066c4:	d910      	bls.n	80066e8 <UART_SetConfig+0x5c8>
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066cc:	d20c      	bcs.n	80066e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60da      	str	r2, [r3, #12]
 80066d8:	e009      	b.n	80066ee <UART_SetConfig+0x5ce>
 80066da:	bf00      	nop
 80066dc:	40008000 	.word	0x40008000
 80066e0:	00f42400 	.word	0x00f42400
 80066e4:	0800af90 	.word	0x0800af90
      }
      else
      {
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2200      	movs	r2, #0
 8006708:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800670a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800670e:	4618      	mov	r0, r3
 8006710:	3730      	adds	r7, #48	; 0x30
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01a      	beq.n	800682e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006816:	d10a      	bne.n	800682e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800686c:	f7fb fd58 	bl	8002320 <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b08      	cmp	r3, #8
 800687e:	d10e      	bne.n	800689e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f82f 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e025      	b.n	80068ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d10e      	bne.n	80068ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f819 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e00f      	b.n	80068ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b09c      	sub	sp, #112	; 0x70
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006902:	e0a9      	b.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	f000 80a5 	beq.w	8006a58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fb fd07 	bl	8002320 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <UART_WaitOnFlagUntilTimeout+0x32>
 800691e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006920:	2b00      	cmp	r3, #0
 8006922:	d140      	bne.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006938:	667b      	str	r3, [r7, #100]	; 0x64
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006944:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	663b      	str	r3, [r7, #96]	; 0x60
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006976:	64ba      	str	r2, [r7, #72]	; 0x48
 8006978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800697c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e069      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d051      	beq.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c2:	d149      	bne.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
 80069ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e6      	bne.n	80069ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3308      	adds	r3, #8
 8006a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a20:	623a      	str	r2, [r7, #32]
 8006a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	69f9      	ldr	r1, [r7, #28]
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e5      	bne.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e010      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69da      	ldr	r2, [r3, #28]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4013      	ands	r3, r2
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	f43f af46 	beq.w	8006904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3770      	adds	r7, #112	; 0x70
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b095      	sub	sp, #84	; 0x54
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e3      	bne.n	8006abc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d118      	bne.n	8006b2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f023 0310 	bic.w	r3, r3, #16
 8006b10:	647b      	str	r3, [r7, #68]	; 0x44
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6979      	ldr	r1, [r7, #20]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	613b      	str	r3, [r7, #16]
   return(result);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b42:	bf00      	nop
 8006b44:	3754      	adds	r7, #84	; 0x54
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fac1 	bl	80060f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b088      	sub	sp, #32
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6979      	ldr	r1, [r7, #20]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	613b      	str	r3, [r7, #16]
   return(result);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fa8c 	bl	80060e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bc8:	bf00      	nop
 8006bca:	3720      	adds	r7, #32
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e027      	b.n	8006c72 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2224      	movs	r2, #36	; 0x24
 8006c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0201 	bic.w	r2, r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e02d      	b.n	8006cf2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2224      	movs	r2, #36	; 0x24
 8006ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f850 	bl	8006d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e02d      	b.n	8006d6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2224      	movs	r2, #36	; 0x24
 8006d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f812 	bl	8006d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d98:	e031      	b.n	8006dfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d9e:	2308      	movs	r3, #8
 8006da0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	0e5b      	lsrs	r3, r3, #25
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	0f5b      	lsrs	r3, r3, #29
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	7b3a      	ldrb	r2, [r7, #12]
 8006dc6:	4911      	ldr	r1, [pc, #68]	; (8006e0c <UARTEx_SetNbDataToProcess+0x94>)
 8006dc8:	5c8a      	ldrb	r2, [r1, r2]
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dce:	7b3a      	ldrb	r2, [r7, #12]
 8006dd0:	490f      	ldr	r1, [pc, #60]	; (8006e10 <UARTEx_SetNbDataToProcess+0x98>)
 8006dd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	7b7a      	ldrb	r2, [r7, #13]
 8006de4:	4909      	ldr	r1, [pc, #36]	; (8006e0c <UARTEx_SetNbDataToProcess+0x94>)
 8006de6:	5c8a      	ldrb	r2, [r1, r2]
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dec:	7b7a      	ldrb	r2, [r7, #13]
 8006dee:	4908      	ldr	r1, [pc, #32]	; (8006e10 <UARTEx_SetNbDataToProcess+0x98>)
 8006df0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	0800afa8 	.word	0x0800afa8
 8006e10:	0800afb0 	.word	0x0800afb0

08006e14 <__NVIC_SetPriority>:
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	6039      	str	r1, [r7, #0]
 8006e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	db0a      	blt.n	8006e3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	490c      	ldr	r1, [pc, #48]	; (8006e60 <__NVIC_SetPriority+0x4c>)
 8006e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e32:	0112      	lsls	r2, r2, #4
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	440b      	add	r3, r1
 8006e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e3c:	e00a      	b.n	8006e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	4908      	ldr	r1, [pc, #32]	; (8006e64 <__NVIC_SetPriority+0x50>)
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	3b04      	subs	r3, #4
 8006e4c:	0112      	lsls	r2, r2, #4
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	440b      	add	r3, r1
 8006e52:	761a      	strb	r2, [r3, #24]
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	e000e100 	.word	0xe000e100
 8006e64:	e000ed00 	.word	0xe000ed00

08006e68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f06f 0004 	mvn.w	r0, #4
 8006e72:	f7ff ffcf 	bl	8006e14 <__NVIC_SetPriority>
#endif
}
 8006e76:	bf00      	nop
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e82:	f3ef 8305 	mrs	r3, IPSR
 8006e86:	603b      	str	r3, [r7, #0]
  return(result);
 8006e88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e8e:	f06f 0305 	mvn.w	r3, #5
 8006e92:	607b      	str	r3, [r7, #4]
 8006e94:	e00c      	b.n	8006eb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <osKernelInitialize+0x44>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d105      	bne.n	8006eaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e9e:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <osKernelInitialize+0x44>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	e002      	b.n	8006eb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006eae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006eb0:	687b      	ldr	r3, [r7, #4]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	200003f4 	.word	0x200003f4

08006ec4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eca:	f3ef 8305 	mrs	r3, IPSR
 8006ece:	603b      	str	r3, [r7, #0]
  return(result);
 8006ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ed6:	f06f 0305 	mvn.w	r3, #5
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e010      	b.n	8006f00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <osKernelStart+0x48>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d109      	bne.n	8006efa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ee6:	f7ff ffbf 	bl	8006e68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006eea:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <osKernelStart+0x48>)
 8006eec:	2202      	movs	r2, #2
 8006eee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ef0:	f001 fcbc 	bl	800886c <vTaskStartScheduler>
      stat = osOK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	e002      	b.n	8006f00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295
 8006efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f00:	687b      	ldr	r3, [r7, #4]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200003f4 	.word	0x200003f4

08006f10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08e      	sub	sp, #56	; 0x38
 8006f14:	af04      	add	r7, sp, #16
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f20:	f3ef 8305 	mrs	r3, IPSR
 8006f24:	617b      	str	r3, [r7, #20]
  return(result);
 8006f26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d17e      	bne.n	800702a <osThreadNew+0x11a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d07b      	beq.n	800702a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f32:	2380      	movs	r3, #128	; 0x80
 8006f34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f36:	2318      	movs	r3, #24
 8006f38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d045      	beq.n	8006fd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <osThreadNew+0x48>
        name = attr->name;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <osThreadNew+0x6e>
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b38      	cmp	r3, #56	; 0x38
 8006f70:	d805      	bhi.n	8006f7e <osThreadNew+0x6e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <osThreadNew+0x72>
        return (NULL);
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e054      	b.n	800702c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	089b      	lsrs	r3, r3, #2
 8006f90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00e      	beq.n	8006fb8 <osThreadNew+0xa8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2bbb      	cmp	r3, #187	; 0xbb
 8006fa0:	d90a      	bls.n	8006fb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d006      	beq.n	8006fb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <osThreadNew+0xa8>
        mem = 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e010      	b.n	8006fda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10c      	bne.n	8006fda <osThreadNew+0xca>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d108      	bne.n	8006fda <osThreadNew+0xca>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <osThreadNew+0xca>
          mem = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	e001      	b.n	8006fda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d110      	bne.n	8007002 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fe8:	9202      	str	r2, [sp, #8]
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f001 fa4c 	bl	8008494 <xTaskCreateStatic>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	e013      	b.n	800702a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d110      	bne.n	800702a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	b29a      	uxth	r2, r3
 800700c:	f107 0310 	add.w	r3, r7, #16
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f001 fa97 	bl	800854e <xTaskCreate>
 8007020:	4603      	mov	r3, r0
 8007022:	2b01      	cmp	r3, #1
 8007024:	d001      	beq.n	800702a <osThreadNew+0x11a>
            hTask = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800702a:	693b      	ldr	r3, [r7, #16]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3728      	adds	r7, #40	; 0x28
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800703c:	f3ef 8305 	mrs	r3, IPSR
 8007040:	60bb      	str	r3, [r7, #8]
  return(result);
 8007042:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <osDelay+0x1c>
    stat = osErrorISR;
 8007048:	f06f 0305 	mvn.w	r3, #5
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	e007      	b.n	8007060 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <osDelay+0x2c>
      vTaskDelay(ticks);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 fbd2 	bl	8008804 <vTaskDelay>
    }
  }

  return (stat);
 8007060:	68fb      	ldr	r3, [r7, #12]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800706a:	b580      	push	{r7, lr}
 800706c:	b08a      	sub	sp, #40	; 0x28
 800706e:	af02      	add	r7, sp, #8
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800707a:	f3ef 8305 	mrs	r3, IPSR
 800707e:	613b      	str	r3, [r7, #16]
  return(result);
 8007080:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007082:	2b00      	cmp	r3, #0
 8007084:	d175      	bne.n	8007172 <osSemaphoreNew+0x108>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d072      	beq.n	8007172 <osSemaphoreNew+0x108>
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	429a      	cmp	r2, r3
 8007092:	d86e      	bhi.n	8007172 <osSemaphoreNew+0x108>
    mem = -1;
 8007094:	f04f 33ff 	mov.w	r3, #4294967295
 8007098:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d015      	beq.n	80070cc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d006      	beq.n	80070b6 <osSemaphoreNew+0x4c>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2b4f      	cmp	r3, #79	; 0x4f
 80070ae:	d902      	bls.n	80070b6 <osSemaphoreNew+0x4c>
        mem = 1;
 80070b0:	2301      	movs	r3, #1
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e00c      	b.n	80070d0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d108      	bne.n	80070d0 <osSemaphoreNew+0x66>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <osSemaphoreNew+0x66>
          mem = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	e001      	b.n	80070d0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d04c      	beq.n	8007172 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d128      	bne.n	8007130 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d10a      	bne.n	80070fa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2203      	movs	r2, #3
 80070ea:	9200      	str	r2, [sp, #0]
 80070ec:	2200      	movs	r2, #0
 80070ee:	2100      	movs	r1, #0
 80070f0:	2001      	movs	r0, #1
 80070f2:	f000 fa29 	bl	8007548 <xQueueGenericCreateStatic>
 80070f6:	61f8      	str	r0, [r7, #28]
 80070f8:	e005      	b.n	8007106 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80070fa:	2203      	movs	r2, #3
 80070fc:	2100      	movs	r1, #0
 80070fe:	2001      	movs	r0, #1
 8007100:	f000 fa9a 	bl	8007638 <xQueueGenericCreate>
 8007104:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d022      	beq.n	8007152 <osSemaphoreNew+0xe8>
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01f      	beq.n	8007152 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007112:	2300      	movs	r3, #0
 8007114:	2200      	movs	r2, #0
 8007116:	2100      	movs	r1, #0
 8007118:	69f8      	ldr	r0, [r7, #28]
 800711a:	f000 fb55 	bl	80077c8 <xQueueGenericSend>
 800711e:	4603      	mov	r3, r0
 8007120:	2b01      	cmp	r3, #1
 8007122:	d016      	beq.n	8007152 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007124:	69f8      	ldr	r0, [r7, #28]
 8007126:	f000 ffe1 	bl	80080ec <vQueueDelete>
            hSemaphore = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]
 800712e:	e010      	b.n	8007152 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d108      	bne.n	8007148 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	461a      	mov	r2, r3
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fad7 	bl	80076f2 <xQueueCreateCountingSemaphoreStatic>
 8007144:	61f8      	str	r0, [r7, #28]
 8007146:	e004      	b.n	8007152 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fb08 	bl	8007760 <xQueueCreateCountingSemaphore>
 8007150:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00c      	beq.n	8007172 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <osSemaphoreNew+0xfc>
          name = attr->name;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	e001      	b.n	800716a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800716a:	6979      	ldr	r1, [r7, #20]
 800716c:	69f8      	ldr	r0, [r7, #28]
 800716e:	f001 f909 	bl	8008384 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007172:	69fb      	ldr	r3, [r7, #28]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3720      	adds	r7, #32
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d103      	bne.n	800719c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007194:	f06f 0303 	mvn.w	r3, #3
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e039      	b.n	8007210 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800719c:	f3ef 8305 	mrs	r3, IPSR
 80071a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80071a2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d022      	beq.n	80071ee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80071ae:	f06f 0303 	mvn.w	r3, #3
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	e02c      	b.n	8007210 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80071ba:	f107 0308 	add.w	r3, r7, #8
 80071be:	461a      	mov	r2, r3
 80071c0:	2100      	movs	r1, #0
 80071c2:	6938      	ldr	r0, [r7, #16]
 80071c4:	f000 ff12 	bl	8007fec <xQueueReceiveFromISR>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d003      	beq.n	80071d6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80071ce:	f06f 0302 	mvn.w	r3, #2
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	e01c      	b.n	8007210 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d019      	beq.n	8007210 <osSemaphoreAcquire+0x94>
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <osSemaphoreAcquire+0xa0>)
 80071de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	e010      	b.n	8007210 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6938      	ldr	r0, [r7, #16]
 80071f2:	f000 fdef 	bl	8007dd4 <xQueueSemaphoreTake>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d009      	beq.n	8007210 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007202:	f06f 0301 	mvn.w	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e002      	b.n	8007210 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800720a:	f06f 0302 	mvn.w	r3, #2
 800720e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007210:	697b      	ldr	r3, [r7, #20]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	e000ed04 	.word	0xe000ed04

08007220 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007236:	f06f 0303 	mvn.w	r3, #3
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	e02c      	b.n	8007298 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800723e:	f3ef 8305 	mrs	r3, IPSR
 8007242:	60fb      	str	r3, [r7, #12]
  return(result);
 8007244:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01a      	beq.n	8007280 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800724e:	f107 0308 	add.w	r3, r7, #8
 8007252:	4619      	mov	r1, r3
 8007254:	6938      	ldr	r0, [r7, #16]
 8007256:	f000 fc50 	bl	8007afa <xQueueGiveFromISR>
 800725a:	4603      	mov	r3, r0
 800725c:	2b01      	cmp	r3, #1
 800725e:	d003      	beq.n	8007268 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007260:	f06f 0302 	mvn.w	r3, #2
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e017      	b.n	8007298 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d014      	beq.n	8007298 <osSemaphoreRelease+0x78>
 800726e:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <osSemaphoreRelease+0x84>)
 8007270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	e00b      	b.n	8007298 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007280:	2300      	movs	r3, #0
 8007282:	2200      	movs	r2, #0
 8007284:	2100      	movs	r1, #0
 8007286:	6938      	ldr	r0, [r7, #16]
 8007288:	f000 fa9e 	bl	80077c8 <xQueueGenericSend>
 800728c:	4603      	mov	r3, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	d002      	beq.n	8007298 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007292:	f06f 0302 	mvn.w	r3, #2
 8007296:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007298:	697b      	ldr	r3, [r7, #20]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4a07      	ldr	r2, [pc, #28]	; (80072d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80072b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4a06      	ldr	r2, [pc, #24]	; (80072d8 <vApplicationGetIdleTaskMemory+0x30>)
 80072be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2280      	movs	r2, #128	; 0x80
 80072c4:	601a      	str	r2, [r3, #0]
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	200003f8 	.word	0x200003f8
 80072d8:	200004b4 	.word	0x200004b4

080072dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4a07      	ldr	r2, [pc, #28]	; (8007308 <vApplicationGetTimerTaskMemory+0x2c>)
 80072ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4a06      	ldr	r2, [pc, #24]	; (800730c <vApplicationGetTimerTaskMemory+0x30>)
 80072f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072fa:	601a      	str	r2, [r3, #0]
}
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	200006b4 	.word	0x200006b4
 800730c:	20000770 	.word	0x20000770

08007310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f103 0208 	add.w	r2, r3, #8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f04f 32ff 	mov.w	r2, #4294967295
 8007328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f103 0208 	add.w	r2, r3, #8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f103 0208 	add.w	r2, r3, #8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	601a      	str	r2, [r3, #0]
}
 80073a6:	bf00      	nop
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c8:	d103      	bne.n	80073d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e00c      	b.n	80073ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3308      	adds	r3, #8
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e002      	b.n	80073e0 <vListInsert+0x2e>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d2f6      	bcs.n	80073da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
}
 8007418:	bf00      	nop
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6892      	ldr	r2, [r2, #8]
 800743a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6852      	ldr	r2, [r2, #4]
 8007444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d103      	bne.n	8007458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	1e5a      	subs	r2, r3, #1
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074a2:	f002 fc97 	bl	8009dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	441a      	add	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d2:	3b01      	subs	r3, #1
 80074d4:	68f9      	ldr	r1, [r7, #12]
 80074d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	441a      	add	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	22ff      	movs	r2, #255	; 0xff
 80074ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d114      	bne.n	8007522 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01a      	beq.n	8007536 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3310      	adds	r3, #16
 8007504:	4618      	mov	r0, r3
 8007506:	f001 fc4b 	bl	8008da0 <xTaskRemoveFromEventList>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d012      	beq.n	8007536 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007510:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <xQueueGenericReset+0xcc>)
 8007512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	e009      	b.n	8007536 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3310      	adds	r3, #16
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fef2 	bl	8007310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3324      	adds	r3, #36	; 0x24
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff feed 	bl	8007310 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007536:	f002 fc7d 	bl	8009e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800753a:	2301      	movs	r3, #1
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08e      	sub	sp, #56	; 0x38
 800754c:	af02      	add	r7, sp, #8
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <xQueueGenericCreateStatic+0x52>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <xQueueGenericCreateStatic+0x56>
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <xQueueGenericCreateStatic+0x58>
 800759e:	2300      	movs	r3, #0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	623b      	str	r3, [r7, #32]
}
 80075b6:	bf00      	nop
 80075b8:	e7fe      	b.n	80075b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d102      	bne.n	80075c6 <xQueueGenericCreateStatic+0x7e>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <xQueueGenericCreateStatic+0x82>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <xQueueGenericCreateStatic+0x84>
 80075ca:	2300      	movs	r3, #0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	61fb      	str	r3, [r7, #28]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075e6:	2350      	movs	r3, #80	; 0x50
 80075e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b50      	cmp	r3, #80	; 0x50
 80075ee:	d00a      	beq.n	8007606 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	61bb      	str	r3, [r7, #24]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007606:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00d      	beq.n	800762e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800761a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	4613      	mov	r3, r2
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f83f 	bl	80076ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007630:	4618      	mov	r0, r3
 8007632:	3730      	adds	r7, #48	; 0x30
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <xQueueGenericCreate+0x2a>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	613b      	str	r3, [r7, #16]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	fb02 f303 	mul.w	r3, r2, r3
 800766a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	3350      	adds	r3, #80	; 0x50
 8007670:	4618      	mov	r0, r3
 8007672:	f002 fcd1 	bl	800a018 <pvPortMalloc>
 8007676:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d011      	beq.n	80076a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	3350      	adds	r3, #80	; 0x50
 8007686:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007690:	79fa      	ldrb	r2, [r7, #7]
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	4613      	mov	r3, r2
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f805 	bl	80076ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076a2:	69bb      	ldr	r3, [r7, #24]
	}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3720      	adds	r7, #32
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d103      	bne.n	80076c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e002      	b.n	80076ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076da:	2101      	movs	r1, #1
 80076dc:	69b8      	ldr	r0, [r7, #24]
 80076de:	f7ff fecb 	bl	8007478 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b08a      	sub	sp, #40	; 0x28
 80076f6:	af02      	add	r7, sp, #8
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	61bb      	str	r3, [r7, #24]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	429a      	cmp	r2, r3
 8007720:	d90a      	bls.n	8007738 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	617b      	str	r3, [r7, #20]
}
 8007734:	bf00      	nop
 8007736:	e7fe      	b.n	8007736 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007738:	2302      	movs	r3, #2
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	2100      	movs	r1, #0
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff ff00 	bl	8007548 <xQueueGenericCreateStatic>
 8007748:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007756:	69fb      	ldr	r3, [r7, #28]
	}
 8007758:	4618      	mov	r0, r3
 800775a:	3720      	adds	r7, #32
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	613b      	str	r3, [r7, #16]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	d90a      	bls.n	80077a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60fb      	str	r3, [r7, #12]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80077a4:	2202      	movs	r2, #2
 80077a6:	2100      	movs	r1, #0
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7ff ff45 	bl	8007638 <xQueueGenericCreate>
 80077ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80077bc:	697b      	ldr	r3, [r7, #20]
	}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08e      	sub	sp, #56	; 0x38
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077d6:	2300      	movs	r3, #0
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <xQueueGenericSend+0x32>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d103      	bne.n	8007808 <xQueueGenericSend+0x40>
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <xQueueGenericSend+0x44>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <xQueueGenericSend+0x46>
 800780c:	2300      	movs	r3, #0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <xQueueGenericSend+0x60>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d103      	bne.n	8007836 <xQueueGenericSend+0x6e>
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <xQueueGenericSend+0x72>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <xQueueGenericSend+0x74>
 800783a:	2300      	movs	r3, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <xQueueGenericSend+0x8e>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	623b      	str	r3, [r7, #32]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007856:	f001 fc65 	bl	8009124 <xTaskGetSchedulerState>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <xQueueGenericSend+0x9e>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <xQueueGenericSend+0xa2>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <xQueueGenericSend+0xa4>
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <xQueueGenericSend+0xbe>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	61fb      	str	r3, [r7, #28]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007886:	f002 faa5 	bl	8009dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007892:	429a      	cmp	r2, r3
 8007894:	d302      	bcc.n	800789c <xQueueGenericSend+0xd4>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d129      	bne.n	80078f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078a2:	f000 fc5e 	bl	8008162 <prvCopyDataToQueue>
 80078a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d010      	beq.n	80078d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	3324      	adds	r3, #36	; 0x24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fa73 	bl	8008da0 <xTaskRemoveFromEventList>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d013      	beq.n	80078e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078c0:	4b3f      	ldr	r3, [pc, #252]	; (80079c0 <xQueueGenericSend+0x1f8>)
 80078c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	e00a      	b.n	80078e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078d8:	4b39      	ldr	r3, [pc, #228]	; (80079c0 <xQueueGenericSend+0x1f8>)
 80078da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078e8:	f002 faa4 	bl	8009e34 <vPortExitCritical>
				return pdPASS;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e063      	b.n	80079b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078f6:	f002 fa9d 	bl	8009e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e05c      	b.n	80079b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	d106      	bne.n	8007912 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	4618      	mov	r0, r3
 800790a:	f001 faad 	bl	8008e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800790e:	2301      	movs	r3, #1
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007912:	f002 fa8f 	bl	8009e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007916:	f001 f819 	bl	800894c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800791a:	f002 fa5b 	bl	8009dd4 <vPortEnterCritical>
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007924:	b25b      	sxtb	r3, r3
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d103      	bne.n	8007934 <xQueueGenericSend+0x16c>
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800793a:	b25b      	sxtb	r3, r3
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d103      	bne.n	800794a <xQueueGenericSend+0x182>
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800794a:	f002 fa73 	bl	8009e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800794e:	1d3a      	adds	r2, r7, #4
 8007950:	f107 0314 	add.w	r3, r7, #20
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fa9c 	bl	8008e94 <xTaskCheckForTimeOut>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d124      	bne.n	80079ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007964:	f000 fcf5 	bl	8008352 <prvIsQueueFull>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d018      	beq.n	80079a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	3310      	adds	r3, #16
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f001 f9c2 	bl	8008d00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800797c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800797e:	f000 fc80 	bl	8008282 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007982:	f000 fff1 	bl	8008968 <xTaskResumeAll>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	f47f af7c 	bne.w	8007886 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800798e:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <xQueueGenericSend+0x1f8>)
 8007990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	e772      	b.n	8007886 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a2:	f000 fc6e 	bl	8008282 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079a6:	f000 ffdf 	bl	8008968 <xTaskResumeAll>
 80079aa:	e76c      	b.n	8007886 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ae:	f000 fc68 	bl	8008282 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079b2:	f000 ffd9 	bl	8008968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3738      	adds	r7, #56	; 0x38
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b090      	sub	sp, #64	; 0x40
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d103      	bne.n	8007a00 <xQueueGenericSendFromISR+0x3c>
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <xQueueGenericSendFromISR+0x40>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <xQueueGenericSendFromISR+0x42>
 8007a04:	2300      	movs	r3, #0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d103      	bne.n	8007a2e <xQueueGenericSendFromISR+0x6a>
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <xQueueGenericSendFromISR+0x6e>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e000      	b.n	8007a34 <xQueueGenericSendFromISR+0x70>
 8007a32:	2300      	movs	r3, #0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	623b      	str	r3, [r7, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a4e:	f002 faa3 	bl	8009f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a52:	f3ef 8211 	mrs	r2, BASEPRI
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	61fa      	str	r2, [r7, #28]
 8007a68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d302      	bcc.n	8007a80 <xQueueGenericSendFromISR+0xbc>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d12f      	bne.n	8007ae0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a96:	f000 fb64 	bl	8008162 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa2:	d112      	bne.n	8007aca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d016      	beq.n	8007ada <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	3324      	adds	r3, #36	; 0x24
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 f975 	bl	8008da0 <xTaskRemoveFromEventList>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00e      	beq.n	8007ada <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e007      	b.n	8007ada <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007aca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ace:	3301      	adds	r3, #1
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	b25a      	sxtb	r2, r3
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ada:	2301      	movs	r3, #1
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ade:	e001      	b.n	8007ae4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007aee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3740      	adds	r7, #64	; 0x40
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b08e      	sub	sp, #56	; 0x38
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	623b      	str	r3, [r7, #32]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	61fb      	str	r3, [r7, #28]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <xQueueGiveFromISR+0x58>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <xQueueGiveFromISR+0x5c>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <xQueueGiveFromISR+0x5e>
 8007b56:	2300      	movs	r3, #0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	61bb      	str	r3, [r7, #24]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b72:	f002 fa11 	bl	8009f98 <vPortValidateInterruptPriority>
	__asm volatile
 8007b76:	f3ef 8211 	mrs	r2, BASEPRI
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	617a      	str	r2, [r7, #20]
 8007b8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d22b      	bcs.n	8007bfa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbc:	d112      	bne.n	8007be4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d016      	beq.n	8007bf4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	3324      	adds	r3, #36	; 0x24
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f001 f8e8 	bl	8008da0 <xTaskRemoveFromEventList>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00e      	beq.n	8007bf4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e007      	b.n	8007bf4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007be8:	3301      	adds	r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	b25a      	sxtb	r2, r3
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf8:	e001      	b.n	8007bfe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f383 8811 	msr	BASEPRI, r3
}
 8007c08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3738      	adds	r7, #56	; 0x38
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08c      	sub	sp, #48	; 0x30
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c20:	2300      	movs	r3, #0
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <xQueueReceive+0x30>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	623b      	str	r3, [r7, #32]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <xQueueReceive+0x3e>
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <xQueueReceive+0x42>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <xQueueReceive+0x44>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xQueueReceive+0x5e>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	61fb      	str	r3, [r7, #28]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c72:	f001 fa57 	bl	8009124 <xTaskGetSchedulerState>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <xQueueReceive+0x6e>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <xQueueReceive+0x72>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueReceive+0x74>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <xQueueReceive+0x8e>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61bb      	str	r3, [r7, #24]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ca2:	f002 f897 	bl	8009dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01f      	beq.n	8007cf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cb2:	68b9      	ldr	r1, [r7, #8]
 8007cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb6:	f000 fabe 	bl	8008236 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	1e5a      	subs	r2, r3, #1
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00f      	beq.n	8007cea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	3310      	adds	r3, #16
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 f866 	bl	8008da0 <xTaskRemoveFromEventList>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cda:	4b3d      	ldr	r3, [pc, #244]	; (8007dd0 <xQueueReceive+0x1bc>)
 8007cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cea:	f002 f8a3 	bl	8009e34 <vPortExitCritical>
				return pdPASS;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e069      	b.n	8007dc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d103      	bne.n	8007d00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cf8:	f002 f89c 	bl	8009e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e062      	b.n	8007dc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d06:	f107 0310 	add.w	r3, r7, #16
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f001 f8ac 	bl	8008e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d14:	f002 f88e 	bl	8009e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d18:	f000 fe18 	bl	800894c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d1c:	f002 f85a 	bl	8009dd4 <vPortEnterCritical>
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d26:	b25b      	sxtb	r3, r3
 8007d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2c:	d103      	bne.n	8007d36 <xQueueReceive+0x122>
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d3c:	b25b      	sxtb	r3, r3
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d103      	bne.n	8007d4c <xQueueReceive+0x138>
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d4c:	f002 f872 	bl	8009e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d50:	1d3a      	adds	r2, r7, #4
 8007d52:	f107 0310 	add.w	r3, r7, #16
 8007d56:	4611      	mov	r1, r2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 f89b 	bl	8008e94 <xTaskCheckForTimeOut>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d123      	bne.n	8007dac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d66:	f000 fade 	bl	8008326 <prvIsQueueEmpty>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d017      	beq.n	8007da0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	3324      	adds	r3, #36	; 0x24
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 ffc1 	bl	8008d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d80:	f000 fa7f 	bl	8008282 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d84:	f000 fdf0 	bl	8008968 <xTaskResumeAll>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d189      	bne.n	8007ca2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d8e:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <xQueueReceive+0x1bc>)
 8007d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	e780      	b.n	8007ca2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da2:	f000 fa6e 	bl	8008282 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007da6:	f000 fddf 	bl	8008968 <xTaskResumeAll>
 8007daa:	e77a      	b.n	8007ca2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dae:	f000 fa68 	bl	8008282 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007db2:	f000 fdd9 	bl	8008968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db8:	f000 fab5 	bl	8008326 <prvIsQueueEmpty>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f43f af6f 	beq.w	8007ca2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3730      	adds	r7, #48	; 0x30
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08e      	sub	sp, #56	; 0x38
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	623b      	str	r3, [r7, #32]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61fb      	str	r3, [r7, #28]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e24:	f001 f97e 	bl	8009124 <xTaskGetSchedulerState>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d102      	bne.n	8007e34 <xQueueSemaphoreTake+0x60>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <xQueueSemaphoreTake+0x64>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <xQueueSemaphoreTake+0x66>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	61bb      	str	r3, [r7, #24]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e54:	f001 ffbe 	bl	8009dd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d024      	beq.n	8007eae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e74:	f001 facc 	bl	8009410 <pvTaskIncrementMutexHeldCount>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00f      	beq.n	8007ea6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	3310      	adds	r3, #16
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 ff88 	bl	8008da0 <xTaskRemoveFromEventList>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e96:	4b54      	ldr	r3, [pc, #336]	; (8007fe8 <xQueueSemaphoreTake+0x214>)
 8007e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ea6:	f001 ffc5 	bl	8009e34 <vPortExitCritical>
				return pdPASS;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e097      	b.n	8007fde <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d111      	bne.n	8007ed8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	617b      	str	r3, [r7, #20]
}
 8007ecc:	bf00      	nop
 8007ece:	e7fe      	b.n	8007ece <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ed0:	f001 ffb0 	bl	8009e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e082      	b.n	8007fde <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ede:	f107 030c 	add.w	r3, r7, #12
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 ffc0 	bl	8008e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eec:	f001 ffa2 	bl	8009e34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ef0:	f000 fd2c 	bl	800894c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ef4:	f001 ff6e 	bl	8009dd4 <vPortEnterCritical>
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007efe:	b25b      	sxtb	r3, r3
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f04:	d103      	bne.n	8007f0e <xQueueSemaphoreTake+0x13a>
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f14:	b25b      	sxtb	r3, r3
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d103      	bne.n	8007f24 <xQueueSemaphoreTake+0x150>
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f24:	f001 ff86 	bl	8009e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f28:	463a      	mov	r2, r7
 8007f2a:	f107 030c 	add.w	r3, r7, #12
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 ffaf 	bl	8008e94 <xTaskCheckForTimeOut>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d132      	bne.n	8007fa2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f3e:	f000 f9f2 	bl	8008326 <prvIsQueueEmpty>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d026      	beq.n	8007f96 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d109      	bne.n	8007f64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007f50:	f001 ff40 	bl	8009dd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f001 f901 	bl	8009160 <xTaskPriorityInherit>
 8007f5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f60:	f001 ff68 	bl	8009e34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	3324      	adds	r3, #36	; 0x24
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fec7 	bl	8008d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f74:	f000 f985 	bl	8008282 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f78:	f000 fcf6 	bl	8008968 <xTaskResumeAll>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f47f af68 	bne.w	8007e54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007f84:	4b18      	ldr	r3, [pc, #96]	; (8007fe8 <xQueueSemaphoreTake+0x214>)
 8007f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	e75e      	b.n	8007e54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f98:	f000 f973 	bl	8008282 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f9c:	f000 fce4 	bl	8008968 <xTaskResumeAll>
 8007fa0:	e758      	b.n	8007e54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fa4:	f000 f96d 	bl	8008282 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fa8:	f000 fcde 	bl	8008968 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fae:	f000 f9ba 	bl	8008326 <prvIsQueueEmpty>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f43f af4d 	beq.w	8007e54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00d      	beq.n	8007fdc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007fc0:	f001 ff08 	bl	8009dd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc6:	f000 f8b4 	bl	8008132 <prvGetDisinheritPriorityAfterTimeout>
 8007fca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 f99a 	bl	800930c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007fd8:	f001 ff2c 	bl	8009e34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3738      	adds	r7, #56	; 0x38
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	e000ed04 	.word	0xe000ed04

08007fec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08e      	sub	sp, #56	; 0x38
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	623b      	str	r3, [r7, #32]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <xQueueReceiveFromISR+0x3a>
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <xQueueReceiveFromISR+0x3e>
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <xQueueReceiveFromISR+0x40>
 800802a:	2300      	movs	r3, #0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10a      	bne.n	8008046 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	61fb      	str	r3, [r7, #28]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008046:	f001 ffa7 	bl	8009f98 <vPortValidateInterruptPriority>
	__asm volatile
 800804a:	f3ef 8211 	mrs	r2, BASEPRI
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	61ba      	str	r2, [r7, #24]
 8008060:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008062:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02f      	beq.n	80080d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800807c:	68b9      	ldr	r1, [r7, #8]
 800807e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008080:	f000 f8d9 	bl	8008236 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	1e5a      	subs	r2, r3, #1
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800808c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008094:	d112      	bne.n	80080bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d016      	beq.n	80080cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	3310      	adds	r3, #16
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fe7c 	bl	8008da0 <xTaskRemoveFromEventList>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00e      	beq.n	80080cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	e007      	b.n	80080cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080c0:	3301      	adds	r3, #1
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	b25a      	sxtb	r2, r3
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80080cc:	2301      	movs	r3, #1
 80080ce:	637b      	str	r3, [r7, #52]	; 0x34
 80080d0:	e001      	b.n	80080d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	637b      	str	r3, [r7, #52]	; 0x34
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f383 8811 	msr	BASEPRI, r3
}
 80080e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3738      	adds	r7, #56	; 0x38
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <vQueueDelete+0x28>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60bb      	str	r3, [r7, #8]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f95f 	bl	80083d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f002 f843 	bl	800a1b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	2b00      	cmp	r3, #0
 8008140:	d006      	beq.n	8008150 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e001      	b.n	8008154 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008154:	68fb      	ldr	r3, [r7, #12]
	}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b086      	sub	sp, #24
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10d      	bne.n	800819c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d14d      	bne.n	8008224 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4618      	mov	r0, r3
 800818e:	f001 f84f 	bl	8009230 <xTaskPriorityDisinherit>
 8008192:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	609a      	str	r2, [r3, #8]
 800819a:	e043      	b.n	8008224 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d119      	bne.n	80081d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6858      	ldr	r0, [r3, #4]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	461a      	mov	r2, r3
 80081ac:	68b9      	ldr	r1, [r7, #8]
 80081ae:	f002 f949 	bl	800a444 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	441a      	add	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d32b      	bcc.n	8008224 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	605a      	str	r2, [r3, #4]
 80081d4:	e026      	b.n	8008224 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68d8      	ldr	r0, [r3, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	461a      	mov	r2, r3
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	f002 f92f 	bl	800a444 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	425b      	negs	r3, r3
 80081f0:	441a      	add	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d207      	bcs.n	8008212 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	425b      	negs	r3, r3
 800820c:	441a      	add	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d105      	bne.n	8008224 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3b01      	subs	r3, #1
 8008222:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800822c:	697b      	ldr	r3, [r7, #20]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d018      	beq.n	800827a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	441a      	add	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	429a      	cmp	r2, r3
 8008260:	d303      	bcc.n	800826a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68d9      	ldr	r1, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	461a      	mov	r2, r3
 8008274:	6838      	ldr	r0, [r7, #0]
 8008276:	f002 f8e5 	bl	800a444 <memcpy>
	}
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800828a:	f001 fda3 	bl	8009dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008294:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008296:	e011      	b.n	80082bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	2b00      	cmp	r3, #0
 800829e:	d012      	beq.n	80082c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3324      	adds	r3, #36	; 0x24
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fd7b 	bl	8008da0 <xTaskRemoveFromEventList>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082b0:	f000 fe52 	bl	8008f58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dce9      	bgt.n	8008298 <prvUnlockQueue+0x16>
 80082c4:	e000      	b.n	80082c8 <prvUnlockQueue+0x46>
					break;
 80082c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	22ff      	movs	r2, #255	; 0xff
 80082cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082d0:	f001 fdb0 	bl	8009e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082d4:	f001 fd7e 	bl	8009dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e0:	e011      	b.n	8008306 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d012      	beq.n	8008310 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3310      	adds	r3, #16
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fd56 	bl	8008da0 <xTaskRemoveFromEventList>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082fa:	f000 fe2d 	bl	8008f58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	3b01      	subs	r3, #1
 8008302:	b2db      	uxtb	r3, r3
 8008304:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dce9      	bgt.n	80082e2 <prvUnlockQueue+0x60>
 800830e:	e000      	b.n	8008312 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008310:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	22ff      	movs	r2, #255	; 0xff
 8008316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800831a:	f001 fd8b 	bl	8009e34 <vPortExitCritical>
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800832e:	f001 fd51 	bl	8009dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800833a:	2301      	movs	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e001      	b.n	8008344 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008344:	f001 fd76 	bl	8009e34 <vPortExitCritical>

	return xReturn;
 8008348:	68fb      	ldr	r3, [r7, #12]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800835a:	f001 fd3b 	bl	8009dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008366:	429a      	cmp	r2, r3
 8008368:	d102      	bne.n	8008370 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800836a:	2301      	movs	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	e001      	b.n	8008374 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008374:	f001 fd5e 	bl	8009e34 <vPortExitCritical>

	return xReturn;
 8008378:	68fb      	ldr	r3, [r7, #12]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e014      	b.n	80083be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008394:	4a0f      	ldr	r2, [pc, #60]	; (80083d4 <vQueueAddToRegistry+0x50>)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10b      	bne.n	80083b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083a0:	490c      	ldr	r1, [pc, #48]	; (80083d4 <vQueueAddToRegistry+0x50>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083aa:	4a0a      	ldr	r2, [pc, #40]	; (80083d4 <vQueueAddToRegistry+0x50>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	4413      	add	r3, r2
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083b6:	e006      	b.n	80083c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b07      	cmp	r3, #7
 80083c2:	d9e7      	bls.n	8008394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20000b70 	.word	0x20000b70

080083d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	e016      	b.n	8008414 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80083e6:	4a10      	ldr	r2, [pc, #64]	; (8008428 <vQueueUnregisterQueue+0x50>)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	4413      	add	r3, r2
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d10b      	bne.n	800840e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80083f6:	4a0c      	ldr	r2, [pc, #48]	; (8008428 <vQueueUnregisterQueue+0x50>)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2100      	movs	r1, #0
 80083fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008400:	4a09      	ldr	r2, [pc, #36]	; (8008428 <vQueueUnregisterQueue+0x50>)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	4413      	add	r3, r2
 8008408:	2200      	movs	r2, #0
 800840a:	605a      	str	r2, [r3, #4]
				break;
 800840c:	e006      	b.n	800841c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3301      	adds	r3, #1
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b07      	cmp	r3, #7
 8008418:	d9e5      	bls.n	80083e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800841a:	bf00      	nop
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	20000b70 	.word	0x20000b70

0800842c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800843c:	f001 fcca 	bl	8009dd4 <vPortEnterCritical>
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008446:	b25b      	sxtb	r3, r3
 8008448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844c:	d103      	bne.n	8008456 <vQueueWaitForMessageRestricted+0x2a>
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800845c:	b25b      	sxtb	r3, r3
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d103      	bne.n	800846c <vQueueWaitForMessageRestricted+0x40>
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800846c:	f001 fce2 	bl	8009e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	3324      	adds	r3, #36	; 0x24
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fc61 	bl	8008d48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008486:	6978      	ldr	r0, [r7, #20]
 8008488:	f7ff fefb 	bl	8008282 <prvUnlockQueue>
	}
 800848c:	bf00      	nop
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08e      	sub	sp, #56	; 0x38
 8008498:	af04      	add	r7, sp, #16
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <xTaskCreateStatic+0x2a>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	623b      	str	r3, [r7, #32]
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <xTaskCreateStatic+0x46>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	61fb      	str	r3, [r7, #28]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084da:	23bc      	movs	r3, #188	; 0xbc
 80084dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2bbc      	cmp	r3, #188	; 0xbc
 80084e2:	d00a      	beq.n	80084fa <xTaskCreateStatic+0x66>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	61bb      	str	r3, [r7, #24]
}
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d01e      	beq.n	8008540 <xTaskCreateStatic+0xac>
 8008502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01b      	beq.n	8008540 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008510:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	2202      	movs	r2, #2
 8008516:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800851a:	2300      	movs	r3, #0
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	9302      	str	r3, [sp, #8]
 8008522:	f107 0314 	add.w	r3, r7, #20
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f850 	bl	80085d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800853a:	f000 f8f3 	bl	8008724 <prvAddNewTaskToReadyList>
 800853e:	e001      	b.n	8008544 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008544:	697b      	ldr	r3, [r7, #20]
	}
 8008546:	4618      	mov	r0, r3
 8008548:	3728      	adds	r7, #40	; 0x28
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800854e:	b580      	push	{r7, lr}
 8008550:	b08c      	sub	sp, #48	; 0x30
 8008552:	af04      	add	r7, sp, #16
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	603b      	str	r3, [r7, #0]
 800855a:	4613      	mov	r3, r2
 800855c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800855e:	88fb      	ldrh	r3, [r7, #6]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4618      	mov	r0, r3
 8008564:	f001 fd58 	bl	800a018 <pvPortMalloc>
 8008568:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00e      	beq.n	800858e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008570:	20bc      	movs	r0, #188	; 0xbc
 8008572:	f001 fd51 	bl	800a018 <pvPortMalloc>
 8008576:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	631a      	str	r2, [r3, #48]	; 0x30
 8008584:	e005      	b.n	8008592 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008586:	6978      	ldr	r0, [r7, #20]
 8008588:	f001 fe12 	bl	800a1b0 <vPortFree>
 800858c:	e001      	b.n	8008592 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d017      	beq.n	80085c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085a0:	88fa      	ldrh	r2, [r7, #6]
 80085a2:	2300      	movs	r3, #0
 80085a4:	9303      	str	r3, [sp, #12]
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	9302      	str	r3, [sp, #8]
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 f80e 	bl	80085d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085bc:	69f8      	ldr	r0, [r7, #28]
 80085be:	f000 f8b1 	bl	8008724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085c2:	2301      	movs	r3, #1
 80085c4:	61bb      	str	r3, [r7, #24]
 80085c6:	e002      	b.n	80085ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085c8:	f04f 33ff 	mov.w	r3, #4294967295
 80085cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085ce:	69bb      	ldr	r3, [r7, #24]
	}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3720      	adds	r7, #32
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	461a      	mov	r2, r3
 80085f0:	21a5      	movs	r1, #165	; 0xa5
 80085f2:	f001 ff35 	bl	800a460 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008600:	3b01      	subs	r3, #1
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	f023 0307 	bic.w	r3, r3, #7
 800860e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <prvInitialiseNewTask+0x58>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	617b      	str	r3, [r7, #20]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01f      	beq.n	8008676 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008636:	2300      	movs	r3, #0
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	e012      	b.n	8008662 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	4413      	add	r3, r2
 8008642:	7819      	ldrb	r1, [r3, #0]
 8008644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	4413      	add	r3, r2
 800864a:	3334      	adds	r3, #52	; 0x34
 800864c:	460a      	mov	r2, r1
 800864e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d006      	beq.n	800866a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	3301      	adds	r3, #1
 8008660:	61fb      	str	r3, [r7, #28]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	2b0f      	cmp	r3, #15
 8008666:	d9e9      	bls.n	800863c <prvInitialiseNewTask+0x64>
 8008668:	e000      	b.n	800866c <prvInitialiseNewTask+0x94>
			{
				break;
 800866a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008674:	e003      	b.n	800867e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	2b37      	cmp	r3, #55	; 0x37
 8008682:	d901      	bls.n	8008688 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008684:	2337      	movs	r3, #55	; 0x37
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800868c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008692:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	2200      	movs	r2, #0
 8008698:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	3304      	adds	r3, #4
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fe56 	bl	8007350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	3318      	adds	r3, #24
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe fe51 	bl	8007350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	3354      	adds	r3, #84	; 0x54
 80086d8:	2260      	movs	r2, #96	; 0x60
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 febf 	bl	800a460 <memset>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	4a0c      	ldr	r2, [pc, #48]	; (8008718 <prvInitialiseNewTask+0x140>)
 80086e6:	659a      	str	r2, [r3, #88]	; 0x58
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	4a0c      	ldr	r2, [pc, #48]	; (800871c <prvInitialiseNewTask+0x144>)
 80086ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	4a0b      	ldr	r2, [pc, #44]	; (8008720 <prvInitialiseNewTask+0x148>)
 80086f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	69b8      	ldr	r0, [r7, #24]
 80086fa:	f001 fa3f 	bl	8009b7c <pxPortInitialiseStack>
 80086fe:	4602      	mov	r2, r0
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800870e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008710:	bf00      	nop
 8008712:	3720      	adds	r7, #32
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	0800afd8 	.word	0x0800afd8
 800871c:	0800aff8 	.word	0x0800aff8
 8008720:	0800afb8 	.word	0x0800afb8

08008724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800872c:	f001 fb52 	bl	8009dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008730:	4b2d      	ldr	r3, [pc, #180]	; (80087e8 <prvAddNewTaskToReadyList+0xc4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a2c      	ldr	r2, [pc, #176]	; (80087e8 <prvAddNewTaskToReadyList+0xc4>)
 8008738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800873a:	4b2c      	ldr	r3, [pc, #176]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008742:	4a2a      	ldr	r2, [pc, #168]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008748:	4b27      	ldr	r3, [pc, #156]	; (80087e8 <prvAddNewTaskToReadyList+0xc4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d110      	bne.n	8008772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008750:	f000 fc26 	bl	8008fa0 <prvInitialiseTaskLists>
 8008754:	e00d      	b.n	8008772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008756:	4b26      	ldr	r3, [pc, #152]	; (80087f0 <prvAddNewTaskToReadyList+0xcc>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800875e:	4b23      	ldr	r3, [pc, #140]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	429a      	cmp	r2, r3
 800876a:	d802      	bhi.n	8008772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800876c:	4a1f      	ldr	r2, [pc, #124]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008772:	4b20      	ldr	r3, [pc, #128]	; (80087f4 <prvAddNewTaskToReadyList+0xd0>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <prvAddNewTaskToReadyList+0xd0>)
 800877a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800877c:	4b1d      	ldr	r3, [pc, #116]	; (80087f4 <prvAddNewTaskToReadyList+0xd0>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	4b1b      	ldr	r3, [pc, #108]	; (80087f8 <prvAddNewTaskToReadyList+0xd4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d903      	bls.n	8008798 <prvAddNewTaskToReadyList+0x74>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	4a18      	ldr	r2, [pc, #96]	; (80087f8 <prvAddNewTaskToReadyList+0xd4>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4a15      	ldr	r2, [pc, #84]	; (80087fc <prvAddNewTaskToReadyList+0xd8>)
 80087a6:	441a      	add	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7fe fddb 	bl	800736a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087b4:	f001 fb3e 	bl	8009e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087b8:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <prvAddNewTaskToReadyList+0xcc>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00e      	beq.n	80087de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d207      	bcs.n	80087de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <prvAddNewTaskToReadyList+0xdc>)
 80087d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20001084 	.word	0x20001084
 80087ec:	20000bb0 	.word	0x20000bb0
 80087f0:	20001090 	.word	0x20001090
 80087f4:	200010a0 	.word	0x200010a0
 80087f8:	2000108c 	.word	0x2000108c
 80087fc:	20000bb4 	.word	0x20000bb4
 8008800:	e000ed04 	.word	0xe000ed04

08008804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d017      	beq.n	8008846 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008816:	4b13      	ldr	r3, [pc, #76]	; (8008864 <vTaskDelay+0x60>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <vTaskDelay+0x30>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60bb      	str	r3, [r7, #8]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008834:	f000 f88a 	bl	800894c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008838:	2100      	movs	r1, #0
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fdfc 	bl	8009438 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008840:	f000 f892 	bl	8008968 <xTaskResumeAll>
 8008844:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d107      	bne.n	800885c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <vTaskDelay+0x64>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	200010ac 	.word	0x200010ac
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08a      	sub	sp, #40	; 0x28
 8008870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008872:	2300      	movs	r3, #0
 8008874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008876:	2300      	movs	r3, #0
 8008878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800887a:	463a      	mov	r2, r7
 800887c:	1d39      	adds	r1, r7, #4
 800887e:	f107 0308 	add.w	r3, r7, #8
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fd10 	bl	80072a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	9202      	str	r2, [sp, #8]
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	2300      	movs	r3, #0
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	2300      	movs	r3, #0
 8008898:	460a      	mov	r2, r1
 800889a:	4924      	ldr	r1, [pc, #144]	; (800892c <vTaskStartScheduler+0xc0>)
 800889c:	4824      	ldr	r0, [pc, #144]	; (8008930 <vTaskStartScheduler+0xc4>)
 800889e:	f7ff fdf9 	bl	8008494 <xTaskCreateStatic>
 80088a2:	4603      	mov	r3, r0
 80088a4:	4a23      	ldr	r2, [pc, #140]	; (8008934 <vTaskStartScheduler+0xc8>)
 80088a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088a8:	4b22      	ldr	r3, [pc, #136]	; (8008934 <vTaskStartScheduler+0xc8>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088b0:	2301      	movs	r3, #1
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e001      	b.n	80088ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d102      	bne.n	80088c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088c0:	f000 fe0e 	bl	80094e0 <xTimerCreateTimerTask>
 80088c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d11b      	bne.n	8008904 <vTaskStartScheduler+0x98>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	613b      	str	r3, [r7, #16]
}
 80088de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088e0:	4b15      	ldr	r3, [pc, #84]	; (8008938 <vTaskStartScheduler+0xcc>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3354      	adds	r3, #84	; 0x54
 80088e6:	4a15      	ldr	r2, [pc, #84]	; (800893c <vTaskStartScheduler+0xd0>)
 80088e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088ea:	4b15      	ldr	r3, [pc, #84]	; (8008940 <vTaskStartScheduler+0xd4>)
 80088ec:	f04f 32ff 	mov.w	r2, #4294967295
 80088f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088f2:	4b14      	ldr	r3, [pc, #80]	; (8008944 <vTaskStartScheduler+0xd8>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <vTaskStartScheduler+0xdc>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088fe:	f001 f9c7 	bl	8009c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008902:	e00e      	b.n	8008922 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890a:	d10a      	bne.n	8008922 <vTaskStartScheduler+0xb6>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60fb      	str	r3, [r7, #12]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <vTaskStartScheduler+0xb4>
}
 8008922:	bf00      	nop
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	0800ae8c 	.word	0x0800ae8c
 8008930:	08008f71 	.word	0x08008f71
 8008934:	200010a8 	.word	0x200010a8
 8008938:	20000bb0 	.word	0x20000bb0
 800893c:	20000020 	.word	0x20000020
 8008940:	200010a4 	.word	0x200010a4
 8008944:	20001090 	.word	0x20001090
 8008948:	20001088 	.word	0x20001088

0800894c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <vTaskSuspendAll+0x18>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3301      	adds	r3, #1
 8008956:	4a03      	ldr	r2, [pc, #12]	; (8008964 <vTaskSuspendAll+0x18>)
 8008958:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800895a:	bf00      	nop
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	200010ac 	.word	0x200010ac

08008968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008972:	2300      	movs	r3, #0
 8008974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008976:	4b42      	ldr	r3, [pc, #264]	; (8008a80 <xTaskResumeAll+0x118>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10a      	bne.n	8008994 <xTaskResumeAll+0x2c>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	603b      	str	r3, [r7, #0]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008994:	f001 fa1e 	bl	8009dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008998:	4b39      	ldr	r3, [pc, #228]	; (8008a80 <xTaskResumeAll+0x118>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3b01      	subs	r3, #1
 800899e:	4a38      	ldr	r2, [pc, #224]	; (8008a80 <xTaskResumeAll+0x118>)
 80089a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a2:	4b37      	ldr	r3, [pc, #220]	; (8008a80 <xTaskResumeAll+0x118>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d162      	bne.n	8008a70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089aa:	4b36      	ldr	r3, [pc, #216]	; (8008a84 <xTaskResumeAll+0x11c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d05e      	beq.n	8008a70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b2:	e02f      	b.n	8008a14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b4:	4b34      	ldr	r3, [pc, #208]	; (8008a88 <xTaskResumeAll+0x120>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3318      	adds	r3, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fd2f 	bl	8007424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3304      	adds	r3, #4
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe fd2a 	bl	8007424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d4:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <xTaskResumeAll+0x124>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d903      	bls.n	80089e4 <xTaskResumeAll+0x7c>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	4a2a      	ldr	r2, [pc, #168]	; (8008a8c <xTaskResumeAll+0x124>)
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4a27      	ldr	r2, [pc, #156]	; (8008a90 <xTaskResumeAll+0x128>)
 80089f2:	441a      	add	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3304      	adds	r3, #4
 80089f8:	4619      	mov	r1, r3
 80089fa:	4610      	mov	r0, r2
 80089fc:	f7fe fcb5 	bl	800736a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a04:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <xTaskResumeAll+0x12c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a0e:	4b22      	ldr	r3, [pc, #136]	; (8008a98 <xTaskResumeAll+0x130>)
 8008a10:	2201      	movs	r2, #1
 8008a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a14:	4b1c      	ldr	r3, [pc, #112]	; (8008a88 <xTaskResumeAll+0x120>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1cb      	bne.n	80089b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a22:	f000 fb5f 	bl	80090e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a26:	4b1d      	ldr	r3, [pc, #116]	; (8008a9c <xTaskResumeAll+0x134>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d010      	beq.n	8008a54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a32:	f000 f847 	bl	8008ac4 <xTaskIncrementTick>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a3c:	4b16      	ldr	r3, [pc, #88]	; (8008a98 <xTaskResumeAll+0x130>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f1      	bne.n	8008a32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <xTaskResumeAll+0x134>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a54:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <xTaskResumeAll+0x130>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a60:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <xTaskResumeAll+0x138>)
 8008a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a70:	f001 f9e0 	bl	8009e34 <vPortExitCritical>

	return xAlreadyYielded;
 8008a74:	68bb      	ldr	r3, [r7, #8]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	200010ac 	.word	0x200010ac
 8008a84:	20001084 	.word	0x20001084
 8008a88:	20001044 	.word	0x20001044
 8008a8c:	2000108c 	.word	0x2000108c
 8008a90:	20000bb4 	.word	0x20000bb4
 8008a94:	20000bb0 	.word	0x20000bb0
 8008a98:	20001098 	.word	0x20001098
 8008a9c:	20001094 	.word	0x20001094
 8008aa0:	e000ed04 	.word	0xe000ed04

08008aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <xTaskGetTickCount+0x1c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ab0:	687b      	ldr	r3, [r7, #4]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20001088 	.word	0x20001088

08008ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ace:	4b4f      	ldr	r3, [pc, #316]	; (8008c0c <xTaskIncrementTick+0x148>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f040 808f 	bne.w	8008bf6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ad8:	4b4d      	ldr	r3, [pc, #308]	; (8008c10 <xTaskIncrementTick+0x14c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3301      	adds	r3, #1
 8008ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ae0:	4a4b      	ldr	r2, [pc, #300]	; (8008c10 <xTaskIncrementTick+0x14c>)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d120      	bne.n	8008b2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008aec:	4b49      	ldr	r3, [pc, #292]	; (8008c14 <xTaskIncrementTick+0x150>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <xTaskIncrementTick+0x48>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	603b      	str	r3, [r7, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <xTaskIncrementTick+0x46>
 8008b0c:	4b41      	ldr	r3, [pc, #260]	; (8008c14 <xTaskIncrementTick+0x150>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <xTaskIncrementTick+0x154>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a3f      	ldr	r2, [pc, #252]	; (8008c14 <xTaskIncrementTick+0x150>)
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	4a3f      	ldr	r2, [pc, #252]	; (8008c18 <xTaskIncrementTick+0x154>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	4b3e      	ldr	r3, [pc, #248]	; (8008c1c <xTaskIncrementTick+0x158>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	4a3d      	ldr	r2, [pc, #244]	; (8008c1c <xTaskIncrementTick+0x158>)
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	f000 fadb 	bl	80090e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b2e:	4b3c      	ldr	r3, [pc, #240]	; (8008c20 <xTaskIncrementTick+0x15c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d349      	bcc.n	8008bcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b38:	4b36      	ldr	r3, [pc, #216]	; (8008c14 <xTaskIncrementTick+0x150>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d104      	bne.n	8008b4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b42:	4b37      	ldr	r3, [pc, #220]	; (8008c20 <xTaskIncrementTick+0x15c>)
 8008b44:	f04f 32ff 	mov.w	r2, #4294967295
 8008b48:	601a      	str	r2, [r3, #0]
					break;
 8008b4a:	e03f      	b.n	8008bcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4c:	4b31      	ldr	r3, [pc, #196]	; (8008c14 <xTaskIncrementTick+0x150>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d203      	bcs.n	8008b6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b64:	4a2e      	ldr	r2, [pc, #184]	; (8008c20 <xTaskIncrementTick+0x15c>)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b6a:	e02f      	b.n	8008bcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe fc57 	bl	8007424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d004      	beq.n	8008b88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	3318      	adds	r3, #24
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fc4e 	bl	8007424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	4b25      	ldr	r3, [pc, #148]	; (8008c24 <xTaskIncrementTick+0x160>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d903      	bls.n	8008b9c <xTaskIncrementTick+0xd8>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	4a22      	ldr	r2, [pc, #136]	; (8008c24 <xTaskIncrementTick+0x160>)
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4a1f      	ldr	r2, [pc, #124]	; (8008c28 <xTaskIncrementTick+0x164>)
 8008baa:	441a      	add	r2, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f7fe fbd9 	bl	800736a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbc:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <xTaskIncrementTick+0x168>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d3b8      	bcc.n	8008b38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bca:	e7b5      	b.n	8008b38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bcc:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <xTaskIncrementTick+0x168>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd2:	4915      	ldr	r1, [pc, #84]	; (8008c28 <xTaskIncrementTick+0x164>)
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d901      	bls.n	8008be8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008be8:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <xTaskIncrementTick+0x16c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d007      	beq.n	8008c00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	e004      	b.n	8008c00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <xTaskIncrementTick+0x170>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	4a0d      	ldr	r2, [pc, #52]	; (8008c34 <xTaskIncrementTick+0x170>)
 8008bfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c00:	697b      	ldr	r3, [r7, #20]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200010ac 	.word	0x200010ac
 8008c10:	20001088 	.word	0x20001088
 8008c14:	2000103c 	.word	0x2000103c
 8008c18:	20001040 	.word	0x20001040
 8008c1c:	2000109c 	.word	0x2000109c
 8008c20:	200010a4 	.word	0x200010a4
 8008c24:	2000108c 	.word	0x2000108c
 8008c28:	20000bb4 	.word	0x20000bb4
 8008c2c:	20000bb0 	.word	0x20000bb0
 8008c30:	20001098 	.word	0x20001098
 8008c34:	20001094 	.word	0x20001094

08008c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c3e:	4b2a      	ldr	r3, [pc, #168]	; (8008ce8 <vTaskSwitchContext+0xb0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c46:	4b29      	ldr	r3, [pc, #164]	; (8008cec <vTaskSwitchContext+0xb4>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c4c:	e046      	b.n	8008cdc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c4e:	4b27      	ldr	r3, [pc, #156]	; (8008cec <vTaskSwitchContext+0xb4>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c54:	4b26      	ldr	r3, [pc, #152]	; (8008cf0 <vTaskSwitchContext+0xb8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	e010      	b.n	8008c7e <vTaskSwitchContext+0x46>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	607b      	str	r3, [r7, #4]
}
 8008c74:	bf00      	nop
 8008c76:	e7fe      	b.n	8008c76 <vTaskSwitchContext+0x3e>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	491d      	ldr	r1, [pc, #116]	; (8008cf4 <vTaskSwitchContext+0xbc>)
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0e4      	beq.n	8008c5c <vTaskSwitchContext+0x24>
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4a15      	ldr	r2, [pc, #84]	; (8008cf4 <vTaskSwitchContext+0xbc>)
 8008c9e:	4413      	add	r3, r2
 8008ca0:	60bb      	str	r3, [r7, #8]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	605a      	str	r2, [r3, #4]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d104      	bne.n	8008cc2 <vTaskSwitchContext+0x8a>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	4a0b      	ldr	r2, [pc, #44]	; (8008cf8 <vTaskSwitchContext+0xc0>)
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	4a08      	ldr	r2, [pc, #32]	; (8008cf0 <vTaskSwitchContext+0xb8>)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cd2:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <vTaskSwitchContext+0xc0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3354      	adds	r3, #84	; 0x54
 8008cd8:	4a08      	ldr	r2, [pc, #32]	; (8008cfc <vTaskSwitchContext+0xc4>)
 8008cda:	6013      	str	r3, [r2, #0]
}
 8008cdc:	bf00      	nop
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	200010ac 	.word	0x200010ac
 8008cec:	20001098 	.word	0x20001098
 8008cf0:	2000108c 	.word	0x2000108c
 8008cf4:	20000bb4 	.word	0x20000bb4
 8008cf8:	20000bb0 	.word	0x20000bb0
 8008cfc:	20000020 	.word	0x20000020

08008d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60fb      	str	r3, [r7, #12]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d26:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <vTaskPlaceOnEventList+0x44>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3318      	adds	r3, #24
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7fe fb3f 	bl	80073b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d34:	2101      	movs	r1, #1
 8008d36:	6838      	ldr	r0, [r7, #0]
 8008d38:	f000 fb7e 	bl	8009438 <prvAddCurrentTaskToDelayedList>
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20000bb0 	.word	0x20000bb0

08008d48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10a      	bne.n	8008d70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	617b      	str	r3, [r7, #20]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d70:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <vTaskPlaceOnEventListRestricted+0x54>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3318      	adds	r3, #24
 8008d76:	4619      	mov	r1, r3
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7fe faf6 	bl	800736a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d84:	f04f 33ff 	mov.w	r3, #4294967295
 8008d88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	68b8      	ldr	r0, [r7, #8]
 8008d8e:	f000 fb53 	bl	8009438 <prvAddCurrentTaskToDelayedList>
	}
 8008d92:	bf00      	nop
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000bb0 	.word	0x20000bb0

08008da0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10a      	bne.n	8008dcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	60fb      	str	r3, [r7, #12]
}
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	3318      	adds	r3, #24
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fe fb27 	bl	8007424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd6:	4b1e      	ldr	r3, [pc, #120]	; (8008e50 <xTaskRemoveFromEventList+0xb0>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d11d      	bne.n	8008e1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	3304      	adds	r3, #4
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fb1e 	bl	8007424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dec:	4b19      	ldr	r3, [pc, #100]	; (8008e54 <xTaskRemoveFromEventList+0xb4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d903      	bls.n	8008dfc <xTaskRemoveFromEventList+0x5c>
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df8:	4a16      	ldr	r2, [pc, #88]	; (8008e54 <xTaskRemoveFromEventList+0xb4>)
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e00:	4613      	mov	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4a13      	ldr	r2, [pc, #76]	; (8008e58 <xTaskRemoveFromEventList+0xb8>)
 8008e0a:	441a      	add	r2, r3
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	3304      	adds	r3, #4
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f7fe faa9 	bl	800736a <vListInsertEnd>
 8008e18:	e005      	b.n	8008e26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	3318      	adds	r3, #24
 8008e1e:	4619      	mov	r1, r3
 8008e20:	480e      	ldr	r0, [pc, #56]	; (8008e5c <xTaskRemoveFromEventList+0xbc>)
 8008e22:	f7fe faa2 	bl	800736a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	; (8008e60 <xTaskRemoveFromEventList+0xc0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d905      	bls.n	8008e40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e34:	2301      	movs	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e38:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <xTaskRemoveFromEventList+0xc4>)
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	e001      	b.n	8008e44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e44:	697b      	ldr	r3, [r7, #20]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	200010ac 	.word	0x200010ac
 8008e54:	2000108c 	.word	0x2000108c
 8008e58:	20000bb4 	.word	0x20000bb4
 8008e5c:	20001044 	.word	0x20001044
 8008e60:	20000bb0 	.word	0x20000bb0
 8008e64:	20001098 	.word	0x20001098

08008e68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <vTaskInternalSetTimeOutState+0x24>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e78:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <vTaskInternalSetTimeOutState+0x28>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	605a      	str	r2, [r3, #4]
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	2000109c 	.word	0x2000109c
 8008e90:	20001088 	.word	0x20001088

08008e94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	613b      	str	r3, [r7, #16]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60fb      	str	r3, [r7, #12]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ed6:	f000 ff7d 	bl	8009dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eda:	4b1d      	ldr	r3, [pc, #116]	; (8008f50 <xTaskCheckForTimeOut+0xbc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d102      	bne.n	8008efa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61fb      	str	r3, [r7, #28]
 8008ef8:	e023      	b.n	8008f42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <xTaskCheckForTimeOut+0xc0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d007      	beq.n	8008f16 <xTaskCheckForTimeOut+0x82>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d302      	bcc.n	8008f16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f10:	2301      	movs	r3, #1
 8008f12:	61fb      	str	r3, [r7, #28]
 8008f14:	e015      	b.n	8008f42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d20b      	bcs.n	8008f38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff ff9b 	bl	8008e68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	e004      	b.n	8008f42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f42:	f000 ff77 	bl	8009e34 <vPortExitCritical>

	return xReturn;
 8008f46:	69fb      	ldr	r3, [r7, #28]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20001088 	.word	0x20001088
 8008f54:	2000109c 	.word	0x2000109c

08008f58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f5c:	4b03      	ldr	r3, [pc, #12]	; (8008f6c <vTaskMissedYield+0x14>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	601a      	str	r2, [r3, #0]
}
 8008f62:	bf00      	nop
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	20001098 	.word	0x20001098

08008f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f78:	f000 f852 	bl	8009020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <prvIdleTask+0x28>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d9f9      	bls.n	8008f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <prvIdleTask+0x2c>)
 8008f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f94:	e7f0      	b.n	8008f78 <prvIdleTask+0x8>
 8008f96:	bf00      	nop
 8008f98:	20000bb4 	.word	0x20000bb4
 8008f9c:	e000ed04 	.word	0xe000ed04

08008fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	607b      	str	r3, [r7, #4]
 8008faa:	e00c      	b.n	8008fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4a12      	ldr	r2, [pc, #72]	; (8009000 <prvInitialiseTaskLists+0x60>)
 8008fb8:	4413      	add	r3, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe f9a8 	bl	8007310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	607b      	str	r3, [r7, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b37      	cmp	r3, #55	; 0x37
 8008fca:	d9ef      	bls.n	8008fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fcc:	480d      	ldr	r0, [pc, #52]	; (8009004 <prvInitialiseTaskLists+0x64>)
 8008fce:	f7fe f99f 	bl	8007310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fd2:	480d      	ldr	r0, [pc, #52]	; (8009008 <prvInitialiseTaskLists+0x68>)
 8008fd4:	f7fe f99c 	bl	8007310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fd8:	480c      	ldr	r0, [pc, #48]	; (800900c <prvInitialiseTaskLists+0x6c>)
 8008fda:	f7fe f999 	bl	8007310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fde:	480c      	ldr	r0, [pc, #48]	; (8009010 <prvInitialiseTaskLists+0x70>)
 8008fe0:	f7fe f996 	bl	8007310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fe4:	480b      	ldr	r0, [pc, #44]	; (8009014 <prvInitialiseTaskLists+0x74>)
 8008fe6:	f7fe f993 	bl	8007310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fea:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <prvInitialiseTaskLists+0x78>)
 8008fec:	4a05      	ldr	r2, [pc, #20]	; (8009004 <prvInitialiseTaskLists+0x64>)
 8008fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <prvInitialiseTaskLists+0x7c>)
 8008ff2:	4a05      	ldr	r2, [pc, #20]	; (8009008 <prvInitialiseTaskLists+0x68>)
 8008ff4:	601a      	str	r2, [r3, #0]
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000bb4 	.word	0x20000bb4
 8009004:	20001014 	.word	0x20001014
 8009008:	20001028 	.word	0x20001028
 800900c:	20001044 	.word	0x20001044
 8009010:	20001058 	.word	0x20001058
 8009014:	20001070 	.word	0x20001070
 8009018:	2000103c 	.word	0x2000103c
 800901c:	20001040 	.word	0x20001040

08009020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009026:	e019      	b.n	800905c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009028:	f000 fed4 	bl	8009dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902c:	4b10      	ldr	r3, [pc, #64]	; (8009070 <prvCheckTasksWaitingTermination+0x50>)
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe f9f3 	bl	8007424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800903e:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <prvCheckTasksWaitingTermination+0x54>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3b01      	subs	r3, #1
 8009044:	4a0b      	ldr	r2, [pc, #44]	; (8009074 <prvCheckTasksWaitingTermination+0x54>)
 8009046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009048:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <prvCheckTasksWaitingTermination+0x58>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3b01      	subs	r3, #1
 800904e:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <prvCheckTasksWaitingTermination+0x58>)
 8009050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009052:	f000 feef 	bl	8009e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f810 	bl	800907c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800905c:	4b06      	ldr	r3, [pc, #24]	; (8009078 <prvCheckTasksWaitingTermination+0x58>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e1      	bne.n	8009028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20001058 	.word	0x20001058
 8009074:	20001084 	.word	0x20001084
 8009078:	2000106c 	.word	0x2000106c

0800907c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3354      	adds	r3, #84	; 0x54
 8009088:	4618      	mov	r0, r3
 800908a:	f001 fa93 	bl	800a5b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009094:	2b00      	cmp	r3, #0
 8009096:	d108      	bne.n	80090aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909c:	4618      	mov	r0, r3
 800909e:	f001 f887 	bl	800a1b0 <vPortFree>
				vPortFree( pxTCB );
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 f884 	bl	800a1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090a8:	e018      	b.n	80090dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d103      	bne.n	80090bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 f87b 	bl	800a1b0 <vPortFree>
	}
 80090ba:	e00f      	b.n	80090dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d00a      	beq.n	80090dc <prvDeleteTCB+0x60>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60fb      	str	r3, [r7, #12]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <prvDeleteTCB+0x5e>
	}
 80090dc:	bf00      	nop
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ea:	4b0c      	ldr	r3, [pc, #48]	; (800911c <prvResetNextTaskUnblockTime+0x38>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d104      	bne.n	80090fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090f4:	4b0a      	ldr	r3, [pc, #40]	; (8009120 <prvResetNextTaskUnblockTime+0x3c>)
 80090f6:	f04f 32ff 	mov.w	r2, #4294967295
 80090fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090fc:	e008      	b.n	8009110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fe:	4b07      	ldr	r3, [pc, #28]	; (800911c <prvResetNextTaskUnblockTime+0x38>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4a04      	ldr	r2, [pc, #16]	; (8009120 <prvResetNextTaskUnblockTime+0x3c>)
 800910e:	6013      	str	r3, [r2, #0]
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	2000103c 	.word	0x2000103c
 8009120:	200010a4 	.word	0x200010a4

08009124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800912a:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <xTaskGetSchedulerState+0x34>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009132:	2301      	movs	r3, #1
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	e008      	b.n	800914a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009138:	4b08      	ldr	r3, [pc, #32]	; (800915c <xTaskGetSchedulerState+0x38>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d102      	bne.n	8009146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009140:	2302      	movs	r3, #2
 8009142:	607b      	str	r3, [r7, #4]
 8009144:	e001      	b.n	800914a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800914a:	687b      	ldr	r3, [r7, #4]
	}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	20001090 	.word	0x20001090
 800915c:	200010ac 	.word	0x200010ac

08009160 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d051      	beq.n	800921a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917a:	4b2a      	ldr	r3, [pc, #168]	; (8009224 <xTaskPriorityInherit+0xc4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	429a      	cmp	r2, r3
 8009182:	d241      	bcs.n	8009208 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	db06      	blt.n	800919a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800918c:	4b25      	ldr	r3, [pc, #148]	; (8009224 <xTaskPriorityInherit+0xc4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6959      	ldr	r1, [r3, #20]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4a1f      	ldr	r2, [pc, #124]	; (8009228 <xTaskPriorityInherit+0xc8>)
 80091ac:	4413      	add	r3, r2
 80091ae:	4299      	cmp	r1, r3
 80091b0:	d122      	bne.n	80091f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	3304      	adds	r3, #4
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe f934 	bl	8007424 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091bc:	4b19      	ldr	r3, [pc, #100]	; (8009224 <xTaskPriorityInherit+0xc4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ca:	4b18      	ldr	r3, [pc, #96]	; (800922c <xTaskPriorityInherit+0xcc>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d903      	bls.n	80091da <xTaskPriorityInherit+0x7a>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d6:	4a15      	ldr	r2, [pc, #84]	; (800922c <xTaskPriorityInherit+0xcc>)
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091de:	4613      	mov	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4a10      	ldr	r2, [pc, #64]	; (8009228 <xTaskPriorityInherit+0xc8>)
 80091e8:	441a      	add	r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	3304      	adds	r3, #4
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f7fe f8ba 	bl	800736a <vListInsertEnd>
 80091f6:	e004      	b.n	8009202 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091f8:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <xTaskPriorityInherit+0xc4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009202:	2301      	movs	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e008      	b.n	800921a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800920c:	4b05      	ldr	r3, [pc, #20]	; (8009224 <xTaskPriorityInherit+0xc4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	429a      	cmp	r2, r3
 8009214:	d201      	bcs.n	800921a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009216:	2301      	movs	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800921a:	68fb      	ldr	r3, [r7, #12]
	}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000bb0 	.word	0x20000bb0
 8009228:	20000bb4 	.word	0x20000bb4
 800922c:	2000108c 	.word	0x2000108c

08009230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d056      	beq.n	80092f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009246:	4b2e      	ldr	r3, [pc, #184]	; (8009300 <xTaskPriorityDisinherit+0xd0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	429a      	cmp	r2, r3
 800924e:	d00a      	beq.n	8009266 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	60fb      	str	r3, [r7, #12]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	60bb      	str	r3, [r7, #8]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009288:	1e5a      	subs	r2, r3, #1
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009296:	429a      	cmp	r2, r3
 8009298:	d02c      	beq.n	80092f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d128      	bne.n	80092f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3304      	adds	r3, #4
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe f8bc 	bl	8007424 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c4:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <xTaskPriorityDisinherit+0xd4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d903      	bls.n	80092d4 <xTaskPriorityDisinherit+0xa4>
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	4a0c      	ldr	r2, [pc, #48]	; (8009304 <xTaskPriorityDisinherit+0xd4>)
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d8:	4613      	mov	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4a09      	ldr	r2, [pc, #36]	; (8009308 <xTaskPriorityDisinherit+0xd8>)
 80092e2:	441a      	add	r2, r3
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7fe f83d 	bl	800736a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092f0:	2301      	movs	r3, #1
 80092f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092f4:	697b      	ldr	r3, [r7, #20]
	}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20000bb0 	.word	0x20000bb0
 8009304:	2000108c 	.word	0x2000108c
 8009308:	20000bb4 	.word	0x20000bb4

0800930c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800931a:	2301      	movs	r3, #1
 800931c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d06a      	beq.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d902      	bls.n	8009352 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	61fb      	str	r3, [r7, #28]
 8009350:	e002      	b.n	8009358 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009356:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	429a      	cmp	r2, r3
 8009360:	d04b      	beq.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	429a      	cmp	r2, r3
 800936a:	d146      	bne.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800936c:	4b25      	ldr	r3, [pc, #148]	; (8009404 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	429a      	cmp	r2, r3
 8009374:	d10a      	bne.n	800938c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	60bb      	str	r3, [r7, #8]
}
 8009388:	bf00      	nop
 800938a:	e7fe      	b.n	800938a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	69fa      	ldr	r2, [r7, #28]
 8009396:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	db04      	blt.n	80093aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	6959      	ldr	r1, [r3, #20]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4613      	mov	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4a13      	ldr	r2, [pc, #76]	; (8009408 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093ba:	4413      	add	r3, r2
 80093bc:	4299      	cmp	r1, r3
 80093be:	d11c      	bne.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	3304      	adds	r3, #4
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe f82d 	bl	8007424 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ce:	4b0f      	ldr	r3, [pc, #60]	; (800940c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d903      	bls.n	80093de <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	4a0c      	ldr	r2, [pc, #48]	; (800940c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4a07      	ldr	r2, [pc, #28]	; (8009408 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093ec:	441a      	add	r2, r3
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f7fd ffb8 	bl	800736a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093fa:	bf00      	nop
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000bb0 	.word	0x20000bb0
 8009408:	20000bb4 	.word	0x20000bb4
 800940c:	2000108c 	.word	0x2000108c

08009410 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009414:	4b07      	ldr	r3, [pc, #28]	; (8009434 <pvTaskIncrementMutexHeldCount+0x24>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800941c:	4b05      	ldr	r3, [pc, #20]	; (8009434 <pvTaskIncrementMutexHeldCount+0x24>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009422:	3201      	adds	r2, #1
 8009424:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009426:	4b03      	ldr	r3, [pc, #12]	; (8009434 <pvTaskIncrementMutexHeldCount+0x24>)
 8009428:	681b      	ldr	r3, [r3, #0]
	}
 800942a:	4618      	mov	r0, r3
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	20000bb0 	.word	0x20000bb0

08009438 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009442:	4b21      	ldr	r3, [pc, #132]	; (80094c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009448:	4b20      	ldr	r3, [pc, #128]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3304      	adds	r3, #4
 800944e:	4618      	mov	r0, r3
 8009450:	f7fd ffe8 	bl	8007424 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d10a      	bne.n	8009472 <prvAddCurrentTaskToDelayedList+0x3a>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009462:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3304      	adds	r3, #4
 8009468:	4619      	mov	r1, r3
 800946a:	4819      	ldr	r0, [pc, #100]	; (80094d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800946c:	f7fd ff7d 	bl	800736a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009470:	e026      	b.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4413      	add	r3, r2
 8009478:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800947a:	4b14      	ldr	r3, [pc, #80]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	429a      	cmp	r2, r3
 8009488:	d209      	bcs.n	800949e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fd ff8b 	bl	80073b2 <vListInsert>
}
 800949c:	e010      	b.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800949e:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4b0a      	ldr	r3, [pc, #40]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fd ff81 	bl	80073b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d202      	bcs.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094ba:	4a08      	ldr	r2, [pc, #32]	; (80094dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	6013      	str	r3, [r2, #0]
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20001088 	.word	0x20001088
 80094cc:	20000bb0 	.word	0x20000bb0
 80094d0:	20001070 	.word	0x20001070
 80094d4:	20001040 	.word	0x20001040
 80094d8:	2000103c 	.word	0x2000103c
 80094dc:	200010a4 	.word	0x200010a4

080094e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	; 0x28
 80094e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094ea:	f000 fb07 	bl	8009afc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094ee:	4b1c      	ldr	r3, [pc, #112]	; (8009560 <xTimerCreateTimerTask+0x80>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d021      	beq.n	800953a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094fe:	1d3a      	adds	r2, r7, #4
 8009500:	f107 0108 	add.w	r1, r7, #8
 8009504:	f107 030c 	add.w	r3, r7, #12
 8009508:	4618      	mov	r0, r3
 800950a:	f7fd fee7 	bl	80072dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	9202      	str	r2, [sp, #8]
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	2302      	movs	r3, #2
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	2300      	movs	r3, #0
 800951e:	460a      	mov	r2, r1
 8009520:	4910      	ldr	r1, [pc, #64]	; (8009564 <xTimerCreateTimerTask+0x84>)
 8009522:	4811      	ldr	r0, [pc, #68]	; (8009568 <xTimerCreateTimerTask+0x88>)
 8009524:	f7fe ffb6 	bl	8008494 <xTaskCreateStatic>
 8009528:	4603      	mov	r3, r0
 800952a:	4a10      	ldr	r2, [pc, #64]	; (800956c <xTimerCreateTimerTask+0x8c>)
 800952c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800952e:	4b0f      	ldr	r3, [pc, #60]	; (800956c <xTimerCreateTimerTask+0x8c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009536:	2301      	movs	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	613b      	str	r3, [r7, #16]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009556:	697b      	ldr	r3, [r7, #20]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	200010e0 	.word	0x200010e0
 8009564:	0800ae94 	.word	0x0800ae94
 8009568:	080096a5 	.word	0x080096a5
 800956c:	200010e4 	.word	0x200010e4

08009570 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800957e:	2300      	movs	r3, #0
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	623b      	str	r3, [r7, #32]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800959e:	4b1a      	ldr	r3, [pc, #104]	; (8009608 <xTimerGenericCommand+0x98>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d02a      	beq.n	80095fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2b05      	cmp	r3, #5
 80095b6:	dc18      	bgt.n	80095ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095b8:	f7ff fdb4 	bl	8009124 <xTaskGetSchedulerState>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d109      	bne.n	80095d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095c2:	4b11      	ldr	r3, [pc, #68]	; (8009608 <xTimerGenericCommand+0x98>)
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	f107 0110 	add.w	r1, r7, #16
 80095ca:	2300      	movs	r3, #0
 80095cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ce:	f7fe f8fb 	bl	80077c8 <xQueueGenericSend>
 80095d2:	6278      	str	r0, [r7, #36]	; 0x24
 80095d4:	e012      	b.n	80095fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <xTimerGenericCommand+0x98>)
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f107 0110 	add.w	r1, r7, #16
 80095de:	2300      	movs	r3, #0
 80095e0:	2200      	movs	r2, #0
 80095e2:	f7fe f8f1 	bl	80077c8 <xQueueGenericSend>
 80095e6:	6278      	str	r0, [r7, #36]	; 0x24
 80095e8:	e008      	b.n	80095fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <xTimerGenericCommand+0x98>)
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	f107 0110 	add.w	r1, r7, #16
 80095f2:	2300      	movs	r3, #0
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	f7fe f9e5 	bl	80079c4 <xQueueGenericSendFromISR>
 80095fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3728      	adds	r7, #40	; 0x28
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	200010e0 	.word	0x200010e0

0800960c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af02      	add	r7, sp, #8
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009616:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <prvProcessExpiredTimer+0x94>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	3304      	adds	r3, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f7fd fefd 	bl	8007424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d022      	beq.n	800967e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	699a      	ldr	r2, [r3, #24]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	18d1      	adds	r1, r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	6978      	ldr	r0, [r7, #20]
 8009646:	f000 f8d1 	bl	80097ec <prvInsertTimerInActiveList>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01f      	beq.n	8009690 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009650:	2300      	movs	r3, #0
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	2100      	movs	r1, #0
 800965a:	6978      	ldr	r0, [r7, #20]
 800965c:	f7ff ff88 	bl	8009570 <xTimerGenericCommand>
 8009660:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d113      	bne.n	8009690 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009684:	f023 0301 	bic.w	r3, r3, #1
 8009688:	b2da      	uxtb	r2, r3
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	6978      	ldr	r0, [r7, #20]
 8009696:	4798      	blx	r3
}
 8009698:	bf00      	nop
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	200010d8 	.word	0x200010d8

080096a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096ac:	f107 0308 	add.w	r3, r7, #8
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 f857 	bl	8009764 <prvGetNextExpireTime>
 80096b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4619      	mov	r1, r3
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 f803 	bl	80096c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096c2:	f000 f8d5 	bl	8009870 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096c6:	e7f1      	b.n	80096ac <prvTimerTask+0x8>

080096c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096d2:	f7ff f93b 	bl	800894c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d6:	f107 0308 	add.w	r3, r7, #8
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 f866 	bl	80097ac <prvSampleTimeNow>
 80096e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d130      	bne.n	800974a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <prvProcessTimerOrBlockTask+0x3c>
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d806      	bhi.n	8009704 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096f6:	f7ff f937 	bl	8008968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff ff85 	bl	800960c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009702:	e024      	b.n	800974e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d008      	beq.n	800971c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800970a:	4b13      	ldr	r3, [pc, #76]	; (8009758 <prvProcessTimerOrBlockTask+0x90>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <prvProcessTimerOrBlockTask+0x50>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <prvProcessTimerOrBlockTask+0x52>
 8009718:	2300      	movs	r3, #0
 800971a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800971c:	4b0f      	ldr	r3, [pc, #60]	; (800975c <prvProcessTimerOrBlockTask+0x94>)
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	4619      	mov	r1, r3
 800972a:	f7fe fe7f 	bl	800842c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800972e:	f7ff f91b 	bl	8008968 <xTaskResumeAll>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009738:	4b09      	ldr	r3, [pc, #36]	; (8009760 <prvProcessTimerOrBlockTask+0x98>)
 800973a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	f3bf 8f6f 	isb	sy
}
 8009748:	e001      	b.n	800974e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800974a:	f7ff f90d 	bl	8008968 <xTaskResumeAll>
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	200010dc 	.word	0x200010dc
 800975c:	200010e0 	.word	0x200010e0
 8009760:	e000ed04 	.word	0xe000ed04

08009764 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800976c:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <prvGetNextExpireTime+0x44>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <prvGetNextExpireTime+0x16>
 8009776:	2201      	movs	r2, #1
 8009778:	e000      	b.n	800977c <prvGetNextExpireTime+0x18>
 800977a:	2200      	movs	r2, #0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009788:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <prvGetNextExpireTime+0x44>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	e001      	b.n	8009798 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009798:	68fb      	ldr	r3, [r7, #12]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	200010d8 	.word	0x200010d8

080097ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097b4:	f7ff f976 	bl	8008aa4 <xTaskGetTickCount>
 80097b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097ba:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <prvSampleTimeNow+0x3c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d205      	bcs.n	80097d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097c4:	f000 f936 	bl	8009a34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	e002      	b.n	80097d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097d6:	4a04      	ldr	r2, [pc, #16]	; (80097e8 <prvSampleTimeNow+0x3c>)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097dc:	68fb      	ldr	r3, [r7, #12]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200010e8 	.word	0x200010e8

080097ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	429a      	cmp	r2, r3
 8009810:	d812      	bhi.n	8009838 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	429a      	cmp	r2, r3
 800981e:	d302      	bcc.n	8009826 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009820:	2301      	movs	r3, #1
 8009822:	617b      	str	r3, [r7, #20]
 8009824:	e01b      	b.n	800985e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <prvInsertTimerInActiveList+0x7c>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3304      	adds	r3, #4
 800982e:	4619      	mov	r1, r3
 8009830:	4610      	mov	r0, r2
 8009832:	f7fd fdbe 	bl	80073b2 <vListInsert>
 8009836:	e012      	b.n	800985e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d206      	bcs.n	800984e <prvInsertTimerInActiveList+0x62>
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d302      	bcc.n	800984e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009848:	2301      	movs	r3, #1
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	e007      	b.n	800985e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800984e:	4b07      	ldr	r3, [pc, #28]	; (800986c <prvInsertTimerInActiveList+0x80>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3304      	adds	r3, #4
 8009856:	4619      	mov	r1, r3
 8009858:	4610      	mov	r0, r2
 800985a:	f7fd fdaa 	bl	80073b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800985e:	697b      	ldr	r3, [r7, #20]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	200010dc 	.word	0x200010dc
 800986c:	200010d8 	.word	0x200010d8

08009870 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08e      	sub	sp, #56	; 0x38
 8009874:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009876:	e0ca      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	da18      	bge.n	80098b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800987e:	1d3b      	adds	r3, r7, #4
 8009880:	3304      	adds	r3, #4
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	61fb      	str	r3, [r7, #28]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a6:	6850      	ldr	r0, [r2, #4]
 80098a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098aa:	6892      	ldr	r2, [r2, #8]
 80098ac:	4611      	mov	r1, r2
 80098ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f2c0 80aa 	blt.w	8009a0c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d004      	beq.n	80098ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	3304      	adds	r3, #4
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd fdab 	bl	8007424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ce:	463b      	mov	r3, r7
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff ff6b 	bl	80097ac <prvSampleTimeNow>
 80098d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b09      	cmp	r3, #9
 80098dc:	f200 8097 	bhi.w	8009a0e <prvProcessReceivedCommands+0x19e>
 80098e0:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <prvProcessReceivedCommands+0x78>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	08009911 	.word	0x08009911
 80098ec:	08009911 	.word	0x08009911
 80098f0:	08009911 	.word	0x08009911
 80098f4:	08009985 	.word	0x08009985
 80098f8:	08009999 	.word	0x08009999
 80098fc:	080099e3 	.word	0x080099e3
 8009900:	08009911 	.word	0x08009911
 8009904:	08009911 	.word	0x08009911
 8009908:	08009985 	.word	0x08009985
 800990c:	08009999 	.word	0x08009999
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009916:	f043 0301 	orr.w	r3, r3, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	18d1      	adds	r1, r2, r3
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009930:	f7ff ff5c 	bl	80097ec <prvInsertTimerInActiveList>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d069      	beq.n	8009a0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009940:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009948:	f003 0304 	and.w	r3, r3, #4
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05e      	beq.n	8009a0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	441a      	add	r2, r3
 8009958:	2300      	movs	r3, #0
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2300      	movs	r3, #0
 800995e:	2100      	movs	r1, #0
 8009960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009962:	f7ff fe05 	bl	8009570 <xTimerGenericCommand>
 8009966:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d14f      	bne.n	8009a0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	61bb      	str	r3, [r7, #24]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	b2da      	uxtb	r2, r3
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009996:	e03a      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800999e:	f043 0301 	orr.w	r3, r3, #1
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	617b      	str	r3, [r7, #20]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d0:	699a      	ldr	r2, [r3, #24]
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	18d1      	adds	r1, r2, r3
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099dc:	f7ff ff06 	bl	80097ec <prvInsertTimerInActiveList>
					break;
 80099e0:	e015      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099e8:	f003 0302 	and.w	r3, r3, #2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80099f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f2:	f000 fbdd 	bl	800a1b0 <vPortFree>
 80099f6:	e00a      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099fe:	f023 0301 	bic.w	r3, r3, #1
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a0a:	e000      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a0e:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <prvProcessReceivedCommands+0x1c0>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	1d39      	adds	r1, r7, #4
 8009a14:	2200      	movs	r2, #0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe f8fc 	bl	8007c14 <xQueueReceive>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f47f af2a 	bne.w	8009878 <prvProcessReceivedCommands+0x8>
	}
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	3730      	adds	r7, #48	; 0x30
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	200010e0 	.word	0x200010e0

08009a34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a3a:	e048      	b.n	8009ace <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a3c:	4b2d      	ldr	r3, [pc, #180]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a46:	4b2b      	ldr	r3, [pc, #172]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fd fce5 	bl	8007424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d02e      	beq.n	8009ace <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4413      	add	r3, r2
 8009a78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d90e      	bls.n	8009aa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a8e:	4b19      	ldr	r3, [pc, #100]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3304      	adds	r3, #4
 8009a96:	4619      	mov	r1, r3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	f7fd fc8a 	bl	80073b2 <vListInsert>
 8009a9e:	e016      	b.n	8009ace <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7ff fd60 	bl	8009570 <xTimerGenericCommand>
 8009ab0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	603b      	str	r3, [r7, #0]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1b1      	bne.n	8009a3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ad8:	4b06      	ldr	r3, [pc, #24]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ade:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <prvSwitchTimerLists+0xc4>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a04      	ldr	r2, [pc, #16]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009ae4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ae6:	4a04      	ldr	r2, [pc, #16]	; (8009af8 <prvSwitchTimerLists+0xc4>)
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	6013      	str	r3, [r2, #0]
}
 8009aec:	bf00      	nop
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	200010d8 	.word	0x200010d8
 8009af8:	200010dc 	.word	0x200010dc

08009afc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b02:	f000 f967 	bl	8009dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b06:	4b15      	ldr	r3, [pc, #84]	; (8009b5c <prvCheckForValidListAndQueue+0x60>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d120      	bne.n	8009b50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b0e:	4814      	ldr	r0, [pc, #80]	; (8009b60 <prvCheckForValidListAndQueue+0x64>)
 8009b10:	f7fd fbfe 	bl	8007310 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b14:	4813      	ldr	r0, [pc, #76]	; (8009b64 <prvCheckForValidListAndQueue+0x68>)
 8009b16:	f7fd fbfb 	bl	8007310 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b1a:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <prvCheckForValidListAndQueue+0x6c>)
 8009b1c:	4a10      	ldr	r2, [pc, #64]	; (8009b60 <prvCheckForValidListAndQueue+0x64>)
 8009b1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b20:	4b12      	ldr	r3, [pc, #72]	; (8009b6c <prvCheckForValidListAndQueue+0x70>)
 8009b22:	4a10      	ldr	r2, [pc, #64]	; (8009b64 <prvCheckForValidListAndQueue+0x68>)
 8009b24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b26:	2300      	movs	r3, #0
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	4b11      	ldr	r3, [pc, #68]	; (8009b70 <prvCheckForValidListAndQueue+0x74>)
 8009b2c:	4a11      	ldr	r2, [pc, #68]	; (8009b74 <prvCheckForValidListAndQueue+0x78>)
 8009b2e:	2110      	movs	r1, #16
 8009b30:	200a      	movs	r0, #10
 8009b32:	f7fd fd09 	bl	8007548 <xQueueGenericCreateStatic>
 8009b36:	4603      	mov	r3, r0
 8009b38:	4a08      	ldr	r2, [pc, #32]	; (8009b5c <prvCheckForValidListAndQueue+0x60>)
 8009b3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <prvCheckForValidListAndQueue+0x60>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <prvCheckForValidListAndQueue+0x60>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	490b      	ldr	r1, [pc, #44]	; (8009b78 <prvCheckForValidListAndQueue+0x7c>)
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fc1a 	bl	8008384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b50:	f000 f970 	bl	8009e34 <vPortExitCritical>
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	200010e0 	.word	0x200010e0
 8009b60:	200010b0 	.word	0x200010b0
 8009b64:	200010c4 	.word	0x200010c4
 8009b68:	200010d8 	.word	0x200010d8
 8009b6c:	200010dc 	.word	0x200010dc
 8009b70:	2000118c 	.word	0x2000118c
 8009b74:	200010ec 	.word	0x200010ec
 8009b78:	0800ae9c 	.word	0x0800ae9c

08009b7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3b04      	subs	r3, #4
 8009b8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3b04      	subs	r3, #4
 8009b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f023 0201 	bic.w	r2, r3, #1
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3b04      	subs	r3, #4
 8009baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bac:	4a0c      	ldr	r2, [pc, #48]	; (8009be0 <pxPortInitialiseStack+0x64>)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3b14      	subs	r3, #20
 8009bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3b04      	subs	r3, #4
 8009bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f06f 0202 	mvn.w	r2, #2
 8009bca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3b20      	subs	r3, #32
 8009bd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	08009be5 	.word	0x08009be5

08009be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <prvTaskExitError+0x54>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf6:	d00a      	beq.n	8009c0e <prvTaskExitError+0x2a>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	60fb      	str	r3, [r7, #12]
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <prvTaskExitError+0x28>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60bb      	str	r3, [r7, #8]
}
 8009c20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c22:	bf00      	nop
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0fc      	beq.n	8009c24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	2000001c 	.word	0x2000001c
 8009c3c:	00000000 	.word	0x00000000

08009c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <pxCurrentTCBConst2>)
 8009c42:	6819      	ldr	r1, [r3, #0]
 8009c44:	6808      	ldr	r0, [r1, #0]
 8009c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4a:	f380 8809 	msr	PSP, r0
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f04f 0000 	mov.w	r0, #0
 8009c56:	f380 8811 	msr	BASEPRI, r0
 8009c5a:	4770      	bx	lr
 8009c5c:	f3af 8000 	nop.w

08009c60 <pxCurrentTCBConst2>:
 8009c60:	20000bb0 	.word	0x20000bb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop

08009c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c68:	4808      	ldr	r0, [pc, #32]	; (8009c8c <prvPortStartFirstTask+0x24>)
 8009c6a:	6800      	ldr	r0, [r0, #0]
 8009c6c:	6800      	ldr	r0, [r0, #0]
 8009c6e:	f380 8808 	msr	MSP, r0
 8009c72:	f04f 0000 	mov.w	r0, #0
 8009c76:	f380 8814 	msr	CONTROL, r0
 8009c7a:	b662      	cpsie	i
 8009c7c:	b661      	cpsie	f
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	df00      	svc	0
 8009c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c8a:	bf00      	nop
 8009c8c:	e000ed08 	.word	0xe000ed08

08009c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c96:	4b46      	ldr	r3, [pc, #280]	; (8009db0 <xPortStartScheduler+0x120>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a46      	ldr	r2, [pc, #280]	; (8009db4 <xPortStartScheduler+0x124>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d10a      	bne.n	8009cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	613b      	str	r3, [r7, #16]
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cb6:	4b3e      	ldr	r3, [pc, #248]	; (8009db0 <xPortStartScheduler+0x120>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a3f      	ldr	r2, [pc, #252]	; (8009db8 <xPortStartScheduler+0x128>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d10a      	bne.n	8009cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	60fb      	str	r3, [r7, #12]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cd6:	4b39      	ldr	r3, [pc, #228]	; (8009dbc <xPortStartScheduler+0x12c>)
 8009cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	4b31      	ldr	r3, [pc, #196]	; (8009dc0 <xPortStartScheduler+0x130>)
 8009cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cfe:	4b31      	ldr	r3, [pc, #196]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d00:	2207      	movs	r2, #7
 8009d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d04:	e009      	b.n	8009d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d06:	4b2f      	ldr	r3, [pc, #188]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	4a2d      	ldr	r2, [pc, #180]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d1a:	78fb      	ldrb	r3, [r7, #3]
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d22:	2b80      	cmp	r3, #128	; 0x80
 8009d24:	d0ef      	beq.n	8009d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d26:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f1c3 0307 	rsb	r3, r3, #7
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d00a      	beq.n	8009d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	60bb      	str	r3, [r7, #8]
}
 8009d44:	bf00      	nop
 8009d46:	e7fe      	b.n	8009d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d48:	4b1e      	ldr	r3, [pc, #120]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	021b      	lsls	r3, r3, #8
 8009d4e:	4a1d      	ldr	r2, [pc, #116]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d52:	4b1c      	ldr	r3, [pc, #112]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d5a:	4a1a      	ldr	r2, [pc, #104]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d66:	4b18      	ldr	r3, [pc, #96]	; (8009dc8 <xPortStartScheduler+0x138>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <xPortStartScheduler+0x138>)
 8009d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d72:	4b15      	ldr	r3, [pc, #84]	; (8009dc8 <xPortStartScheduler+0x138>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a14      	ldr	r2, [pc, #80]	; (8009dc8 <xPortStartScheduler+0x138>)
 8009d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d7e:	f000 f8dd 	bl	8009f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d82:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <xPortStartScheduler+0x13c>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d88:	f000 f8fc 	bl	8009f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d8c:	4b10      	ldr	r3, [pc, #64]	; (8009dd0 <xPortStartScheduler+0x140>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a0f      	ldr	r2, [pc, #60]	; (8009dd0 <xPortStartScheduler+0x140>)
 8009d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d98:	f7ff ff66 	bl	8009c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d9c:	f7fe ff4c 	bl	8008c38 <vTaskSwitchContext>
	prvTaskExitError();
 8009da0:	f7ff ff20 	bl	8009be4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	e000ed00 	.word	0xe000ed00
 8009db4:	410fc271 	.word	0x410fc271
 8009db8:	410fc270 	.word	0x410fc270
 8009dbc:	e000e400 	.word	0xe000e400
 8009dc0:	200011dc 	.word	0x200011dc
 8009dc4:	200011e0 	.word	0x200011e0
 8009dc8:	e000ed20 	.word	0xe000ed20
 8009dcc:	2000001c 	.word	0x2000001c
 8009dd0:	e000ef34 	.word	0xe000ef34

08009dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	607b      	str	r3, [r7, #4]
}
 8009dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dee:	4b0f      	ldr	r3, [pc, #60]	; (8009e2c <vPortEnterCritical+0x58>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	4a0d      	ldr	r2, [pc, #52]	; (8009e2c <vPortEnterCritical+0x58>)
 8009df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009df8:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <vPortEnterCritical+0x58>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d10f      	bne.n	8009e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e00:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <vPortEnterCritical+0x5c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	603b      	str	r3, [r7, #0]
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <vPortEnterCritical+0x4a>
	}
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	2000001c 	.word	0x2000001c
 8009e30:	e000ed04 	.word	0xe000ed04

08009e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e3a:	4b12      	ldr	r3, [pc, #72]	; (8009e84 <vPortExitCritical+0x50>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10a      	bne.n	8009e58 <vPortExitCritical+0x24>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	607b      	str	r3, [r7, #4]
}
 8009e54:	bf00      	nop
 8009e56:	e7fe      	b.n	8009e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e58:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <vPortExitCritical+0x50>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	4a09      	ldr	r2, [pc, #36]	; (8009e84 <vPortExitCritical+0x50>)
 8009e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e62:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <vPortExitCritical+0x50>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <vPortExitCritical+0x42>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f383 8811 	msr	BASEPRI, r3
}
 8009e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	2000001c 	.word	0x2000001c
	...

08009e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e90:	f3ef 8009 	mrs	r0, PSP
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <pxCurrentTCBConst>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	f01e 0f10 	tst.w	lr, #16
 8009ea0:	bf08      	it	eq
 8009ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eaa:	6010      	str	r0, [r2, #0]
 8009eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009eb4:	f380 8811 	msr	BASEPRI, r0
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f7fe feba 	bl	8008c38 <vTaskSwitchContext>
 8009ec4:	f04f 0000 	mov.w	r0, #0
 8009ec8:	f380 8811 	msr	BASEPRI, r0
 8009ecc:	bc09      	pop	{r0, r3}
 8009ece:	6819      	ldr	r1, [r3, #0]
 8009ed0:	6808      	ldr	r0, [r1, #0]
 8009ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed6:	f01e 0f10 	tst.w	lr, #16
 8009eda:	bf08      	it	eq
 8009edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ee0:	f380 8809 	msr	PSP, r0
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	f3af 8000 	nop.w

08009ef0 <pxCurrentTCBConst>:
 8009ef0:	20000bb0 	.word	0x20000bb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop

08009ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	607b      	str	r3, [r7, #4]
}
 8009f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f12:	f7fe fdd7 	bl	8008ac4 <xTaskIncrementTick>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f1c:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <xPortSysTickHandler+0x40>)
 8009f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	2300      	movs	r3, #0
 8009f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	f383 8811 	msr	BASEPRI, r3
}
 8009f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f40:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <vPortSetupTimerInterrupt+0x34>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f46:	4b0b      	ldr	r3, [pc, #44]	; (8009f74 <vPortSetupTimerInterrupt+0x38>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f4c:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <vPortSetupTimerInterrupt+0x3c>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <vPortSetupTimerInterrupt+0x40>)
 8009f52:	fba2 2303 	umull	r2, r3, r2, r3
 8009f56:	099b      	lsrs	r3, r3, #6
 8009f58:	4a09      	ldr	r2, [pc, #36]	; (8009f80 <vPortSetupTimerInterrupt+0x44>)
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f5e:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <vPortSetupTimerInterrupt+0x34>)
 8009f60:	2207      	movs	r2, #7
 8009f62:	601a      	str	r2, [r3, #0]
}
 8009f64:	bf00      	nop
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	e000e010 	.word	0xe000e010
 8009f74:	e000e018 	.word	0xe000e018
 8009f78:	20000010 	.word	0x20000010
 8009f7c:	10624dd3 	.word	0x10624dd3
 8009f80:	e000e014 	.word	0xe000e014

08009f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f94 <vPortEnableVFP+0x10>
 8009f88:	6801      	ldr	r1, [r0, #0]
 8009f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f8e:	6001      	str	r1, [r0, #0]
 8009f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f92:	bf00      	nop
 8009f94:	e000ed88 	.word	0xe000ed88

08009f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f9e:	f3ef 8305 	mrs	r3, IPSR
 8009fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b0f      	cmp	r3, #15
 8009fa8:	d914      	bls.n	8009fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009faa:	4a17      	ldr	r2, [pc, #92]	; (800a008 <vPortValidateInterruptPriority+0x70>)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4413      	add	r3, r2
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fb4:	4b15      	ldr	r3, [pc, #84]	; (800a00c <vPortValidateInterruptPriority+0x74>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	7afa      	ldrb	r2, [r7, #11]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d20a      	bcs.n	8009fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	607b      	str	r3, [r7, #4]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fd4:	4b0e      	ldr	r3, [pc, #56]	; (800a010 <vPortValidateInterruptPriority+0x78>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fdc:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <vPortValidateInterruptPriority+0x7c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d90a      	bls.n	8009ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	603b      	str	r3, [r7, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <vPortValidateInterruptPriority+0x60>
	}
 8009ffa:	bf00      	nop
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	e000e3f0 	.word	0xe000e3f0
 800a00c:	200011dc 	.word	0x200011dc
 800a010:	e000ed0c 	.word	0xe000ed0c
 800a014:	200011e0 	.word	0x200011e0

0800a018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	; 0x28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a020:	2300      	movs	r3, #0
 800a022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a024:	f7fe fc92 	bl	800894c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a028:	4b5b      	ldr	r3, [pc, #364]	; (800a198 <pvPortMalloc+0x180>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a030:	f000 f920 	bl	800a274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a034:	4b59      	ldr	r3, [pc, #356]	; (800a19c <pvPortMalloc+0x184>)
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f040 8093 	bne.w	800a168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01d      	beq.n	800a084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a048:	2208      	movs	r2, #8
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4413      	add	r3, r2
 800a04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f003 0307 	and.w	r3, r3, #7
 800a056:	2b00      	cmp	r3, #0
 800a058:	d014      	beq.n	800a084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f023 0307 	bic.w	r3, r3, #7
 800a060:	3308      	adds	r3, #8
 800a062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00a      	beq.n	800a084 <pvPortMalloc+0x6c>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	617b      	str	r3, [r7, #20]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d06e      	beq.n	800a168 <pvPortMalloc+0x150>
 800a08a:	4b45      	ldr	r3, [pc, #276]	; (800a1a0 <pvPortMalloc+0x188>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	429a      	cmp	r2, r3
 800a092:	d869      	bhi.n	800a168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a094:	4b43      	ldr	r3, [pc, #268]	; (800a1a4 <pvPortMalloc+0x18c>)
 800a096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a098:	4b42      	ldr	r3, [pc, #264]	; (800a1a4 <pvPortMalloc+0x18c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a09e:	e004      	b.n	800a0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d903      	bls.n	800a0bc <pvPortMalloc+0xa4>
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1f1      	bne.n	800a0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0bc:	4b36      	ldr	r3, [pc, #216]	; (800a198 <pvPortMalloc+0x180>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d050      	beq.n	800a168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2208      	movs	r2, #8
 800a0cc:	4413      	add	r3, r2
 800a0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d91f      	bls.n	800a128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	f003 0307 	and.w	r3, r3, #7
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00a      	beq.n	800a110 <pvPortMalloc+0xf8>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	613b      	str	r3, [r7, #16]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a122:	69b8      	ldr	r0, [r7, #24]
 800a124:	f000 f908 	bl	800a338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a128:	4b1d      	ldr	r3, [pc, #116]	; (800a1a0 <pvPortMalloc+0x188>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	4a1b      	ldr	r2, [pc, #108]	; (800a1a0 <pvPortMalloc+0x188>)
 800a134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a136:	4b1a      	ldr	r3, [pc, #104]	; (800a1a0 <pvPortMalloc+0x188>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <pvPortMalloc+0x190>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d203      	bcs.n	800a14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a142:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <pvPortMalloc+0x188>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a18      	ldr	r2, [pc, #96]	; (800a1a8 <pvPortMalloc+0x190>)
 800a148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	4b13      	ldr	r3, [pc, #76]	; (800a19c <pvPortMalloc+0x184>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	431a      	orrs	r2, r3
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	2200      	movs	r2, #0
 800a15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a15e:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <pvPortMalloc+0x194>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	4a11      	ldr	r2, [pc, #68]	; (800a1ac <pvPortMalloc+0x194>)
 800a166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a168:	f7fe fbfe 	bl	8008968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00a      	beq.n	800a18c <pvPortMalloc+0x174>
	__asm volatile
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	60fb      	str	r3, [r7, #12]
}
 800a188:	bf00      	nop
 800a18a:	e7fe      	b.n	800a18a <pvPortMalloc+0x172>
	return pvReturn;
 800a18c:	69fb      	ldr	r3, [r7, #28]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3728      	adds	r7, #40	; 0x28
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	200025ec 	.word	0x200025ec
 800a19c:	20002600 	.word	0x20002600
 800a1a0:	200025f0 	.word	0x200025f0
 800a1a4:	200025e4 	.word	0x200025e4
 800a1a8:	200025f4 	.word	0x200025f4
 800a1ac:	200025f8 	.word	0x200025f8

0800a1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d04d      	beq.n	800a25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1c2:	2308      	movs	r3, #8
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	4b24      	ldr	r3, [pc, #144]	; (800a268 <vPortFree+0xb8>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4013      	ands	r3, r2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <vPortFree+0x44>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	60fb      	str	r3, [r7, #12]
}
 800a1f0:	bf00      	nop
 800a1f2:	e7fe      	b.n	800a1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <vPortFree+0x62>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	60bb      	str	r3, [r7, #8]
}
 800a20e:	bf00      	nop
 800a210:	e7fe      	b.n	800a210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <vPortFree+0xb8>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d01e      	beq.n	800a25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d11a      	bne.n	800a25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	4b0e      	ldr	r3, [pc, #56]	; (800a268 <vPortFree+0xb8>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	43db      	mvns	r3, r3
 800a232:	401a      	ands	r2, r3
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a238:	f7fe fb88 	bl	800894c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	4b0a      	ldr	r3, [pc, #40]	; (800a26c <vPortFree+0xbc>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4413      	add	r3, r2
 800a246:	4a09      	ldr	r2, [pc, #36]	; (800a26c <vPortFree+0xbc>)
 800a248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a24a:	6938      	ldr	r0, [r7, #16]
 800a24c:	f000 f874 	bl	800a338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <vPortFree+0xc0>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3301      	adds	r3, #1
 800a256:	4a06      	ldr	r2, [pc, #24]	; (800a270 <vPortFree+0xc0>)
 800a258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a25a:	f7fe fb85 	bl	8008968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a25e:	bf00      	nop
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20002600 	.word	0x20002600
 800a26c:	200025f0 	.word	0x200025f0
 800a270:	200025fc 	.word	0x200025fc

0800a274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a27a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a280:	4b27      	ldr	r3, [pc, #156]	; (800a320 <prvHeapInit+0xac>)
 800a282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00c      	beq.n	800a2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3307      	adds	r3, #7
 800a292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0307 	bic.w	r3, r3, #7
 800a29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	4a1f      	ldr	r2, [pc, #124]	; (800a320 <prvHeapInit+0xac>)
 800a2a4:	4413      	add	r3, r2
 800a2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2ac:	4a1d      	ldr	r2, [pc, #116]	; (800a324 <prvHeapInit+0xb0>)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2b2:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <prvHeapInit+0xb0>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	4413      	add	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2c0:	2208      	movs	r2, #8
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	1a9b      	subs	r3, r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f023 0307 	bic.w	r3, r3, #7
 800a2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4a15      	ldr	r2, [pc, #84]	; (800a328 <prvHeapInit+0xb4>)
 800a2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2d6:	4b14      	ldr	r3, [pc, #80]	; (800a328 <prvHeapInit+0xb4>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2de:	4b12      	ldr	r3, [pc, #72]	; (800a328 <prvHeapInit+0xb4>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	1ad2      	subs	r2, r2, r3
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <prvHeapInit+0xb4>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	4a0a      	ldr	r2, [pc, #40]	; (800a32c <prvHeapInit+0xb8>)
 800a302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	4a09      	ldr	r2, [pc, #36]	; (800a330 <prvHeapInit+0xbc>)
 800a30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a30c:	4b09      	ldr	r3, [pc, #36]	; (800a334 <prvHeapInit+0xc0>)
 800a30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a312:	601a      	str	r2, [r3, #0]
}
 800a314:	bf00      	nop
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	200011e4 	.word	0x200011e4
 800a324:	200025e4 	.word	0x200025e4
 800a328:	200025ec 	.word	0x200025ec
 800a32c:	200025f4 	.word	0x200025f4
 800a330:	200025f0 	.word	0x200025f0
 800a334:	20002600 	.word	0x20002600

0800a338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a340:	4b28      	ldr	r3, [pc, #160]	; (800a3e4 <prvInsertBlockIntoFreeList+0xac>)
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	e002      	b.n	800a34c <prvInsertBlockIntoFreeList+0x14>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d8f7      	bhi.n	800a346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	4413      	add	r3, r2
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	429a      	cmp	r2, r3
 800a366:	d108      	bne.n	800a37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	441a      	add	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	441a      	add	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d118      	bne.n	800a3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b15      	ldr	r3, [pc, #84]	; (800a3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	429a      	cmp	r2, r3
 800a398:	d00d      	beq.n	800a3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	441a      	add	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	e008      	b.n	800a3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	e003      	b.n	800a3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d002      	beq.n	800a3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	200025e4 	.word	0x200025e4
 800a3e8:	200025ec 	.word	0x200025ec

0800a3ec <__errno>:
 800a3ec:	4b01      	ldr	r3, [pc, #4]	; (800a3f4 <__errno+0x8>)
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20000020 	.word	0x20000020

0800a3f8 <__libc_init_array>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	4d0d      	ldr	r5, [pc, #52]	; (800a430 <__libc_init_array+0x38>)
 800a3fc:	4c0d      	ldr	r4, [pc, #52]	; (800a434 <__libc_init_array+0x3c>)
 800a3fe:	1b64      	subs	r4, r4, r5
 800a400:	10a4      	asrs	r4, r4, #2
 800a402:	2600      	movs	r6, #0
 800a404:	42a6      	cmp	r6, r4
 800a406:	d109      	bne.n	800a41c <__libc_init_array+0x24>
 800a408:	4d0b      	ldr	r5, [pc, #44]	; (800a438 <__libc_init_array+0x40>)
 800a40a:	4c0c      	ldr	r4, [pc, #48]	; (800a43c <__libc_init_array+0x44>)
 800a40c:	f000 fcf8 	bl	800ae00 <_init>
 800a410:	1b64      	subs	r4, r4, r5
 800a412:	10a4      	asrs	r4, r4, #2
 800a414:	2600      	movs	r6, #0
 800a416:	42a6      	cmp	r6, r4
 800a418:	d105      	bne.n	800a426 <__libc_init_array+0x2e>
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a420:	4798      	blx	r3
 800a422:	3601      	adds	r6, #1
 800a424:	e7ee      	b.n	800a404 <__libc_init_array+0xc>
 800a426:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42a:	4798      	blx	r3
 800a42c:	3601      	adds	r6, #1
 800a42e:	e7f2      	b.n	800a416 <__libc_init_array+0x1e>
 800a430:	0800b054 	.word	0x0800b054
 800a434:	0800b054 	.word	0x0800b054
 800a438:	0800b054 	.word	0x0800b054
 800a43c:	0800b058 	.word	0x0800b058

0800a440 <__retarget_lock_acquire_recursive>:
 800a440:	4770      	bx	lr

0800a442 <__retarget_lock_release_recursive>:
 800a442:	4770      	bx	lr

0800a444 <memcpy>:
 800a444:	440a      	add	r2, r1
 800a446:	4291      	cmp	r1, r2
 800a448:	f100 33ff 	add.w	r3, r0, #4294967295
 800a44c:	d100      	bne.n	800a450 <memcpy+0xc>
 800a44e:	4770      	bx	lr
 800a450:	b510      	push	{r4, lr}
 800a452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a45a:	4291      	cmp	r1, r2
 800a45c:	d1f9      	bne.n	800a452 <memcpy+0xe>
 800a45e:	bd10      	pop	{r4, pc}

0800a460 <memset>:
 800a460:	4402      	add	r2, r0
 800a462:	4603      	mov	r3, r0
 800a464:	4293      	cmp	r3, r2
 800a466:	d100      	bne.n	800a46a <memset+0xa>
 800a468:	4770      	bx	lr
 800a46a:	f803 1b01 	strb.w	r1, [r3], #1
 800a46e:	e7f9      	b.n	800a464 <memset+0x4>

0800a470 <sbrk_aligned>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	4e0e      	ldr	r6, [pc, #56]	; (800a4ac <sbrk_aligned+0x3c>)
 800a474:	460c      	mov	r4, r1
 800a476:	6831      	ldr	r1, [r6, #0]
 800a478:	4605      	mov	r5, r0
 800a47a:	b911      	cbnz	r1, 800a482 <sbrk_aligned+0x12>
 800a47c:	f000 f8f6 	bl	800a66c <_sbrk_r>
 800a480:	6030      	str	r0, [r6, #0]
 800a482:	4621      	mov	r1, r4
 800a484:	4628      	mov	r0, r5
 800a486:	f000 f8f1 	bl	800a66c <_sbrk_r>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	d00a      	beq.n	800a4a4 <sbrk_aligned+0x34>
 800a48e:	1cc4      	adds	r4, r0, #3
 800a490:	f024 0403 	bic.w	r4, r4, #3
 800a494:	42a0      	cmp	r0, r4
 800a496:	d007      	beq.n	800a4a8 <sbrk_aligned+0x38>
 800a498:	1a21      	subs	r1, r4, r0
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 f8e6 	bl	800a66c <_sbrk_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d101      	bne.n	800a4a8 <sbrk_aligned+0x38>
 800a4a4:	f04f 34ff 	mov.w	r4, #4294967295
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	2000260c 	.word	0x2000260c

0800a4b0 <_malloc_r>:
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	1ccd      	adds	r5, r1, #3
 800a4b6:	f025 0503 	bic.w	r5, r5, #3
 800a4ba:	3508      	adds	r5, #8
 800a4bc:	2d0c      	cmp	r5, #12
 800a4be:	bf38      	it	cc
 800a4c0:	250c      	movcc	r5, #12
 800a4c2:	2d00      	cmp	r5, #0
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	db01      	blt.n	800a4cc <_malloc_r+0x1c>
 800a4c8:	42a9      	cmp	r1, r5
 800a4ca:	d905      	bls.n	800a4d8 <_malloc_r+0x28>
 800a4cc:	230c      	movs	r3, #12
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	2600      	movs	r6, #0
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d8:	4e2e      	ldr	r6, [pc, #184]	; (800a594 <_malloc_r+0xe4>)
 800a4da:	f000 f8f7 	bl	800a6cc <__malloc_lock>
 800a4de:	6833      	ldr	r3, [r6, #0]
 800a4e0:	461c      	mov	r4, r3
 800a4e2:	bb34      	cbnz	r4, 800a532 <_malloc_r+0x82>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7ff ffc2 	bl	800a470 <sbrk_aligned>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	d14d      	bne.n	800a58e <_malloc_r+0xde>
 800a4f2:	6834      	ldr	r4, [r6, #0]
 800a4f4:	4626      	mov	r6, r4
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	d140      	bne.n	800a57c <_malloc_r+0xcc>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4638      	mov	r0, r7
 800a500:	eb04 0803 	add.w	r8, r4, r3
 800a504:	f000 f8b2 	bl	800a66c <_sbrk_r>
 800a508:	4580      	cmp	r8, r0
 800a50a:	d13a      	bne.n	800a582 <_malloc_r+0xd2>
 800a50c:	6821      	ldr	r1, [r4, #0]
 800a50e:	3503      	adds	r5, #3
 800a510:	1a6d      	subs	r5, r5, r1
 800a512:	f025 0503 	bic.w	r5, r5, #3
 800a516:	3508      	adds	r5, #8
 800a518:	2d0c      	cmp	r5, #12
 800a51a:	bf38      	it	cc
 800a51c:	250c      	movcc	r5, #12
 800a51e:	4629      	mov	r1, r5
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ffa5 	bl	800a470 <sbrk_aligned>
 800a526:	3001      	adds	r0, #1
 800a528:	d02b      	beq.n	800a582 <_malloc_r+0xd2>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	442b      	add	r3, r5
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	e00e      	b.n	800a550 <_malloc_r+0xa0>
 800a532:	6822      	ldr	r2, [r4, #0]
 800a534:	1b52      	subs	r2, r2, r5
 800a536:	d41e      	bmi.n	800a576 <_malloc_r+0xc6>
 800a538:	2a0b      	cmp	r2, #11
 800a53a:	d916      	bls.n	800a56a <_malloc_r+0xba>
 800a53c:	1961      	adds	r1, r4, r5
 800a53e:	42a3      	cmp	r3, r4
 800a540:	6025      	str	r5, [r4, #0]
 800a542:	bf18      	it	ne
 800a544:	6059      	strne	r1, [r3, #4]
 800a546:	6863      	ldr	r3, [r4, #4]
 800a548:	bf08      	it	eq
 800a54a:	6031      	streq	r1, [r6, #0]
 800a54c:	5162      	str	r2, [r4, r5]
 800a54e:	604b      	str	r3, [r1, #4]
 800a550:	4638      	mov	r0, r7
 800a552:	f104 060b 	add.w	r6, r4, #11
 800a556:	f000 f8bf 	bl	800a6d8 <__malloc_unlock>
 800a55a:	f026 0607 	bic.w	r6, r6, #7
 800a55e:	1d23      	adds	r3, r4, #4
 800a560:	1af2      	subs	r2, r6, r3
 800a562:	d0b6      	beq.n	800a4d2 <_malloc_r+0x22>
 800a564:	1b9b      	subs	r3, r3, r6
 800a566:	50a3      	str	r3, [r4, r2]
 800a568:	e7b3      	b.n	800a4d2 <_malloc_r+0x22>
 800a56a:	6862      	ldr	r2, [r4, #4]
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	bf0c      	ite	eq
 800a570:	6032      	streq	r2, [r6, #0]
 800a572:	605a      	strne	r2, [r3, #4]
 800a574:	e7ec      	b.n	800a550 <_malloc_r+0xa0>
 800a576:	4623      	mov	r3, r4
 800a578:	6864      	ldr	r4, [r4, #4]
 800a57a:	e7b2      	b.n	800a4e2 <_malloc_r+0x32>
 800a57c:	4634      	mov	r4, r6
 800a57e:	6876      	ldr	r6, [r6, #4]
 800a580:	e7b9      	b.n	800a4f6 <_malloc_r+0x46>
 800a582:	230c      	movs	r3, #12
 800a584:	603b      	str	r3, [r7, #0]
 800a586:	4638      	mov	r0, r7
 800a588:	f000 f8a6 	bl	800a6d8 <__malloc_unlock>
 800a58c:	e7a1      	b.n	800a4d2 <_malloc_r+0x22>
 800a58e:	6025      	str	r5, [r4, #0]
 800a590:	e7de      	b.n	800a550 <_malloc_r+0xa0>
 800a592:	bf00      	nop
 800a594:	20002608 	.word	0x20002608

0800a598 <cleanup_glue>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	460c      	mov	r4, r1
 800a59c:	6809      	ldr	r1, [r1, #0]
 800a59e:	4605      	mov	r5, r0
 800a5a0:	b109      	cbz	r1, 800a5a6 <cleanup_glue+0xe>
 800a5a2:	f7ff fff9 	bl	800a598 <cleanup_glue>
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ae:	f000 b899 	b.w	800a6e4 <_free_r>
	...

0800a5b4 <_reclaim_reent>:
 800a5b4:	4b2c      	ldr	r3, [pc, #176]	; (800a668 <_reclaim_reent+0xb4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4283      	cmp	r3, r0
 800a5ba:	b570      	push	{r4, r5, r6, lr}
 800a5bc:	4604      	mov	r4, r0
 800a5be:	d051      	beq.n	800a664 <_reclaim_reent+0xb0>
 800a5c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a5c2:	b143      	cbz	r3, 800a5d6 <_reclaim_reent+0x22>
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d14a      	bne.n	800a660 <_reclaim_reent+0xac>
 800a5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5cc:	6819      	ldr	r1, [r3, #0]
 800a5ce:	b111      	cbz	r1, 800a5d6 <_reclaim_reent+0x22>
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 f887 	bl	800a6e4 <_free_r>
 800a5d6:	6961      	ldr	r1, [r4, #20]
 800a5d8:	b111      	cbz	r1, 800a5e0 <_reclaim_reent+0x2c>
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 f882 	bl	800a6e4 <_free_r>
 800a5e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a5e2:	b111      	cbz	r1, 800a5ea <_reclaim_reent+0x36>
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 f87d 	bl	800a6e4 <_free_r>
 800a5ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a5ec:	b111      	cbz	r1, 800a5f4 <_reclaim_reent+0x40>
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 f878 	bl	800a6e4 <_free_r>
 800a5f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a5f6:	b111      	cbz	r1, 800a5fe <_reclaim_reent+0x4a>
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f000 f873 	bl	800a6e4 <_free_r>
 800a5fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a600:	b111      	cbz	r1, 800a608 <_reclaim_reent+0x54>
 800a602:	4620      	mov	r0, r4
 800a604:	f000 f86e 	bl	800a6e4 <_free_r>
 800a608:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a60a:	b111      	cbz	r1, 800a612 <_reclaim_reent+0x5e>
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 f869 	bl	800a6e4 <_free_r>
 800a612:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a614:	b111      	cbz	r1, 800a61c <_reclaim_reent+0x68>
 800a616:	4620      	mov	r0, r4
 800a618:	f000 f864 	bl	800a6e4 <_free_r>
 800a61c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a61e:	b111      	cbz	r1, 800a626 <_reclaim_reent+0x72>
 800a620:	4620      	mov	r0, r4
 800a622:	f000 f85f 	bl	800a6e4 <_free_r>
 800a626:	69a3      	ldr	r3, [r4, #24]
 800a628:	b1e3      	cbz	r3, 800a664 <_reclaim_reent+0xb0>
 800a62a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a62c:	4620      	mov	r0, r4
 800a62e:	4798      	blx	r3
 800a630:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a632:	b1b9      	cbz	r1, 800a664 <_reclaim_reent+0xb0>
 800a634:	4620      	mov	r0, r4
 800a636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a63a:	f7ff bfad 	b.w	800a598 <cleanup_glue>
 800a63e:	5949      	ldr	r1, [r1, r5]
 800a640:	b941      	cbnz	r1, 800a654 <_reclaim_reent+0xa0>
 800a642:	3504      	adds	r5, #4
 800a644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a646:	2d80      	cmp	r5, #128	; 0x80
 800a648:	68d9      	ldr	r1, [r3, #12]
 800a64a:	d1f8      	bne.n	800a63e <_reclaim_reent+0x8a>
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 f849 	bl	800a6e4 <_free_r>
 800a652:	e7ba      	b.n	800a5ca <_reclaim_reent+0x16>
 800a654:	680e      	ldr	r6, [r1, #0]
 800a656:	4620      	mov	r0, r4
 800a658:	f000 f844 	bl	800a6e4 <_free_r>
 800a65c:	4631      	mov	r1, r6
 800a65e:	e7ef      	b.n	800a640 <_reclaim_reent+0x8c>
 800a660:	2500      	movs	r5, #0
 800a662:	e7ef      	b.n	800a644 <_reclaim_reent+0x90>
 800a664:	bd70      	pop	{r4, r5, r6, pc}
 800a666:	bf00      	nop
 800a668:	20000020 	.word	0x20000020

0800a66c <_sbrk_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d06      	ldr	r5, [pc, #24]	; (800a688 <_sbrk_r+0x1c>)
 800a670:	2300      	movs	r3, #0
 800a672:	4604      	mov	r4, r0
 800a674:	4608      	mov	r0, r1
 800a676:	602b      	str	r3, [r5, #0]
 800a678:	f7f7 f8e8 	bl	800184c <_sbrk>
 800a67c:	1c43      	adds	r3, r0, #1
 800a67e:	d102      	bne.n	800a686 <_sbrk_r+0x1a>
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	b103      	cbz	r3, 800a686 <_sbrk_r+0x1a>
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	20002610 	.word	0x20002610

0800a68c <siprintf>:
 800a68c:	b40e      	push	{r1, r2, r3}
 800a68e:	b500      	push	{lr}
 800a690:	b09c      	sub	sp, #112	; 0x70
 800a692:	ab1d      	add	r3, sp, #116	; 0x74
 800a694:	9002      	str	r0, [sp, #8]
 800a696:	9006      	str	r0, [sp, #24]
 800a698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a69c:	4809      	ldr	r0, [pc, #36]	; (800a6c4 <siprintf+0x38>)
 800a69e:	9107      	str	r1, [sp, #28]
 800a6a0:	9104      	str	r1, [sp, #16]
 800a6a2:	4909      	ldr	r1, [pc, #36]	; (800a6c8 <siprintf+0x3c>)
 800a6a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a8:	9105      	str	r1, [sp, #20]
 800a6aa:	6800      	ldr	r0, [r0, #0]
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	a902      	add	r1, sp, #8
 800a6b0:	f000 f8c0 	bl	800a834 <_svfiprintf_r>
 800a6b4:	9b02      	ldr	r3, [sp, #8]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	b01c      	add	sp, #112	; 0x70
 800a6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c0:	b003      	add	sp, #12
 800a6c2:	4770      	bx	lr
 800a6c4:	20000020 	.word	0x20000020
 800a6c8:	ffff0208 	.word	0xffff0208

0800a6cc <__malloc_lock>:
 800a6cc:	4801      	ldr	r0, [pc, #4]	; (800a6d4 <__malloc_lock+0x8>)
 800a6ce:	f7ff beb7 	b.w	800a440 <__retarget_lock_acquire_recursive>
 800a6d2:	bf00      	nop
 800a6d4:	20002604 	.word	0x20002604

0800a6d8 <__malloc_unlock>:
 800a6d8:	4801      	ldr	r0, [pc, #4]	; (800a6e0 <__malloc_unlock+0x8>)
 800a6da:	f7ff beb2 	b.w	800a442 <__retarget_lock_release_recursive>
 800a6de:	bf00      	nop
 800a6e0:	20002604 	.word	0x20002604

0800a6e4 <_free_r>:
 800a6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	d044      	beq.n	800a774 <_free_r+0x90>
 800a6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ee:	9001      	str	r0, [sp, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a6f6:	bfb8      	it	lt
 800a6f8:	18e4      	addlt	r4, r4, r3
 800a6fa:	f7ff ffe7 	bl	800a6cc <__malloc_lock>
 800a6fe:	4a1e      	ldr	r2, [pc, #120]	; (800a778 <_free_r+0x94>)
 800a700:	9801      	ldr	r0, [sp, #4]
 800a702:	6813      	ldr	r3, [r2, #0]
 800a704:	b933      	cbnz	r3, 800a714 <_free_r+0x30>
 800a706:	6063      	str	r3, [r4, #4]
 800a708:	6014      	str	r4, [r2, #0]
 800a70a:	b003      	add	sp, #12
 800a70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a710:	f7ff bfe2 	b.w	800a6d8 <__malloc_unlock>
 800a714:	42a3      	cmp	r3, r4
 800a716:	d908      	bls.n	800a72a <_free_r+0x46>
 800a718:	6825      	ldr	r5, [r4, #0]
 800a71a:	1961      	adds	r1, r4, r5
 800a71c:	428b      	cmp	r3, r1
 800a71e:	bf01      	itttt	eq
 800a720:	6819      	ldreq	r1, [r3, #0]
 800a722:	685b      	ldreq	r3, [r3, #4]
 800a724:	1949      	addeq	r1, r1, r5
 800a726:	6021      	streq	r1, [r4, #0]
 800a728:	e7ed      	b.n	800a706 <_free_r+0x22>
 800a72a:	461a      	mov	r2, r3
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	b10b      	cbz	r3, 800a734 <_free_r+0x50>
 800a730:	42a3      	cmp	r3, r4
 800a732:	d9fa      	bls.n	800a72a <_free_r+0x46>
 800a734:	6811      	ldr	r1, [r2, #0]
 800a736:	1855      	adds	r5, r2, r1
 800a738:	42a5      	cmp	r5, r4
 800a73a:	d10b      	bne.n	800a754 <_free_r+0x70>
 800a73c:	6824      	ldr	r4, [r4, #0]
 800a73e:	4421      	add	r1, r4
 800a740:	1854      	adds	r4, r2, r1
 800a742:	42a3      	cmp	r3, r4
 800a744:	6011      	str	r1, [r2, #0]
 800a746:	d1e0      	bne.n	800a70a <_free_r+0x26>
 800a748:	681c      	ldr	r4, [r3, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	6053      	str	r3, [r2, #4]
 800a74e:	4421      	add	r1, r4
 800a750:	6011      	str	r1, [r2, #0]
 800a752:	e7da      	b.n	800a70a <_free_r+0x26>
 800a754:	d902      	bls.n	800a75c <_free_r+0x78>
 800a756:	230c      	movs	r3, #12
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	e7d6      	b.n	800a70a <_free_r+0x26>
 800a75c:	6825      	ldr	r5, [r4, #0]
 800a75e:	1961      	adds	r1, r4, r5
 800a760:	428b      	cmp	r3, r1
 800a762:	bf04      	itt	eq
 800a764:	6819      	ldreq	r1, [r3, #0]
 800a766:	685b      	ldreq	r3, [r3, #4]
 800a768:	6063      	str	r3, [r4, #4]
 800a76a:	bf04      	itt	eq
 800a76c:	1949      	addeq	r1, r1, r5
 800a76e:	6021      	streq	r1, [r4, #0]
 800a770:	6054      	str	r4, [r2, #4]
 800a772:	e7ca      	b.n	800a70a <_free_r+0x26>
 800a774:	b003      	add	sp, #12
 800a776:	bd30      	pop	{r4, r5, pc}
 800a778:	20002608 	.word	0x20002608

0800a77c <__ssputs_r>:
 800a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a780:	688e      	ldr	r6, [r1, #8]
 800a782:	429e      	cmp	r6, r3
 800a784:	4682      	mov	sl, r0
 800a786:	460c      	mov	r4, r1
 800a788:	4690      	mov	r8, r2
 800a78a:	461f      	mov	r7, r3
 800a78c:	d838      	bhi.n	800a800 <__ssputs_r+0x84>
 800a78e:	898a      	ldrh	r2, [r1, #12]
 800a790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a794:	d032      	beq.n	800a7fc <__ssputs_r+0x80>
 800a796:	6825      	ldr	r5, [r4, #0]
 800a798:	6909      	ldr	r1, [r1, #16]
 800a79a:	eba5 0901 	sub.w	r9, r5, r1
 800a79e:	6965      	ldr	r5, [r4, #20]
 800a7a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	444b      	add	r3, r9
 800a7ac:	106d      	asrs	r5, r5, #1
 800a7ae:	429d      	cmp	r5, r3
 800a7b0:	bf38      	it	cc
 800a7b2:	461d      	movcc	r5, r3
 800a7b4:	0553      	lsls	r3, r2, #21
 800a7b6:	d531      	bpl.n	800a81c <__ssputs_r+0xa0>
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7ff fe79 	bl	800a4b0 <_malloc_r>
 800a7be:	4606      	mov	r6, r0
 800a7c0:	b950      	cbnz	r0, 800a7d8 <__ssputs_r+0x5c>
 800a7c2:	230c      	movs	r3, #12
 800a7c4:	f8ca 3000 	str.w	r3, [sl]
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ce:	81a3      	strh	r3, [r4, #12]
 800a7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d8:	6921      	ldr	r1, [r4, #16]
 800a7da:	464a      	mov	r2, r9
 800a7dc:	f7ff fe32 	bl	800a444 <memcpy>
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ea:	81a3      	strh	r3, [r4, #12]
 800a7ec:	6126      	str	r6, [r4, #16]
 800a7ee:	6165      	str	r5, [r4, #20]
 800a7f0:	444e      	add	r6, r9
 800a7f2:	eba5 0509 	sub.w	r5, r5, r9
 800a7f6:	6026      	str	r6, [r4, #0]
 800a7f8:	60a5      	str	r5, [r4, #8]
 800a7fa:	463e      	mov	r6, r7
 800a7fc:	42be      	cmp	r6, r7
 800a7fe:	d900      	bls.n	800a802 <__ssputs_r+0x86>
 800a800:	463e      	mov	r6, r7
 800a802:	6820      	ldr	r0, [r4, #0]
 800a804:	4632      	mov	r2, r6
 800a806:	4641      	mov	r1, r8
 800a808:	f000 faa8 	bl	800ad5c <memmove>
 800a80c:	68a3      	ldr	r3, [r4, #8]
 800a80e:	1b9b      	subs	r3, r3, r6
 800a810:	60a3      	str	r3, [r4, #8]
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	4433      	add	r3, r6
 800a816:	6023      	str	r3, [r4, #0]
 800a818:	2000      	movs	r0, #0
 800a81a:	e7db      	b.n	800a7d4 <__ssputs_r+0x58>
 800a81c:	462a      	mov	r2, r5
 800a81e:	f000 fab7 	bl	800ad90 <_realloc_r>
 800a822:	4606      	mov	r6, r0
 800a824:	2800      	cmp	r0, #0
 800a826:	d1e1      	bne.n	800a7ec <__ssputs_r+0x70>
 800a828:	6921      	ldr	r1, [r4, #16]
 800a82a:	4650      	mov	r0, sl
 800a82c:	f7ff ff5a 	bl	800a6e4 <_free_r>
 800a830:	e7c7      	b.n	800a7c2 <__ssputs_r+0x46>
	...

0800a834 <_svfiprintf_r>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	4698      	mov	r8, r3
 800a83a:	898b      	ldrh	r3, [r1, #12]
 800a83c:	061b      	lsls	r3, r3, #24
 800a83e:	b09d      	sub	sp, #116	; 0x74
 800a840:	4607      	mov	r7, r0
 800a842:	460d      	mov	r5, r1
 800a844:	4614      	mov	r4, r2
 800a846:	d50e      	bpl.n	800a866 <_svfiprintf_r+0x32>
 800a848:	690b      	ldr	r3, [r1, #16]
 800a84a:	b963      	cbnz	r3, 800a866 <_svfiprintf_r+0x32>
 800a84c:	2140      	movs	r1, #64	; 0x40
 800a84e:	f7ff fe2f 	bl	800a4b0 <_malloc_r>
 800a852:	6028      	str	r0, [r5, #0]
 800a854:	6128      	str	r0, [r5, #16]
 800a856:	b920      	cbnz	r0, 800a862 <_svfiprintf_r+0x2e>
 800a858:	230c      	movs	r3, #12
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	f04f 30ff 	mov.w	r0, #4294967295
 800a860:	e0d1      	b.n	800aa06 <_svfiprintf_r+0x1d2>
 800a862:	2340      	movs	r3, #64	; 0x40
 800a864:	616b      	str	r3, [r5, #20]
 800a866:	2300      	movs	r3, #0
 800a868:	9309      	str	r3, [sp, #36]	; 0x24
 800a86a:	2320      	movs	r3, #32
 800a86c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a870:	f8cd 800c 	str.w	r8, [sp, #12]
 800a874:	2330      	movs	r3, #48	; 0x30
 800a876:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa20 <_svfiprintf_r+0x1ec>
 800a87a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a87e:	f04f 0901 	mov.w	r9, #1
 800a882:	4623      	mov	r3, r4
 800a884:	469a      	mov	sl, r3
 800a886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a88a:	b10a      	cbz	r2, 800a890 <_svfiprintf_r+0x5c>
 800a88c:	2a25      	cmp	r2, #37	; 0x25
 800a88e:	d1f9      	bne.n	800a884 <_svfiprintf_r+0x50>
 800a890:	ebba 0b04 	subs.w	fp, sl, r4
 800a894:	d00b      	beq.n	800a8ae <_svfiprintf_r+0x7a>
 800a896:	465b      	mov	r3, fp
 800a898:	4622      	mov	r2, r4
 800a89a:	4629      	mov	r1, r5
 800a89c:	4638      	mov	r0, r7
 800a89e:	f7ff ff6d 	bl	800a77c <__ssputs_r>
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	f000 80aa 	beq.w	800a9fc <_svfiprintf_r+0x1c8>
 800a8a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8aa:	445a      	add	r2, fp
 800a8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 80a2 	beq.w	800a9fc <_svfiprintf_r+0x1c8>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a8be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8c2:	f10a 0a01 	add.w	sl, sl, #1
 800a8c6:	9304      	str	r3, [sp, #16]
 800a8c8:	9307      	str	r3, [sp, #28]
 800a8ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a8d0:	4654      	mov	r4, sl
 800a8d2:	2205      	movs	r2, #5
 800a8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d8:	4851      	ldr	r0, [pc, #324]	; (800aa20 <_svfiprintf_r+0x1ec>)
 800a8da:	f7f5 fca1 	bl	8000220 <memchr>
 800a8de:	9a04      	ldr	r2, [sp, #16]
 800a8e0:	b9d8      	cbnz	r0, 800a91a <_svfiprintf_r+0xe6>
 800a8e2:	06d0      	lsls	r0, r2, #27
 800a8e4:	bf44      	itt	mi
 800a8e6:	2320      	movmi	r3, #32
 800a8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ec:	0711      	lsls	r1, r2, #28
 800a8ee:	bf44      	itt	mi
 800a8f0:	232b      	movmi	r3, #43	; 0x2b
 800a8f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a8fc:	d015      	beq.n	800a92a <_svfiprintf_r+0xf6>
 800a8fe:	9a07      	ldr	r2, [sp, #28]
 800a900:	4654      	mov	r4, sl
 800a902:	2000      	movs	r0, #0
 800a904:	f04f 0c0a 	mov.w	ip, #10
 800a908:	4621      	mov	r1, r4
 800a90a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a90e:	3b30      	subs	r3, #48	; 0x30
 800a910:	2b09      	cmp	r3, #9
 800a912:	d94e      	bls.n	800a9b2 <_svfiprintf_r+0x17e>
 800a914:	b1b0      	cbz	r0, 800a944 <_svfiprintf_r+0x110>
 800a916:	9207      	str	r2, [sp, #28]
 800a918:	e014      	b.n	800a944 <_svfiprintf_r+0x110>
 800a91a:	eba0 0308 	sub.w	r3, r0, r8
 800a91e:	fa09 f303 	lsl.w	r3, r9, r3
 800a922:	4313      	orrs	r3, r2
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	46a2      	mov	sl, r4
 800a928:	e7d2      	b.n	800a8d0 <_svfiprintf_r+0x9c>
 800a92a:	9b03      	ldr	r3, [sp, #12]
 800a92c:	1d19      	adds	r1, r3, #4
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	9103      	str	r1, [sp, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	bfbb      	ittet	lt
 800a936:	425b      	neglt	r3, r3
 800a938:	f042 0202 	orrlt.w	r2, r2, #2
 800a93c:	9307      	strge	r3, [sp, #28]
 800a93e:	9307      	strlt	r3, [sp, #28]
 800a940:	bfb8      	it	lt
 800a942:	9204      	strlt	r2, [sp, #16]
 800a944:	7823      	ldrb	r3, [r4, #0]
 800a946:	2b2e      	cmp	r3, #46	; 0x2e
 800a948:	d10c      	bne.n	800a964 <_svfiprintf_r+0x130>
 800a94a:	7863      	ldrb	r3, [r4, #1]
 800a94c:	2b2a      	cmp	r3, #42	; 0x2a
 800a94e:	d135      	bne.n	800a9bc <_svfiprintf_r+0x188>
 800a950:	9b03      	ldr	r3, [sp, #12]
 800a952:	1d1a      	adds	r2, r3, #4
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	9203      	str	r2, [sp, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bfb8      	it	lt
 800a95c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a960:	3402      	adds	r4, #2
 800a962:	9305      	str	r3, [sp, #20]
 800a964:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa30 <_svfiprintf_r+0x1fc>
 800a968:	7821      	ldrb	r1, [r4, #0]
 800a96a:	2203      	movs	r2, #3
 800a96c:	4650      	mov	r0, sl
 800a96e:	f7f5 fc57 	bl	8000220 <memchr>
 800a972:	b140      	cbz	r0, 800a986 <_svfiprintf_r+0x152>
 800a974:	2340      	movs	r3, #64	; 0x40
 800a976:	eba0 000a 	sub.w	r0, r0, sl
 800a97a:	fa03 f000 	lsl.w	r0, r3, r0
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	4303      	orrs	r3, r0
 800a982:	3401      	adds	r4, #1
 800a984:	9304      	str	r3, [sp, #16]
 800a986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98a:	4826      	ldr	r0, [pc, #152]	; (800aa24 <_svfiprintf_r+0x1f0>)
 800a98c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a990:	2206      	movs	r2, #6
 800a992:	f7f5 fc45 	bl	8000220 <memchr>
 800a996:	2800      	cmp	r0, #0
 800a998:	d038      	beq.n	800aa0c <_svfiprintf_r+0x1d8>
 800a99a:	4b23      	ldr	r3, [pc, #140]	; (800aa28 <_svfiprintf_r+0x1f4>)
 800a99c:	bb1b      	cbnz	r3, 800a9e6 <_svfiprintf_r+0x1b2>
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	3307      	adds	r3, #7
 800a9a2:	f023 0307 	bic.w	r3, r3, #7
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	9303      	str	r3, [sp, #12]
 800a9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ac:	4433      	add	r3, r6
 800a9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b0:	e767      	b.n	800a882 <_svfiprintf_r+0x4e>
 800a9b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	2001      	movs	r0, #1
 800a9ba:	e7a5      	b.n	800a908 <_svfiprintf_r+0xd4>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	3401      	adds	r4, #1
 800a9c0:	9305      	str	r3, [sp, #20]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	f04f 0c0a 	mov.w	ip, #10
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ce:	3a30      	subs	r2, #48	; 0x30
 800a9d0:	2a09      	cmp	r2, #9
 800a9d2:	d903      	bls.n	800a9dc <_svfiprintf_r+0x1a8>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0c5      	beq.n	800a964 <_svfiprintf_r+0x130>
 800a9d8:	9105      	str	r1, [sp, #20]
 800a9da:	e7c3      	b.n	800a964 <_svfiprintf_r+0x130>
 800a9dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e7f0      	b.n	800a9c8 <_svfiprintf_r+0x194>
 800a9e6:	ab03      	add	r3, sp, #12
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4b0f      	ldr	r3, [pc, #60]	; (800aa2c <_svfiprintf_r+0x1f8>)
 800a9ee:	a904      	add	r1, sp, #16
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	f3af 8000 	nop.w
 800a9f6:	1c42      	adds	r2, r0, #1
 800a9f8:	4606      	mov	r6, r0
 800a9fa:	d1d6      	bne.n	800a9aa <_svfiprintf_r+0x176>
 800a9fc:	89ab      	ldrh	r3, [r5, #12]
 800a9fe:	065b      	lsls	r3, r3, #25
 800aa00:	f53f af2c 	bmi.w	800a85c <_svfiprintf_r+0x28>
 800aa04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa06:	b01d      	add	sp, #116	; 0x74
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	ab03      	add	r3, sp, #12
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	462a      	mov	r2, r5
 800aa12:	4b06      	ldr	r3, [pc, #24]	; (800aa2c <_svfiprintf_r+0x1f8>)
 800aa14:	a904      	add	r1, sp, #16
 800aa16:	4638      	mov	r0, r7
 800aa18:	f000 f87a 	bl	800ab10 <_printf_i>
 800aa1c:	e7eb      	b.n	800a9f6 <_svfiprintf_r+0x1c2>
 800aa1e:	bf00      	nop
 800aa20:	0800b018 	.word	0x0800b018
 800aa24:	0800b022 	.word	0x0800b022
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	0800a77d 	.word	0x0800a77d
 800aa30:	0800b01e 	.word	0x0800b01e

0800aa34 <_printf_common>:
 800aa34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa38:	4616      	mov	r6, r2
 800aa3a:	4699      	mov	r9, r3
 800aa3c:	688a      	ldr	r2, [r1, #8]
 800aa3e:	690b      	ldr	r3, [r1, #16]
 800aa40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa44:	4293      	cmp	r3, r2
 800aa46:	bfb8      	it	lt
 800aa48:	4613      	movlt	r3, r2
 800aa4a:	6033      	str	r3, [r6, #0]
 800aa4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa50:	4607      	mov	r7, r0
 800aa52:	460c      	mov	r4, r1
 800aa54:	b10a      	cbz	r2, 800aa5a <_printf_common+0x26>
 800aa56:	3301      	adds	r3, #1
 800aa58:	6033      	str	r3, [r6, #0]
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	0699      	lsls	r1, r3, #26
 800aa5e:	bf42      	ittt	mi
 800aa60:	6833      	ldrmi	r3, [r6, #0]
 800aa62:	3302      	addmi	r3, #2
 800aa64:	6033      	strmi	r3, [r6, #0]
 800aa66:	6825      	ldr	r5, [r4, #0]
 800aa68:	f015 0506 	ands.w	r5, r5, #6
 800aa6c:	d106      	bne.n	800aa7c <_printf_common+0x48>
 800aa6e:	f104 0a19 	add.w	sl, r4, #25
 800aa72:	68e3      	ldr	r3, [r4, #12]
 800aa74:	6832      	ldr	r2, [r6, #0]
 800aa76:	1a9b      	subs	r3, r3, r2
 800aa78:	42ab      	cmp	r3, r5
 800aa7a:	dc26      	bgt.n	800aaca <_printf_common+0x96>
 800aa7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa80:	1e13      	subs	r3, r2, #0
 800aa82:	6822      	ldr	r2, [r4, #0]
 800aa84:	bf18      	it	ne
 800aa86:	2301      	movne	r3, #1
 800aa88:	0692      	lsls	r2, r2, #26
 800aa8a:	d42b      	bmi.n	800aae4 <_printf_common+0xb0>
 800aa8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa90:	4649      	mov	r1, r9
 800aa92:	4638      	mov	r0, r7
 800aa94:	47c0      	blx	r8
 800aa96:	3001      	adds	r0, #1
 800aa98:	d01e      	beq.n	800aad8 <_printf_common+0xa4>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	68e5      	ldr	r5, [r4, #12]
 800aa9e:	6832      	ldr	r2, [r6, #0]
 800aaa0:	f003 0306 	and.w	r3, r3, #6
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	bf08      	it	eq
 800aaa8:	1aad      	subeq	r5, r5, r2
 800aaaa:	68a3      	ldr	r3, [r4, #8]
 800aaac:	6922      	ldr	r2, [r4, #16]
 800aaae:	bf0c      	ite	eq
 800aab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab4:	2500      	movne	r5, #0
 800aab6:	4293      	cmp	r3, r2
 800aab8:	bfc4      	itt	gt
 800aaba:	1a9b      	subgt	r3, r3, r2
 800aabc:	18ed      	addgt	r5, r5, r3
 800aabe:	2600      	movs	r6, #0
 800aac0:	341a      	adds	r4, #26
 800aac2:	42b5      	cmp	r5, r6
 800aac4:	d11a      	bne.n	800aafc <_printf_common+0xc8>
 800aac6:	2000      	movs	r0, #0
 800aac8:	e008      	b.n	800aadc <_printf_common+0xa8>
 800aaca:	2301      	movs	r3, #1
 800aacc:	4652      	mov	r2, sl
 800aace:	4649      	mov	r1, r9
 800aad0:	4638      	mov	r0, r7
 800aad2:	47c0      	blx	r8
 800aad4:	3001      	adds	r0, #1
 800aad6:	d103      	bne.n	800aae0 <_printf_common+0xac>
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae0:	3501      	adds	r5, #1
 800aae2:	e7c6      	b.n	800aa72 <_printf_common+0x3e>
 800aae4:	18e1      	adds	r1, r4, r3
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	2030      	movs	r0, #48	; 0x30
 800aaea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaee:	4422      	add	r2, r4
 800aaf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaf8:	3302      	adds	r3, #2
 800aafa:	e7c7      	b.n	800aa8c <_printf_common+0x58>
 800aafc:	2301      	movs	r3, #1
 800aafe:	4622      	mov	r2, r4
 800ab00:	4649      	mov	r1, r9
 800ab02:	4638      	mov	r0, r7
 800ab04:	47c0      	blx	r8
 800ab06:	3001      	adds	r0, #1
 800ab08:	d0e6      	beq.n	800aad8 <_printf_common+0xa4>
 800ab0a:	3601      	adds	r6, #1
 800ab0c:	e7d9      	b.n	800aac2 <_printf_common+0x8e>
	...

0800ab10 <_printf_i>:
 800ab10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab14:	7e0f      	ldrb	r7, [r1, #24]
 800ab16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab18:	2f78      	cmp	r7, #120	; 0x78
 800ab1a:	4691      	mov	r9, r2
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	469a      	mov	sl, r3
 800ab22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab26:	d807      	bhi.n	800ab38 <_printf_i+0x28>
 800ab28:	2f62      	cmp	r7, #98	; 0x62
 800ab2a:	d80a      	bhi.n	800ab42 <_printf_i+0x32>
 800ab2c:	2f00      	cmp	r7, #0
 800ab2e:	f000 80d8 	beq.w	800ace2 <_printf_i+0x1d2>
 800ab32:	2f58      	cmp	r7, #88	; 0x58
 800ab34:	f000 80a3 	beq.w	800ac7e <_printf_i+0x16e>
 800ab38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab40:	e03a      	b.n	800abb8 <_printf_i+0xa8>
 800ab42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab46:	2b15      	cmp	r3, #21
 800ab48:	d8f6      	bhi.n	800ab38 <_printf_i+0x28>
 800ab4a:	a101      	add	r1, pc, #4	; (adr r1, 800ab50 <_printf_i+0x40>)
 800ab4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab50:	0800aba9 	.word	0x0800aba9
 800ab54:	0800abbd 	.word	0x0800abbd
 800ab58:	0800ab39 	.word	0x0800ab39
 800ab5c:	0800ab39 	.word	0x0800ab39
 800ab60:	0800ab39 	.word	0x0800ab39
 800ab64:	0800ab39 	.word	0x0800ab39
 800ab68:	0800abbd 	.word	0x0800abbd
 800ab6c:	0800ab39 	.word	0x0800ab39
 800ab70:	0800ab39 	.word	0x0800ab39
 800ab74:	0800ab39 	.word	0x0800ab39
 800ab78:	0800ab39 	.word	0x0800ab39
 800ab7c:	0800acc9 	.word	0x0800acc9
 800ab80:	0800abed 	.word	0x0800abed
 800ab84:	0800acab 	.word	0x0800acab
 800ab88:	0800ab39 	.word	0x0800ab39
 800ab8c:	0800ab39 	.word	0x0800ab39
 800ab90:	0800aceb 	.word	0x0800aceb
 800ab94:	0800ab39 	.word	0x0800ab39
 800ab98:	0800abed 	.word	0x0800abed
 800ab9c:	0800ab39 	.word	0x0800ab39
 800aba0:	0800ab39 	.word	0x0800ab39
 800aba4:	0800acb3 	.word	0x0800acb3
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	602a      	str	r2, [r5, #0]
 800abb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abb8:	2301      	movs	r3, #1
 800abba:	e0a3      	b.n	800ad04 <_printf_i+0x1f4>
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	6829      	ldr	r1, [r5, #0]
 800abc0:	0606      	lsls	r6, r0, #24
 800abc2:	f101 0304 	add.w	r3, r1, #4
 800abc6:	d50a      	bpl.n	800abde <_printf_i+0xce>
 800abc8:	680e      	ldr	r6, [r1, #0]
 800abca:	602b      	str	r3, [r5, #0]
 800abcc:	2e00      	cmp	r6, #0
 800abce:	da03      	bge.n	800abd8 <_printf_i+0xc8>
 800abd0:	232d      	movs	r3, #45	; 0x2d
 800abd2:	4276      	negs	r6, r6
 800abd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd8:	485e      	ldr	r0, [pc, #376]	; (800ad54 <_printf_i+0x244>)
 800abda:	230a      	movs	r3, #10
 800abdc:	e019      	b.n	800ac12 <_printf_i+0x102>
 800abde:	680e      	ldr	r6, [r1, #0]
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abe6:	bf18      	it	ne
 800abe8:	b236      	sxthne	r6, r6
 800abea:	e7ef      	b.n	800abcc <_printf_i+0xbc>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	6820      	ldr	r0, [r4, #0]
 800abf0:	1d19      	adds	r1, r3, #4
 800abf2:	6029      	str	r1, [r5, #0]
 800abf4:	0601      	lsls	r1, r0, #24
 800abf6:	d501      	bpl.n	800abfc <_printf_i+0xec>
 800abf8:	681e      	ldr	r6, [r3, #0]
 800abfa:	e002      	b.n	800ac02 <_printf_i+0xf2>
 800abfc:	0646      	lsls	r6, r0, #25
 800abfe:	d5fb      	bpl.n	800abf8 <_printf_i+0xe8>
 800ac00:	881e      	ldrh	r6, [r3, #0]
 800ac02:	4854      	ldr	r0, [pc, #336]	; (800ad54 <_printf_i+0x244>)
 800ac04:	2f6f      	cmp	r7, #111	; 0x6f
 800ac06:	bf0c      	ite	eq
 800ac08:	2308      	moveq	r3, #8
 800ac0a:	230a      	movne	r3, #10
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac12:	6865      	ldr	r5, [r4, #4]
 800ac14:	60a5      	str	r5, [r4, #8]
 800ac16:	2d00      	cmp	r5, #0
 800ac18:	bfa2      	ittt	ge
 800ac1a:	6821      	ldrge	r1, [r4, #0]
 800ac1c:	f021 0104 	bicge.w	r1, r1, #4
 800ac20:	6021      	strge	r1, [r4, #0]
 800ac22:	b90e      	cbnz	r6, 800ac28 <_printf_i+0x118>
 800ac24:	2d00      	cmp	r5, #0
 800ac26:	d04d      	beq.n	800acc4 <_printf_i+0x1b4>
 800ac28:	4615      	mov	r5, r2
 800ac2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ac32:	5dc7      	ldrb	r7, [r0, r7]
 800ac34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac38:	4637      	mov	r7, r6
 800ac3a:	42bb      	cmp	r3, r7
 800ac3c:	460e      	mov	r6, r1
 800ac3e:	d9f4      	bls.n	800ac2a <_printf_i+0x11a>
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d10b      	bne.n	800ac5c <_printf_i+0x14c>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	07de      	lsls	r6, r3, #31
 800ac48:	d508      	bpl.n	800ac5c <_printf_i+0x14c>
 800ac4a:	6923      	ldr	r3, [r4, #16]
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	4299      	cmp	r1, r3
 800ac50:	bfde      	ittt	le
 800ac52:	2330      	movle	r3, #48	; 0x30
 800ac54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac5c:	1b52      	subs	r2, r2, r5
 800ac5e:	6122      	str	r2, [r4, #16]
 800ac60:	f8cd a000 	str.w	sl, [sp]
 800ac64:	464b      	mov	r3, r9
 800ac66:	aa03      	add	r2, sp, #12
 800ac68:	4621      	mov	r1, r4
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	f7ff fee2 	bl	800aa34 <_printf_common>
 800ac70:	3001      	adds	r0, #1
 800ac72:	d14c      	bne.n	800ad0e <_printf_i+0x1fe>
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295
 800ac78:	b004      	add	sp, #16
 800ac7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7e:	4835      	ldr	r0, [pc, #212]	; (800ad54 <_printf_i+0x244>)
 800ac80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac84:	6829      	ldr	r1, [r5, #0]
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac8c:	6029      	str	r1, [r5, #0]
 800ac8e:	061d      	lsls	r5, r3, #24
 800ac90:	d514      	bpl.n	800acbc <_printf_i+0x1ac>
 800ac92:	07df      	lsls	r7, r3, #31
 800ac94:	bf44      	itt	mi
 800ac96:	f043 0320 	orrmi.w	r3, r3, #32
 800ac9a:	6023      	strmi	r3, [r4, #0]
 800ac9c:	b91e      	cbnz	r6, 800aca6 <_printf_i+0x196>
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	f023 0320 	bic.w	r3, r3, #32
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	2310      	movs	r3, #16
 800aca8:	e7b0      	b.n	800ac0c <_printf_i+0xfc>
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	f043 0320 	orr.w	r3, r3, #32
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	2378      	movs	r3, #120	; 0x78
 800acb4:	4828      	ldr	r0, [pc, #160]	; (800ad58 <_printf_i+0x248>)
 800acb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acba:	e7e3      	b.n	800ac84 <_printf_i+0x174>
 800acbc:	0659      	lsls	r1, r3, #25
 800acbe:	bf48      	it	mi
 800acc0:	b2b6      	uxthmi	r6, r6
 800acc2:	e7e6      	b.n	800ac92 <_printf_i+0x182>
 800acc4:	4615      	mov	r5, r2
 800acc6:	e7bb      	b.n	800ac40 <_printf_i+0x130>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	6826      	ldr	r6, [r4, #0]
 800accc:	6961      	ldr	r1, [r4, #20]
 800acce:	1d18      	adds	r0, r3, #4
 800acd0:	6028      	str	r0, [r5, #0]
 800acd2:	0635      	lsls	r5, r6, #24
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	d501      	bpl.n	800acdc <_printf_i+0x1cc>
 800acd8:	6019      	str	r1, [r3, #0]
 800acda:	e002      	b.n	800ace2 <_printf_i+0x1d2>
 800acdc:	0670      	lsls	r0, r6, #25
 800acde:	d5fb      	bpl.n	800acd8 <_printf_i+0x1c8>
 800ace0:	8019      	strh	r1, [r3, #0]
 800ace2:	2300      	movs	r3, #0
 800ace4:	6123      	str	r3, [r4, #16]
 800ace6:	4615      	mov	r5, r2
 800ace8:	e7ba      	b.n	800ac60 <_printf_i+0x150>
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	1d1a      	adds	r2, r3, #4
 800acee:	602a      	str	r2, [r5, #0]
 800acf0:	681d      	ldr	r5, [r3, #0]
 800acf2:	6862      	ldr	r2, [r4, #4]
 800acf4:	2100      	movs	r1, #0
 800acf6:	4628      	mov	r0, r5
 800acf8:	f7f5 fa92 	bl	8000220 <memchr>
 800acfc:	b108      	cbz	r0, 800ad02 <_printf_i+0x1f2>
 800acfe:	1b40      	subs	r0, r0, r5
 800ad00:	6060      	str	r0, [r4, #4]
 800ad02:	6863      	ldr	r3, [r4, #4]
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	2300      	movs	r3, #0
 800ad08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad0c:	e7a8      	b.n	800ac60 <_printf_i+0x150>
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	462a      	mov	r2, r5
 800ad12:	4649      	mov	r1, r9
 800ad14:	4640      	mov	r0, r8
 800ad16:	47d0      	blx	sl
 800ad18:	3001      	adds	r0, #1
 800ad1a:	d0ab      	beq.n	800ac74 <_printf_i+0x164>
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	079b      	lsls	r3, r3, #30
 800ad20:	d413      	bmi.n	800ad4a <_printf_i+0x23a>
 800ad22:	68e0      	ldr	r0, [r4, #12]
 800ad24:	9b03      	ldr	r3, [sp, #12]
 800ad26:	4298      	cmp	r0, r3
 800ad28:	bfb8      	it	lt
 800ad2a:	4618      	movlt	r0, r3
 800ad2c:	e7a4      	b.n	800ac78 <_printf_i+0x168>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	4632      	mov	r2, r6
 800ad32:	4649      	mov	r1, r9
 800ad34:	4640      	mov	r0, r8
 800ad36:	47d0      	blx	sl
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d09b      	beq.n	800ac74 <_printf_i+0x164>
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	68e3      	ldr	r3, [r4, #12]
 800ad40:	9903      	ldr	r1, [sp, #12]
 800ad42:	1a5b      	subs	r3, r3, r1
 800ad44:	42ab      	cmp	r3, r5
 800ad46:	dcf2      	bgt.n	800ad2e <_printf_i+0x21e>
 800ad48:	e7eb      	b.n	800ad22 <_printf_i+0x212>
 800ad4a:	2500      	movs	r5, #0
 800ad4c:	f104 0619 	add.w	r6, r4, #25
 800ad50:	e7f5      	b.n	800ad3e <_printf_i+0x22e>
 800ad52:	bf00      	nop
 800ad54:	0800b029 	.word	0x0800b029
 800ad58:	0800b03a 	.word	0x0800b03a

0800ad5c <memmove>:
 800ad5c:	4288      	cmp	r0, r1
 800ad5e:	b510      	push	{r4, lr}
 800ad60:	eb01 0402 	add.w	r4, r1, r2
 800ad64:	d902      	bls.n	800ad6c <memmove+0x10>
 800ad66:	4284      	cmp	r4, r0
 800ad68:	4623      	mov	r3, r4
 800ad6a:	d807      	bhi.n	800ad7c <memmove+0x20>
 800ad6c:	1e43      	subs	r3, r0, #1
 800ad6e:	42a1      	cmp	r1, r4
 800ad70:	d008      	beq.n	800ad84 <memmove+0x28>
 800ad72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad7a:	e7f8      	b.n	800ad6e <memmove+0x12>
 800ad7c:	4402      	add	r2, r0
 800ad7e:	4601      	mov	r1, r0
 800ad80:	428a      	cmp	r2, r1
 800ad82:	d100      	bne.n	800ad86 <memmove+0x2a>
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad8e:	e7f7      	b.n	800ad80 <memmove+0x24>

0800ad90 <_realloc_r>:
 800ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad94:	4680      	mov	r8, r0
 800ad96:	4614      	mov	r4, r2
 800ad98:	460e      	mov	r6, r1
 800ad9a:	b921      	cbnz	r1, 800ada6 <_realloc_r+0x16>
 800ad9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ada0:	4611      	mov	r1, r2
 800ada2:	f7ff bb85 	b.w	800a4b0 <_malloc_r>
 800ada6:	b92a      	cbnz	r2, 800adb4 <_realloc_r+0x24>
 800ada8:	f7ff fc9c 	bl	800a6e4 <_free_r>
 800adac:	4625      	mov	r5, r4
 800adae:	4628      	mov	r0, r5
 800adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb4:	f000 f81b 	bl	800adee <_malloc_usable_size_r>
 800adb8:	4284      	cmp	r4, r0
 800adba:	4607      	mov	r7, r0
 800adbc:	d802      	bhi.n	800adc4 <_realloc_r+0x34>
 800adbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adc2:	d812      	bhi.n	800adea <_realloc_r+0x5a>
 800adc4:	4621      	mov	r1, r4
 800adc6:	4640      	mov	r0, r8
 800adc8:	f7ff fb72 	bl	800a4b0 <_malloc_r>
 800adcc:	4605      	mov	r5, r0
 800adce:	2800      	cmp	r0, #0
 800add0:	d0ed      	beq.n	800adae <_realloc_r+0x1e>
 800add2:	42bc      	cmp	r4, r7
 800add4:	4622      	mov	r2, r4
 800add6:	4631      	mov	r1, r6
 800add8:	bf28      	it	cs
 800adda:	463a      	movcs	r2, r7
 800addc:	f7ff fb32 	bl	800a444 <memcpy>
 800ade0:	4631      	mov	r1, r6
 800ade2:	4640      	mov	r0, r8
 800ade4:	f7ff fc7e 	bl	800a6e4 <_free_r>
 800ade8:	e7e1      	b.n	800adae <_realloc_r+0x1e>
 800adea:	4635      	mov	r5, r6
 800adec:	e7df      	b.n	800adae <_realloc_r+0x1e>

0800adee <_malloc_usable_size_r>:
 800adee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf2:	1f18      	subs	r0, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bfbc      	itt	lt
 800adf8:	580b      	ldrlt	r3, [r1, r0]
 800adfa:	18c0      	addlt	r0, r0, r3
 800adfc:	4770      	bx	lr
	...

0800ae00 <_init>:
 800ae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae02:	bf00      	nop
 800ae04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae06:	bc08      	pop	{r3}
 800ae08:	469e      	mov	lr, r3
 800ae0a:	4770      	bx	lr

0800ae0c <_fini>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	bf00      	nop
 800ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae12:	bc08      	pop	{r3}
 800ae14:	469e      	mov	lr, r3
 800ae16:	4770      	bx	lr
